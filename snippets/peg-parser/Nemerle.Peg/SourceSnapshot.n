using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  public class SourceSnapshot
  {
    [Accessor] text : string;
    [Accessor] fileIndex : int;
    [Accessor] fileName : string;

    line_indexes : array[int];

    public this(text : string, fileIndex : int = 0, fileName : string = "")
    {
      this.text = text;
      this.fileName = fileName;
      this.fileIndex = fileIndex;

      this.line_indexes = {
        def line_indexes_buffer = SCG.List();
        line_indexes_buffer.Add(0);
        mutable pos;
        while(pos < text.Length) {
          match(text[pos]) {
            | '\r' => 
              ++pos;
              when(pos < text.Length && text[pos] == '\n')
                ++pos;
              line_indexes_buffer.Add(pos);
            | '\n'
            | '\u2028'    /*  line separator       */
            | '\u2029' => /*  paragraph separator  */
              ++pos;
              line_indexes_buffer.Add(pos);
            | _ =>
              ++pos;
          }
        }
        line_indexes_buffer.ToArray()
      }
    }

    [Memoize]
    internal PositionToLineColumn(pos : int) : int * int
    {
      match(Array.BinarySearch(line_indexes, pos)) {
        | index when index < 0 =>
          def index = ~index;
          (index, pos - line_indexes[index - 1] + 1)
        | index =>
          (index + 1, pos - line_indexes[index] + 1)
      }
    }

    public override ToString() : string
    {
      $<#File index: $fileIndex, File name: $fileName#>
    }
  }
}