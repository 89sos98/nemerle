#
# Copyright (c) 2003 The University of Wroclaw.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    3. The name of the University may not be used to endorse or promote
#       products derived from this software without specific prior
#       written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

program:
	{ top_decl }

top_decl:
	"open" qid ";"
		Add qid to namespace search path.
	"namespace" ID "=" qid ";"
		Define short name (an alias) for namespace.
	"namespace" qid "{" { top_decl } "}"
		Declare symbols in specified namespace.
	type_decl
		Declare toplevel type.

type_header:
	ID [ typarms ] [ "extends" ty ] [ "implements" ty { "," ty } ]
	
typarms:
	"(" TYVAR { "," TYVAR } ")" [ where_constraints ]

fun_typarms:
	TYVAR { "," TYVAR } [ where_constraints ]
		Used in function parametrized over types (just different syntax then in types).
	
where_constraints:
	"where" TYVAR ":>" ty { "," TYVAR ":>" ty }
	
type_decl:
	attrs "type" type_header "=" ty ";"
		An alias for existing type.
	attrs "type" type_header "=" "extern" STRING_LITERAL ";"
		External type import. To be removed soon.
	attrs "interface" type_header "{" { interface_member } "}"
	attrs "class" type_header "{" { type_member } "}"
	attrs "module" type_header "{" { type_member } "}"
		Class with all members implicitly static.
	attrs "variant" type_header "{" { "|" variant_option } "}"
	
id_or_dummy:
	ID
	"_"

qid:
	ID { "." ID }

interface_member:
	[ "new" ] fun_def_head ";"
        
variant_option:
	ID [ "{" { field_def } "}" ]
	
attrs:
	{ attr }

attr:
	"new"
	"public"
	"protected"
	"internal"
	"private"
	"abstract"
	"sealed"
	"static"

field_def:
	attrs [ "mutable" ] ID ":" ty ";"

type_member:
	attrs ID ":" ty [ "=" "extern" STRING_LITERAL ] ";"
	attrs fun_def
	type_decl
	
fun_def_head:
	[ fun_typarms ] ID "(" fun_parms ")" ":" ty [ "implements" qid { "," qid } ]
	[ fun_typarms ] "this" "(" fun_parms ")"

fun_body:
	"=" "extern" STRING_LITERAL ";"
	block

fun_def:
	fun_def_head fun_body
	
ref_or_out:
	"ref"
	"out"
        
fun_parm:
	id_or_dummy ":" ty

fun_parms:
	[ fun_parms { "," fun_parm } ]

prim_ty:
	qid [ "(" ty { "," ty } ")" ]
	TYVAR
	"(" ty ")"
		Grouping.
	"void"
		Type with exactly one inhibiting value (maybe it should be called unit then).
	"ref" prim_ty
	"out" prim_ty

ty:
	prim_ty { "*" prim_ty }
		Tuple type.
	prim_ty { "->" prim_ty }
		Type of functions.

prim_expr:
	qid
		Value reference.
	"this"
		Reference parent type instance in method.
	"value"
		Used in properties and ensure block.
	"true"
	"false"
	"(" expr ")"
		Allow grouping.
	"null"
		Polymorphic constant.
	"(" ")"
		The only value of type void.
	STRING_LITERAL
	NUMBER_LITERAL
	CHARACTER_LITERAL
	"(" expr ":>" ty ")"
		Type cast.
	"(" expr ":" ty ")"
		Type enforcement.
	prim_expr "." ID
		Member reference.
	"(" expr {+ "," expr }+ ")"
		Tuple constructor.
	expr "[" expr { "," expr } "]"

expr_in_seq:
	expr ";"
	decl_expr
	
sequence:
	expr_in_seq { ";" expr_in_seq } [ ";" ]
		All expression but the last one ought to have void type.

block:
	"{" expr_list "}"

decl_expr:
	"def" id_or_dummy "=" expr ";"
		Define new value. It only make sense to use "def" (or "mutable" for that
		matter) in sequence.
	"def" tuple_pattern "=" expr ";"
		Special form of pattern matching.
	"def" local_fun_def { "and" local_fun_def }
		Define several, possibly mutually recursive, functions.
	"require" block
	"ensure" block
	"mutable" ID "<-" expr ";"
		Define new mutable value.

expr:
	prim_expr
	prim_expr "(" [ parameter { "," parameter } ] ")"
		Function call.
	prim_expr "<-" expr
		Assignment to mutable value (local mutable value, mutable
		type member, or array member).
	"if" "(" expr ")" expr "else" expr
	"match" "(" expr ")" "{" [ "|" ] match_case { "|" match_case } "}"
	"raise" expr
		Raise exception.
	"try" expr "with" ID ":" ty "=>" expr
		Try compute first expression. If specified exception is raised -- catch it.
		Exception value is then bound to specified ID.
	"try" expr "finally" expr
		Try compute first expression. No matter how control leaves it, execute second
		expression.
	expr OPERATOR expr
		Operators are defined in standard library.
	OPERATOR expr
	expr "::" expr
		Short syntax for Cons.
	"[" [ { expr ";" } expr [ ";" ] ] "]"
		Short syntax for few Cons.
	block
	[ fun_typarms ] "fun" "(" fun_parms ")" ":" ty local_fun_body
		Syntactic sugar for function definition.
	"array" "[" [ { expr ";" } expr [ ";" ] ] "]"
	expr "&&" expr
	expr "||" expr

local_fun_def:
	fun_def_head block
	
parameter:
	[ "ref" ] expr
	[ "ref" ] ID "=" expr

pattern:
	ID
		Lowercase simple ID is pattern variable.
	qid [ pattern ]
		Uppercase, possibly qualified, IDs are expected to be
		variant constructors.
	"_"
		Match-all pattern.
	"{" ID "=" pattern { ";" ID "=" pattern } [ ";" ] "}"
		Decompose record.
	tuple_pattern
		Decompose tuple.
	"(" pattern ")"
		A 1-tuple pattern (singleton). It is not grouping.
	pattern "::" pattern
		List pattern (Cons).
	"[" [ { pattern ";" } pattern [ ";" ] ] "]"
		List pattern (for constant-length lists).
	STRING_LITERAL
	NUMBER_LITERAL
	CHARACTER_LITERAL
	"true"
	"false"

tuple_pattern:
	"(" pattern {+ "," pattern }+ ")"

match_case:
	pattern "=>" sequence

# vim: ai ft=conf ts=4
