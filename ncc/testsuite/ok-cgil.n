// NO-TEST

public variant list ('a) 
{
  | Cons { hd : 'a; tl : list ('a); }
  | Nil {}
}

  
namespace Nemerle.Collections 
{
  public module List
  {
    public 'a is_empty (l : list ('a)) : bool {
      match (l) {
        | Nil => true
        | _ => false
      }
    }
    
    public 'a length (x : list ('a)) : int {
      def loop (acc : System.Object, x : list ('a)) : int {
        match (x) {
          | _ :: xs => loop (((acc :> System.Int32) + 1 :> System.Object), xs)
          | _ => (acc :> System.Int32)
        }
      };
      loop ((0 :> System.Object), x)
    }
    
    
    public 'a head (l : list ('a)) : 'a {
      match (l) {
        | x :: _ => x
        | [] => raise Invalid_argument ("List.head")
      }
    }
    
    public 'a hd (l : list ('a)) : 'a {
      head (l)
    }
    
    public 'a tail (l : list ('a)) : list ('a) {
      match (l) {
        | _ :: tl => tl
        | [] => raise Invalid_argument ("List.tail")
      }
    }
    
    public 'a tl (l : list ('a)) : list ('a) {
      tail (l)
    }    
  }
}

(*
public class ImplementsTest implements Nemerle.Func1
{
  public this () { }

  public apply (parm1 : object) : object
  {
    System.Console.WriteLine ("Hello world, my name is not Jan B.!");
    null
  }
}
*)

public class CGILTest
{
  public this () { }
  
	public method_a (index : int) : int
	{
		mutable x <- 650;
		def y = false;
		def z = "Alamakota";
		
		this.method_b (index)
  }
  
  public method_b (index : int) : int
  {
		mutable x <- 650;

    x <- 750;
    
    x
  }

  public method_c (index : int) : int
  {
		def x = 255;
		def y = false;

    def z =
      if (true)
  		  x * 2
      else
        x * 3;
    
    def text = "Ala ma kota!";

    def sb = System.Text.StringBuilder (text, x);
  
    def _ = sb.Append (' ');
    def _ = sb.Append ("I psa!");
  
    def text = sb.ToString ();
    
    System.Console.WriteLine (text);
    
    z
	}

(*
  public method_d () : void
  {
    def x = [1; 2; 3];
    
    match (x) {
      | [] => System.Console.WriteLine ("Ojoj 1");
      | [_] => System.Console.WriteLine ("Ojoj 2");
      | _ => System.Console.WriteLine ("Ojoj 3");
    }
  }
*)

  public method_e (x : int) : void
  {
    match (x) {
      | 0 => System.Console.Write ("zero, ")
      | 1 => System.Console.Write ("jeden, ")
      | 2 => System.Console.Write ("dwa, ")
      | 3 => System.Console.Write ("Trzy, ")
      | _ => System.Console.WriteLine ("START!")
    }
  }

  public method_f () : void
  {
    def x = ((10 :> System.Object), (20 :> System.Object));
    def y = ("ala", "ma", (2 :> System.Object), "koty");

    def (a, b) = x;

    System.Console.WriteLine ("Powinno byc 10 20: {0} {1}",
      (a :> System.Object), (b :> System.Object));
    
    ()
  }

  public method_g () : void {
    def loop (x : System.Object, y : System.Object) : void {
      ()
    };
    loop (null, null)
  }

	public static Main () : void
	{
    def x = CGILTest ();

    def y = x.method_c (10);

    when (y != 5) { def _ = x.method_b (7); () };

    System.Console.WriteLine ("{0}", (y :> System.Object));

    x.method_e (3);
    x.method_e (2);
    x.method_e (1);
    x.method_e (0);
    x.method_e (42);
    
    def oa = None ();

    def ob = Some ((10 :> System.Object));
    def oc = Some ("Ala ma psa!");

    
    match (oc) {
      | None => System.Console.WriteLine ("Ojoj!");
      | Some (x) => System.Console.WriteLine ("Nie ma strachu: " + x);
    };
    
    when (Option.is_some (oa)) { System.Console.WriteLine ("Ojoj!"); };
    when (Option.is_none (ob)) { System.Console.WriteLine ("Ojoj!"); };
    when (Option.is_some (ob)) { System.Console.WriteLine ("To jest 10: {0}", ((Option.unsome (ob)) :> System.Object)); };

(*
    def it = ImplementsTest ();
    def _ = it.apply (it);
*)

    def map_test (x : System.Object) : void {
      System.Console.WriteLine ("To jest 10 po raz drugi (Option.map): {0}", x);
    };

    def _ = Option.map (map_test, ob);

    x.method_f ();

    def l0 = [(1 :> System.Object); (2 :> System.Object); (3 :> System.Object); (4 :> System.Object);];
    
    System.Console.WriteLine ("Powinno byæ 1 i 4: {0} i {1}",
      Nemerle.Collections.List.head (l0), (Nemerle.Collections.List.length (l0) :> System.Object));
    
    ()
	}
}
