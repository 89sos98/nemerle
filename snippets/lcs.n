/*
 * Longest Common Subsequence
 */

using System;

class IntArray2D 
{
  private mutable _m : Array;

  public this (w : int, h : int) 
  {
    _m <- Array.CreateInstance (typeof (System.Int32), w + 1, h + 1);
  }
  
  public Get (x : int, y : int) : int 
  {  
    (_m.GetValue (x, y) :> int)
  }
  
  public Set (x : int, y : int, value : int) : void 
  {  
    _m.SetValue (value, x, y)
  }
}


class LCS
{
  private static Max (x : int, y : int) : int 
  {  
    if (x < y) y else x;
  }
  
  private static Max (x : int, y : int, z : int) : int 
  {  
    Max (Max (x, y), z)
  }
  
  private mutable _M : IntArray2D;
  private mutable _l : array (char);
  private mutable _r : array (char);
  
  
  private Step (i : int, j : int) : int 
  {
    if (i == 0 || j == 0) 
    {    
      _M.Set (i, j, 0);
      0
    }
    else { 
      def value =
        if (_l [i - 1] != _r [j - 1]) 
          Max (Step (i, j - 1), Step (i - 1, j))
        else
          Max (Step (i - 1, j - 1) + 1, Step (i - 1, j), Step (i, j - 1));
        
      _M.Set (i, j, value);
      value
    }
  }
  
  
  public this (l : string, r : string) 
  {  
    Console.WriteLine ("Calculating LCS of {0} and {1}...", l, r);
    
    _M <- IntArray2D (l.Length, r.Length);
    _l <- l.ToCharArray ();
    _r <- r.ToCharArray ();
    
    print_endline (string_of_int (this.Step (l.Length, r.Length)));
  }
  
  
  public static Main () : void 
  {  
    def _ = LCS ("alamakotazz", "komarezzk");
    def _ = LCS ("axbyczd", "exfygzh");
    
    ()
  }
}

/*
BEGIN-OUTPUT
Calculating LCS of alamakotazz and komarezzk...
5
Calculating LCS of axbyczd and exfygzh...
3
END-OUTPUT
*/
