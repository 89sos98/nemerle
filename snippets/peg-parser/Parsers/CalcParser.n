using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using LRPEGCC;

namespace Parsers
{
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {  
    any                    = ['\u0000'..'\uFFFF'];
    digit                  = ['0'..'9']+;
    spaces                 = ' '*;
    
    num             : int = digit + spaces;
    unaryMinus      : int = '-' spaces simplExpr;
    parenthesesExpr : int = '(' spaces sumOrSub ')' spaces;
    simplExpr       : int = num / parenthesesExpr / unaryMinus;
    mulOrDiv        : int = simplExpr (('*' / '/') spaces simplExpr)*;
    sumOrSub        : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    start           : int = spaces sumOrSub !any;
  })]
  public class CalcParser : ParserBase[int]
  {  
    public this(text : string)
    {
        base(text);
    }
    
    protected override DoGenerateResult(ruleName : string, tokens : list[Token[int]]) : int
    {
    // TODO: autogenerate this block (probably)
    | ("start", [_, Token.NonTerminalToken as se])         
    | ("parenthesesExpr", [_, _, Token.NonTerminalToken as se, _, _])   
    | ("simplExpr", [Token.NonTerminalToken as se])  => 
          se.ComputedValue
    // TODO: end todo
    
    | ("num", [Token.TerminalToken as digit, _])        =>
         int.Parse(digit.Data)  
         
    | ("unaryMinus", [_, _, Token.NonTerminalToken as se])      =>
         se.ComputedValue * -1
                  
    | ("mulOrDiv", _)            
    | ("sumOrSub", _)        =>     
      def doOp(x : int, y : int, op : string) : int
      {
        match(op)
        {
          | ("*") => x * y
          | ("/") => x / y
          | ("+") => x + y
          | ("-") => x - y
        }
      }
           
      mutable r = (tokens.Nth(0) :> Token[int].NonTerminalToken).ComputedValue;
      
      for(mutable i = 1 ; i < tokens.Length; i += 3)
        r = doOp(r, (tokens.Nth(i + 2) :> Token[int].NonTerminalToken).ComputedValue , tokens.Nth(i).Data);
    
      r                  
         
    |  _                        =>
         throw InvalidOperationException("Unknown rule");
    }
  }
}
