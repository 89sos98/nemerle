using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class NemerleCompilationUnit : DefaultCompilationUnit {

        public this(projectContent : IProjectContent, source : Source) {
            base(projectContent);
            this.source = source;
            this.FileName = source.Item.FileName;
            when(null != source.CompileUnit)
                Import(source.CompileUnit);
        }

        [Accessor] source : Source;

        private Import(cu : CompileUnit) : void {
            def loc_to_dom(loc) {
                DomRegion(loc.Line, loc.Column, loc.EndLine, loc.EndColumn)
            }
            def import_members(c, members) {
                match(members) {
                    | [] => ();
                    | member :: members =>
                        match(member) {
                            | ClassMember.TypeDeclaration(td) =>
                                import_decl(td, c.InnerClasses)
                            | ClassMember.Field =>
                                def m = DefaultField(c, member.Name);
                                m.Region = loc_to_dom(member.Location);
                                c.Fields.Add(m);
                            | ClassMember.Function =>
                                def m = DefaultMethod(c, member.Name);
                                m.Region = loc_to_dom(member.Location);
                                c.Methods.Add(m);
                            | ClassMember.Property =>
                                def m = DefaultProperty(c, member.Name);
                                m.Region = loc_to_dom(member.Location);
                                c.Properties.Add(m);
                            | ClassMember.Event =>
                                def m = DefaultEvent(c, member.Name);
                                m.Region = loc_to_dom(member.Location);
                                c.Events.Add(m);
                            | ClassMember.EnumOption =>
                                def m = DefaultField(c, member.Name);
                                m.Region = loc_to_dom(member.Location);
                                c.Fields.Add(m);
                        }
                        import_members(c, members);
                }
            }
            and import_decl(decl, collection) {
                def class_type = match(decl) {
                    | TopDeclaration.Alias          => ClassType.Class
                    | TopDeclaration.Class          => ClassType.Class
                    | TopDeclaration.Delegate       => ClassType.Delegate
                    | TopDeclaration.Enum           => ClassType.Enum
                    | TopDeclaration.Interface      => ClassType.Interface
                    | TopDeclaration.Macro          => ClassType.Class
                    | TopDeclaration.Variant        => ClassType.Enum
                    | TopDeclaration.VariantOption  => ClassType.Class
                }

                def c = DefaultClass(this, decl.FullName);
                c.Region = loc_to_dom(decl.HeaderLocation);
                c.ClassType = class_type;

                import_members(c, decl.GetMembers());

                collection.Add(c);
            }
            foreach(decl in cu.TopDeclarations) {
                import_decl(decl, Classes);
            }

            def import_ns(ns) {
                unless(null == ns) {
                    def scope = DefaultUsingScope();
                    scope.NamespaceName = NString.Concat(".", ns.Name);
                    UsingScope = scope;
                }
            }

            import_ns(cu.TopNamespace)
        }

    }

}