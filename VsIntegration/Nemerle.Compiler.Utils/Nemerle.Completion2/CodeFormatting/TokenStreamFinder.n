using System;
using System.Diagnostics;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Completion2.CodeFormatting;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  // This class encapsulates work with token stream. It supports 
  // insertion and removal of single tokens or token groups, and it 
  // also does transparent relocation of tokens affected by any operation.
  // And the last, but not least: it can build a diff between original stream and final one.
  // NOTE: honestly, not all features are implemented yet. :-)
  public class TokenStreamHandler
  {
    private class PositionHolder
    {
      mutable _tokens : List[Token] = null;
      mutable _currentIndex = 0;
      mutable isInitialized = false;
      
      //public this(){}
      
      // We're assuming that tokens are ordered as they appear in the source, i.e. no reversing and shuffling.
      public this(tokens : List[Token], currentIndex : int)
      {
        Initialize(tokens, currentIndex);
      }
      
      public Initialize(tokens : List[Token], currentIndex : int) : void
      {
        isInitialized = true;
        
        _tokens = tokens;
        _currentIndex = currentIndex;
      } 
      
      AlterPosition(advance : bool) : void
      {
        if(advance)
          _currentIndex++;
        else
          _currentIndex--;
      }
      
      GetCurrentToken() : Token
      {
        if(_currentIndex < 0 || _currentIndex >= _tokens.Count)
          null
        else
          _tokens[_currentIndex];
      } 
      
      public GetNextToken() : Token
      {
        def tok = GetCurrentToken();
        AlterPosition(true);
        tok
      }
      
      public GetPrevToken() : Token
      {
        def tok = GetCurrentToken();
        AlterPosition(false);
        tok
      }
      
    }
  
    mutable _originalStream : List[Token] = null;
    mutable _stream         : List[Token] = null;
    mutable _isInitialized  : bool        = false;
    
    public this() { }
    
    public this(tokens : array[Token])
    {
      Initialize(tokens);
    }
    
    public Initialize(tokens : array[Token]) : void
    {
      _isInitialized = true;
      _originalStream = List(tokens);
      _stream = List(tokens);
    }

    RelocateToken(tok : Token, line : int, col : int, lineDelta : int, colDelta : int) : void
    {
      match(tok)
      {
        | t when t.Location.Line == line && t.Location.Column > col with loc = t.Location =>
            t.Location = Location(loc.FileIndex,
                                    loc.Line + lineDelta, 
                                    loc.Column + colDelta,
                                    loc.EndLine,
                                    loc.EndColumn);
                                
        | t when t.Location.Line > line with loc = t.Location =>
            t.Location = Location(loc.FileIndex,
                                    loc.Line + lineDelta, 
                                    loc.Column,
                                    loc.EndLine,
                                    loc.EndColumn);
        | _ => ()
      }
    }
    
    Relocate(index : int, lineDelta : int, colDelta : int) : void
    {
      def loc = _stream[index].Location;
      for(mutable i = index; i < _stream.Count; i++)
      {
        RelocateToken(_stream[i], loc.Line, loc.Column, lineDelta, colDelta); 
      }
    }
    
    SetStartPosition(line : int, col : int) : int
    {
      mutable result = 0;
      
      // Here we rely on the fact that all tokens are in the right order.
      foreach(tok in _stream)
      {
        if(tok.Location.Contains(line, col) && tok.Location.EndColumn != col)
          Nemerle.Imperative.Return(result);
        else
          result++;
      }
      throw FormatterException($"Position ($line, $col) is outside of document.");
    }
    
    public InsertBefore(token : Token, insertion : Token) : void
    {
      def idx = _stream.FindIndex(token : object == _);
      Debug.WriteLine($"Insertion: found token $token at ($(token.Location.Line), $(token.Location.Column))");
      _stream.Insert(idx, insertion);
      def loc = insertion.Location;
      Relocate(idx, loc.EndLine - loc.Line, loc.EndColumn - loc.Column); 
    }
    
    // Removes tokens from startFrom token and up to (but not including) upTo token.
    public Remove(startFrom : Token, upTo : Token) : void
    {
      def startIndex = _stream.FindIndex(startFrom : object == _);
      def endIndex = _stream.FindIndex(upTo : object == _);
      assert(startIndex < endIndex);
      
      mutable removedLocation = Location.Default;
      for(mutable i = startIndex; i < endIndex; i++)
        removedLocation = _stream[i].Location.Combine(removedLocation);
      
      _stream.RemoveRange(startIndex, endIndex - startIndex);
      Relocate(startIndex,  
                 removedLocation.EndLine - removedLocation.Line,
                 removedLocation.EndColumn - removedLocation.Column); 
      
    }
    
    public FindAll(predicate : Token -> bool) : IEnumerable[Token]
    {
      _stream.Filter(predicate);
    }
    
    //public TryFindPrevIf(begin : TextPoint, topend : TextPoint,predicate : Token -> bool) : option[Token]
    //{
    //  def startIndex = SetStartPosition(begin.Line, begin.Column);
    //  def holder = PositionHolder(_stream, startIndex);          
      
    //  def loop(result)
    //  {            
    //  if (result==null || predicate(result)) result; else        
    //  if (result.Location.Begin > topend) 
    //   {       
    //   loop(holder.GetPrevToken());       
    //   } else null;      
    //  }
      
    //  def result=loop(holder.GetNextToken());

    //  if (result == null)
    //    option.None(); else option.Some(result)
    //}
    
    //public TryFindNextIf(begin : TextPoint,predicate : Token -> bool) : option[Token]
    //{
    //  def startIndex = SetStartPosition(begin.Line, begin.Column);
    //  def holder = PositionHolder(_stream, startIndex);          
      
    //  def loop()
    //  {            
    //  def result=holder.GetNextToken();
    //  if (result==null || predicate(result)) result; else
    //  loop();
    //  }
      
    //  def result=loop();

    //  if (result == null)
    //    option.None(); else option.Some(result)
    //}
    
    public FindNextIf(line : int, col : int, predicate : Token -> bool) : Token
    {
      def startIndex = SetStartPosition(line, col);
      def holder = PositionHolder(_stream, startIndex);
      
      mutable result = holder.GetNextToken();
      while(result != null && !predicate(result))
        result = holder.GetNextToken();
        
      when(result == null)
        throw FormatterException($"Token not found (next from ($line, $col), using predicate $predicate)");
      result 
    }
    
    public FindPrevIf(line : int, col : int, predicate : Token -> bool) : Token
    {
      def startIndex = SetStartPosition(line, col);
      def holder = PositionHolder(_stream, startIndex);
      
      mutable result = holder.GetNextToken();
      while(result != null && !predicate(result))
        result = holder.GetPrevToken();
        
      when(result == null)
        throw FormatterException($"Token not found (prev from ($line, $col), using predicate $predicate)");
      result 
    }
    
    public FindNextRange(line : int, col : int, predicate : Token -> bool) : array[Token]
    {
      def startIndex = SetStartPosition(line, col);
      def holder = PositionHolder(_stream, startIndex);
      
      def loop(lst)
      {
        def tok=holder.GetNextToken();           
        when (tok == null) throw FormatterException($"Token not found (next from ($line, $col), using predicate $predicate)");
        def res= tok :: lst;
        if (predicate(tok)) res; else loop(res);
      }
      def res=loop([]);
      res.Rev().ToArray();
      //mutable result = holder.GetNextToken();
      //while(result != null && !predicate(result))
       // result = holder.GetNextToken();
        
      //when(result == null)
        //throw FormatterException($"Token not found (next from ($line, $col), using predicate $predicate)");
      //result 
    }
    
    public FindPrevRange(_line : int, _col : int, _predicate : Token -> bool) : array[Token]
    {
      throw NotImplementedException("FindPrevRange");
    }
    
    public FindAt(line : int, col : int) : Token
    {
      def startIndex = SetStartPosition(line, col);
      _stream[startIndex];
    }
    
    public Diff() : List[FormatterResult]
    {
      throw NotImplementedException("Diff");
    }

    
  }
}
