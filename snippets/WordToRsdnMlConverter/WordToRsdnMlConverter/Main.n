using System;
using System.Collections.Generic;
using System.Console;
using System.IO.Path;
using System.Linq;
using System.Xml.Linq;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;
using Utilities;

module Program
{
  Error(paragraphIndex : int, msg : string) : void
  {
    _ = paragraphIndex; // будет использоваться для навигации к абзацу
    WriteLine(msg);
  }
  
  Main() : void
  {
    def path = @"y:\RSDN\2009\2009-3\TheNemerle-part2\WordSaveAsXml.xml";
    //def path = @"y:\RSDN\2009\2009-3\TheNemerle-part2\TheNemerleLanuage-prt-2-docx.xml";
    mutable currentTagName = "P";
    def wml = Utils.NsWordMl;
    def valName      = wml.GetName("val");
    def bName        = wml.GetName("b");
    def iName        = wml.GetName("i");
    def rStyleName   = wml.GetName("rStyle");
    def trName       = wml.GetName("tr");
    def tcName       = wml.GetName("tc");
    def pName        = wml.GetName("p");
    def tcPrName     = wml.GetName("tcPr");
    def gridSpanName = wml.GetName("gridSpan");
    def isPanel(style)
    {
      | "Note" | "Tip" | "Warning" => true
      | _ => false
    }
    def isList(style) { style == "OL" || style == "UL" }
    def isName(tag : XElement, name : string) : bool
    {
      Utils.NsWordMl == tag.Name.Namespace && tag.Name.LocalName == name
    }
    def pStyle(tags : IEnumerable[XElement]) : string
    {
      def pStyle = tags.First(e => e.Name.LocalName == "pPr").Elements().First(x => x.Name.LocalName == "pStyle");
      
      def val = pStyle.Attribute(valName);
      def newTagName =
        match (val.Value)
        {
          | "Paragraph" | "Normal" | "Обычный" => "P"
          | name                               => name
        };
        
      currentTagName = newTagName;
      newTagName
    }
    def makeText(e : XElement, t : XElement) : Tag
    {
      def rStyle = e.Element(rStyleName);
      def b      = e.Element(bName);
      def i      = e.Element(iName);
      def style1 = if (rStyle == null) "" else rStyle.Attribute(valName).Value;
      def style2 = if (style1 == "CodeNone") "" else style1; 
      Tag.Text(style2, b != null, i != null, t.Value)
    }
    def r(e : XElement) : Tag
    {
      def es = e.Elements().NToList();
      
      match (es)
      {
        | [br]      when isName(br, "br")                         => Tag.Text("BR", false, false, "")
        | [rPr, br] when (isName(rPr, "rPr") && isName(br, "br")) => Tag.Text("BR", false, false, "")
        | [rPr, t] when (isName(rPr, "rPr") && isName(t, "t"))    => makeText(rPr, t)
        | [t]      when isName(t, "t")                            => Tag.Text("", false, false, t.Value)
        | [pic]    when isName(pic, "pict")                       => Tag.Text("", false, false, "")
        | []                                                      => Tag.Text("", false, false, "")
        | xs                                                      => 
          foreach (x in xs)
            WriteLine("\nr:" + x.Name.LocalName + ": " + x.ToString());
            
          Tag.Text("", false, false, "")
      }
    }
    def p(e : XElement) : Tag
    {
      def tags       = e.Elements().OnlyWordMl();
      def pStyleName = pStyle(tags);
      def content    = List();
      
      foreach (se in tags.Where(x => x.Name.LocalName != "pPr"))
      {
        match (se.Name.LocalName)
        {
          | "r"  => content.Add(r(se));
          | name => WriteLine("\np:" + name + ": " + se.ToString());
        }
      }
      
           if (isList(pStyleName))  Tag.P(pStyleName, [Tag.P("LI", content.NToList())])
      else if (isPanel(pStyleName)) Tag.P(pStyleName, [Tag.P("P", content.NToList())])
      else                          Tag.P(pStyleName, content.NToList())
    }
    def readAndSetProp(tag : Tag, attrName : string, elem : XElement, propType : XName, propName : XName) : void
    {
      def propElem = elem.Element(propType);
      
      when (propElem != null)
      {
        def prop = propElem.Element(propName);
        
        when (prop != null)
          tag.Attrs[attrName] = prop.Attribute(valName).Value;
      }
    }
    def tbl(e : XElement) : Tag
    {
      //WriteLine("\n" + e.Name.LocalName + ": " + e.ToString());
      def trs = List();
      
      foreach (tr in e.Elements(trName))
      {
        def tcs = List();
        
        foreach (tc in tr.Elements(tcName))
        {
          def ps = List();
          
          foreach (p1 in tc.Elements(pName))
            ps.Add(p(p1));
            
          def tdTag = Tag.P("td", ps.NToList());
          readAndSetProp(tdTag, "colspan", tc, tcPrName, gridSpanName);
          //readAndSetProp(tdTag, "colspan", tc, tcPrName, gridSpanName);
          //def tcPr = tc.Element(tcPrName);
          //when (tcPr != null && tcPr.HasElement(gridSpanName))
          //  tdTag.Attrs["colspan"] = tcPr.Element(gridSpanName).Attribute(valName).Value;
          
          tcs.Add(tdTag);
        }
          
        trs.Add(Tag.P("tr", tcs.NToList()));
      }
      
      Tag.P("TABLE", trs.NToList())
    }
    def ps = List();
    def subSection(e : XElement) : void
    {
      foreach (se in e.Elements().OnlyWordMl())
        match (se.Name.LocalName)
        {
          | "p"          => ps.Add(p(se));
          | "tbl"        => ps.Add(tbl(se));
          | "sectPr"     => () // ignore it
          | name         => WriteLine("\n" + name + ": " + se.ToString());
        }
    }
    def nsWordMl   = Utils.NsWordMl;
    def ns_auxHint = XNamespace.Get("http://schemas.microsoft.com/office/word/2003/auxHint");
    def root       = XDocument.Load(path);
    def root       = root.Root.Element(nsWordMl.GetName("body"));
    def topSection = root.Element(ns_auxHint.GetName("sect")) ?? root;
       
    if (topSection.Element(ns_auxHint.GetName("sub-section")) != null)
      foreach (e in topSection.Elements())
        subSection(e);
    else
      subSection(topSection);
      
    def title() : string
    {
      def titles = ps.Where(_ is Tag.P("H1", _)).ToArray();
      
      match (titles.Length)
      {
        | 0 =>
          Error(0, "Первым абзацем должен идти заголовок статьи помеченный стилем 'H1'");
          "<<Не задан заголовок статьи>>"
        | 1 => 
          def title = titles[0];
          
          when (ps[0] : object != title)
            Error(ps.IndexOf(title), "Заголовок статьи (помеченный стилем 'H1') должен быть идти первым абзецем");
            
          (title.ToXml() :> XElement).Value
          
        | _ =>
          Error(0, "В статье должен быть только один заголовок (обазац помеченный стилем 'H1')");
          $<#..$(titles; " "; title => (title.ToXml() :> XElement).Value)#>
      }
    }
    def subtitle() : string
    {
      def titles = ps.Where(_ is Tag.P("H2", _)).ToArray();
      
      match (titles.Length)
      {
        | 0 => ""
        | 1 => 
          def title = titles[0];
          
          when (ps.Count < 2 || ps[1] : object != title)
            Error(ps.IndexOf(title), "Заголовок статьи (помеченный стилем 'H1') должен быть идти первым абзецем");
            
          $<#<SUBTITLE>$((title.ToXml() :> XElement).Value)</SUBTITLE>#>
        | _ =>
          Error(0, "В статье должен быть только один заголовок (обазац помеченный стилем 'H1')");
          $<#<SUBTITLE>..$(titles; " "; title => (title.ToXml() :> XElement).Value)</SUBTITLE>#>
      }
    }
    
    def ps = ps.Where(p => !(p is Tag.P("H1", _)) && !(p is Tag.P("H2", _))).NToList();

    def sb = Text.StringBuilder();
    _ = sb.Append($<#<?xml version="1.0" encoding="windows-1251" ?>
<ARTICLE>
<TITLE>$(title())</TITLE>
$(subtitle())
<AUTHOR company="The RSDN Group" >VladD2</AUTHOR>

<DATE>06.12.2002</DATE>
<VERSION>1.0</VERSION>
<CONTENTS/>
<PART>
#>);
      
    def transform1(cur, ps, res)
    {
      match (cur, ps)
      {
        | (Tag.P("Code", content1), Tag.P("Code", content2) :: tail) =>
          transform1(Tag.P("Code", content1 + (Tag.Text("", false, false, "\r\n") :: content2)), tail, res)
          
        | (Tag.P(s1, content1), Tag.P(s2, content2) :: tail) when (s1 == s2 && (isPanel(s1) || isList(s1))) =>
          transform1(Tag.P(s1, content1 + content2), tail, res)

        | (_, head :: tail) => res.Add(cur); transform1(head, tail, res)
        | (_, [])           => res.Add(cur); res
      }
    }

    def ps = if (ps.IsEmpty) ps else transform1(ps.Head, ps.Tail, List());
    //def transform2(p)
    //{
    //  | Tag.P(s, (_ :: _ :: _) as content) when isPanel(s) => Tag.P(s, content.Map(c => Tag.P("P", [c])))
    //  | _ => p
    //}
    //def ps = ps.Map(transform2);
      
    foreach (p in ps)
      _ = sb.Append(p);

    _ = sb.Append(<#</PART>
</ARTICLE>
#>);
      
    IO.File.WriteAllText(Combine(GetDirectoryName(path), "out.xml"), sb.ToString(),
      Text.Encoding.GetEncoding(1251));
      
    _ = ReadLine();
  }
}