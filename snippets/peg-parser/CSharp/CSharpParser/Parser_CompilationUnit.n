using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    //externAliasDirective    : ExternAlias         = "extern"S "alias"S identifier ";"s;
    externAliasDirective( _extern     : NToken, _ : NToken,
                          _alias      : NToken, _ : NToken,
                          identifier  : VToken[Identifier],
                          _comma      : NToken, _ : NToken) : ExternAlias
    {
      ExternAlias(GetLocation(_), identifier.Value)
    }

    //externAliasDirectives   : ExternAliasList     = externAliasDirective*;
    externAliasDirectives(externAliasDirective : SCG.List[VToken[ExternAlias]]) : ExternAliasList
    {
      externAliasDirective.Values()
    }

    //usingAliasDirective     : UsingDirective      = "using"S identifier "="s qualifiedIdentifier ";"s;
    usingAliasDirective(_using              : NToken, _ : NToken,
                        identifier          : VToken[Identifier],
                        _eq                 : NToken, _ : NToken,
                        namespaceOrTypeName : VToken[Expr],
                        _comma              : NToken, _ : NToken) : UsingDirective
    {
      UsingDirective.Alias(
        GetLocation(_),
        identifier.Value,
        namespaceOrTypeName.Value)
    }

    //usingNamespaceDirective : UsingDirective      = "using"S qualifiedIdentifier ";"s;
    usingNamespaceDirective(_using        : NToken, _ : NToken,
                            namespaceName : VToken[Expr],
                            _comma        : NToken, _ : NToken) : UsingDirective
    {
      UsingDirective.Namespace(
        GetLocation(_),
        namespaceName.Value)
    }

    //usingDirective          : UsingDirective      = usingAliasDirective
    //                                              / usingNamespaceDirective;
    usingDirective(opt : VToken[UsingDirective]) : UsingDirective
    {
      opt.Value
    }

    //usingDirectives         : UsingDirectiveList  = usingDirective*;
    usingDirectives(usingDirective : SCG.List[VToken[UsingDirective]]) : UsingDirectiveList
    {
      usingDirective.Values()
    }

    //namespaceBody               : NamespaceBody     = "{"s externAliasDirectives usingDirectives namespaceMemberDeclarations "}"s;
    namespaceBody(_lparen                     : NToken, _ : NToken,
                  externAliasDirectives       : VToken[ExternAliasList],
                  usingDirectives             : VToken[UsingDirectiveList],
                  namespaceMemberDeclarations : VToken[NamespaceNodeList],
                  _rparen                     : NToken, _ : NToken) : NamespaceBody
    {
      (externAliasDirectives.Value, usingDirectives.Value, namespaceMemberDeclarations.Value)
    }

    //namespaceDeclaration        : NamespaceNode     = "namespace"S qualifiedIdentifier namespaceBody (";"s)?;
    namespaceDeclaration( _namespace          : NToken, _ : NToken,
                          qualifiedIdentifier : VToken[Expr],
                          namespaceBody       : VToken[NamespaceBody],
                          _                   : option[NToken * NToken]) : NamespaceNode
    {
      def (externAliases, usingDirectives, members) = namespaceBody.Value;
      NamespaceNode.Namespace(
        GetLocation(_),
        qualifiedIdentifier.Value,
        externAliases,
        usingDirectives,
        members)
    }

    //namespaceTypeDeclaration    : NamespaceNode     = typeDeclaration;
    namespaceTypeDeclaration(typeDeclaration : VToken[TypeDeclaration]) : NamespaceNode
    {
      NamespaceNode.TypeDeclaration(
        GetLocation(_),
        typeDeclaration.Value)
    }

    //namespaceMemberDeclaration  : NamespaceNode     = namespaceDeclaration
    //                                                / namespaceTypeDeclaration;
    namespaceMemberDeclaration(opt : VToken[NamespaceNode]) : NamespaceNode
    {
      opt.Value
    }

    //namespaceMemberDeclarations : NamespaceNodeList = namespaceMemberDeclaration*;
    namespaceMemberDeclarations(members : SCG.List[VToken[NamespaceNode]]) : NamespaceNodeList
    {
      members.Values()
    }

    //compilationUnit : CompilationUnit = initS externAliasDirectives usingDirectives globalAttributes namespaceMemberDeclarations;
    compilationUnit(_                           : NToken,
                    externAliasDirectives       : VToken[ExternAliasList],
                    usingDirectives             : VToken[UsingDirectiveList],
                    globalAttributes            : VToken[list[CustomAttribute]],
                    namespaceMemberDeclarations : VToken[NamespaceNodeList]) : CompilationUnit
    {
      CompilationUnit(
        GetLocation(_),
        externAliasDirectives.Value,
        usingDirectives.Value,
        globalAttributes.Value,
        namespaceMemberDeclarations.Value)
    }
  }
}