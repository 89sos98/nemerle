using System;
using System.Collections.Generic;

using Nemerle.Collections;
using Nemerle.Text;

using Nemerle.Security.CharType;

namespace Nemerle
{
  public module Security
  {
    variant CharType {
      | Escape
      | AlphaUpper
      | AlphaLower
      | Number
      | SimpleSpecial
      | ExtendedSpecial
      | High
      
      public BitLength() : int
      {
        match(this) {
          | Escape          => 60
          | AlphaUpper      => 26
          | AlphaLower      => 26
          | Number          => 10
          | SimpleSpecial   => 16
          | ExtendedSpecial => 17
          | High            => 112
        }
      }
    }

    [Record]
    class layoutItem
    {
      public SymbolTypes     : list.[CharType];
      public PrevSymbol      : char;
      public EffectiveLength : double;
      public SymbolCounts    : Dictionary.[char,int];
      public Differences     : Dictionary.[int,int];
    }

    public GetPasswordStrength(password : string) : int
    {
      def layout = password.Fold(
        layoutItem([], ' ', 0.0, Dictionary.[char,int](), Dictionary.[int,int]()), 
        (symbol, acc) => {
          layoutItem(
            acc.SymbolTypes + [regexp match(symbol.ToString()) {
              | "[\x00-\x1f]" => Escape()
              | "[A-Z]"       => AlphaUpper()
              | "[a-z]"       => AlphaLower()
              | "[0-9]"       => Number()
              | "[\x20-\x2f]" => SimpleSpecial()
              | "[\x3a-\x40]"
              | "[\x5b-\x60]"
              | "[\x7b-\x7e]" => ExtendedSpecial()
              | _             => High()
            }],
            symbol,
            {
              def diffFactor = 
                if (acc.SymbolTypes != []) {
                  def diff = symbol :> int - acc.PrevSymbol;
                  if (acc.Differences.ContainsKey(diff)) {
                    acc.Differences[diff] = acc.Differences[diff] + 1;
                    1.0 / acc.Differences[diff] :> double
                  } else {
                    acc.Differences.Add(diff, 1);
                    1.0
                  }
                } else 1.0;
              if (acc.SymbolCounts.ContainsKey(symbol)) {
                acc.SymbolCounts[symbol] += 1;
                acc.EffectiveLength + diffFactor * (1.0 / acc.SymbolCounts[symbol] :> double)
              } else {
                acc.SymbolCounts.Add(symbol, 1);
                acc.EffectiveLength + diffFactor
              }
            },
            acc.SymbolCounts,
            acc.Differences
          )
        }
      );
      Math.Ceiling(
        Math.Log(
          layout.SymbolTypes.RemoveDuplicates().Fold(0, (t, acc) => t.BitLength() + acc)
        ) / Math.Log(2.0) * layout.EffectiveLength
      ) :> int
    }
  }
}