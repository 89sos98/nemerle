/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Collections {

  /**
   * A stack
   */
  public class Stack <'a>
    : ICollection <'a>
  {
    mutable stack : list <'a>;

    public this () {
      this.stack = []
    }

    public Push (x : 'a) : void {
      this.stack = x :: this.stack;
    }

    public Add (x : 'a) : void
    { Push (x) }

    public Pop () : 'a {
      match (this.stack) {
        | x :: xs =>
          this.stack = xs;
          x
        | _ => throw EmptyCollection ("Nemerle.Collections.Stack")
      }
    }

    public Top () : 'a {
      match (this.stack) {
        | x :: _ => x
        | _ => throw EmptyCollection ("Nemerle.Collections.Stack")
      }
    }

    public First () : option<'a> 
    { 
      match (this.stack) {
        | x :: _ => Some(x)
        | _ => None ()
      }
    }

    public Clear () : void {
      this.stack = []
    }

    public Copy () : Stack <'a> {
      def s = Stack ();
      s.stack = List.Copy(this.stack);
      s
    }

    public IsEmpty () : bool {
      match (this.stack) {
        | [] => true
        | _  => false
      }
    }

    public Length () : int {
      List.Length (this.stack)
    }
    public Size () : int
    { Length () }

    public Iter (f : ('a -> void)) : void {
      List.Iter (this.stack, f)
    }

    public Map<'b> (f : 'a -> 'b) : ICollection<'b> {
      def s = Stack ();
      s.stack = List.Map(this.stack, f);
      s
    }

    public Filter (f : 'a -> bool) : void {
      this.stack = List.Filter(this.stack, f)
    }
    
    public ForAll (f : 'a -> bool) : bool {
      List.ForAll (this.stack, f)
    }
    
    public Exists (f : 'a -> bool) : bool {
      List.Exists (this.stack, f)
    }

    public Member (x : 'a) : bool {
      List.Member (this.stack, x)
    }

    public Remove (x : 'a) : void {
      this.stack = List.Remove (this.stack, x)
    }

    public Fold<'b> (f : 'a * 'b -> 'b, x : 'b) : 'b {
      List.FoldLeft(this.stack, x, f)
    }

    public Partition (f : 'a -> bool) : (ICollection<'a> * ICollection<'a>) {
      def sat = Stack ();
      def nonsat = Stack ();
      def (s,n) = List.Partition(this.stack, f);
      sat.stack = s;
      nonsat.stack = n;
      (sat,nonsat)
    }

    public GetEnumerator() : IEnumerator<'a>
    {
      ListEnumerator(this.stack)
    }
  }
}
