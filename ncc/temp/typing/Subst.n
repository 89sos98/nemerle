/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;

namespace Nemerle.Compiler 
{
  /** Represent a substitution, from static type variables to types 
      (represented by plain type variables).  */
  public class Subst
  {
    mutable map : SystemMap [int, TyVar];

    public this ()
    {
      map = SystemMap ();
    }
    

    public Add (tv : StaticTyVar, ty : TyVar) : void
    {
      map = map.Add (tv.id, ty);
    }
    

    public AddList (tv : list [StaticTyVar], ty : list [TyVar]) : void
    {
      List.Iter2 (tv, ty, Add)
    }
    

    public Apply (t : MType) : MType
    {
      match (t) {
        | MType.Class (tc, args) =>
          MType.Class (tc, List.Map (args, Apply))
          
        | MType.Fun (f, t) =>
          MType.Fun (Apply (f), Apply (t))
          
        | MType.Tuple (lst) =>
          MType.Tuple (List.Map (lst, Apply))
          
        | MType.Void =>
          MType.Void ()
          
        | MType.Array (t, rank) =>
          MType.Array (Apply (t), rank)
          
        | MType.Intersection (lst) =>
          MType.Intersection (List.Map (lst, Apply))

        | MType.TyVar (tv) =>
          match (map.Find (tv.id)) {
            | Some (x) => x
            | None => t 
          }
       }
    }

    
    public static Fresh (solver : Solver, vars : list [StaticTyVar]) : Subst
    {
      def res = Subst ();
      foreach (v in vars) {
        res.Add (v, solver.FreshCopy (v))
      }
      res
    }
  }
}
