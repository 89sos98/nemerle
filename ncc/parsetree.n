(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Compiler;
open Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Parsetree {

class Decl_base extends Located
  {
    mutable name : string;
    mutable modifiers : list (Modifier);

    this () {}
  }

variant Top_decl extends Located
  {
    | TD_namespace { 
        name : string; 
        decls : list (Top_decl);
      }
    | TD_open {
        what : string;
      }
    | TD_namespace_alias {
        alias : string;
        expanded : string;
      }
    | TD_type {
        decl : Type_decl;
      }
  }

class Type_decl_base extends Decl_base
  {
    typarms : Typarms;
    t_extends : option (Type);
    t_implements : list (Type);
  }

class Constraint
  {
    tyvar : string;
    ty : Type;
  }

class Typarms
  {
    tyvars : list (string);
    constraints : list (Constraint);
  }
  
variant Type_decl extends Type_decl_base
  {
    | TD_class { mutable decls : list (Class_member); }
    | TD_alias { ty : Type; }
    | TD_external { extern_name : string; }
    | TD_interface { methods : list (Class_member); }   // only iface_member
    | TD_variant { decls : list (Type_decl); }       // only variant_option
    | TD_variant_option { mutable decls : list (Class_member); }
  }

variant Class_member extends Decl_base
  {
    | M_type { td : Type_decl; }
    | M_value { ty : Type; is_ref : bool; kind : Val_kind; }
    | M_field { ty : Type; is_ref : bool; }
    | M_function { 
        header : Fun_header;
        mutable kind : Fun_kind;
        mutable body : Fun_body;
      }
  }

variant Type
  {
    | T_app {
        tycon : string;
        args : list (Type);
      }
    | T_var { name : string; }
    | T_ref { t : Type; }
    | T_out { t : Type; }
    | T_fun { from : Type; to : Type; }
    | T_void
    | T_prod { args : list (Type); }
  }

class Fun_parm extends Located
  {
    name : string;
    ty : Type;
    this (loc : Location, name : string, ty : Type) 
      {
        this.loc <- loc;
        this.name <- name;
        this.ty <- ty;
      }
    this () {}
  }
  
class Fun_header extends Located
  {
    mutable name : string;
    ret_type : Type;
    parms : list (Fun_parm);
    typarms : Typarms;
    this () {}
    this (loc : Location, name : string, ret_type : Type, parms : list (Fun_parm)) 
      {
        this.typarms <- Typarms (Nil (), Nil ());
        this.loc <- loc;
        this.name <- name;
        this.ret_type <- ret_type;
        this.parms <- parms;
      }
  }

class Function_decl
  {
    header : Fun_header;
    body : Expr;
  }

class Named_pattern
  {
    name : string;
    pat : Pattern;
  }
  
variant Pattern extends Located
  {
    | P_underscore
    | P_variable { name : string; }
    | P_tuple { args : list (Pattern); }
    | P_record { args : list (Named_pattern); }
    | P_cons { name : string; arg : Pattern; }
    | P_list { args : list (Pattern); }
    | P_list_cons { hd : Pattern; tl : Pattern; }
  }
  
class Match_case
  {
    loc : Location;
    pattern : Pattern;
    body : Expr;
  }
  
variant Expr extends Located 
  { 
    | E_ref { name : string; }
    | E_member { obj : Expr; member : string; }
    | E_call { func : Expr; parms : list (Parm); }
    | E_assign { target : Expr; source : Expr; }
    | E_let { is_ref : bool; name : string; val : Expr; }
    | E_letpat { pattern : Pattern; val : Expr; }
    | E_letfun { funs : list (Function_decl); }
    | E_lambda { decl : Function_decl; }
    | E_match { expr : Expr; cases : list (Match_case); }
    | E_raise { exn : Expr; }
    | E_if { cond : Expr; e_then : Expr; e_else : Expr; }
    | E_try_with { body : Expr; exn : string; exn_ty : Type; handler : Expr; }
    | E_try_finally { body : Expr; handler : Expr; }
    | E_literal { val : Literal; }
    | E_this
    | E_type_conversion { expr : Expr; ty : Type; }  // (expr :> ty)
    | E_type_enforcement { expr : Expr; ty : Type; } // (expr : ty)
    | E_sequence { body : list (Expr); }
    | E_tuple { args : list (Expr); }
    | E_list { args : list (Expr); }
    | E_list_cons { hd : Expr; tl : Expr; }
  }

class Parm
  {
    is_ref : bool;
    expr : Expr;
    name : string;  // "" if no name given
    this (is_ref : bool, expr : Expr, name : string) {
      this.is_ref <- is_ref;
      this.expr <- expr;
      this.name <- name;
    }
    this (expr : Expr) {
      this.is_ref <- false;
      this.expr <- expr;
      this.name <- "";
    }
  }

 
} // Nemerle.Compiler

