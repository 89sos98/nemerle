using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace LRPEGCC
{
  internal partial module GrammarTyper
  {
    public AddArgumentCaptures(grammar : Grammar) : Grammar
    {
      def optimizeType(ty : RuleType)
      {
        | Option(Chars)
        | List(Chars) => RuleType.Chars()

        | List(None)
        | Option(None)
        | Tuple([])    => RuleType.None()

        | List(Void)
        | Option(Void)
        | Tuple(types) when types.ForAll(_ is RuleType.Void)
                       => RuleType.Void()

        | Tuple([ty])  => ty
        | _            => ty
      }
      def makeRes(rule, ty : RuleType)
      {
        def ty = optimizeType(ty);
        (Rule.Capture(rule.Location, CaptureKind.Argument(ty), rule), ty);
      }
      def addCaptures(rule : Rule) : Rule * RuleType
      {
        match (rule)
        {
          | Choice(rules)                =>
            assert(!rules.IsEmpty);
            def capturedResWithTypes = rules.Map(addCaptures(_));
            def (_, firstTy)         = capturedResWithTypes.Head;

            foreach ((rule, ty) in capturedResWithTypes)
              unless (ty.Equals(firstTy))
              {
                //assert2(false);
                Message.Error(rule.Location, $"The return type of rule '$(RemoveAllCaptures(rule))' is '$ty', but require type is '$firstTy'. All entries in one OrderedChoice must have same return type.");
              }

            def capturedRules = capturedResWithTypes.Map((rule, _) => rule);

            makeRes(Rule.Choice(rule.Location, capturedRules), firstTy);

          | Sequence([rule])             => addCaptures(rule) // remove redundant
          | Sequence(rules)              =>
            def rules = rules.Map(addCaptures(_));
            def types = rules.Map(t => t[1]).Filter(ty => !(ty is RuleType.None));
            def rules = rules.Map(t => t[0]);
            def loc = if (rules.IsEmpty) Location.Default else rules.EnclosingLocation.[_]();
            def ty = RuleType.Tuple(loc, types);
            makeRes(Rule.Sequence(rule.Location, rules), ty);

          | Call(name)                   =>
            def ty = match (grammar.GetRule(name).ResultType)
            {
              | Some(NType(ty)) when ty.Equals(ty.Manager.InternalType.Void)
                         => RuleType.Void();
              | Some(ty) => ty
              | _        => RuleType.Chars()
            };
            makeRes(Rule.Call(rule.Location, name), ty);

          | RepeatMinMax(0, 1, rule)     =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.RepeatMinMax(rule.Location, 0, 1, rule), RuleType.Option(ty));

          | RepeatMinMax(min, max, rule) =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.RepeatMinMax(rule.Location, min, max, rule), RuleType.List(ty));

          | RepeatMin(min, rule)         =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.RepeatMin(rule.Location, min, rule), RuleType.List(ty));

          | Chars(chars)                 => makeRes(Rule.Chars(rule.Location, chars), RuleType.Chars());
          | Fsm(fsm)                     => makeRes(Rule.Fsm(rule.Location, fsm), RuleType.Chars());
          | Scope(name, rule)            =>
            def (rule, ty) = addCaptures(rule);
            makeRes(Rule.Scope(rule.Location, name, rule), ty);

          | Not | And | Cut              => (rule, RuleType.None())
          | Capture                      => assert(false);
        }
      }

      def removeRedundant(rule : Rule)
      {
        | Capture(Argument(Chars), rule)      => Rule.Capture(rule.Location, CaptureKind.Argument(RuleType.Chars()), RemoveAllCaptures(rule));
        | Capture(Argument(Void), rule)       => Rule.Capture(rule.Location, CaptureKind.Argument(RuleType.Void()), RemoveAllCaptures(rule));
        | Capture(kind, rule)                 => Rule.Capture(rule.Location, kind, removeRedundant(rule));
        | Choice(rules)                       => Rule.Choice(rule.Location, rules.Map(removeRedundant))
        | Sequence(rules)                     => Rule.Sequence(rule.Location, rules.Map(removeRedundant))
        | RepeatMin(x, rule)                  => Rule.RepeatMin(rule.Location, x, removeRedundant(rule))
        | RepeatMinMax(min, max, rule)        => Rule.RepeatMinMax(rule.Location, min, max, removeRedundant(rule))
        | Not(rule)                           => Rule.Not(rule.Location, removeRedundant(rule))
        | And(rule)                           => Rule.And(rule.Location, removeRedundant(rule))
        | Scope(name, rule)                   => Rule.Scope(rule.Location, name, removeRedundant(rule))
        | Call | Chars | Fsm | Cut            => rule
      }

      grammar.TransformRules(
        fun (rd : RuleDefinition)
        {
          match (rd.ResultType, rd.Rule)
          {
            | (Some(retType), Some(rule)) =>
              def (rule, argType) = addCaptures(rule);
              def rule = removeRedundant(rule);
              Some(Rule.Capture(rule.Location, CaptureKind.Handler(rd.Name, argType, retType), rule))

            | _ => rd.Rule
          }
        })
    }
  }
}
