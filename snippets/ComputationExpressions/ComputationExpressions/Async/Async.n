using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public enum JobState
  {
    | Ready
    | SwitchContext
    | Wait
    | Canceled
  }

  [Record]
  public class AsyncJobBase
  {
    public ExecutionContext : ExecutionContext { get; set; }
    public State : JobState { get; set; }

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (State == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }
  }

  [Record]
  public class AsyncJob[A] : AsyncJobBase
  {
    public ExecAll(mutable async : Async[A]) : A
    {
      mutable res;
      while (async != null)
      {
        State = JobState.Ready;
        async = ExecWhileReady(async, ref res);
        match (State)
        {
          | Ready         => (); // Do nothing
          | SwitchContext => Console.Error.WriteLine("Context switched");
          | Wait          => throw NotImplementedException();
          | Canceled      => throw NotImplementedException();
        }
      }
      res;
    }
  }

  public abstract class Async[A]
  {
    /// <summary>
    /// Implementation detail. DO NOT USE!
    /// </summary>
    public abstract Exec(job : AsyncJobBase, res : ref A) : Async[A];

    public static SwitchTo(executionContext : ExecutionContext) : Async[FakeVoid]
    {
      AsyncSwitchExecutionContext(executionContext);
    }

    public static Yield() : Async[FakeVoid]
    {
      AsyncYield.Instance;
    }
  }

  [Record]
  internal class AsyncSwitchExecutionContext : Async[FakeVoid]
  {
    private executionContext : ExecutionContext;
    public override Exec(job : AsyncJobBase, _res : ref FakeVoid) : Async[FakeVoid]
    {
      when (!object.ReferenceEquals(job.ExecutionContext, executionContext))
      {
        job.ExecutionContext = executionContext;
        job.State = JobState.SwitchContext;
      }
      null;
    }
  }

  internal class AsyncYield : Async[FakeVoid]
  {
    public static Instance : AsyncYield = AsyncYield();
    public override Exec(job : AsyncJobBase, _res : ref FakeVoid) : Async[FakeVoid]
    {
      job.State = JobState.SwitchContext;
      null;
    }
  }
}
