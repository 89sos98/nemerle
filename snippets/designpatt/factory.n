using Nemerle.DesignPatterns;

class X['a] {
  public this (_x : int) { }    
}
class Y { 
  public this (_x : int) { }    
  public this (_x : string) { }    
}

class SX : X[int] {
  public this (x : int) { base (x) }    
}
class SY : Y {
  public this (x : int) { base (x) }    
  public this (x : string) { base (x) }    
}

class W ['a,'b] { }
class Z  { }

[AbstractFactory (X[int],Y, W [_, string], System.Exception)]
class Factory { }

[AbstractFactory (Override (SX, X[int]), Override (SY, Y), Z)]
class SubFactory : Factory { }

mutable f : Factory = Factory ();
def sf = SubFactory ();

System.Console.WriteLine (f.CreateX (1));
System.Console.WriteLine (f.CreateY (1));
System.Console.WriteLine (f.CreateY ("aa"));
System.Console.WriteLine (f.CreateW ());
System.Console.WriteLine (f.CreateException ("aa"));

f = sf;

System.Console.WriteLine (f.CreateX (1));
System.Console.WriteLine (f.CreateY (1));
System.Console.WriteLine (f.CreateY ("aa"));
System.Console.WriteLine (f.CreateW ());

System.Console.WriteLine (sf.CreateZ ());

/*
BEGIN-OUTPUT
X`1[System.Int32]
Y
Y
W`2[System.Object,System.String]
System.Exception: aa
SX
SY
SY
W`2[System.Object,System.String]
Z
END-OUTPUT
*/