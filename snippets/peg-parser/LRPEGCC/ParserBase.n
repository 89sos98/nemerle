using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace LRPEGCC
{
  /// <summary>
  /// 
  /// 'T - Type of parsing result (i.e. AST)
  /// </summary>
  public abstract class ParserBase['T]
  {
    protected _text : string;
    
    [Accessor(flags = Protected)]
    private _cache : System.Collections.Generic.Dictionary[int, int] = System.Collections.Generic.Dictionary();
    [Accessor(flags = Protected)]
    private _captures : System.Collections.Generic.List[LRPEGCC.Capture] = System.Collections.Generic.List();    
   
    private mutable _result : 'T;
    private mutable _parsedSymbolsCount : int;
    private mutable _isParsed : bool = false;
    
    public Result : 'T
    {
      get
      {
        unless(_isParsed)
        {
            _parsedSymbolsCount = DoParse();
            _isParsed = true;
        }   
        _result
      }
      protected set
      {
        _result = value;
      }
    }
    public ParsedSymbolsCount : int
    {
      get
      {
        unless(_isParsed)
        {
            _parsedSymbolsCount = DoParse();
            _isParsed = true;
        }   
            
        _parsedSymbolsCount
      }
    }
    
    public this(text : string)
    {
      _text = text;
    }
    
    protected GetChar(pos : int) : char
    {
      _text[pos];
    }
    
    protected CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }   
    
    protected abstract DoParse() : int;        
  }
}
