using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    ConvertStatement(stmt : CS.Statement, isLast : bool) : list[PT.PExpr]
    {
      def loc = stmt.NLocation();

      def foldStatements(stmts : list[CS.Statement]) : PT.PExpr {
        def mapStatements(_) {
          | []      => []
          | [x]     => ConvertStatement(x, isLast)
          | x :: xs => ConvertStatement(x, false) + mapStatements(xs)
        }
        match(mapStatements(stmts)) {
          | []  => PT.PExpr.Void(loc)
          | [x] => x
          | xs  => PT.PExpr.Sequence(loc, xs)
        }
      }

      match(stmt) {
        | Empty
        | Block([]) =>
          [Util.locate(loc, <[ _ = () ]>)]

        | Block(stmts) =>
          [foldStatements(stmts)]

        | Expression(expr) =>
          [ConvertExpr(expr)]

        | Label(label, stmt) =>
          Message.Warning(label.NLocation(), "label is ignored");
          ConvertStatement(stmt, isLast)

        | VariableDecl(varType, decls) =>
          decls.Map(fun(loc, id, decl) {
            def name  = ConvertExpr(id);
            def value = match(decl : CS.VariableInitializer) {
              | null => null

              | Expr(expr) when null == varType =>
                ConvertExpr(expr)

              | Expr(expr) =>
                PT.PExpr.TypeEnforcement(expr.NLocation(), ConvertExpr(expr), ConvertExpr(varType))

              | Property   with msg = "property initializer not allowed here"
              | StackAlloc with msg = "`stackalloc' expression is not supported"
              | Complex    with msg = "complex initializer not allowed here" =>
                def loc = decl.NLocation();
                Message.Error(loc, msg);
                PT.PExpr.Error(loc)
            }
            PT.PExpr.DefMutable(loc.NLocation(), name, value)
          })

        | ConstantDecl(constType, decls) =>
          decls.Map(fun(loc, id, val) {
            def name  = ConvertExpr(id);
            def value = PT.PExpr.TypeEnforcement(constType.NLocation(), ConvertExpr(val), ConvertExpr(constType));
            PT.PExpr.Define(loc.NLocation(), name, value)
          })

        | If(expr, trueStmt, null) =>
          [Util.locate(loc, <[ Nemerle.Core.whenmacro($(ConvertExpr(expr)), $(ConvertExpr(trueStmt, false))) ]>)]

        | If(expr, trueStmt, falseStmt) =>
          [Util.locate(loc, <[ Nemerle.Core.@if($(ConvertExpr(expr)), $(ConvertExpr(trueStmt, isLast)), $(ConvertExpr(falseStmt, isLast))) ]>)]

        | Switch(expr, entries) =>
          def expr = ConvertExpr(expr);
          def (matchCases, unfoldedEntries) = entries.FoldLeft(
            ([], []),
            (entry, (matchCases, unfoldedEntries)) =>
              match(entry.Body) {
                | [] => (matchCases, entry :: unfoldedEntries)
                | body =>
                  def patterns = unfoldedEntries.RevMap(fun(sc : CS.SwitchCaseEntry) {
                    | Case(id) => ConvertExpr(id)
                    | Default  => PT.PExpr.Wildcard(sc.NLocation())
                  });
                  (PT.MatchCase(patterns, foldStatements(body)) :: matchCases, [])
              }
            );
          match(unfoldedEntries) {
            | [] => ();
            | x :: _ =>
              Message.Error(x.NLocation(), $"control cannot fall from one case label `$x' to another");
          }
          [PT.PExpr.Match(loc, expr, matchCases.Rev(), expr.Location)]

        | While(cond, stmt) =>
          [Util.locate(loc, <[ Nemerle.Core.@while($(ConvertExpr(cond)), $(ConvertExpr(stmt, false))) ]>)]

        | DoWhile(cond, stmt) =>
          [Util.locate(loc, <[ Nemerle.Core.dowhile($(ConvertExpr(stmt, false)), $(ConvertExpr(cond))) ]>)]

        | ForVar(declExprs, cond, change, body)
          with( initExprs = null,
                init = declExprs.decls.FoldLeft([],
                  fun((loc, id, init), acc) {
                    def loc = loc.NLocation();
                    match(init : CS.VariableInitializer) {
                      | Expr(expr) =>
                        def init = match(declExprs.variableType) {
                          | null  => ConvertExpr(expr)
                          | ty    => PT.PExpr.TypeEnforcement(loc, ConvertExpr(expr), ConvertExpr(ty))
                        }
                        PT.PExpr.DefMutable(loc, ConvertExpr(id), init) :: acc
                      | _ =>
                        Message.Error(loc, "expression expected");
                        acc
                    }
                  }))
        | ForExpr(initExprs, cond, change, body)
          with( declExprs = null,
                init = initExprs.RevMap(ConvertExpr)) =>
          def cond = match(cond) {
            | null  => PT.PExpr.Void(loc)
            | _     => ConvertExpr(cond)
          }
          def change = match(change.Map(ConvertExpr)) {
            | []    => PT.PExpr.Void(loc)
            | [x]   => x
            | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
          }
          def body = ConvertExpr(body, false);
          [Util.locate(loc,
            match(init) {
              | []      => <[ Nemerle.Core.@for((), $cond, $change, $body) ]>
              | [init]  => <[ Nemerle.Core.@for($init, $cond, $change, $body) ]>
              | _       =>
                def loop = (<[ Nemerle.Core.@for((), $cond, $change, $body) ]> :: init).Rev();
                <[ { ..$loop } ]>
            }
          )]

        | Foreach(var, null, expr, body) =>
          [Util.locate(loc, <[ foreach($(ConvertExpr(var)) in $(ConvertExpr(expr))) $(ConvertExpr(body, false)) ]>)]

        | Foreach(var, varType, expr, body) =>
          [Util.locate(loc, <[ foreach($(ConvertExpr(var)) : $(ConvertExpr(varType)) in $(ConvertExpr(expr))) $(ConvertExpr(body, false)) ]>)]

        | Break =>
          [Util.locate(loc, <[ Nemerle.Imperative.Break() ]>)]

        | Continue =>
          [Util.locate(loc, <[ Nemerle.Imperative.Continue() ]>)]

        | Goto | GotoCase | GotoDefault =>
          Message.Error(loc, "`goto' statement is not supported");
          [PT.PExpr.Error(loc)]

        | Return(null) =>
          if(isLast)
            [PT.PExpr.Void(loc)]
          else
            [Util.locate(loc, <[ Nemerle.Imperative.Return() ]>)]

        | Return(expr) =>
          if(isLast)
            [ConvertExpr(expr)]
          else
            [Util.locate(loc, <[ Nemerle.Imperative.Return($(ConvertExpr(expr))) ]>)]

        | Throw(null) =>
          [PT.PExpr.Throw(loc, null)]

        | Throw(expr) =>
          [PT.PExpr.Throw(loc, ConvertExpr(expr))]

        | Try(body, [], finallyBlock) =>
          [PT.PExpr.TryFinally(loc, ConvertExpr(body, isLast), ConvertExpr(finallyBlock, false))]

        | Try(body, catchCases, finallyBlock) =>
          def convertCatchCase(entry) {
            def loc = entry.NLocation();
            def exnTy = match(entry.ExceptionType) {
              | null  => Util.locate(loc, <[ System.Exception ]>)
              | exnTy => ConvertExpr(exnTy)
            }
            def var = match(entry.Variable) {
              | null => MakeWildcardSplicableName(loc)
              | var  => MakeSplicableName(var)
            }
            PT.TryCase.Catch(loc, var, exnTy, ConvertExpr(entry.Body, isLast))
          }

          def tryCatch = PT.PExpr.Try(loc, ConvertExpr(body, isLast), catchCases.Map(convertCatchCase));
          match(finallyBlock) {
            | null => [tryCatch]
            | _ => [PT.PExpr.TryFinally(loc, tryCatch, ConvertExpr(finallyBlock, false))]
          }

        | Checked(body, true) =>
          [Util.locate(loc, <[ Nemerle.Core.@checked($(ConvertExpr(body, isLast))) ]>)]

        | Checked(body, false) =>
          [Util.locate(loc, <[ Nemerle.Core.@unchecked($(ConvertExpr(body, isLast))) ]>)]

        | Lock(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@lock($(ConvertExpr(expr)), $(ConvertExpr(body, isLast))) ]>)]

        | UsingVar(VariableDecl(varType, decls), body) =>
          def args = decls.FoldLeft([ConvertExpr(body, isLast)],
            fun((loc, id, init), acc) {
              def loc = loc.NLocation();
              match(init : CS.VariableInitializer) {
                | Expr(expr) =>
                  def init = PT.PExpr.Assign(loc, ConvertExpr(id), ConvertExpr(expr));
                  match(varType) {
                    | null  => init :: acc
                    | _     => PT.PExpr.TypeEnforcement(loc, init, ConvertExpr(varType)) :: acc
                  }
                | _ =>
                  Message.Error(loc, "expression expected");
                  acc
              }
            }).Rev();
          [Util.locate(loc, <[ Nemerle.Core.@using(..$args) ]>)]

        | UsingExpr(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@using($(ConvertExpr(body, isLast)), $(ConvertExpr(expr))) ]>)]

        | YieldReturn(expr) =>
          [Util.locate(loc, <[ Nemerle.Core.@yield($(ConvertExpr(expr))) ]>)]

        | YieldBreak =>
          [Util.locate(loc, <[ Nemerle.Core.@yield() ]>)]

        | Unsafe =>
          Message.Error(loc, "unsafe code is not supported");
          [PT.PExpr.Error(loc)]

        | Fixed =>
          Message.Error(loc, "`fixed' statement is not supported");
          [PT.PExpr.Error(loc)]
      }
    }

    ConvertExpr(stmt : CS.Statement, isLast : bool = true) : PT.PExpr
    {
      match(ConvertStatement(stmt, isLast)) {
        | []    => PT.PExpr.Void(stmt.NLocation())
        | [x]   => x
        | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
      }
    }
  }
}