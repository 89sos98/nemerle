using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Nemerle.Collections;

namespace Nemerle.Compiler.Utils
{
	class SubHintForType : Nemerle.Compiler.Utils.Convert
	{
	  public this()
	  {
	    base(true, null, false);
      ConvertTypeName = ConvertTypeNameImpl;
	  }
	  
	  mutable _currentId = 1;
    _idToTypeMap : Hashtable[int, MType] = Hashtable();
    
    GetTypeId(ty : MType) : int
    {
      _currentId++;
      _idToTypeMap.Add(_currentId, ty);
      _currentId
    }

    ConvertTypeNameImpl(ty : MType, name : string) : string
    {
      $"<font color='DarkCyan'><hint value='$name' key='$(GetTypeId(ty))' /></font>"
    }
    
    public static MakeAccessModifiers(ti : IMember) : string
    {
      def mods = ti.Attributes.ToString().ToLower().Replace(",", "");
      $"<keyword>$mods</keyword> "
    }
    
    public GetDelayedHintHendler() : Func[string, string]
    {
      def makeTypeStr(key : string) : string
      {
        AddNamespaces  = true;
        ExpandTypeArgs = false;
        def ty = _idToTypeMap[int.Parse(key)];
        
        def makeDelegateExt(ti)
        {
          def m = ti.LookupMember("Invoke").Head;
          "<lb/>Signature: " + FixedTypeToString(m.GetMemType()) + "<lb/>"
          + "Inferred: " + TypeVarToString(ty.TypeOfMember(m))
        }
        
        def baseTypesExt(ti : TypeInfo) : string
        {
          def implementsInfo(itfs : list[MType.Class]) : string
          {
            def plural = if (itfs.Length > 1) "s" else "";
            def prompt = if (ti.IsInterface) $"Base interface$plural" else "Implements";
            if (itfs.IsEmpty) ""
            else $<#<lb/>$prompt:<lb/>  ..$(itfs; "<lb/>  "; FixedClassTypeToString)#>
          }
          def itfs1 = ti.GetDirectSuperTypes();
          def baseType = ti.BaseType;
          def itfs = if (baseType == null) itfs1 else itfs1.Tail;
          if (baseType != null)
            "<lb/>Base type: " + TypeVarToString(ty.GetInstantiatedSuperType(baseType)) + implementsInfo(itfs)
          else implementsInfo(itfs)
        }
        
        def (kind, ext) = 
          match (ty)
          {
            | Class(ti, _args) => 
              def (kind, ext) =
                if      (ti.IsInterface) ("interface ", baseTypesExt(ti))
                else if (ti.IsDelegate)  ("delegate ", makeDelegateExt(ti))
                else if (ti.IsEnum)      ("enum ", "")
                else if (ti.IsModule)    ("module ", "")
                else if (ti.IsValueType) ("value type ", "")
                else
                {
                  def text = "class ";
                  def text = if (ti.IsObsolete) "obsolete " + text else text;
                  (text, baseTypesExt(ti))
                };
              
              ("<keyword>" + MakeAccessModifiers(ti) + kind + "</keyword>", ext)
            
            | TyVarRef       => ("type parameter ", "")
            | Fun            => ("function type ", "")
            | Tuple          => ("tuple ", "")
            | Array(_, rank) => ($"$rank dimention ", "")
            | Ref            => ("ref parameter ", "")
            | Out            => ("out parameter ", "")
            | Void           => ("", "")
            | Intersection   => ("", "")
          };
        
        $"<hint>$kind$(FixedTypeToString(ty))$ext</hint>"
      }
      
      makeTypeStr
    }
	}
}
