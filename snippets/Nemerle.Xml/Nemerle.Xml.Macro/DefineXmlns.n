using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Xml
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro DefineXmlns(params args : array[expr])
  {
    DefineXmlnsImpl.DoTransform(Macros.ImplicitCTX(), args)
  }
  
  module DefineXmlnsImpl
  {
    internal XLinqXmlNamespasecId = "XLinqXmlNamespasec defined";
    
    internal MakeXNameFieldRef(typer : Typer, loc : Location, nsPrefix : string, name : string) : PExpr
    {
      Macros.DefineCTX(typer);
      def nsTy        = <[ ttype: System.Xml.Linq.XNamespace ]>;
      def nsField     = GetNamespacePrefixField(typer, loc, nsPrefix);
      def nsFieldRef  = PExpr.Typed(loc, TExpr.StaticRef(loc, nsTy, nsTy, nsField, []));
        
      <[ $nsFieldRef.GetName($(name : string)); ]>
    }
    //internal MakeXNameFieldRef(typer : Typer, loc : Location, nsPrefix : string, name : string) : PExpr
    //{
    //  def fieldName = $"$(nsPrefix)__$name";
    //  Macros.DefineCTX(typer);
    //  def ty          = <[ ttype: System.Xml.Linq.XName ]>;
      
    //  mutable field = GetField(typer, fieldName, ty);
      
    //  when (field == null)
    //  {
    //    def nsTy        = <[ ttype: System.Xml.Linq.XNamespace ]>;
    //    def nsField     = GetNamespacePrefixField(typer, nsPrefix);
    //    def nsFieldRef  = PExpr.Typed(loc, TExpr.StaticRef(loc, nsTy, nsTy, nsField, []));
    //    def tb          = GetXLinqXmlNamespasecType(typer);
        
    //    field = tb.DefineAndReturn(<[ decl: public $(fieldName : usesite) : $(ty : typed) = $nsFieldRef.GetName($(name : string)); ]>) :> IField;
    //    //tb.Compile();
    //  }
      
    //  def fieldRef  = PExpr.Typed(loc, TExpr.StaticRef(loc, ty, ty, field, []));
    //  fieldRef
    //}

    //internal GetField(typer : Typer, fieldName : string, ty : FixedType) : IField
    //{
    //  def tb = GetXLinqXmlNamespasecType(typer);
      
    //  def member = tb.LookupMember(fieldName, false);
      
    //  match (member)
    //  {
    //    | [field is IField] when field.GetMemType().Equals(ty) => field // fiels already exists!
    //    | [] | null => null
    //    | x :: _ => // We have not field member! Report the error...
    //      Message.FatalError(x.NameLocation, $"In the class $(tb.FullName) already exists member with name $fieldName and it type ($(x.GetMemType())) not compatible with XName type.")
    //  }          
    //}

    internal GetNamespacePrefixField(typer : Typer, loc : Location, fieldName : string) : IField
    {
      def tb = GetXLinqXmlNamespasecType(typer);
      def member = tb.LookupMember(fieldName, false);
      Macros.DefineCTX(typer);
      def ty = <[ ttype: System.Xml.Linq.XNamespace ]>;
      
      match (member)
      {
        | [field is IField] when field.GetMemType().Equals(ty) => field // fiels already exists!
        | [] | null => // No fielde existe! Add it...
          Message.FatalError(loc, $"XML namespace '$fieldName' not defined by DefineXmlns macro.")
        | _ :: _ => // We have not field member! Report the error...
          assert(false);
      }          
    }
    
    internal GetXLinqXmlNamespasecType(typer : Typer) : TypeBuilder
    {
      match (typer.Env.LookupType(["XLinqXmlNamespasec"], null, 0))
      {
        | Some(tb is TypeBuilder) => tb
        | _ => typer.Env.Define(<[ decl: public module XLinqXmlNamespasec { } ]>, false)
      }
    }
    
    internal DoTransform(typer : Typer, args : array[PExpr]) : void
    {
      //assert2(false);

      Macros.DefineCTX(typer);
      //mutable tb = userData[XLinqXmlNamespasecId] :> TypeBuilder;
      def tb = GetXLinqXmlNamespasecType(typer);
      //mutable NsPrefixMap : Hashtable[string, string] = Hashtable();
      //mutable XmlNameMap  : Hashtable[string, string] = Hashtable();

      foreach (arg in args)
      {
        | <[ $nsPrefix = $(ns : string) ]> => 
          def fieldName = nsPrefix.ToString();
          tb.Define(<[ decl: public $(fieldName : usesite) : System.Xml.Linq.XNamespace = System.Xml.Linq.XNamespace.Get($(ns : string));]>);
          //Message.Hint($"ns prefix: $nsPrefix ns: '$ns'");
          
        | _ => Message.Hint(arg.Location, <#Incorrect xml namespace format. Use NamespacePrefix="namespace" formar.#>);
      }
    }
  }
}
