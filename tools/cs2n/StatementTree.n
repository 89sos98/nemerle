// Copyright (c) 2003, 2004 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using Nemerle.Collections;

namespace Nemerle.CSharp
{

    /**
     *  C# wrapper for STree class
     */
    public class StatementTree
    {
        public this ()
        {
            s_tree = STree.TokS ("")
        }

        public this (t : antlr.Token)
        {
            s_tree = STree.Tok (t)
        }

        public this (s : string)
        {
            s_tree = STree.TokS (s)
        }

        public this (s : string,ch : LinkedList[StatementTree])
        {
            mutable l = [];
            
            def get_stree (t : StatementTree)
            {             
                  l = t.s_tree :: l;
            }

            ch.Iter (get_stree);

            s_tree = STree.Statement(s,l)
        }        
        
        override public ToString () : string
        {
            def st = s_tree.eliminate_breaks ();
            match (st)
            {
                | [tree] =>
                  tree.eliminate_return_body ().ToString ()
                | _ => throw System.Exception ("Internal error in break elimination");
            }
            //tree.ToString ()
        }
        
        private s_tree : STree;
    }

    /**
     *  STree class, representing single statement
     */
    public variant STree
    {        
        | TokS { s : string; }
        | Tok { t : antlr.Token; }
        | Statement { s_name : string; children : list[STree] ; }                           
        
        override public ToString () : string
        {
            match(this)
            {             
                | Tok (t) => t.getText ()
                | TokS (s) => s

                | Statement ( "RETURN" , [Tok (t), expr, s]) =>
                  ExtendedToken.getWhitespaces (t) + expr.ToString () + s.ToString ()

                | Statement ( "RETURN" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "()" + s.ToString ()
                  
                | Statement ( _ , children) =>
                  
                  def sb = System.Text.StringBuilder ();
                  def loop (l)
                  {
                      match(l : list[STree])
                      {
                          | [] => ()
                          | x :: xs =>  ignore (sb.Append (x.ToString ()));loop (xs)
                      }
                  }

                  loop(children);
                  
                  sb.ToString ()                  
            }
        }                        

        /* -- RETURN ELIMINATION ----------------------------------------- */
        
        internal eliminate_return_body () : STree
        {
            def (lbrace,statements,rbrace) = cut_off_braces (this);

            def loop (sts : list [STree],acc : list [STree]) : list [STree]
            {
                match(sts)
                {
                    | (Statement("IF", _) as if_st)  :: tail
                    | (Statement("WHEN", _) as if_st) :: tail =>                      
                      def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
                      def est_block       = block_statement.eliminate_return_body ();
                      def est_if          = if_st.eliminate_return_in_if (est_block);
                      
                      List.Rev(est_if :: acc)
                      
                    | Statement("BLOCK",xs) :: tail =>
                      def (_,ys,_) = cut_off_braces (xs);
                      def block_statement = Statement("BLOCK",lbrace :: ys + tail  + [rbrace]);
                      def est_block       = block_statement.eliminate_return_body ();
                      List.Rev(est_block :: acc)
                      
                    | head :: tail => loop (tail, head :: acc )
                    | _ =>  List.Rev(acc)
                }
            }

            Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])
            
        }

        protected eliminate_return_in_if (return_st : STree) : STree
        {
          def maybe_eliminate (x) {
            | Statement ("BLOCK", _) => x.eliminate_return_body ()
            | _ => x
          }
            def(_,sts,_) = cut_off_braces (return_st);
            match(this)
            {
                | Statement("IF",[Tok(i),lp,exp,rp,st1,Tok(e),st2]) =>

                  def ws_if    = ExtendedToken.getWhitespaces(i);
                  def ws_else  = ExtendedToken.getWhitespaces(e);
                  
                  // checking "if"
                  
                  if(st1.returns_something () && st2.returns_something ())
                    Statement("IF",[Tok(i),lp,exp,rp,maybe_eliminate (st1),Tok(e),maybe_eliminate (st2)])
                    
                  else if(st1.returns_something ())
                  {
                      def s2 = Statement("BLOCK",[TokS(ws_else+"{"),st2] + sts +  [TokS(ws_else+"}")]);
                      def es2 = s2.eliminate_return_body ();
                      Statement("IF",[Tok(i),lp,exp,rp,st1,Tok(e),es2])
                  }
                  
                  else if(st2.returns_something ())
                  {             
                      def s1 = Statement("BLOCK",[TokS(ws_if+"{"),st1] + sts +[TokS(ws_if+"}")]);
                      def es1 = s1.eliminate_return_body ();
                      Statement("IF",[Tok(i),lp,exp,rp,es1,Tok(e),st2])
                  }
                  
                  else                  
                      Statement("BLOCK", this :: sts)

                      
                | Statement("WHEN",[Tok (i),lp,exp,rp,st1]) =>
                  if(st1.returns_something ())
                  {                    
                    def es2 = return_st.eliminate_return_body ();
                    def whitespaces = ExtendedToken.getWhitespaces(i);
                    Statement("IF", [TokS(whitespaces + "if"), lp, exp, rp, st1, TokS(whitespaces + "else"), es2])
                  }
                  
                  else                  
                      Statement("BLOCK", this :: sts)

                | Statement("WHEN", l) =>
                  System.Console.WriteLine ("wrong when " + l.ToString ());
                  this
                      
                | x => x
            }
        }
        
        private cut_off_braces (lst : list [STree]) : STree * list [STree] * STree
        {
            def st = Statement("BLOCK",lst);
            cut_off_braces (st)
        }
        
        private cut_off_braces (t : STree) : STree * list [STree] * STree
        {
            def loop ['a](lst : list['a],acc : list['a]) : list ['a] * 'a
            {
                match(lst)
                {
                    | [x] => (List.Rev (acc),x)
                    | x :: xs =>loop (xs,x :: acc)
                    | _ => throw System.ArgumentException ("Cutting off braces with list of length < 2");
                }
            }         
            match(t)
            {
                | Statement("BLOCK",x::xs) =>                  
                  def (sx,end) = loop(xs,[]);
                  (x,sx,end)
                | _ => throw System.ArgumentException ("Cutting off braces with list of length < 2");
            }
        }

        private returns_something () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.returns_something())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("RETURN",_) => true
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.returns_something () && st2.returns_something ()  
                | _ => false
            }            
        }     

        /* -- BREAK ELIMINATION -------------------------------------------- */

        /**
         *  Main break elimination function. Return list of trees made by break elimnation.
         *  Function first searchs for loop, then transforms it.
         */
        internal eliminate_breaks () : list [STree]
        {
            def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_breaks () + acc)
                }
            }
            
            match(this)
            {
                | Statement("BLOCK",stmts) =>
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
                  [Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])]

                // FOREACH loop  -  FIXME: emit warning message about uneffectivness
                  
                | Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block]) =>
                  if (block.break_inside ())
                  {
                      def ns = new_break_loop_symbol ();
                      def block_el = block.eliminate_break_in_loop (ns);
                      def when_el = Statement("WHEN",[Tok(ExtendedToken(ExtendedToken.getWhitespaces (f), "when")),TokS(" ("),TokS("!" + ns),TokS(" )"),block_el]);
                      
                      [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_el]),
                      TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
                  }
                  else
                  {
                      match(block.eliminate_breaks ())
                      {
                          | [block] =>
                            [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block]) ]
                          | _ => throw System.Exception ("Internal error in break elimination");
                      }
                  }
                  
                // FOR loop  
                  
                | Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block]) =>
                  if (block.break_inside ())
                  {
                      def ns = new_break_loop_symbol ();
                      def break_loop_cond =
                      if (fc == "")
                          "!" + ns;
                      else
                          fc + " && !" + ns;
                      [Statement("FOR",[Tok(f),lp,finit,s1,TokS(break_loop_cond),s2,fiter,rp,block.eliminate_break_in_loop (ns)]),
                      TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
                  }
                  else
                  {
                      match(block.eliminate_breaks ())
                      {
                          | [block] =>
                            [Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block])]
                          | _ => throw System.Exception ("Internal error in break elimination");
                      }
                  }

                // DO ... WHILE loop
                  
                | Statement("DO",[Tok(d),block,w,lp,TokS(be),rp,s]) =>
                  if (block.break_inside ())
                  {
                      def ns = new_break_loop_symbol ();
                      [Statement("DO",[Tok(d),block.eliminate_break_in_loop (ns),w,lp,TokS(be + " && !" + ns),rp,s]),
                       TokS (ExtendedToken.getWhitespaces (d) + "mutable " + ns + " = false;")];
                  }
                  else
                  {
                      match(block.eliminate_breaks ())
                      {
                          | [block] =>
                            [Statement("DO",[Tok(d),block,w,lp,TokS(be),rp,s])]
                          | _ => throw System.Exception ("Internal error in break elimination");
                      }
                  }

                // WHILE loop
                  
                | Statement("WHILE",[Tok(w),lp,TokS(be),rp,block]) =>
                  if (block.break_inside ())
                  {
                      def ns = new_break_loop_symbol ();
                      [Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp,block.eliminate_break_in_loop (ns)]),
                       TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;")];
                  }
                  else
                  {
                      match(block.eliminate_breaks ())
                      {
                          | [block] =>
                            [Statement("WHILE",[Tok(w),lp,TokS(be),rp,block])]
                          | _ => throw System.Exception ("Internal error in break elimination");
                      }
                  }
                  
                | _ => [this]
            }
        }

        /**
         *  Function used to transform loops containig break statements
         */
        protected eliminate_break_in_loop (ns : string) : STree 
        {
            def loop (sts : list [STree], acc : list [STree]) : list [STree]
            {
                match (sts)
                {
                    | [] => List.Rev (acc)

                    | (Statement ("WHEN",_) as if_st) :: []
                    | (Statement ("IF",_) as if_st) :: [] =>
                      def if_st_el = if_st.eliminate_break_in_loop (ns);
                      
                      List.Rev (if_st_el :: acc)

                    | (Statement ("WHEN",[Tok(i),_,_,_,_]) as if_st) :: tail 
                    | (Statement ("IF",[Tok(i),_,_,_,_,_,_]) as if_st) :: tail =>
                      if (if_st.break_inside ())
                      {
                          def whitespaces = ExtendedToken.getWhitespaces (i);
                          def if_st_el = if_st.eliminate_break_in_loop (ns);
                          def block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
                          def block_el = block.eliminate_break_in_loop (ns);
                          def when_st = Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),TokS("( "),TokS("!"+ns),TokS(" )"),block_el]);
                          
                          List.Rev (when_st :: if_st_el :: acc)
                      }
                      else
                          loop (tail , (if_st :> STree) :: acc)
                      
                    | Statement("BREAK",[Tok(b),s]) :: _=>                     
                      List.Rev(Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]) :: acc)                                          
                      
                    | head :: tail => loop (tail , head :: acc)
                }
            }
            
            match(this)
            {
                | Statement("IF",[i,lp,be,rp,st1,e,st2]) =>

                  mutable st1_el = null;
                  mutable st2_el = null;
                  
                  match (st1.eliminate_breaks ())
                  {
                      | [tree] => st1_el = tree
                      | _ => throw System.Exception ("Internal error in break elimination");
                  }

                  match (st2.eliminate_breaks ())
                  {
                      | [tree] => st2_el = tree
                      | _ => throw System.Exception ("Internal error in break elimination");
                  }
                  
                  if (st1.break_inside () && st2.break_inside ())
                      Statement("IF",[i,lp,be,rp,st1.eliminate_break_in_loop (ns),e,st2.eliminate_break_in_loop (ns)])

                  else if (st1.break_inside ())                      
                      Statement("IF",[i,lp,be,rp,st1.eliminate_break_in_loop (ns),e,st2_el])
                       
                  else if (st2.break_inside ())
                      Statement("IF",[i,lp,be,rp,st1_el,e,st2.eliminate_break_in_loop (ns)])
                  else
                      Statement("IF",[i,lp,be,rp,st1_el,e,st2_el])
                      
                | Statement("WHEN",[w,lp,be,rp,st]) =>
                  Statement("WHEN",[w,lp,be,rp,st.eliminate_break_in_loop (ns)])
                  
                | Statement("BREAK",[Tok(b),s]) =>
                  Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s])

                | Statement("BLOCK",stmts) =>                  
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
                  Statement("BLOCK",lbrace :: loop (statements,[]) + [rbrace])
                  
                | x =>
                  match(x.eliminate_breaks ())
                  {
                      | [y] => y
                      | _ => throw System.Exception ("Internal error in break elimination");
                  }
            }
        }

        /**
         *  Returns true, if statement, or substatement contains break
         */
        protected break_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.break_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("BREAK",_) => true
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.break_inside () || st2.break_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.break_inside () 
                | Statement("WHILE",[_,_,_,_,_]) => false
                | _ => false
            }
        }
        
        private new_symbol (suffix : string) : string
        {
            ++ symbol_count;
            "temp_" + symbol_count.ToString() + suffix
        }

        private new_break_loop_symbol () : string
        {
            new_symbol ("_break_loop")
        }
        
        private static mutable symbol_count : int = 0;
        
    }

}
