using System;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using Typed = Nemerle.Compiler.Typedtree;
using SCG = System.Collections.Generic;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  public class DefineCollection 
    : System.Collections.Generic.IEnumerable [string]
  {
    internal this (eng : Engine)
    {
      _defines = [];
      Engine = eng;
    }
    
    internal mutable _defines : list[string];

    public Engine : Engine
    {
      mutable _engine : Engine;
      get         { ManagerClass.Instance = _engine; _engine; }
      private set { _engine = value }
    }
    
    public Add (define : string) : void
    {
        unless (_defines.Contains (define))
        {
            _defines ::= define;
            Engine.Options.DefineConstant (define);
            Engine.ResetNamespaceTree();
        }
    }
    
    public Remove (define : string) : void
    {
        when (_defines.Contains (define))
        {
            _ = _defines.Remove(define);
            Engine.Options.UndefineConstant(define);
            Engine.ResetNamespaceTree();
        }
    }
    
    public Contains (define : string) : bool
    {
        _defines.Contains (define)
    }
    
    public Clear () : void
    {
        unless (_defines.Length == 0)
        {
            foreach (define in _defines)
                Engine.Options.UndefineConstant (define);
            _defines = [];
            Engine.ResetNamespaceTree();
        }
    }
    
    public GetEnumerator () : SCG.IEnumerator[string]
    {
        Nemerle.Collections.ListEnumerator (_defines)
    }
  }
} // end namespace

