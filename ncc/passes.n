/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler 
{
  public module Passes 
  {
    // ---- PIPELINES USED IN COMPILATION PROCESS ----

    /** Pipeline function for creating lexer object from given string.

        In default compilation it is a function creating LexerFile from given
        filename. It can be customized to do any other action, like treating
        given string as textual code and creating LexerString from it.
     */
    public mutable LexingPipeline : string -> LexerBase;

    /** Pipeline for performing parsing of lexical tokens into parsetree.
 
        In default compilation it is using provided LexerFile object to
        parse tokens and build list of TopDeclarations
      */
    public mutable ParsingPipeline : LexerBase -> list [TopDeclaration];

    /** Pipline for adding namespaces and types hierarchy from parsed
        declarations.

        The list of declarations denotes the scope of one file, including
        using statements, etc. So the default pipeline passes enriched
        environment through declarations on the list.
     */
    public mutable ScanningPipeline : TopDeclaration * GlobalEnv -> GlobalEnv;

    /// initialize pipelines with default values
    this () {
      LexingPipeline = LexerFile;
#if NEWPARSER
      if (Options.NewParser) {
        ParsingPipeline = fun (lex) {
          using (lex) {
            def prepars = PreParser (lex);
            def tokens = prepars.PreParse ();
            foreach (tok in tokens)
              System.Console.WriteLine (tok.ToString ());
            null
          }
        };
      }
      else
        ParsingPipeline = fun (lex) { using (lex) Parser.Parse (lex); };
#else
      ParsingPipeline = fun (lex) { using (lex) Parser.Parse (lex); };
#endif      
      ScanningPipeline = ScanTypeHierarchy.ProcessDeclaration;
    }

    public GeneratedAssembly : System.Reflection.Assembly
    {
      get { Emitter.GeneratedAssembly }
    }
    
    internal mutable Emitter : HierarchyEmitter;

    internal mutable tyinfo_counter : int;
    mutable current_tyinfo_count : int;
    mutable current_pb_stage : int;
    
    mutable pb_killed : bool;

    internal MarkTypeBuilderCompiled () : void
    {
      current_tyinfo_count = current_tyinfo_count + 1;
      ProgressBar (10 + current_tyinfo_count * 90 / tyinfo_counter);
    }

    ProgressBar (stage : int) : void
    {
      when (Options.ProgressBar) {
        def max = 60;
        def act = stage * max / 100;
        def act = if (act > max) max else act;
        def diff = act - current_pb_stage;
        when ((pb_killed && diff > 10) || (!pb_killed && diff > 0)) {
          System.Console.Write ("\r" + System.String ('_', act) + 
                                       System.String ('.', max - act) + "\r");
          current_pb_stage = act;
          pb_killed = false;
        }
      }
    }

    public KillProgressBar () : void
    {
      when (Options.ProgressBar && !pb_killed) {
        System.Console.Write ("\n");
        pb_killed = true;
      }
    }

    internal InitCompiler () : void {
      Message.Init ();
      Location.Init (); 
      LibraryReferenceManager.Init ();     
      GlobalEnv.Init ();      
      Util.Init ();
      AttributeCompiler.Init ();
      Tyvar.Init ();
      TypeBuilder.Init ();
      Parser.Init ();
      Options.Validate ();
    }

    internal LoadExternalLibraries () : void {
      unless (Options.DoNotLoadStdlib) {
        LibraryReferenceManager.AddLibrary ("mscorlib");
        LibraryReferenceManager.AddLibrary ("System");
        LibraryReferenceManager.AddLibrary ("Nemerle");
      };

      List.Iter (List.Rev (Options.ReferencedLibraries), 
                 LibraryReferenceManager.AddLibrary);

      SystemType.Init ();                 
      InternalType.InitSystemTypes ();
      unless (Options.DoNotLoadStdlib) InternalType.InitNemerleTypes ();
      
      unless (Options.DoNotLoadMacros)
        LibraryReferenceManager.LoadMacrosFrom ("Nemerle.Macros");

      MacroRegistry.LoadSyntaxExtensions ("Nemerle.Core");
    }

    
    /** 
     * Run passes of the compiler. 
     */
    public Run () : void    
    {
      InitCompiler ();
      
      ProgressBar (1);

      LoadExternalLibraries ();

      ProgressBar (2);      

      def trees = List.RevMap (Options.Sources, fun (x) { ParsingPipeline (LexingPipeline (x)) });

      Message.maybe_bailout();    // we have detected multiple files already
      
      ProgressBar (5);
      
      foreach (decls in trees) 
        _ = List.FoldLeft (decls, GlobalEnv.Core, ScanningPipeline);
      
      when (Options.DoNotLoadStdlib) InternalType.InitNemerleTypes ();      
      
      ProgressBar (8);

      // we need to process global assembly attributes before creating assembly name
      def assem_name = AttributeCompiler.CreateAssemblyName ();
      Emitter = HierarchyEmitter (assem_name);  
      
      TypeBuilder.Run ();
      Message.maybe_bailout();

      ProgressBar (10);

      Emitter.EmitAuxDecls ();
      Message.maybe_bailout();

      Emitter.EmitDecls ();
      Message.maybe_bailout();
       
      GlobalEnv.FinishMacroContextClass ();

      GlobalEnv.CheckReferencedNamespaces ();
      TypeBuilder.CheckForUnusedGlobalSymbols ();
      TypeBuilder.CheckFinalization ();

      when (Options.XmlDoc) {
        XmlDoc.Init ();
        TypeBuilder.SourceTopIter (XmlDoc.DumpType);
        XmlDoc.Save ();
      }

      unless (Options.CompileToMemory)
        Emitter.SaveAssembly ();
        
      Message.maybe_bailout();
        
      KillProgressBar ();
    }      
  }
}
