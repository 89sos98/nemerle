using System;
using System.Windows;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.TextEditor;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.Editor {

    module WpfTooltipService {

        hint : WpfHint.Hint = WpfHint.Hint();

        public ShowTooltip(tip_info : QuickTipInfo, text_area : TextArea, loc : TextLocation) : void {
            match(tip_info) {
                | null 
                | tip_info when string.IsNullOrEmpty(tip_info.Text) =>
                    CloseTooltip();

                | tip_info when NeedRefresh(tip_info) =>
                    CloseTooltip();
                    ShowTooltipInternal(tip_info, text_area, loc);

                | _ => ();
            }
        }

        public CloseTooltip() : void {
            when(hint.IsOpen)
                hint.Close();
        }

        mutable old_text : string;

        private NeedRefresh(tip_info : QuickTipInfo) : bool {
            !hint.IsOpen || tip_info.Text != old_text
        }

        private ShowTooltipInternal(tip_info : QuickTipInfo, text_area : TextArea, loc : TextLocation) : void {
            old_text = tip_info.Text;

            def ypos = (text_area.Document.GetVisibleLine(loc.Y) + 1) * text_area.TextView.FontHeight - text_area.VirtualTop.Y;
            def p = text_area.PointToScreen(Drawing.Point(0, ypos));
            p.X = Forms.Control.MousePosition.X - 16;
            p.Y -= 1;

            def rect = Rect();
            rect.X = p.X;
            rect.Y = p.Y;
            hint.Show(IntPtr.Zero, rect, tip_info.GetHintContent, $<#<hint>$(tip_info.Text)</hint>#>);
        }

    }

}