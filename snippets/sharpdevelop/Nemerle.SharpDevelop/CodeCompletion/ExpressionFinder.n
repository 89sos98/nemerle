using System;
using System.Text;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.SharpDevelop.Editor;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class ExpressionFinder : IExpressionFinder {

        public this() {
            this.document = null;
        }

        public this(fileName : string) { 
            this.document = match(NemerleSourceDisplayBinding.FindOpenedDocument(fileName)) {
                | (true, document, _) => document
                | _ => null
            }
        }

        document : IDocument;

        static tokenizer : Regex = Regex(@"\w+|[\$\^\|\*\+\\\?/=&%#@<>-]+", RegexOptions.Compiled);

        private FindToken(content : string, offset : int) : string {
            foreach(m is Match when m.Success in tokenizer.Matches(content)) {
                when(m.Index <= offset && offset <= m.Index + m.Length)
                    Nemerle.Imperative.Return(m.Value);
                when(offset < m.Index)
                    Nemerle.Imperative.Break();
            }
            ""
        }

        private GetContent(text : string, offset : int) : string * int {
            if(null == document)
                (text, offset)
            else
                Utils.WorkbenchInvoke(fun () {
                    def line_number = document.GetLineNumberForOffset(offset);
                    def segment = document.GetLineSegment(line_number);
                    (document.GetText(segment), offset - segment.Offset)
                })
        }

        public FindExpression(text : string, offset : int) : ExpressionResult {
            GetContent(text, offset) |> FindToken |> ExpressionResult
        }

        public FindFullExpression(text : string, offset : int) : ExpressionResult {
            GetContent(text, offset) |> FindToken |> ExpressionResult
        }

        public RemoveLastPart(expression : string) : string {
            expression
        }

    }

}