/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using System;
using System.Reflection;
using Nemerle.Collections;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler 
{
  /** Represents an explicitly bound type variable, like the one from
      polymorphic type or method definition. It is also used in
      generalizations of inferred types. */
  [ManagerAccess]
  public class StaticTyVar
  {
    public override ToString () : string
    {
      // XXX include constraints?
      $ "$(Name).$(Id)"
    }


    /** Return lower constraints on given type variable (that is the
        [where] clauses). The constraints should be already normalized (that 
        is they should follow MType.Intersection invariants).
      */
    public Constraints : list [MType]
    {
      get {
        assert (constraints != null);
        constraints
      }

      set {
        assert (constraints == null);
        constraints = value;
        unless (value.IsEmpty) {
          LowerBound.Validate ();
          List.Iter (constraints, fun (x) {
            when (x.Equals (InternalType.Void))
              Message.Error ($ "cannot use `void' as constraint for $(Name)")
          })
        }
      }
    }


    public LowerBound : MType
    {
      get {
        assert (constraints != null, $"for $this");
        match (constraints) {
          | [] when (IsValueType)=>
            assert (InternalType.ValueType != null);
            InternalType.ValueType
          | [] =>
            assert (InternalType.Object != null);
            InternalType.Object
          | [x] => x
          | lst => MType.Intersection (lst)
        }
      }
    }
    

    public Name : string
    {
      get { name }
    }


    public Id : int
    {
       get { id }
    }
    

    public this (man : ManagerClass, name : string)
    {
      Manager = man;
      this.name = name;
      id = Manager.StaticTyVarId;
      ++Manager.StaticTyVarId;
    }

    private this (other : StaticTyVar)
    {
      this.name = other.name;
      this.special = other.special;
      this.Manager = other.Manager;
      
      id = Manager.StaticTyVarId;
      ++Manager.StaticTyVarId;
    }
      
    public this (man : ManagerClass, name : string, gtype : System.Type) {
      this (man, name);
      this.gtype = gtype;
    }
    
    public SystemType : System.Type
    {
      get {
        assert (gtype != null, ToString ());
        gtype
      }
    }

    internal ApplySubst (orig_sub : Subst) : StaticTyVar
    {
      // we should also do a substitution on the constraints, but it appears
      // to be tricky at best -- enabling it causes failures in Nemerle.dll
      if (true || Constraints is []) this
      else {
        def sub = orig_sub.Copy ();
        def res = StaticTyVar (this);
        sub.Add (this, MType.TyVarRef (res));
        def new_constraints = Constraints.Map (x => sub.Apply (x).Fix ());
        if (new_constraints.Equals (Constraints)) this
        else {
          res.Constraints = new_constraints;
          orig_sub.Add (this, MType.TyVarRef (res));
          res
        }
      }
    }

    public SpecialConstraints : GenericParameterAttributes
    {
      get { special }
    }

    internal SetConstraints (special : GenericParameterAttributes, subtype : list [MType]) : void
    {
      when ((special %&& GenericParameterAttributes.NotNullableValueTypeConstraint) &&
              (special %&& GenericParameterAttributes.ReferenceTypeConstraint))
        Message.Error ("`struct' generic constraint cannot be used together with `class'");

      this.special = special;

      def check_class_constraints(lst)
      {
        mutable c=null;
        lst.ForAll (fun(x) {
          | x is MType.Class when (!x.tycon.IsInterface) => 
              if(c==null) {
                c = x;
                true;
              }
              else {
                Message.Error ($ "generic parameter cannot be constrained by multiple non-interfaces : $(c), $(x)");
                false
              }
          | _ => true
        });
      }
      if (check_class_constraints(subtype))
        Constraints = subtype;
      else
        Constraints = [];
    }

    public IsValueType : bool {
      get {
        special %&& GenericParameterAttributes.NotNullableValueTypeConstraint
      }
    }
    
    public HasDefaultConstructor : bool {
      get {
        special %&& GenericParameterAttributes.DefaultConstructorConstraint
      }
    }
    
    public IsCovariant : bool
    {
      get { 
        special %&& GenericParameterAttributes.Covariant
      }
    }

    public IsContravariant : bool
    {
      get { 
        special %&& GenericParameterAttributes.Contravariant
      }
    }
        
    [Nemerle.OverrideObjectEquals]
    public Equals (o : StaticTyVar) : bool
    {
      id == o.id
    }


    /** Copy a list of type parameters for use in a new type.
        Also return a substitution from the old to the new list.  */
    static public CopyList (typarms : list [StaticTyVar]) : Subst * list [StaticTyVar]
    {
      def sub = Subst ();
      def newtp =
        typarms.Map (fun (tp) {
          def ntp = StaticTyVar (tp);
          sub.Add (tp, MType.TyVarRef (ntp));
          (ntp, tp.Constraints)
        }).Map (fun (tv : StaticTyVar, constr : list [_]) {
          tv.Constraints = constr.Map (x => sub.Apply (x).Fix ());
          tv
        });
      (sub, newtp)
    }


    internal SetGenericBuilder (x : SRE.GenericTypeParameterBuilder) : void
    {
      Util.cassert (gtype == null);
      Util.cassert (x != null);
      x.SetGenericParameterAttributes (special);
      gtype = x;
    }

    internal UpdateConstraints () : void
    {
      def gbuil = gtype :> SRE.GenericTypeParameterBuilder;
      def ifaces = match (constraints) {
        | (MType.Class as x) :: _ when x.tycon.IsInterface => constraints
        | x :: xs => gbuil.SetBaseTypeConstraint (x.SystemType); xs
        | [] => []
      }
      unless (ifaces.IsEmpty) {
        def arr = array (ifaces.Length);
        _ = ifaces.FoldLeft (0, fun (x, i) {
          arr [i] = x.SystemType;
          i + 1
        });
      
        gbuil.SetInterfaceConstraints (arr);
      }
    }

    /// Check if [tv] fullfills [this]'s constraints.
    public CheckConstraints (tv : TyVar, thing : object) : void
    {
      def default_ctorable (t) {
        | MType.Class (ti, _) when ti.IsAbstract => false
        | MType.Class (ti, _) =>
          ! t.CanBeNull || // value types always have this ctor
          ti.LookupMember (".ctor").Exists (fun (_) {
            | meth is IMethod =>
              meth.Attributes %&& NemerleAttributes.Public &&
              meth.GetHeader ().parms.IsEmpty
            | _ => false
          })
        | MType.TyVarRef (s) =>
          s.SpecialConstraints %&& 
          GenericParameterAttributes.DefaultConstructorConstraint
          || List.Exists (s.Constraints, default_ctorable)
        | _ => false
      }

      def check_constraints (t, c) {
        ! match(t)
        {
          | MType.TyVarRef (s) =>
              s.Constraints.ForAll( ctr => { ctr.IsInterface || ! c (ctr) });
          | _ => t.IsInterface || ! c (t);
        }
      }

      def t = tv.Fix ();

      when (SpecialConstraints %&& 
            GenericParameterAttributes.NotNullableValueTypeConstraint &&
            check_constraints (t, c => { c.CanBeNull }))
        // cs453
        Message.Error ($ "the type `$t' must be a value type "
                         "in order to use it as type parameter "
                         "`$(Name)' in $thing");

      when (SpecialConstraints %&& 
            GenericParameterAttributes.ReferenceTypeConstraint &&
            check_constraints (t, c => { !c.CanBeNull }))
        // cs452
        Message.Error ($ "the type `$t' must be a reference type "
                         "in order to use it as type parameter "
                         "`$(Name)' in $thing");
      
      when (SpecialConstraints %&& 
            GenericParameterAttributes.DefaultConstructorConstraint &&
            ! default_ctorable (t))
        // cs310
        Message.Error ($ "the type `$t' must have a public parameterless "
                         "constructor and must not be abstract in order "
                         "to use it as type parameter "
                         "`$(Name)' in $thing");
    }
    
    mutable gtype : System.Type; 

    internal id : int;
    name : string;
    mutable special : GenericParameterAttributes;
    mutable constraints : list [MType];

    internal mutable current_type : TypeInfo = null;
    internal mutable current_method : IMethod = null;
  }
}
