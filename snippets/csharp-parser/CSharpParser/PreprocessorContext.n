using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  internal sealed class PreprocessorContext
  {
    public this(writer : PreprocessorWriter, predefinedSymbols : SCG.IEnumerable[string], elements : SCG.IEnumerator[PreParseElement])
    {
      this.writer = writer;
      this.definedSymbols = Hashtable(10);
      foreach(symbol in predefinedSymbols)
        definedSymbols.Add(symbol, null);
      this.elements = elements;
      this.isPositiveBranch = true;
      this.compilationMessages = SCG.List();
      this.errors = SCG.List();
      this.lineHints = SCG.List();
      this.pragmaHints = SCG.List();
    }

    private this( writer              : PreprocessorWriter,
                  definedSymbols      : Hashtable[string, object],
                  elements            : SCG.IEnumerator[PreParseElement],
                  isPositiveBranch    : bool,
                  compilationMessages : SCG.List[Directive],
                  errors              : SCG.List[Located],
                  lineHints           : SCG.List[Directive],
                  pragmaHints         : SCG.List[Directive])
    {
      this.writer = writer;
      this.definedSymbols = definedSymbols;
      this.elements = elements;
      this.isPositiveBranch = isPositiveBranch;
      this.compilationMessages = compilationMessages;
      this.errors = errors;
      this.lineHints = lineHints;
      this.pragmaHints = pragmaHints;
    }

    writer : PreprocessorWriter;

    definedSymbols : Hashtable[string, object];

    elements : SCG.IEnumerator[PreParseElement];

    [Accessor] isPositiveBranch : bool;

    [Accessor] compilationMessages : SCG.List[Directive];

    [Accessor] errors : SCG.List[Located];

    [Accessor] lineHints : SCG.List[Directive];

    [Accessor] pragmaHints : SCG.List[Directive];

    public WithPositiveBranch(isPositiveBranch : bool) : PreprocessorContext
    {
      if(this.isPositiveBranch == isPositiveBranch)
        this
      else
        PreprocessorContext(
          this.writer,
          this.definedSymbols,
          this.elements,
          isPositiveBranch,
          this.compilationMessages,
          this.errors,
          this.lineHints,
          this.pragmaHints)
    }

    public Define(symbol : string) : void
    {
      definedSymbols[symbol] = null;
    }

    public Undefine(symbol : string) : void
    {
      definedSymbols.Remove(symbol);
    }

    public IsDefined(symbol : string) : bool
    {
      definedSymbols.ContainsKey(symbol)
    }

    public MoveNext() : bool
    {
      if(elements.MoveNext())
      {
        writer.WriteElement(elements.Current, isPositiveBranch);
        true
      }
      else
        false
    }

    public Current : PreParseElement
    {
      get { elements.Current }
    }
  }
}