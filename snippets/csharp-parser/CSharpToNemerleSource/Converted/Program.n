using System;
using Nemerle;
using Nemerle.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using Nemerle.Compiler;
using System.Text;
using System.IO;
using System.Console;

namespace CSharpToNemerle
{
  class Engine 
  {
    [Nemerle.InternalMacros.StaticInitializer(CSharpToNemerleConvert())]
    conv : CSharpToNemerleConvert;

    mutable nfiles : list[string];
    mutable csfiles : list[string];
    mutable out_dir : string;
    mutable err : bool;
    public IsErr : bool
    {
      get
      {
        match ((nfiles.IsEmpty() : bool))
          {
          | true => 
            csfiles.IsEmpty()
          | _  => 
            false
        }
      }
    }

    Error(str : string) : void 
    {
      err = true;
      WriteLine(string.Concat("Неизвестный параметр ", (Convert.ToString(str) : string), Environment.NewLine))
    }

    public ProcessArgs(args : list[string]) : bool
    {
      match (args)
        {
        | "/d" :: dir :: tail => 
          
          {
            csfiles = csfiles + Directory.GetFiles(dir, "*.cs", SearchOption.AllDirectories).NToList();
            ProcessArgs(tail)
          }
        | "/nd" :: dir :: tail => 
          
          {
            nfiles = nfiles + Directory.GetFiles(dir, "*.n", SearchOption.AllDirectories).NToList();
            ProcessArgs(tail)
          }
        | "/nf" :: file :: tail => 
          
          {
            
            {
              [[Cache:nfiles]]
              ;
              [[CacheRef:nfiles]] = file :: [[CacheRef:nfiles]]
            };
            ProcessArgs(tail)
          }
        | "/out" :: dir :: tail => 
          
          {
            out_dir = dir;
            ProcessArgs(tail)
          }
        | file :: tail => 
          
          {
            match ((File.Exists(file) : bool))
                    {
              | true => 
                
                {
                  [[Cache:csfiles]]
                  ;
                  [[CacheRef:csfiles]] = file :: [[CacheRef:csfiles]]
                }
              | _  => 
                Error(file)
            };
            ProcessArgs(tail)
          }
        | _  => 
          !IsErr
      }
    }

    public Run() : void 
    {
      def create_out_name (f : _ )  
      {
        def out_file = Path.GetFileNameWithoutExtension(f) + "_conv.n";
        Path.Combine(TExpr.Delayed(delayed macro), out_file)
      } : _ ;
      csfiles.Iter(conv.Convert(_ , out_dir));
      nfiles.Iter(fun  (x : _ ) : _  
    conv.PrintNFile(x, create_out_name(x)))
    }
  }

  module Program 
  {
    Main(args : array [string]) : void 
    {
      def engine = Engine();
      WriteLine("Конвертер C# в Nemerle v1.0");
      match ((engine.ProcessArgs(args.NToList()) : bool))
        {
        | true => 
          engine.Run()
        | _  => 
          
          {
            WriteLine("Использование: cs2nemerle.exe [/d dir] [/nd dir] [/nf file] file1,file2...\r\nГде: /d - показывает директорию в которой лежат файлы .cs для конвертации\r\n     /nd - директория файлов Nemerle для парсинга и вывода\r\n     /nf - файл Nemerle для парсинга и вывода\r\n     file1... - файлы .cs через пробел для конвертации\r\n                ")
          }
      }
    }
  }


}