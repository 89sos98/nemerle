using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;

using MSBuild = Microsoft.Build.BuildEngine;

using Nemerle.SharpDevelop.CodeCompletion;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop {

    public class NemerleProject : CompilableProject {

        static this() {
            ProjectService.SolutionLoaded += OnSolutionLoaded;
        }

        public this(provider : IMSBuildEngineProvider, fileName : string, projectName : string) {
            base(provider);
            this.Name = projectName;
            this.Disposed += OnDisposed;
            LoadProject(fileName);
            engine_context = EngineService.CreateEngineContext(this);
        }

        public this(info : ProjectCreateInformation) {
            base(info.Solution);
            this.Disposed += OnDisposed;
            Create(info);
            engine_context = EngineService.CreateEngineContext(this);
        }

        engine_context : EngineContext;

        public override Language : string {
            get { NemerleLanguageProperties.LanguageName }
        }

        public override LanguageProperties : LanguageProperties {
            get { NemerleLanguageProperties.Instance }
        }

        private SetNemerleProperty(value : string) : void {
            def first_prop_group =
                MSBuildProject.PropertyGroups
                    .Cast.[MSBuild.BuildPropertyGroup]()
                    .FirstOrDefault() ?? MSBuildProject.AddNewPropertyGroup(false);

            first_prop_group
                .AddNewProperty("Nemerle", value)
                .Condition = " '$(Nemerle)' == '' ";
        }

        protected override Create(info : ProjectCreateInformation) : void {
            base.Create(info);

            SetNemerleProperty("$(ProgramFiles)\\Nemerle");

            SetProperty("Debug", null, "DefineConstants", "DEBUG;TRACE",
                        PropertyStorageLocations.ConfigurationSpecific, false);
            SetProperty("Release", null, "DefineConstants", "TRACE",
                        PropertyStorageLocations.ConfigurationSpecific, false);

            try {
                AddImport("$(Nemerle)\\Nemerle.MSBuild.targets", null);
            } catch {
                | ex is MSBuild.InvalidProjectFileException =>
                    throw ProjectLoadException("Please ensure that the Nemerle compiler is installed on your computer.\n\n" + ex.Message, ex);
            }
        }

        public override GetDefaultItemType(fileName : string) : ItemType {
            if (string.Equals(".n", Path.GetExtension(fileName), StringComparison.OrdinalIgnoreCase))
                ItemType.Compile
            else
                base.GetDefaultItemType(fileName)
        }

        public override CreateProjectItem(item : MSBuild.BuildItem) : ProjectItem {
            match(item.Name) {
                | "MacroReference" => MacroReferenceProjectItem(this, item)
                | "MacroProjectReference" => MacroProjectReferenceProjectItem(this, item)
                | _ => base.CreateProjectItem(item)
            }
        }

        public override GetBuildDependencies(build_options : ProjectBuildOptions) : ICollection[IBuildable] {
            def result = base.GetBuildDependencies(build_options);
            foreach (item is MacroProjectReferenceProjectItem in GetItemsOfType(ItemTypeExt.MacroProjectReference)) {
                when (null != item.ReferencedProject)
                    result.Add(item.ReferencedProject);
            }
            result
        }

        private OnDisposed(_ : object, _ : EventArgs) : void {
            EngineService.DisposeEngineContext(this);
        }

        private static OnSolutionLoaded(_ : object, e : SolutionEventArgs) : void {
            foreach(project is NemerleProject in e.Solution.Projects) {
                project.engine_context.Reload();
            }
        }

    }

}
