using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MergeTypeDeclaration(decl : CS.TypeDeclaration) : void
    {
      def loc = decl.NLocation();
      def mods = ConvertModifiers(decl.Attributes, decl.Modifiers);
      def name = MakeSplicableName(decl.Name);
      def typarms = ConvertTyparms(decl.TypeParameters, decl.Constraints);

      def ndecl =
        match(decl) {
          | Class(baseTypes, members) =>
            PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), [])

          | Struct(baseTypes, members) =>
            mods.mods |= NemerleAttributes.Struct;
            PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), [])

          | Interface(baseTypes, members) =>
            PT.TopDeclaration.Interface(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), [])

          | Delegate => null
          | Enum => null
        }
      manager.ScanningPipeline(ndecl);
    }

    ConvertModifiers(attributes : list[CS.CustomAttribute], modifiers : list[CS.Modifier]) : Modifiers
    {
      def duplicatedModifier(flag) {
        Message.Error(flag.NLocation(), $"duplicated modifier `$flag'")
      }
      mutable flags = NemerleAttributes.None;
      foreach(flag in modifiers) {
        | New =>
          when(flags %&& NemerleAttributes.New) duplicatedModifier(flag);
          flags |= NemerleAttributes.New
        | Public =>
          when(flags %&& NemerleAttributes.Public) duplicatedModifier(flag);
          flags |= NemerleAttributes.Public
        | Protected =>
          when(flags %&& NemerleAttributes.Protected) duplicatedModifier(flag);
          flags |= NemerleAttributes.Protected
        | Internal =>
          when(flags %&& NemerleAttributes.Internal) duplicatedModifier(flag);
          flags |= NemerleAttributes.Internal
        | Private =>
          when(flags %&& NemerleAttributes.Private) duplicatedModifier(flag);
          flags |= NemerleAttributes.Private
        | Partial =>
          when(flags %&& NemerleAttributes.Partial) duplicatedModifier(flag);
          flags |= NemerleAttributes.Partial
        | Virtual =>
          when(flags %&& NemerleAttributes.Virtual) duplicatedModifier(flag);
          flags |= NemerleAttributes.Virtual
        | Volatile =>
          when(flags %&& NemerleAttributes.Volatile) duplicatedModifier(flag);
          flags |= NemerleAttributes.Volatile
        | Static =>
          when(flags %&& NemerleAttributes.Static) duplicatedModifier(flag);
          flags |= NemerleAttributes.Static
        | Sealed =>
          when(flags %&& NemerleAttributes.Sealed) duplicatedModifier(flag);
          flags |= NemerleAttributes.Sealed
        | Override =>
          when(flags %&& NemerleAttributes.Override) duplicatedModifier(flag);
          flags |= NemerleAttributes.Override
        | Abstract =>
          when(flags %&& NemerleAttributes.Abstract) duplicatedModifier(flag);
          flags |= NemerleAttributes.Abstract
        | Extern =>
          when(flags %&& NemerleAttributes.Extern) duplicatedModifier(flag);
          flags |= NemerleAttributes.Extern
        | Unsafe =>
          Message.Error(flag.NLocation(), "unsafe code is not supported")
        | Readonly => () //TODO: deal with Readonly
      }
      Modifiers(flags, []) //TODO: deal with Attributes
    }

    ConvertTyparms(tyvars : list[CS.TypeParameter], constClauses : list[CS.TypeParameterConstraintClause]) : PT.Typarms
    {
      | ([], []) => PT.Typarms.Empty
      | _ =>
        def tyvars = tyvars.Map(fun(tp){
          match(tp.Attributes) {
            | [] => ()
            | _ :: _ =>
              Message.Warning(tp.Name.NLocation(), "type parameter attributes are ignored");
          }
          match(tp.Variance) {
            | CS.TypeParameterVariance.Normal => ()
            | x =>
              Message.Error(x.NLocation(), "type parameter variance specifier is not supported");
          }
          MakeSplicableName(tp.Name)
        });

        def constraints = constClauses.Map(fun(constrClause) {
          def tyVar = MakeSplicableName(constrClause.ParameterName);
          constrClause.Constraints.Map(fun(c) {
            def loc = c.NLocation();
            def expr = match(c : CS.TypeParameterConstraint) {
              | DefaultCtor   => PT.PExpr.Ref(loc, MakeName("new", loc))
              | Struct        => PT.PExpr.Ref(loc, MakeName("struct", loc))
              | Class         => PT.PExpr.Ref(loc, MakeName("class", loc))
              | Base(typeRef) => ConvertExpr(typeRef)
            }
            PT.Constraint(tyVar, expr)
          })
        });

        PT.Typarms(tyvars, constraints.Flatten())
    }

  }
}