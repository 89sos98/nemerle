using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

module Literals
{
  public FloatValue1 : float = 1.0f;
  public FloatValue2 : float = FloatValue1 + 2.0f;
  public FloatValue3 : float = FloatValue1 + FloatValue2;
  public FloatValue4 : float = FloatValue1 - FloatValue2;
  public FloatValue5 : float = FloatValue1 * FloatValue2;
  public FloatValue6 : float = FloatValue1 / FloatValue2;
  public FloatValue7 : float = FloatValue1 % FloatValue2;

  public DoubleValue1 : double = 1.0;
  public DoubleValue2 : double = DoubleValue1 + 2.0;
  public DoubleValue3 : double = DoubleValue1 + DoubleValue2;
  public DoubleValue4 : double = DoubleValue1 - DoubleValue2;
  public DoubleValue5 : double = DoubleValue1 * DoubleValue2;
  public DoubleValue6 : double = DoubleValue1 / DoubleValue2;
  public DoubleValue7 : double = DoubleValue1 % DoubleValue2;

  public BoolValue1 : bool = true;
  public BoolValue2 : bool = true && !BoolValue1;
  public BoolValue3 : bool = !BoolValue1 && !BoolValue2;
  public BoolValue4 : bool = !BoolValue1 || !BoolValue2;
  
  public IntValue1  : int = 1;
  public IntValue2  : int = IntValue1 + 2;
  public IntValue3  : int = IntValue1 + IntValue2;
  public IntValue4  : int = IntValue1 - IntValue2;
  public IntValue5  : int = IntValue1 * IntValue2;
  public IntValue6  : int = IntValue1 / IntValue2;
  public IntValue7  : int = IntValue1 % IntValue2;
  public IntValue8  : int = IntValue1 & IntValue2;
  public IntValue9  : int = IntValue1 | IntValue2;
  public IntValue10 : int = IntValue1 ^ IntValue2;
  public IntValue11 : int = IntValue1 %| IntValue2;
  public IntValue12 : int = IntValue1 %& IntValue2;
  
  public LongValue1  : long = 1L;
  public LongValue2  : long = LongValue1 + 2L;
  public LongValue3  : long = LongValue1 + LongValue2;
  public LongValue4  : long = LongValue1 - LongValue2;
  public LongValue5  : long = LongValue1 * LongValue2;
  public LongValue6  : long = LongValue1 / LongValue2;
  public LongValue7  : long = LongValue1 % LongValue2;
  public LongValue8  : long = LongValue1 & LongValue2;
  public LongValue9  : long = LongValue1 | LongValue2;
  public LongValue10 : long = LongValue1 ^ LongValue2;
  public LongValue11 : long = LongValue1 %| LongValue2;
  public LongValue12 : long = LongValue1 %& LongValue2;
}

module QualifiedLiterals
{
  public FloatValue1 : float = 1.0f;
  public FloatValue2 : float = QualifiedLiterals.FloatValue1 + 2.0f;
  public FloatValue3 : float = QualifiedLiterals.FloatValue1 + QualifiedLiterals.FloatValue2;
  public FloatValue4 : float = QualifiedLiterals.FloatValue1 - QualifiedLiterals.FloatValue2;
  public FloatValue5 : float = QualifiedLiterals.FloatValue1 * QualifiedLiterals.FloatValue2;
  public FloatValue6 : float = QualifiedLiterals.FloatValue1 / QualifiedLiterals.FloatValue2;
  public FloatValue7 : float = QualifiedLiterals.FloatValue1 % QualifiedLiterals.FloatValue2;

  public DoubleValue1 : double = 1.0;
  public DoubleValue2 : double = QualifiedLiterals.DoubleValue1 + 2.0;
  public DoubleValue3 : double = QualifiedLiterals.DoubleValue1 + QualifiedLiterals.DoubleValue2;
  public DoubleValue4 : double = QualifiedLiterals.DoubleValue1 - QualifiedLiterals.DoubleValue2;
  public DoubleValue5 : double = QualifiedLiterals.DoubleValue1 * QualifiedLiterals.DoubleValue2;
  public DoubleValue6 : double = QualifiedLiterals.DoubleValue1 / QualifiedLiterals.DoubleValue2;
  public DoubleValue7 : double = QualifiedLiterals.DoubleValue1 % QualifiedLiterals.DoubleValue2;

  public BoolValue1 : bool = true;
  public BoolValue2 : bool = true && !QualifiedLiterals.BoolValue1;
  public BoolValue3 : bool = !QualifiedLiterals.BoolValue1 && !QualifiedLiterals.BoolValue2;
  public BoolValue4 : bool = !QualifiedLiterals.BoolValue1 || !QualifiedLiterals.BoolValue2;  
  
  public IntValue1  : int = 1;
  public IntValue2  : int = QualifiedLiterals.IntValue1 + 2;
  public IntValue3  : int = QualifiedLiterals.IntValue1 + QualifiedLiterals.IntValue2;
  public IntValue4  : int = QualifiedLiterals.IntValue1 - QualifiedLiterals.IntValue2;
  public IntValue5  : int = QualifiedLiterals.IntValue1 * QualifiedLiterals.IntValue2;
  public IntValue6  : int = QualifiedLiterals.IntValue1 / QualifiedLiterals.IntValue2;
  public IntValue7  : int = QualifiedLiterals.IntValue1 % QualifiedLiterals.IntValue2;
  public IntValue8  : int = QualifiedLiterals.IntValue1 & QualifiedLiterals.IntValue2;
  public IntValue9  : int = QualifiedLiterals.IntValue1 | QualifiedLiterals.IntValue2;
  public IntValue10 : int = QualifiedLiterals.IntValue1 ^ QualifiedLiterals.IntValue2;
  public IntValue11 : int = QualifiedLiterals.IntValue1 %| QualifiedLiterals.IntValue2;
  public IntValue12 : int = QualifiedLiterals.IntValue1 %& QualifiedLiterals.IntValue2;
  
  public LongValue1  : long = 1L;
  public LongValue2  : long = QualifiedLiterals.LongValue1 + 2L;
  public LongValue3  : long = QualifiedLiterals.LongValue1 + QualifiedLiterals.LongValue2;
  public LongValue4  : long = QualifiedLiterals.LongValue1 - QualifiedLiterals.LongValue2;
  public LongValue5  : long = QualifiedLiterals.LongValue1 * QualifiedLiterals.LongValue2;
  public LongValue6  : long = QualifiedLiterals.LongValue1 / QualifiedLiterals.LongValue2;
  public LongValue7  : long = QualifiedLiterals.LongValue1 % QualifiedLiterals.LongValue2;
  public LongValue8  : long = QualifiedLiterals.LongValue1 & QualifiedLiterals.LongValue2;
  public LongValue9  : long = QualifiedLiterals.LongValue1 | QualifiedLiterals.LongValue2;
  public LongValue10 : long = QualifiedLiterals.LongValue1 ^ QualifiedLiterals.LongValue2;
  public LongValue11 : long = QualifiedLiterals.LongValue1 %| QualifiedLiterals.LongValue2;
  public LongValue12 : long = QualifiedLiterals.LongValue1 %& QualifiedLiterals.LongValue2;
}

module Decimals
{
  public DecimalValue1 : decimal = 1m;
  public DecimalValue2 : decimal = DecimalValue1 + 2m;
  public DecimalValue3 : decimal = DecimalValue1 + DecimalValue2;
  public DecimalValue4 : decimal = DecimalValue1 - DecimalValue2;
  public DecimalValue5 : decimal = DecimalValue1 * DecimalValue2;
  public DecimalValue6 : decimal = DecimalValue1 / DecimalValue2;
}

module QualifiedDecimals
{
  public DecimalValue1 : decimal = 1m;
  public DecimalValue2 : decimal = QualifiedDecimals.DecimalValue1 + 2m;
  public DecimalValue3 : decimal = QualifiedDecimals.DecimalValue1 + QualifiedDecimals.DecimalValue2;
  public DecimalValue4 : decimal = QualifiedDecimals.DecimalValue1 - QualifiedDecimals.DecimalValue2;
  public DecimalValue5 : decimal = QualifiedDecimals.DecimalValue1 * QualifiedDecimals.DecimalValue2;
  public DecimalValue6 : decimal = QualifiedDecimals.DecimalValue1 / QualifiedDecimals.DecimalValue2;
}

module Program
{  
  Main() : void
  {
    def checkConstant(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsLiteral)
          Console.WriteLine($"$(field.Name) is not a constant");
      }
    }
    
    def checkReadOnly(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsInitOnly)
          Console.WriteLine($"$(field.Name) is not readonly");

       def attrs = field.GetCustomAttributes(typeof(DecimalConstantAttribute), true);
       when (attrs.Length == 0)
         Console.WriteLine($"$(field.Name) doesn't have DecimalConstant attribute");
      }
    }  
    
    // Read only
    checkConstant(typeof(Literals));
    checkConstant(typeof(QualifiedLiterals));
    
    // Decimal
    checkReadOnly(typeof(Decimals));
    checkReadOnly(typeof(QualifiedDecimals));
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/
