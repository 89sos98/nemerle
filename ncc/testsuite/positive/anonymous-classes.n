// REFERENCE: anonymous-classes-lib

using System.Console;
using Nemerle.Extensions;

module Program {

    Main() : void {
        IfaceImpl();
        Trivial();
        Equality();
        FieldAccess();
    }
    
    IfaceImpl() : void {
        def _ : IAnonymous = new (a = "qwerwqr");
    }
    
    Trivial() : void {
        // local
        when(new() == new []())
            WriteLine("triv_loc_1: OK");
        when(new() != new (a = 10))
            WriteLine("triv_loc_2: OK");

        // external
        when(new() == Lib.GetEmpty())
            WriteLine("triv_ext_1: OK");
        when(new(a = 10) != Lib.GetEmpty())
            WriteLine("triv_ext_2: OK");
        when(Lib.GetEmpty().Equals(Lib.GetEmpty()))
            WriteLine("triv_ext_3: OK");
    }
    
    Equality() : void {
        // local eq 1
        def o1 = new (a = 10, b = "qwr");
        def o2 = new [a, b] (10, "qwr");
        when(o1 == o2)
            WriteLine("eq_loc_1: OK");
            
        // local eq 2
        def t = (10, "qwr");
        def o3 = new [x, y](t);
        when(o1 != (o3 : IAnonymous))
            WriteLine("eq_loc_2: OK");

        // external eq 1
        def e1 : IAnonymous = Lib.GetObject(10, "qwr");
        def e2 : IAnonymous = Lib.GetObject2(10, "qwr");
        when(e1.Equals(e2))
            WriteLine("eq_ext_1: OK");
        
        // external eq 2
        when(e1 == o1)
            WriteLine("eq_ext_2: OK");
            
        // external eq 3
        when(e1 != o3)
            WriteLine("eq_ext_3: OK");
    }
    
    FieldAccess() : void {
        // local
        def o1 = new (a = 10); 
        def o2 = new [a] (10);
        when(o1.a == o2.a)
            WriteLine("field_loc_1: OK");
            
        // external check field existance
        def e1 = Lib.GetObject(10, "qwr");
        when(e1.GetFields().Contains("a"))
            WriteLine("field_ext_1: OK");
        
        // accessing field
        when(10 == e1["a"] :> int)
            WriteLine("field_ext_2: OK");
            
        // accessing non-existed field
        when(!e1.GetFields().Contains("bla") && null == e1["bla"])
            WriteLine("field_ext_3: OK");
    }

}

/*
BEGIN-OUTPUT
triv_loc_1: OK
triv_loc_2: OK
triv_ext_1: OK
triv_ext_2: OK
triv_ext_3: OK
eq_loc_1: OK
eq_loc_2: OK
eq_ext_1: OK
eq_ext_2: OK
eq_ext_3: OK
field_loc_1: OK
field_ext_1: OK
field_ext_2: OK
field_ext_3: OK
END-OUTPUT
*/