#pragma indent

namespace Nemerle.Aop.Helper
    public variant PatternFragment['a]
        | Gap
            public override ToString(): string
                ".."
        | Fragment
            elem: 'a
            public override ToString(): string
                elem.ToString()

    public module GapMatching
        
        public Match['a,'b](pattern: list[PatternFragment['a]], word: LazyList['b], f: 'a * 'b -> bool): bool
            Match'(pattern,word,fun(x,(y,_)) {(f(x,y),None())}).IsSome

        public Match' ['a,'b,'c](pattern: list[PatternFragment['a]], word: LazyList['b], f: 'a * ('b * int) -> bool*option['c]): option[list['c]]
            Match''(pattern,LazyList.Zip(word,LazyList.IntStream(1)),f)

        private Match'' ['a,'b,'c](pattern: list[PatternFragment['a]], word: LazyList['b*int], f: 'a * ('b * int) -> bool*option['c]): option[list['c]]
            match(pattern,word)
                | ([],Nil) => Some([])
                | ([Gap],_) => Some([]) //must be for the sake of Nil
                | (Gap::tail as gpattern,Cons(_,ltail) as word) =>
                    match(Match''(tail,word,f))
                        | Some as res => res
                        | None => Match''(gpattern,ltail,f)
                | (Fragment(pattern)::rest, Cons(elem,word_rest)) =>
                    match(f(pattern,elem))
                        | (true,x) =>
                            match (Match''(rest,word_rest,f))
                                | Some(xs) => Some(x.Map(_::xs).WithDefault(xs))
                                | None() => None()
                        | (false,_) =>
                            None()
                | _ => None()
