// xml
// Top-down (LL) parser

using System;
using System.Collections;
using System.Text;
using System.Xml;
// using System.Xml.XPath;
using Nemerle.Assertions;


module NemerleDocXml
{

  _info () : void
  {
        Console.WriteLine("Typ:" + cursor.NodeType.ToString() + " nazwa: " + cursor.Name + 
        " atrybut: " + (if (cursor.AttributeCount > 0) cursor[0] else "") +
        " val: " + cursor.Value + " line:" + cursor.LineNumber.ToString())
  }

  /// <summary>hygienic tests</summary>
  StartTag(name : string) : void
  {
    def error = String.Format("Open tag <{0}> expected, line: {1}", name, cursor.LineNumber);
    assert(cursor.NodeType == XmlNodeType.Element && cursor.Name.Equals(name), error);  
  }
  
  SkipStartTag(name : string) : void
  {
    def error = String.Format("Open tag <{0}> expected, line: {1}", name, cursor.LineNumber);
    assert(cursor.NodeType == XmlNodeType.Element && cursor.Name.Equals(name), error);  
    _ = cursor.Read()
  }
  
  SkipEndTag(name : string) : void
  {
    def error = String.Format("Closing tag </{0}> expected, line: {1}", name, cursor.LineNumber);
    assert(cursor.NodeType == XmlNodeType.EndElement && cursor.Name.Equals(name), error);
    _ = cursor.Read();
  }
  
  readText () : string
  {
    mutable res = "";
    when (cursor.NodeType == XmlNodeType.Text)
    {
      res = cursor.Value;
      _ = cursor.Read()
    }
    res
  }
  
  isOpenTag(name : string) : bool
  {
    cursor.NodeType == XmlNodeType.Element && cursor.Name.Equals(name)
  }
  
  isEndTag(name : string) : bool
  {
    cursor.NodeType == XmlNodeType.EndElement && cursor.Name.Equals(name);
  }
  
  // ---------------------------
  mutable cursor : XmlTextReader;
  mutable tree : DataTree;
  
  paramTag () : void
  {
    mutable res = "";
    res = cursor[0];
    SkipStartTag("param");
    res += ": " + readText();
    tree.AddParam(res);
    SkipEndTag("param");  
  }
    
  /// <summary>
  /// Why summary is doubly quoted???? Why?
  /// </summary>
  summaryTag() : void
  {
    SkipStartTag("summary");
    
    match ((cursor.NodeType, cursor.Name)) {
      | (XmlNodeType.Element, "summary") =>
          SkipStartTag("summary");
          tree.AddComment(readText());
          SkipEndTag("summary");
          when (isOpenTag("param"))
                    paramTag ();
          when (isEndTag("summary")) SkipEndTag("summary");
      | (XmlNodeType.Text, _ ) =>
          tree.AddComment(readText());
          while (!isEndTag("summary"))
          {
              when (isOpenTag("param"))
                      paramTag();
              when (isOpenTag("returns"))
              {
                SkipStartTag("returns");
                tree.AddReturn(readText());
                SkipEndTag("returns");
              }
          }
          SkipEndTag("summary");
          
          when (isOpenTag("remarks")) {
            SkipStartTag("remarks");
            tree.AddRemark(readText());
            SkipEndTag("remarks");
          }
      | _ => throw Exception("Not implemented " + cursor.LineNumber.ToString());
    }
  }
  
  
  
  memberTag() : void
  {
    StartTag("member");
    // Info();
    tree.AddItem(cursor[0]);
    if (cursor.IsEmptyElement)
    {
      _ = cursor.Read();
    }
    else {
      _ = cursor.Read();
      summaryTag();
      SkipEndTag("member");
    }
  }
  
  membersTag() : void
  {
    SkipStartTag("members");
    while (isOpenTag("member"))
        memberTag();
    SkipEndTag("members");
  }
  
  nameTag() : void
  {
    SkipStartTag("name");
    _ = cursor.Read();
    SkipEndTag("name")
  }
  
  assemblyTag() : void
  {
    SkipStartTag("assembly");
    nameTag();
    SkipEndTag("assembly");
  }
  
  docTag() : void
  {
    SkipStartTag("doc");
    
    assemblyTag();
    // Info();
    membersTag();
    // Info();
    
    SkipEndTag("doc")
  }
  
  rootTag() : void
  {
    assert(cursor.NodeType == XmlNodeType.XmlDeclaration, "Oczekiwano znacznik <?xml>");
    when (cursor.Read())
        docTag();
  }


  public static Main(arg : array [ string ]) : void
  {
    tree = DataTree();
    foreach (file in arg)
    {
      when (file.EndsWith(".dll"))
        AssemblyAnalyzer.analyze(file, tree);
        
      when (file.EndsWith(".xml"))
      {
        cursor = XmlTextReader(file);
        cursor.WhitespaceHandling = WhitespaceHandling.None;
        _ = cursor.Read();
        rootTag();
      }
      
      tree.AddSource(file);
    }
    tree.indexPage();
    tree.infoPages();
  }

} // -- NemerleDocXml
