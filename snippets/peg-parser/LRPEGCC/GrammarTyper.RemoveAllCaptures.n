using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace LRPEGCC
{
  internal partial module GrammarTyper
  {
    public RemoveAllCaptures(rule : Rule) : Rule
    {
      | Capture(_, rule)                    => RemoveAllCaptures(rule);
      | Choice(rules)                       => Rule.Choice(rules.Map(RemoveAllCaptures))
      | Sequence(rules)                     => Rule.Sequence(rules.Map(RemoveAllCaptures))
      | RepeatMin(x, rule)                  => Rule.RepeatMin(x, RemoveAllCaptures(rule))
      | RepeatMinMax(min, max, rule)        => Rule.RepeatMinMax(min, max, RemoveAllCaptures(rule))
      | Not(rule)                           => Rule.Not(RemoveAllCaptures(rule))
      | And(rule)                           => Rule.And(RemoveAllCaptures(rule))
      | Scope(name, rule)                   => Rule.Scope(name, RemoveAllCaptures(rule))
      | Call | Chars | ExtensionPoint | Fsm => rule
    }

    public RemoveAllCaptures(grammar : Grammar) : Grammar
    {
      grammar.TransformRules(RemoveAllCaptures);
    }
  }
}
