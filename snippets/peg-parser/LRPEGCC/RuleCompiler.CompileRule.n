using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace LRPEGCC
{
  partial internal class RuleCompiler
  {
    public CompileRule(rule : Rule, grammar : Grammar) : PExpr
    {
      def compile(compiledRule : Rule) : PExpr
      {
      | Choice(rules)          =>
        def generate(_)
        {
        | [rule] => rule;
        | rule :: rules =>
          <[
            {
              def newPos = { $rule };
              if (newPos < 0)
              {
                $(generate(rules));
              }
              else
              {
                newPos;
              }
            }
          ]>
        | [] => throw ArgumentException();
        }
        generate(rules.Map(compile));

      | Sequence(rules)        =>
        def generate(_)
        {
        | [rule] => rule;
        | rule :: rules =>
          <[
            {
              def pos = { $rule };
              if (pos >= 0)
              {
                $(generate(rules));
              }
              else
              {
                -1;
              }
            }
          ]>
        | [] =>  <[ pos ]>;
        }
        generate(rules.Map(compile));

      | RepeatMin(0, rule)    =>
        def rule = compile(rule);
        <[
          {
            def rep(pos)
            {
              def newPos = { $rule };
              if (newPos >= 0)
                rep(newPos);
              else
                pos;
            }
            rep(pos);
          }
        ]>

      | RepeatMin(minCount, rule)    =>
        def rule = compile(rule);
        <[
          {
            def rep(count, pos)
            {
              def newPos = { $rule };
              if (newPos >= 0)
                rep(count + 1, newPos);
              else if (count >= $(minCount : int))
                pos;
              else
                -1;
            }
            rep(0, pos);
          }
        ]>

      | RepeatMinMax(0, 1, rule)    =>
        def rule = compile(rule);
        <[
          {
            def newPos = { $rule };
            if (newPos >= 0)
              newPos;
            else
              pos;
          }
        ]>

      | RepeatMinMax(minCount, maxCount, rule)    =>
        def rule = compile(rule);
        <[
          {
            def rep(count, pos)
            {
              if (count == $(maxCount : int))
                pos
              else
              {
                def newPos = { $rule };
                if (newPos >= 0)
                  rep(count + 1, newPos);
                else if (count >= $(minCount : int))
                  pos;
                else
                  -1;
               }
            }
            rep(0, pos);
          }
        ]>

      | And(rule)              =>
        def rule = compile(rule);
        <[
          {
            def newPos = { $rule };
            if (newPos >= 0) pos else -1;
          }
        ]>

      | Not(rule)              =>
        def rule = compile(rule);
        <[
          {
            def newPos = { $rule };
            if (newPos < 0) pos else -1;
          }
        ]>

      | Call(name)             =>
        def id    = grammar.GetId(name);
        def count = grammar.Count;
        def posIdCalc = if (id > 0)
          <[ pos * $(count : int) + $(id : int) ]>;
        else
          <[ pos * $(count : int) ]>;
        <[
          {
            /*def posId = $posIdCalc;
            mutable cachedPos;
            if ($(CacheName : dyn).TryGetValue(posId, out cachedPos))
            {
              cachedPos;
            }
            else
            {
              def pos = */$(DecorateRuleName(name) : dyn)(pos);/*
              $(CacheName : dyn).Add(posId, pos);
              pos;
            }*/
          }
        ]>
        //<[$(DecorateRuleName(name) : dyn)(pos)]>

      | Chars(chars)           =>
        def len = chars.Length;
        def testChar(rset)
        {
          def cmp(range)
          {
            if (range.from == range.to)
              <[ c == ($(range.from : char)) ]>
            else
              <[ ($(range.from : char) <= c && c <= $(range.to : char)) ]>
          }
          def gen(ranges)
          {
          | [range] => cmp(range);
          | range :: ranges => <[ $(cmp(range)) || $(gen(ranges))]>
          | [] => throw ArgumentException();
          }
          gen(rset.Ranges);
        }
        def generate(_)
        {
        | [ch] =>
          <[
            def c = GetChar(pos);
            if ($(testChar(ch))) pos + 1 else -1;
          ]>
        | ch :: chars =>
          <[
            {
              def c = GetChar(pos);
              if ($(testChar(ch)))
              {
                def pos = pos + 1;
                $(generate(chars));
              }
              else
              {
                -1;
              }
            }
          ]>
        | [] => throw ArgumentException();
        }
        def check = if (len > 1)
          <[pos + $((len - 1) : int)]>;
        else
          <[pos]>;
        <[
          {
            if (CheckTextLength($check))
            {
              $(generate(chars))
            }
            else
            {
              -1
            }
          }
        ]>

      | Capture(name, _, _, rule)
      | CaptureNamedTerminalSymbol(name, rule) =>               
        
        def tokenExpr = match(compiledRule)
        {
        | Capture as c =>  
            def method = GetHandlerMethod(c);
            <[
              {
                def token = Token.NonTerminalToken(pos, newPos, _text, $(name : string));
                token.ComputedValue = $(method);
                token;
              }
            ]>;
        |  CaptureNamedTerminalSymbol =>
            <[Token.TerminalToken(pos, newPos, _text, $(name : string));]>;     
        }
        
        <[
          {          
            def l = _capturedTokens;
            _capturedTokens = [];
            
            def newPos = { $(compile(rule)) };    
          
            if(newPos < 0)
            {      
              _capturedTokens = l;     
            }
            else
            {
              def t = $(tokenExpr);                
              
              // TODO: optimize list 
              _capturedTokens = l + [t];     
            }     
            newPos
          }
        ]>
        
      | ExtensionPoint         => throw NotImplementedException();
      }
      compile(rule);
    }
  }
}
