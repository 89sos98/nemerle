using System;
using Gtk;

class NMenuItem : MenuItem
{
	public name : string;
	
	public this(l : string) 
	{
		base(l);
		name <- l;		
	}
	public this(l : string, e : object * EventArgs -> void) 
	{
		base(l);
		name <- l;		
		this.Activated += e;
	}
	public SubmenuList : list <NMenuItem>
	{ 
		set
		{ 
			def sub = Menu();
                        foreach (x : NMenuItem in value)
                          sub.Append(x);
			this.Submenu <- sub;
		}
	}
}

class MainWindow : Window
{
	e : TextView;
	
	public this()
	{
		base("Very Simple Editor");
		SetSizeRequest(300,200);
		this.DeleteEvent += fun (_, _) { Application.Quit (); };

		def m = MenuBar();
		def mi = NMenuItem("File");
		mi.SubmenuList <- 
		[
			NMenuItem("Open", OnMenuFile),
			NMenuItem("Save as...", OnMenuFile)
		];
		m.Append(mi);		

		def s = ScrolledWindow();		
		e <- TextView();
		s.Add(e);
		
		def v = VBox();
		v.PackStart(m, false, false, 0u);
	        v.PackStart(s, true, true, 0u);
		Add(v);
		ShowAll();
		
	}
	OnMenuFile (i : object, _ : EventArgs) : void
	{
		def mi = (i:>NMenuItem);
		def fs = FileSelection(mi.name);
		
		when (fs.Run()==(ResponseType.Ok:>int)) match(mi.name)
		{
			| "Open" =>
				e.Buffer.Text <- IO.StreamReader(fs.Filename).ReadToEnd();
			| "Save as..." =>
				def s = IO.StreamWriter(fs.Filename);
				s.Write(e.Buffer.Text);
				s.Close();
			| _ => ();
		};
		fs.Hide();
	}
}

public module main
{ 
	public Main() : void
	{
		Application.Init();
		def _ = MainWindow();
		Application.Run();
	}
}	
