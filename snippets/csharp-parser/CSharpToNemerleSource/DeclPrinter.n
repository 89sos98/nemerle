using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.IO;
using System.Text;

namespace Nemerle.Compiler
{

  public partial class DeclPrinter
  {

    PrintTop(td : TopDeclaration,remove_mods : NemerleAttributes = NemerleAttributes.None) : void
    {
      def print_extends(ext)
      {
        if (ext.IsEmpty()) "" else $": ..$ext"
      }
      match (td)
      {
        |Class(name=n,modifiers=mods,typarms=ty,t_extends=ext,decls=decls)=>
            def attr=print_attributes(mods);
            def (ty,cons)=print_typarms(ty);
            def ext=print_extends(ext);
            if (mods.mods %&& NemerleAttributes.Static) // если это модуль
            {
              def mods=print_modifiers(mods,remove_mods | NemerleAttributes.Static);
              Write($"$attr");
              Write($"$(mods)module $n$ty $ext$cons");
              WriteBlockTop(() => PrintClassBody(decls,NemerleAttributes.Static));
            } else
            {
              def mods=print_modifiers(mods,remove_mods);
              Write($"$attr");
              Write($"$(mods)class $n$ty $ext$cons");
              WriteBlockTop(() => PrintClassBody(decls));
            }
        |Interface(name=n,modifiers=mods,typarms=ty,
          t_extends=ext,methods=decls) => def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods | NemerleAttributes.Public);
            def (ty,cons)=print_typarms(ty);
            def ext=print_extends(ext);
            Write($"$attr");
            Write($"$(mods)interface $n$ty $ext$cons");
            WriteBlockTop(() => PrintClassBody(decls,NemerleAttributes.Public));
        |Alias(name=name,modifiers=mods,typarms=parms,ty=typ) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def (ty,cons)=print_typarms(parms);
            Write($"$attr");
            Write($"$(mods)type $name$ty$cons=$typ;");
        |Delegate(name=_,modifiers=mods,typarms=parms,header=head) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def (_,cons)=print_typarms(parms);
            def head=head.ToString().Trim();
            Write($"$attr");
            Write($"$(mods)delegate $head$cons;");
        |Enum(name=name,modifiers=mods,t_extends=ext,decls=decls) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            def ext=print_extends(ext);
            Write($"$attr");
            Write($"$(mods)enum $name $ext");
            WriteBlockTop(() => PrintClassBody(decls));
        |Macro(name=_,header=head,synt=synt,expr=body) =>
            Write($"macro $head\n");
            when (!synt.IsEmpty()) Write($"syntax (..$synt)");
            print_fun_body(body);
        |Variant(name=n,modifiers=mods,typarms=ty,t_extends=ext,decls=decls) =>
            def attr=print_attributes(mods);
            def (ty,cons)=print_typarms(ty);
            def ext=print_extends(ext);
            def mods=print_modifiers(mods,remove_mods);
            Write($"$attr");
            Write($"$(mods)variant $n$ty $ext$cons");
            WriteBlockTop(() => PrintClassBody(decls));
        |VariantOption(name=n,decls=decls,modifiers=mods) =>
            def attr=print_attributes(mods);
            Write($"$attr");
            Write($"|$n");
            // TODO: печать на одной строке
            when (!decls.IsEmpty()) WriteBlock(() => PrintClassBody(decls));
        |_ => ()
      }
      is_on_one_line=true;
      //when (!(td is TopDeclaration.VariantOption)) Write("\n\n");
    }

    print_attributes(mods : Modifiers) : string
    {
        def attrs=mods.custom_attrs+mods.GetMacroAttributes();
        if (attrs.IsEmpty()) "" else $"$attrs\n"
    }

    print_fun_body(expr : PExpr) : void
    {
          // помещаем в скобки если не в скобках
      def expr=if (expr is PExpr.Sequence) expr else <[ {$expr} ]>;
      def typer=if (compiler!=null)
                 {
                   def ty=compiler.ComponentsFactory.CreateTyper(compiler.CoreEnv);
                   Some(ty)
                 }  else None();
      def str=PrettyPrint.SprintExpr(typer, expr);
      Write(str);
    }

    print_typarms(ty : Typarms) : string * string // T * constraints
    {
      |Typarms where (tyvars=ty,constraints=cons) =>
          def cons=cons.Map(x => $"where $(x.tyvar) : $(x.ty)");
          if (ty.IsEmpty()) ("","") else ($"$ty",$<# ..$(cons;" ")#>)
    }

    print_modifiers(mods : Modifiers,remove_mods : NemerleAttributes=NemerleAttributes.None) : string
    {
      def mods=mods.mods;

      def get_values(mod)
      {
        mod.ToString().SplitToList(',',' ');
      }
    //AccessModifiers = 0x20b,
    //CompilerMutable = 0x40000,
    //Extern = 0x20000,
    //Macro = 0x2000,
    //Mutable = 0x100,
    //New = 4,
    //None = 0,
    //Override = 0x400,
    //OverrideModifiers = 0x430,
    //SpecialName = 0x8000,
    //Virtual = 0x20,
    //VirtualityModifiers = 0x434,
    //Volatile = 0x4000
      def mods=mods & ~remove_mods;
      def vals=get_values(mods);
      def names=vals.Map(_.ToLower());
      if (names.IsEmpty()) "" else
      {
        match (names)
        {
          |["none"] => ""
          | _ => $<#..$(names;" ") #>
        }
      }
    }

    PrintProperty(mem : ClassMember.Property,remove_mods : NemerleAttributes) : void
    {
      | (Property(name=n,modifiers=mods,getter = getter, setter = setter,returnType=ty),_) =>

          def is_auto()
          {
            def is_abstract(func)
            {
              |Some(ClassMember.Function(body = FunBody.Abstract))
              |None => true
              |_ => false
            }

            is_abstract(getter) && is_abstract(setter)
          }

          def print(accessor, acc_type)
          {
            | (Some(ClassMember.Function(body = FunBody.Parsed(expr),modifiers=mods)),_) =>
                def mods=print_modifiers(mods,NemerleAttributes.Public);
                Write($"$mods$acc_type");
                print_fun_body(expr);
            | _ => ()
          }

          def print_auto(accessor, acc_type)
          {
            | (Some(ClassMember.Function(body = FunBody.Abstract,modifiers=mods)),_) =>
                def mods=print_modifiers(mods,NemerleAttributes.Public);
                $"$mods$acc_type;"
            | _ => ""
          }

          def func()
          {
            print(getter,"get");
            when (setter.IsSome) Write("\n");
            print(setter,"set");
          }

          def attr=print_attributes(mods);
          def mods=print_modifiers(mods,remove_mods);
          Write($"$attr");
          if (is_auto())
          {
            def get=print_auto(getter,"get");
            def set=print_auto(getter,"set");
            Write($"$mods$n : $ty {$get$set}");
          } else
          {
            Write($"$mods$n : $ty");
            WriteBlock(func);
          }
    }

    PrintEvent(mem : ClassMember) : void
    {
        |Event(add=add,remove=rem) =>

          def print(accessor, acc_type)
          {
            | (ClassMember.Function(body = FunBody.Parsed(expr)),_) =>
                Write($"$acc_type");
                print_fun_body(expr);

            | _ => ()
          }
             print(add,"add");
             Write("\n");
             print(rem,"remove");

        | _ => ()
    }

    public PrintClassMember (mem : ClassMember,remove_mods : NemerleAttributes=NemerleAttributes.None) : void
    {

      match (mem)
      {
        | Function (modifiers=mods,header=PFunHeader where (Parameters=pars,TypeParameters=ty) as head,body = bd) as f with name=f.Name =>
            match (bd)
            {
                // конструктор
              | Parsed (expr) when (name == ".ctor" || name == ".cctor") =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  Write($"$attr");
                  Write($"$(mods)this(..$pars)");
                  print_fun_body(expr);
                // обычная функция
              | Parsed (expr) =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  def (_,cons)=print_typarms(ty);
                  Write($"$attr");
                  Write($"$mods$head$cons");
                  print_fun_body(expr);
                // абстрактная (без тела)
              | Abstract =>
                  def attr=print_attributes(mods);
                  def mods=print_modifiers(mods,remove_mods);
                  def (_,cons)=print_typarms(ty);
                  Write($"$attr");
                  Write($"$mods$head$cons;"); // только заголовок
              |_ => ()
            }

        | Property as p => PrintProperty(p,remove_mods)
        | TypeDeclaration(td) => PrintTop(td,remove_mods)
        | Field(name=n,modifiers=mods,ty=ty) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            Write($"$attr");
            Write($"$mods$n : $ty;");
        | Event(name=n,modifiers=mods,ty=ty,add=a) =>
            def attr=print_attributes(mods);
            def mods=print_modifiers(mods,remove_mods);
            Write($"$attr");
            Write($"$(mods)event $n : $ty");
            if (a.body is FunBody.Parsed) WriteBlock(() => PrintEvent(mem)) else writer.Write(";");
        | EnumOption(name=n,value=val) =>
            Write($"|$n");
            val.Iter(x => writer.Write($" = $x"));
        | _ => ()
      }
    }
  }
}
