using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using LRPEGCC;

namespace Parsers
{
  //type LoopTokens = Token[int] * Token[int] * Token[int].NonTerminalToken;
  
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {  
    any                   = ['\u0000'..'\uFFFF'];
    digit                 = ['0'..'9']+;
    spaces                = ' '*;
    
    num             : int = digit spaces;
    unaryMinus      : int = '-' spaces simplExpr;
    parenthesesExpr : int = '(' spaces sumOrSub ')' spaces;
    simplExpr       : int = num / parenthesesExpr / unaryMinus;
    mulOrDiv        : int = simplExpr (('*' / '/') spaces simplExpr)*;
    sumOrSub        : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    start           : int = spaces sumOrSub !any;
  })]
  public class CalcParser : ParserBase[int]
  {    
//Requred for parser --------------------------------------------------------------------------------------------    
    
    //TODO: beter readability of tokens
    private num(digit : Token[int].TerminalToken, _ : Token[int].TerminalToken) : int
    {
      int.Parse(digit.Data)
    }
    
    private unaryMinus(_ : Token[int].TerminalToken, _ : Token[int].TerminalToken, se : Token[int].NonTerminalToken) : int
    {
      -se.ComputedValue
    }
    
    private parenthesesExpr(_ : Token[int].TerminalToken, _ : Token[int].TerminalToken, se : Token[int].NonTerminalToken, _ : Token[int].TerminalToken, _ : Token[int].TerminalToken) : int
    {
      se.ComputedValue
    }
    
    // TODO: autogenerate this block
    private simplExpr(se : Token[int].NonTerminalToken) : int
    {
      se.ComputedValue
    }
    // TODO: end todo
    
    private start(_ : Token[int].TerminalToken, se : Token[int].NonTerminalToken, _ : Token[int].TerminalToken) : int
    {
      se.ComputedValue
    }
    
    private mulOrDiv(se : Token[int].NonTerminalToken, lst : List[Token[int] * Token[int] * Token[int].NonTerminalToken]) : int
    {
      DoOpHelper(se, lst)
    }
    
    private sumOrSub(se : Token[int].NonTerminalToken, lst : List[Token[int] * Token[int] * Token[int].NonTerminalToken]) : int
    { 
      DoOpHelper(se, lst)
    }
     
//End requred for parser --------------------------------------------------------------------------------------------    
 
    public this(text : string)
    {
        base(text);
    }
    
    private DoOpHelper(se : Token[int].NonTerminalToken, lst : List[Token[int] * Token[int] * Token[int].NonTerminalToken]) : int
    {
      def doOp(x : int, y : int, op : string) : int
      {
        match (op)
        {
          | ("*") => x * y
          | ("/") => x / y
          | ("+") => x + y
          | ("-") => x - y
          | _     => assert(false);
        }
      }
           
      mutable r = se.ComputedValue;
      
      foreach ((opTok, _, secondTok) in lst)
        r = doOp(r, secondTok.ComputedValue, opTok.Data);
    
      r  
    }
  }
}
