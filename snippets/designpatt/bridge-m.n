// REFERENCE: Nemerle.Compiler

using Nemerle.Compiler;
using Nemerle.Collections;

namespace DesignPatterns
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                       Nemerle.MacroTargets.Field)]
  macro Bridge (t : TypeBuilder, f : ParsedField, params forwards : array [PExpr])
  {
    // auxiliary function to transform expressions to parameters
    def transform_parms (exprs) {
      List.Map (exprs, fun (e) {
        | <[ $(n : name) : $ty ]> => <[ parameter: $(n : name) : $ty ]>
        | _ => Message.FatalError ("incorrect parameter shape")
      })
    }
    
    foreach (definition in forwards)
      match (definition) {
        | <[ ($(from : name), $(to : name)) ]>  =>
          t.Define (<[ decl:
            public virtual $(from : name) () : void {
              this.$(f.ParsedName : name).$(to : name) ()
            }
          ]>)

        | <[ ($(from : name) (..$parms), $(to : name)) ]>  =>
          t.Define (<[ decl:
            public virtual $(from : name) (..$(transform_parms (parms))) : void {
              this.$(f.ParsedName : name).$(to : name) (..$parms)
            }
          ]>)
          
        | _ => Message.Error ("expected `(current_method, field_method)' pairs in parameters")
      }
    } 
  }
}
