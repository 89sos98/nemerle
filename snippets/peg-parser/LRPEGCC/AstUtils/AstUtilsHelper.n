using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Macros;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace LRPEGCC.AstUtils
{
  module AstUtilsHelper
  {
    public InferAstTypeAndMakeResult(typer : Typer, ast : PT.PExpr, getDefaultResult : void -> PT.PExpr, makeResult : TT.TExpr -> PT.PExpr) : PT.PExpr
    {
      if(typer.Manager.IsIntelliSenseMode)
        getDefaultResult()
      else
      {
        def tAst = typer.TypeExpr(ast);
        match(tAst.Type.Hint)
        {
          | Some(_) => makeResult(tAst)
          | _ =>
            typer.DelayMacro(lastChance =>
              match(tAst.Type.Hint)
              {
                | Some(_) =>
                  Some(makeResult(tAst))
                | _ when lastChance =>
                  Message.Error(ast.Location, "cant infer type of AST");
                  Some(getDefaultResult())
                | _ =>
                  None()
              })
        }
      }
    }
  }
}