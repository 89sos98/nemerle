open Nemerle.Compiler;
open Nemerle.Compiler.Env;
open Nemerle.Collections;


namespace Nemerle.Compiler {

class Local_decl {} //FIXME

class Env 
  {
    value ref globals : String_map (list (Class_member));

    field ref open_namespaces : list (string);
    field ref current_namespace : string;
    field ref locals : String_map (Local_decl);
   
    fun add_global (pref : string, m : Class_member) : void =
      let fullname = pref + m#name in
      letfun allow_overload (n : Class_member) : bool =
        match (n, m) with [
          | (M_function {fun_kind = FK_method}, 
             M_function {fun_kind = FK_method}) => true
          | (M_function {fun_kind = FK_function}, 
             M_function {fun_kind = FK_function}) => true
          | (M_function {fun_kind = ?k1}, 
             M_function {fun_kind = ?k2}) =>
               match (k1, k2) with [
                 | (FK_ctor, FK_ctor) => true
                 | (FK_ctor, FK_static_ctor) => true
                 | (FK_static_ctor, FK_ctor) => true
                 | (FK_static_ctor, FK_static_ctor) => true
                 | _ => false
               ]
          | _ => false
        ]
      in
      match globals#find (fullname) with [
        | Some (Cons (?x, ?xs)) =>
          if allow_overload (x) then
            globals <- globals#add(fullname, Cons (m, Cons (x, xs)))
          else
            Message.error (m#loc, "redefinition of `" + m#name + "'")
        | Some (Nil) =>
          raise ICE("empty list in env")
        | None =>
          globals <- globals#add(fullname, List.cons(m))
      ];

    method add_open (ns : string) : void =
      this#open_namespaces <- List.append (this#open_namespaces, List.cons (ns));
      
    method copy () : Env =
      let c = Env () in {
        c#open_namespaces <- this#open_namespaces;
        c#current_namespace <- this#current_namespace;
        c#locals <- this#locals;
        c
      };

    method this () {}
  }


(*
pass 1:
  Walk through Top_decls, set env field for all global symbols, register
  all global symbols. Return list of Type_decls.
*)

} // ns
