#
# Copyright (c) 2003 The University of Wroclaw.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    3. The name of the University may not be used to endorse or promote
#       products derived from this software without specific prior
#       written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

expr:
	STRING
		String constructor.
	"(" ")"
		Unit value.
	ID
		Value reference.
	"{" { [ "ref" ] ID "=" ID ";" } "}"
		Object (record) construction.
	ID "." ID
		Object field access.
	ID ".*" ID
		Object field access, but second ID is value holding string that
		is field name. This is going to be needed only in tymatch translation.
	ID "(" [ ID { "," ID } ] ")"
		Function call.
	ID "." ID "<-" ID
		Assigment to object member.
	ID ".*" ID "<-" ID
		Ditto, but indirect access.
	"let" ID "=" expr "in" expr
		Bind name to given value.
	"fun" fun_def { "and" fun_def } "in" expr
		Bind functions to given names. Functions can be mutually recursive.
	"match" ID "with" "[" { "|" STRING "->" expr } "|" "_" "->" expr "]"
		Check which of specified values ID has.
	"raise" ID
		Raise exception with value specified by ID (which is name bound in "let",
		not exception constructor).
	"try" expr "catch" "(" "?" ID ")" expr
		Try compute expression. If exception is raised -- catch it.
		Exception value is then bound to specified ID.

fun_def:
	ID "(" [ ID { "," ID } ] ")" "=" expr
		Function definition.

# vim: ai ft=conf ts=4
