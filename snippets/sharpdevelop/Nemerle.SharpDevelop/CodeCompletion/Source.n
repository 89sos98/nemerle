using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class Source : ISource {

        public this(context : EngineContext, item : FileProjectItem) {
            this.context = context;
            this.item = item;
            this.file_index = Location.GetFileIndex(item.FileName);

            RefreshContent();
        }

        mutable content : ISource;

        [Accessor] context : EngineContext;

        [Accessor] item : FileProjectItem;

        [Accessor] file_index : int;

        mutable document : IDocument = null;

        internal Document : IDocument {
            get { document } 
            set {
                unless(ReferenceEquals(document, value)) {
                    document = value;
                    RefreshContent();
                }
            }
        }

        internal Declarations : array[TopDeclaration] {
            get;
            set;
        }

        private RefreshContent() : void {
            content =
                if(null == document)
                    FileNemerleSource(file_index)
                else
                    DocumentNemerleSource(this, document);
        }

        mutable update_compile_unit_async : AsyncRequest = null;

        internal UpdateCompileUnit() : void {
            when(null == update_compile_unit_async || update_compile_unit_async.IsCompleted) {
                update_compile_unit_async = context.Engine.BeginUpdateCompileUnit(this);
            }
        }

        public CompileUnit : CompileUnit {
            get { content.CompileUnit }
            set { content.CompileUnit = value }
        }
        
        public CurrentVersion : int {
            get { content.CurrentVersion }
        }
        
        public RelocationRequestsQueue : SCG.List[RelocationRequest] {
            get { content.RelocationRequestsQueue }
        }

        public LineCount : int { 
            get { content.LineCount }
        }

        public LockWrite() : void {
            content.LockWrite()
        }

        public UnlockWrite() : void {
            content.UnlockWrite()
        }

        public LockReadWrite() : void {
            content.LockReadWrite()
        }

        public UnlocReadkWrite() : void {
            content.UnlocReadkWrite()
        }

        public GetTextCurrentVersionAndFileIndex() : string * int * int {
            LoggingService.Info(Location.GetFileName(file_index));
            content.GetTextCurrentVersionAndFileIndex()
        }

        public SetRegions(regions : SCG.IList[RegionInfo], sourceVersion : int) : void {
            content.SetRegions(regions, sourceVersion)
        }

        public SetTopDeclarations(topDeclarations : array[TopDeclaration]) : void {
            content.SetTopDeclarations(topDeclarations);
            Declarations = topDeclarations;
        }

        public GetText() : string {
            content.GetText()
        }

        public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string {
            content.GetRegion(lineStart, colStart, lineEnd, colEnd)
        }

        public GetRegion(location : Location) : string {
            content.GetRegion(location)
        }

        public GetLine(line : int) : string {
            content.GetLine(line)
        }

        public GetPositionOfLineIndex(line : int, col : int) : int {
            content.GetPositionOfLineIndex(line, col)
        }

        public GetLineIndexOfPosition(pos : int) : int * int {
            content.GetLineIndexOfPosition(pos)
        }

    }

}