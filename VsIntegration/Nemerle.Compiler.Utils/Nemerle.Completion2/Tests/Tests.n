using System.Console;
using System.IO;
using System.Reflection;
using System.Text.RegularExpressions;

using NUnit.Framework;

using Nemerle.Text;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Utility;

namespace Tests
{
  [TestFixture]
  public partial class Test1
  {
    [Test]
    public GetMethodTip() : void
    {
      def test(testNumber, expectedCount, expected)
      {
        def file = FileMethodTip;
        def (line, col) = ReadLocation(file, testNumber);
        def result : MethodTipInfo = _project.GetMethodTip(file, line, col, GetSource(file));

        Assert.IsNotNull(result, "result is null");
        
        def count = result.GetCount();

        if (expectedCount > 0)
          Assert.AreEqual(count, expectedCount, $"expected $expectedCount overloads, but found $count");
        else
          Assert.IsTrue(count > 0, "expected everload count > 0");

        foreach (i in [0 .. count - 1])
          Assert.AreEqual(result.GetName(i), expected, "expected overload name $expected, but found $(result.GetName(i))");
      }

      test("CompareTo_inField",                     0, "CompareTo");
      test("CompareTo_onString",                    0, "CompareTo");
      test("CompareTo_inMatchWhen_onDelayedTyVar",  0, "CompareTo");
    }

    [Test]
    public QuickTip() : void
    {
      def file = FileQuickTip2;

      def test(testNumber, len, expected)
      {
        def (line, col) = ReadLocation(file, testNumber);
        def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

        Assert.IsNotNull(result, "result is null");

        def line0 = result.Text.Split('\n')[0];

        if (expected[0] == '-')
          Assert.IsTrue(line0.IndexOf(expected.Substring(1)) < 0);
        else
          Assert.IsTrue(line0.IndexOf(expected) >= 0);

        when (len > 0)
          Assert.AreEqual(len, result.Location.EndColumn - result.Location.Column);
      }

      test("008",  3, "arr");
      test("038",  6, "StrExt");
      test("037",  3, "Int32");
      test("036",  7, "foreach");
      test("035",  3, "bbb");
      test("034",  2, "ex");
      test("033",  8, "ToString");
      test("032",  3, "aaa");
      test("031",  3, "arr");
      test("030",  3, "bbb");
      test("029",  1, "y");
      test("028",  1, "x");
      test("027", 10, "array[int]");
      test("026",  6, "fromTy");
      test("025",  2, "+=");
      test("024",  3, "Op1");
      test("023",  6, "String");
      test("022",  1, "op_Addition");
      test("021",  3, "op2");
      test("020",  3, "Map");
      test("019",  5, "parms");
      test("018",  9, "Substring");
      test("017",  3, "foo");
      test("016",  3, "Op1");
      test("015",  3, "chk");
      test("014",  2, "xx");
      test("013",  2, "xx");
      test("012",  3, "ppp");
      test("011",  2, "ch");
      test("010",  3, "iii");
      test("009",  3, "Int32");
      test("007",  0, "_iii");
      test("006",  9, "WriteLine");
      test("005",  0, "bar");
      test("004",  0, "Length");
      test("003",  0, "Nemerle.Core.if");
      test("002",  0, "WriteLine");
      test("001",  0, "ReadLine");
    }

    [Test]
    public Complete_in_return_type_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 1");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result[1].DisplayName, "Microsoft");
    }

    [Test]
    public Complete_in_return_type_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 2");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
      Assert.AreEqual(result[0].DisplayName, "void");
    }

    [Test]
    public Complete_in_return_type_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 3");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
      Assert.AreEqual(result[0].DisplayName, "int");
    }

    [Test]
    public Complete_in_return_type_4() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in return type 4");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 4);
      Assert.AreEqual(result[0].DisplayName, "Int16");
    }

    [Test]
    public Complete_in_match_variant_6() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 6");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
      Assert.AreEqual(result[0].ToString(), "_");
    }

    [Test]
    public Complete_in_match_variant_5() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 5");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 2);
      Assert.AreEqual(result[0].ToString(), "_");
      Assert.AreEqual(result[1].ToString(), "TestVariant2");
    }

    [Test]
    public Complete_in_match_variant_4() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 4");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 2);
      Assert.AreEqual(result[0].ToString(), "_");
      Assert.AreEqual(result[1].ToString(), "CValue");
    }

    [Test]
    public Complete_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete 2");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 10);
    }

    [Test]
    public Complete_empty() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete empty");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 10);
    }

    [Test]
    public Complete_System_Collections_Generic_List__Collections() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete System.Collections.Generic.List/Collections");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
    }

    [Test]
    public Complete_namespace_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete namespace 2");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 1);
    }

    [Test]
    public Complete_Complete_expr() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete expr");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(result.Length, 18);
    }

    [Test]
    public Complete_ExtensionMethod_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "ExtensionMethod_1");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(8, result.Length, "Expected 8 elements.");
    }

   // [Test]
   // public Check_partial_region() : void
   // {
   //   mutable nRegions = 0;

   //   def manager  = TestSourceTextManager(FilePath3);
			//def compUnit = _engine.ParseCompileUnit(manager);
			//def topDecls = compUnit.TopNamespace.Decls;
			//def regions  = compUnit.Regions;
			//
   //   Checker.Check(manager, (_, _, _) => nRegions++, topDecls, regions);

   //   Assert.AreEqual(2, nRegions);
   // }

   // //[Test]
   // public Check_region_location() : void
   // {
   //   def manager  = TestSourceTextManager(FilePath1);
			//def compUnit = _engine.ParseCompileUnit(manager);
			//def topDecls = compUnit.TopNamespace.Decls;
			//def regions  = compUnit.Regions;

   //   Checker.Check(
   //         manager,
   //         fun(loc, _, _)
   //         {
   //           when (loc.Line == loc.EndLine)
   //             Assert.IsFalse(loc.Column > loc.EndColumn)
   //         },
   //         topDecls, regions);
   // }

    [Test]
    public Complete_enum() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete enum");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(32, result.Length, "Expected 32 elements."); //VladD2: этот тест выдает слишком много элементов. Позже надо будет разобраться.
    }

    [Test]
    public SimpleSourceTextManager_GetLine() : void
    {
      def file = FilePath1;
      def (line, _) = ReadLocation(file, "Start block 1");
      def txtMan = GetSource(file);

      def result = txtMan.GetLine(line);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, "          /*Start block 1:-0*/;");
    }

    [Test]
    public SimpleSourceTextManager_GetLine_EOF() : void
    {
      def file = FilePath1;
      def (line, _) = ReadLocation(file, "EOF");
      def txtMan = GetSource(file);

      def result = txtMan.GetLine(line);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, "}/*EOF:0*/");
    }

    [Test]
    public SimpleSourceTextManager_GetLineAndColumn() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Start block 1");
      def txtMan = GetSource(file);

      def pos = txtMan.GetPositionOfLineIndex(line, col);
      def (line2, col2) = txtMan.GetLineIndexOfPosition(pos);

      Assert.AreEqual(line2, line);
      Assert.AreEqual(col2,  col);
    }

    [Test]
    public SimpleSourceTextManager_GetRegion_block_1() : void
    {
      SimpleSourceTextManager_Start_block(1,
        @"/*Start block 1:-0*/;
          /*End block 1:0*/");
    }

    [Test]
    public SimpleSourceTextManager_GetRegion_block_2() : void
    {
      SimpleSourceTextManager_Start_block(2,
        @"/*Start block 2:-0*/;/*End block 2:0*/");
    }

    [Test]
    public SimpleSourceTextManager_GetRegion_block_3() : void
    {
      SimpleSourceTextManager_Start_block(3,
        @"/*Start block 3:-0*/;
          // Some code line...
          // Some code line...
          // Some code line...
          /*End block 3:0*/");
    }

    private SimpleSourceTextManager_Start_block(blockNum : int, testStr : string) : void
    {
      def testStr = testStr.Replace("\r\n", "\n");
      def file = FilePath1;
      def (line, col) = ReadLocation(file, $"Start block $blockNum");
      def (endLine, endCol) = ReadLocation(file, $"End block $blockNum");
      def txtMan = GetSource(file);

      def result = txtMan.GetRegion(line, col, endLine, endCol);
      def result = result.Replace("\r\n", "\n");

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result, testStr);
    }

    [Test]
    public Hint_on_return() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Hint on return");
      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual (result.Text.Split(array['\r', '\n'])[0], "macro Nemerle.Imperative.Return");
    }

    [Test]
    public Complete_GlabalNs_in_NestedNs() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete glabal ns");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test]
    public PrintTypes() : void
    {
      def tree = _project.NamespaceTree;
      Assert.IsNotNull(tree, "result is null");
    }

    [Test]
    public Hint_in_body_of_implicit_match() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Hint in body of implicit match");
      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      //WriteLine(result.Text);
      Assert.AreEqual (result.Text.Split('\n')[0], "internal sealed variant option TestVariant1.Aaa");
    }

    [Test]
    public Overload1() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "ClassExtension");

      def Test()
      {
        def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

        Assert.IsNotNull(result, "result is null");
        WriteLine(result.Text);
        Assert.AreEqual (result.Text.Split('\n')[0], "public static method ClassExtension.Foo(s : string) : int");
      }

      Test();
      _engine.ResetNamespaceTree();
      _project = _engine.Project;
      Test();
      _engine.ResetNamespaceTree();
      _project = _engine.Project;
      Test();
    }

    [Test]
    public Complete_generic_type_cast() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete generic type cast");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_type_cast() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type cast");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_namespace_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete namespace 1");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_vars_with_same_name() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete vars with same name");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test]
    public Complete_in_match_variant_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 3");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_in_match_variant_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 2");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_in_match_variant_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete in match variant 1");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_type_escalation_3() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation 3");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_type_escalation_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation 2");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.Greater(result.Length, 0);
    }

    [Test]
    public Complete_type_escalation() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete type escalation");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(18, result.Length, "Expected 1 elements.");
    }

    [Test]
    public Complete_in_lambda() : void
    {
      def test(tag)
      {
        def file = FilePath1;
        def (line, col) = ReadLocation(file, tag);
        def result = _engine.Completion(TestSourceTextManager(file), line, col);
        Assert.IsNotNull(result, "result is null");
        Assert.AreEqual(1, result.Length, "Expected 1 element[s].");
        Assert.AreEqual(result[0].ToString(), "CompareTo", "Expected 1 element[s].");
      }

      test("Complete in lambda CompareTo");
      test("Complete in lambda CompareTo 2");
    }

    [Test]
    public Complete_qualidend() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete qualidend");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual(2, result.Length, "Expected 2 elements.");
    }

    [Test]
    public CompleteInType_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Main() 2");
      def decl = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(decl, "decl is null");
    }

    [Test]
    public CompleteInUsing_1() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "using");
      def decl = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(decl, "decl is null");
    }

    [Test]
    public FindByLocation_Ns1_Ns2_Ns3_ClassInNestenNs() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete glabal ns");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "Ns1.Ns2.Ns3.ClassInNestenNs");
      def tb = (decl :> Decl.Type).Ast.TypeBuilder;
      def member = tb.GetMemberByLocation(Location.GetFileIndex(file), line, col);
      CheckMethod(member, "Method30");
    }

    [Test]
    public Complete_Complete_aliased_type() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Complete aliased type");
      def result = _engine.Completion(TestSourceTextManager(file), line, col);
      Assert.IsNotNull(result, "result is null");
      Assert.AreEqual($"..$result", "SByte, sbyte");
    }

    [Test]
    public FindByLocation_Method_Main() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Tests.Class1.Main()");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "Tests.Class1");
      def tb = (decl :> Decl.Type).Ast.TypeBuilder;
      def member = tb.GetMemberByLocation(Location.GetFileIndex(file), line, col);
      CheckMethod(member, "Main");
    }

    [Test]
    public FindByLocation_Method_Main_2() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "Main() 2");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "Tests.Class1");
      def tb = (decl :> Decl.Type).Ast.TypeBuilder;
      def member = tb.GetMemberByLocation(Location.GetFileIndex(file), line, col);
      CheckMethod(member, "Main");
    }

    [Test]
    public FindByLocation_Method_Class2_Method() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "ccc");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "Class2");
      def tb = (decl :> Decl.Type).Ast.TypeBuilder;
      def member = tb.GetMemberByLocation(Location.GetFileIndex(file), line, col);
      CheckMethod(member, "Method");
    }

    [Test]
    public FindByLocation_Type_XStruct() : void
    {
      def file = FilePath2;
      def (line, col) = ReadLocation(file, "XStruct");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "XStruct");
    }

    [Test]
    public FindByLocation_Type_Tests_XStruct() : void
    {
      def file = FilePath2;
      def (line, col) = ReadLocation(file, "Tests.XStruct");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckType (decl, "Tests.XStruct");
    }

    [Test]
    public FindByLocation_using() : void
    {
      def file = FilePath1;
      def (line, col) = ReadLocation(file, "using");
      def decl = _project.GetActiveDecl(file, line, col);
      CheckUsing(decl, "System.Console");
    }

    [Test]
    public QuickTip_ClassExtension() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "ClassExtension");

      def Test()
      {
        def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

        Assert.IsNotNull(result, "result is null");
        WriteLine(result.Text);
        Assert.AreEqual (result.Text.Split('\n')[0], "public static method ClassExtension.Foo(s : string) : int");
      }

      Test();
      Test();
    }

    // VladD2: Не надо удалять отлаженные тесты. Не факт, что другие тесты покрывают 
    // их функциональность.
    [Test]
    public QuickTip_TupleMethod() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "TupleMethod");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      WriteLine(result.Text);
      Assert.AreEqual (result.Text.Split('\n')[0], "internal sealed struct XStruct");
    }

    [Test]
    public QuickTip_TupleProp() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "TupleProp");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      WriteLine(result.Text);
      Assert.AreEqual (result.Text.Split('\n')[0], "internal sealed struct XStruct");
    }

    [Test]
    public QuickTip_CtorArg() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "CtorArg");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      WriteLine(result.Text);
      Assert.AreEqual (result.Text.Split('\n')[0], "internal sealed struct XStruct");
    }

    [Test]
    public QuickTip_ArgPattern() : void
    {
      def file        = FilePath2;
      def (line, col) = ReadLocation(file, "ArgPattern");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      WriteLine(result.Text);
      Assert.AreEqual (result.Text.Split('\n')[0], "internal sealed variant option TestVariant2.CValue");
    }

    //[Test]
    public QuickTip_StackOverflow() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "StackOverflow");

      _ = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);
    }

    [Test]
    public QuickTip_Imperative() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "Class4");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsNotNull(result, "result is null");
      WriteLine(result.Text);
    }

    [Test]
    public QuickTip_ForMacro() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "forMacro");

      def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), line, col);

      Assert.IsTrue(result.Text.StartsWith("macro Nemerle.Core.for"));
    }

    [Test]
    public Property_location() : void
    {
      def file        = FilePath1;
      def (line, col) = ReadLocation(file, "PropStartLocation");

      def decl = _project.GetActiveDecl(file, line, col);

      CheckType (decl, "Class5");

      def tb   = (decl :> Decl.Type).Ast.TypeBuilder;
      def prop0 = tb.GetMemberByLocation(Location.GetFileIndex(file), line, col);

      CheckProperty(prop0, "Prop");

      def prop = prop0 :> PropertyBuilder;

      Assert.AreEqual(prop.Location.Line,   line);
      Assert.AreEqual(prop.Location.Column, col);

      def (line1, col1) = ReadLocation(file, "PropBodyStartLocation");

      Assert.AreEqual(prop.BodyLocation.Line,  line1);
      Assert.AreEqual(prop.BodyLocation.Column, col1);

      def (line2, col2) = ReadLocation(file, "PropBodyEndLocation");

      Assert.AreEqual(prop.BodyLocation.EndLine, line2);
      Assert.AreEqual(prop.BodyLocation.EndColumn, col2);
      Assert.AreEqual(prop.Location.EndLine, line2);
      Assert.AreEqual(prop.Location.EndColumn, col2 + 1);

      def testMethod(m, tagStart, tagEnd)
      {
        def mb = m :> MethodBuilder;

        def (line3, col3) = ReadLocation(file, tagStart);
        Assert.AreEqual(mb.BodyLocation.Line,  line3);
        Assert.AreEqual(mb.BodyLocation.Column, col3);

        def (line4, col4) = ReadLocation(file, tagEnd);
        Assert.AreEqual(mb.BodyLocation.EndLine,  line4);
        Assert.AreEqual(mb.BodyLocation.EndColumn, col4);
      }

      testMethod(prop.Getter, "PropGetterStartLocation", "PropGetterEndLocation");
      testMethod(prop.Setter, "PropSetterStartLocation", "PropSetterEndLocation");
    }

    // ValdD2:
    // Откровенно говоря подобная автоматизация ничего хорошего не несет. Как отлаживать
    // такие комплексные тесты? Юнит-тест на то и "юнит", чтобы покрывать оду конкретную 
    // проблему. Тогда его удобно использовать для отладки и если что случится, то ясно 
    // где и с чем.
    // И нужны тесты по GoTo. 
    [Test]
    public QuickTips() : void
    {
      def file  = FileQuickTip;
      def lines = File.ReadAllLines(file);
      def rx    = Regex(@"\/\*([^:]+):([^:]+):([^:]+)\*\/");

      for (mutable i = 0; i < lines.Length; i++)
      {
        def line = lines[i];

        foreach (m is Match in rx.Matches(line))
          when (m.Groups.Count == 4 && m.Groups[1].Value == "QuickTip")
          {
            def col      = m.Index + int.Parse(m.Groups[2].Value);
            def expected = m.Groups[3].Value;

            def result = _project.GetQuickTipInfo(Location.GetFileIndex(file), i+1, col);
            when (result == null)
            {
              WriteLine(line);
              Assert.Fail($"$file at $(i+1):$col, expected '$expected', got null");
            }

            def actual = result.Text.Split('\n')[0];
            when (actual.IndexOf(expected) < 0)
            {
              WriteLine(line);
              Assert.Fail($"$file at $i:$col, expected '$expected', got '$actual'");
            }
          }
      }
    }
  }
}
