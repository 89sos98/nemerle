module M {

  f () : void {
    match ((1, 2)) {
      | (x, _) when x > 3
      | (1, 1) => 
        def _ = x;  // E: unbound symbol `x'
        ()
      | _ => ()
    };

    match ((1, "foo")) {
      | (x, _) when x > 3
      | (_, x) when x == "foo" => // E: pattern variable `x' used to have type .*
        ()
      | _ => ()
    };

    match ((1, 2)) { // W: this matching is not exhaustive
      | (x, y) when x > y => ()
    };

    match ((1, 2)) {
      | (x, y) when x > y
      | _ =>
        ()
      | (1, 2) =>  // W: this match clause is unused
        ()
    }

    
  }
}
