//
// Anonymous Class Macro for Nemerle
// Copyright (c) 2006, Stanislav Matveev (hardcase@list.com)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution.
//     * Neither the name of the author nor the names of its contributors may be
//       used to endorse or promote products derived from this software without
//       specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using System;
using System.Collections.ObjectModel;

namespace Nemerle.Extensions {

    ///<summary>
    ///This interface is implemented by any Nemerle anonymous class.
    ///</summary>
    public interface IAnonymous {

        ///<summary>
        ///Field indexer. Returns null when specified field does not exist.
        ///</summary>
        Item[field : string] : object {
            get
        }

        ///<summary>
        ///List of fields that anonymous class instance has.
        ///</summary>
        GetFields() : ReadOnlyCollection[string];

        ///<summary>
        ///Entire content of anonymous type depending on number of fields:
        ///a) null if there is not fields,
        ///b) value of single field,
        ///c) tuple when there are more than one field,
        ///d) list if there are more fields than tuple can hold.
        ///</summary>
        GetContent() : object;

    }

}
