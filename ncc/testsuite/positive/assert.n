using Nemerle.Assertions;
using Nemerle.IO;

[Invariant (i < 10), Invariant (i >= 0)]
[Invariant (i < 20)]
class A {
  mutable i : int;

  public this () { }
  
  public foo () : void {
    ++i;
  }
}

module M {
  mutable i : int;
  
  [Requires (i >= 0 && i < 5)]
  foo () : void {
    def x = array [1,2,3,4];
    Nemerle.IO.printf ("%d\n", x [i])
  }

  [Ensures (i >= 0 && i < 5)]
  boo (x : int) : void {
    i = x;
    Nemerle.IO.printf ("%d\n", x)    
  }

  [Ensures (value > 0)]
  boa (x : int) : int {
    Nemerle.IO.printf ("%d\n", x);
    x
  }

  juu ([NotNull] _o : object) : void { }

  juu1 ([Requires (value != null)] o : object) : void { }


  myassert () : void {
    printf ("Testing the assertions...\n");
    
    mutable i = 10;
    
    try {
      assert (i == 10)    
    } catch { _ : AssertionException => 
      printf ("Assertion number 1 failed\n") };

    i = 20;

    try {
      assert (i == 20)
    } catch { _ : AssertionException => 
      printf ("Assertion number 2 failed\n") };

    try {
      assert (i == 19) 
    } catch { 
      | _ : AssertionException => 
        printf ("Assertion number 3 failed\n") 
      | _ : System.Exception =>
        printf ("Got System.Exception (wrong!)\n") 
    };
    
    try {
      assert (i == 19) 
    } catch { 
      | _ : System.Exception =>
        printf ("Got System.Exception (ok!)\n") 
      | _ : AssertionException => 
        printf ("Assertion number 3 failed (wrong!)\n") 
    };
  }
  
  public Main () : void {
    i = 2;
    foo ();
    i = -1;
//    foo ();
//    assert (if (true) { 1 == 2 } else true, "bla");
    try {
      foo ()
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    boo (3);
    try {
      boo (-1)
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    ignore (boa (3));
    try {
      ignore (boa (-1))
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    try {
      def b = A ();
      for (mutable i = 0; i < 10; ++i) b.foo ();
      b.foo ();
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    try {
      juu (null);
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    myassert ();
  }
}

/*
BEGIN-OUTPUT
3
, line 19:
The ``Requires'' contract has been violated.
3
-1
, line 25:
The ``Ensures'' contract has been violated.
3
-1
, line 31:
The ``Ensures'' contract has been violated.
, line 4:
The class invariant has been violated.
, line 16:
The ``NotNull'' contract of parameter `_o' has been violated.
Testing the assertions...
Assertion number 3 failed
Got System.Exception (ok!)
END-OUTPUT
*/
