using System;
using System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  class LocalFuncMethodTipInfo : MethodTipInfo
	{
    _funHeader : Nemerle.Compiler.Typedtree.Fun_header;

    public this(func : LocalValue, tokens : list[Token])
    {
      match (func.ValueKind) 
      {
        | LocalValue.Kind.Function(funHeader, _) => _funHeader = funHeader;
        | _ => assert(false);
      }
      _ = Init(tokens);
    }
    
    CheckIndex(index : int) : void { assert2(index == 0); }

    public override GetCount() : int { 1 }
    public override GetDescription(index : int) : string { CheckIndex(index); "local fanctoin" }
    public override GetType(index : int) : string
    {
      CheckIndex(index);
      _funHeader.RetType.ToString()
    }
    
    public override GetParameterCount(index : int) : int
    {
      CheckIndex(index);
      _funHeader.parms.Length
    }
    
    public override GetParameterInfo(index : int, mutable parameter : int) : string * string * string
    {
      CheckIndex(index);
      def parm = _funHeader.parms.Nth(parameter);
      //TODO: Add the description extraction for local functions.
      def description = "";
      (parm.Name, $"$(parm.name) : $(parm.ty)", description)
    }
    
    public override GetName(index : int) : string { CheckIndex(index); _funHeader.Name }
  }
}
