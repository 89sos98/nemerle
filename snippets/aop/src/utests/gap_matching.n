#pragma indent

using NemerleUnit
using Nemerle.Aop.Helper
using Nemerle.Aop.Helper.GapMatching
using Nemerle

setup
    def lazy_list(elems)
        LazyList.FromList(elems)
    def f = _==_

test "empty gapped pattern matches to empty list"
    assert Match([],LazyList.Nil(),f)

test "empty gapped pattern does not match against non empty list"
    assert !Match([],LazyList.Cons("sth",lazy(LazyList.Nil())),f)

test "gap matches against any number of elements in a list"
    assert Match([PatternFragment.Gap()],LazyList.Nil(),f)
    assert Match([PatternFragment.Gap()],lazy_list([1,2,3]),f)
    assert Match([PatternFragment.Fragment(2),PatternFragment.Gap()],lazy_list([2,1]), f)
    assert !Match([PatternFragment.Gap(),PatternFragment.Fragment(2)],lazy_list([2,1]), f)
    assert Match([PatternFragment.Gap(),PatternFragment.Fragment(2)],lazy_list([2,2]), f)
    assert Match([PatternFragment.Gap(),PatternFragment.Fragment(2)],lazy_list([4,3,2]), f)
    assert Match([PatternFragment.Gap(),PatternFragment.Fragment(2)],lazy_list([2]), f)

test "single fragment matches against single element"
    assert Match([PatternFragment.Fragment(1)],lazy_list([1]), f)
    assert !Match([PatternFragment.Fragment(2)],lazy_list([1]), f)
    assert !Match([PatternFragment.Fragment(2)],lazy_list([2,1]), f)

test "matching that returns result / no match"
    def g = fun(a,(b,i)) {(f(a,b),Some(i))}
    def saveState = fun(){0}
    def restoreState = fun(_) {}
    def result = Match'([PatternFragment.Fragment(123)], lazy_list([43,44,45]), g, saveState, restoreState)
    assert result.IsNone

test "matching that returns result / match"
    def g = fun(a,(b,i)) {(f(a,b),Some(i))}
    def saveState = fun(){0}
    def restoreState = fun(_) {}
    def result = Match'([PatternFragment.Fragment(43),PatternFragment.Gap()],lazy_list([43,44,45]),g, saveState, restoreState)
    assert result.UnSome() == [1] 

test "matching that returns result / two matched fragments"
    def g = fun(a,(b,i)) {(f(a,b),Some(i))}
    def saveState = fun(){0}
    def restoreState = fun(_) {}
    def result = Match'(
                [PatternFragment.Gap(),
                 PatternFragment.Fragment(44),
                 PatternFragment.Fragment(45)],
                lazy_list([43,44,45]),
                g,
                saveState,
                restoreState)
    assert result.UnSome() == [2,3] 
