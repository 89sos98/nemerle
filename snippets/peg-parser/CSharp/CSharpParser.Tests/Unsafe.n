using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;

using NUnit.Framework;

using CSharpParser.TestMacros;

namespace CSharpParser.Tests {

  [
    TestFixture,

    Accepts("unsafe 1",
    <#
    unsafe struct Foo {
      public fixed int x[10], y[20];
    }#>),

    Accepts("unsafe 2",
    <#
    unsafe struct Foo {
      public int x;
      
      public static void X(Foo* ptr) {
        System.Console.WriteLine(ptr->x.ToString());
      }
    }#>),

    Accepts("unsafe 3",
    <#
    unsafe struct Foo {
      public static void Bar(byte[] buffer) {
        fixed(byte* p_buffer = buffer) {
          void* p_buffer_void = (void*) p_buffer;
        }
      }
    }#>),

    Accepts("unsafe 4",
    <#
    unsafe struct Foo {
      public static void Bar(byte[] buffer) {
        fixed(byte* p_buffer = buffer) {
          Console.WriteLine(*p_buffer++);
        }
      }
    }#>),

    Accepts("unsafe 5",
    <#
    unsafe struct Foo {
      public static void Bar() {
        var buffer = stackalloc byte [sizeof(Foo) + 10];
      }
    }#>),

  ]
  public class Unsafe { }

}