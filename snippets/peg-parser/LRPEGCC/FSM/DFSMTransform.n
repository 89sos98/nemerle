using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace LRPEGCC
{
  /// <summary>
  /// Description of DFSMTransform.
  /// </summary>
  public module DFSMTransform
  {
    public Normalize(fsm : FSM) : FSM
    {
      def transitions = fsm.Transitions.Fold(Hashtable(), (transition : Transition, transitions) =>
      {
        def key = (transition.From, transition.To);
        def (chars, end, epsilon) = match (transitions.Get(key))
        {
        | Some(value) => value;
        | None => (RangeSet(), false, false);
        }
        match (transition)
        {
        | Symbol(ch) => transitions[key] = (ch.Sum(chars), end, epsilon);
        | End        => transitions[key] = (chars, true, epsilon);
        | Epsilon    => transitions[key] = (chars, end, true);
        }
        transitions
      });
      def transitions = transitions.Fold([], ((from, to), (chars, end, epsilon), transitions) =>
      {
        def transitions = if (!chars.Ranges.IsEmpty())
          Transition.Symbol(from, to, chars) :: transitions;
        else
          transitions;

        def transitions = if (end)
          Transition.End(from, to) :: transitions;
        else
          transitions;

        def transitions = if (epsilon)
          Transition.Epsilon(from, to) :: transitions;
        else
          transitions;

        transitions;
      });
      fsm.SetTransitions(transitions);
    }

    public Do(fsm : FSM) : FSM
    {
      def fsm = Normalize(fsm);
      def symbolTransitions(state)
      {
        fsm.Transitions.Filter(t => t.From == state && t is Transition.Symbol).Map(_ :> Transition.Symbol)
      }

      def epsilonTransitions(state)
      {
        fsm.Transitions.Filter(t => t.From == state && t is Transition.Epsilon).Map(_ :> Transition.Epsilon)
      }

      def epsilonMove(set : Set[int])
      {
        def rec(state, set)
        {
          def states= epsilonTransitions(state).Map(_.To).Filter(state => !set.Contains(state));
          states.Fold(set.AddList(states), rec);
        }
        set.Fold(set, rec);
      }

      def stateMap = Hashtable();
      def states = Nemerle.Collections.Stack();
      mutable result = FSM();

      def addStateSet(stateSet)
      {
        def stateSet = epsilonMove(stateSet);
        match (stateMap.Get(stateSet))
        {
        | Some(resultState) => resultState;
        | None =>
          def resultState = stateMap.Count;
          stateMap.Add(stateSet, resultState);
          states.Push((stateSet, resultState));
          //Console.WriteLine($"\t\t\t\t\t\tnew state set $resultState $stateSet");
          result = result.NewState(resultState);
          resultState;
        }
      }
      _ = addStateSet(epsilonMove(Set().Add(fsm.StartState)));
      while (states.Count > 0)
      {
        def (stateSet, fromState) = states.Pop();
        Console.WriteLine($"############# stateSet $stateSet fromState $fromState ###############");

        def allChars = List();
        foreach (state in stateSet)
          foreach (transition in symbolTransitions(state))
            foreach (range in transition.Chars.Ranges)
            {
              | RangeSet.Range.Plain as range =>
                allChars.Add((range.from : int, true, transition.To));
                allChars.Add((range.to : int, false, transition.To));
              | _ => (); // TODO : deal with RangeSet.Range.UnicodeClass
            }
        allChars.Sort(((c1, b1, _), (c2, b2, _)) =>
          {
            def res = c1.CompareTo(c2);
            if (res == 0)
              -b1.CompareTo(b2)
            else
              res
          });

        Console.WriteLine($"allChars ..$allChars");
        def addSymbolTransition(fromCh, toCh, toState)
        {
          def transition = Transition.Symbol(fromState, toState, RangeSet().AddRange(fromCh :> char, toCh :> char));
          result = result.AddTransition(transition);
          Console.Write($"\t\t$transition");
        }

        when (allChars.Count > 0)
        {
          mutable lastCh = allChars[0][0];
          mutable counters = array(fsm.StateCount);
          mutable toStateSet = Set();
          foreach ((ch, isStart, state) in allChars)
          {
            def lastToStateSet = toStateSet;
            def isStateChanged = if (isStart)
            {
              ++counters[state];
              if (counters[state] == 1)
              {
                toStateSet = toStateSet.Add(state);
                true;
              }
              else
              {
                false;
              }
            }
            else
            {
              --counters[state];
              if (counters[state] == 0)
              {
                toStateSet = toStateSet.Remove(state);
                true;
              }
              else
              {
                false;
              }
            }
            Console.Write($"@@@ $((ch, ch :> char, isStart, state))\t$toStateSet");
            when (isStateChanged)
            {
              if (lastToStateSet.Count != 0)
              {
                if (isStart)
                {
                  addSymbolTransition(lastCh, ch - 1, addStateSet(lastToStateSet));
                  lastCh = ch;
                }
                else
                {
                  addSymbolTransition(lastCh, ch, addStateSet(lastToStateSet));
                  lastCh = ch + 1;
                }
              }
              else
              {
                  lastCh = ch;
              }
            }
            Console.WriteLine();
          }
        }
      }
      Normalize(result);
    }
  }
}
