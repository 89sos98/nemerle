using SC = System.Console;
using System.Text;
using System.Text.RegularExpressions.Regex;
using Nemerle.Text;
using Nemerle.Utility.NString;
using Nemerle.Collections.List;

module MainClass
{
  Main () : void {
    def print_help () : void  {
      SC.WriteLine ("help\t-\tprint this help");
      SC.WriteLine ("ref\t-\tlink specified assembly\t"
                    "(ex. ref Nemerle.dll, Nemerle.Compiler.dll)");
      SC.WriteLine ("using\t-\tuse specified namespace\t"
                    "(ex. using Nemerle, Nemerle.Collections)");
    }

    def print_welcome () : void {
      SC.WriteLine ("Welcome to Nemerle interpreter.\n");
      SC.WriteLine ("Please enter expressions appended with \";;\".");
      SC.WriteLine ("Built-in commands must be entered on a separate line,");
      SC.WriteLine ("their list is available via \"help;;\"\n");
    }
   
    print_welcome ();

    def e = Evaluator ();

    def readinput (refr : list [string], ns : list [string], code : string, 
                   prompt : string) : void {
      SC.Write (prompt);
      def line = SC.ReadLine ();
      match (line) {
        | null => ()
        | _ => 
          regexp match (line) {
            | @"^\s*$" => readinput (refr, ns, code, prompt)
            | @"^\s*help\s*(\(\))*[;\s]*;;\s*$" => 
              print_help ();
              readinput (refr, ns, code, "- ")
            | @"^\s*using\s+(?<n>\w+(\.\w+)*(\s*,\s*(\w+(\.\w+)*))*)[;\s]*;;\s*$" =>
              SC.WriteLine ("Now using " + n);
              readinput (refr, Split (Replace (n, @"\s", ""), array [',']) + 
	                 ns, code, "- ")
            | @"^\s*ref\s+(?<r>\w+(\.\w+)*(\s*,\s*(\w+(\.\w+)*))*)[;\s]*;;\s*$" =>
              SC.WriteLine ("Added " + r + " for linking.");
              readinput (Split (Replace (r, @"\s", ""), array [',']) +
                         refr, ns, code, "- ")
            | _ =>  { 
              def l = line.TrimEnd ();
              if (l.EndsWith (";;")) {
                try { 
                  def res = e.Eval (refr, ns, code + 
                                    l.TrimEnd (array [';',' ','\t']));
                  when (res != null)
                    SC.WriteLine (res.ToString ()); 
                } 
                catch {
                  | e is System.Exception =>
                    unless (Nemerle.Compiler.Message.SeenError) {
                      SC.WriteLine (e.Message + e.StackTrace);
                      SC.WriteLine (e.ToString ())
                    }
                } 
                readinput (refr, ns, "", "- "); 
              }
              else { 
                readinput (refr, ns, code + line, "= "); 
              }
            }
          }
      }
    }

    readinput ([], [], "", "- ");
  }
}

