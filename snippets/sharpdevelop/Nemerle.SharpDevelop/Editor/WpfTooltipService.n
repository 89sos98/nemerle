using System;
using System.Windows;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.TextEditor;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.Editor {

    module WpfTooltipService {

        sync_root : object = object();

        public ShowTooltip(tip_info : QuickTipInfo, text_area : TextArea, loc : TextLocation) : void {
            when(null == text_area || text_area.IsDisposed)
                Nemerle.Imperative.Return();
            lock(sync_root) {
                match(tip_info) {
                    | null 
                    | tip_info when string.IsNullOrEmpty(tip_info.Text) =>
                        CloseTooltipInternal();

                    | tip_info when NeedRefresh(tip_info) =>
                        CloseTooltipInternal();
                        ShowTooltipInternal(tip_info, text_area, loc);

                    | _ => ();
                }
            }
        }

        public CloseTooltip() : void {
            lock(sync_root) {
                CloseTooltipInternal();
            }
        }

        mutable old_text : string;

        mutable hint : WpfHint.Hint;

        private NeedRefresh(tip_info : QuickTipInfo) : bool {
            null == hint || tip_info.Text != old_text
        }

        private ShowTooltipInternal(tip_info : QuickTipInfo, text_area : TextArea, loc : TextLocation) : void {
            Utils.WorkbenchInvoke(fun () {
                try {
                    old_text = tip_info.Text;

                    def hint_pos = {
                        def ypos = (text_area.Document.GetVisibleLine(loc.Y) + 1) * text_area.TextView.FontHeight - text_area.VirtualTop.Y;
                        def p = text_area.PointToScreen(Drawing.Point(0, ypos));
                        Drawing.Point(Forms.Control.MousePosition.X - 16, p.Y - 1)
                    }

                    def hint_rect = Rect();
                    hint_rect.X = hint_pos.X;
                    hint_rect.Y = hint_pos.Y;
    
                    hint = WpfHint.Hint();
                    hint.Show(IntPtr.Zero, hint_rect, tip_info.GetHintContent, $<#<hint>$old_text</hint>#>);
                } catch {
                    | error =>
                        LoggingService.Error(error);
                        CloseTooltipInternal();
                }
            });
        }

        private CloseTooltipInternal() : void {
            when(null != hint && hint.IsOpen) {
                Utils.WorkbenchInvoke(fun() {
                    hint.Close();
                    hint = null;
                });
            }
        }

    }

}