using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Literals

    //nullLiteral    : Literal = "null"S;
    nullLiteral(_null : NToken, _ : NToken) : Literal
    {
      Literal.Null(GetLocation(_))
    }

    //booleanLiteral : Literal = ("true" / "false")S;
    booleanLiteral(val : NToken, _ : NToken) : Literal
    {
      Literal.Boolean(GetLocation(_), bool.Parse(val.GetText()))
    }

    //integerTypeSuffix         : VString  = "UL" / "ul" / "uL" / "Ul" / "LU" / "lu" / "Lu" / "lU" / "U" / "u" / "L" / "l";
    integerTypeSuffix(suffix : NToken) : VToken[string]
    {
      VToken(GetLocation(_), suffix.GetText())
    }

    //decimalIntegerLiteral     : Literal = decimalDigit_OneOrMany integerTypeSuffix?;
    decimalIntegerLiteral(decimalDigits       : NToken,
                          integerTypeSuffix   : option[VToken[string]]) : Literal
    {
      def loc = GetLocation(_);
      def val = ulong.Parse(decimalDigits.GetText()); // TODO: handle exception
      Literal.Integer(loc, val, false, integerTypeSuffix.WithDefault(""))
    }

    //hexadecimalIntegerLiteral : Literal = ("0x" / "0X") hexDigit_OneOrMany integerTypeSuffix?;
    hexadecimalIntegerLiteral(_0x               : NToken,
                              hexDigits         : NToken,
                              integerTypeSuffix : option[VToken[string]]) : Literal
    {
      def loc = GetLocation(_);
      def val = ulong.Parse(hexDigits.GetText(), System.Globalization.NumberStyles.HexNumber); // TODO: handle exception
      Literal.Integer(loc, val, true, integerTypeSuffix.WithDefault(""))
    }

    //integerLiteral            : Literal = (hexadecimalIntegerLiteral / decimalIntegerLiteral) s;
    integerLiteral(opt : Literal, _ : NToken) : Literal
    {
      opt
    }

    //realTypeSuffix  : VString  = "F" / "f" / "D" / "d" / "M" / "m";
    realTypeSuffix(suffix : NToken) : VToken[string]
    {
      VToken(GetLocation(_), suffix.GetText())
    }

    //exponentPart    : VString  = ("E" / "e") ("-" / "+")? decimalDigit_OneOrMany;
    exponentPart(_e             : NToken,
                 sign           : NToken,
                 decimalDigits  : NToken) : VToken[string]
    {
      VToken(GetLocation(_), sign.GetText() + decimalDigits.GetText())
    }

    //realLiteral_1   : Literal = decimalDigit_Many "." decimalDigit_OneOrMany exponentPart? realTypeSuffix?;
    realLiteral_1(mantissa1       : NToken,
                  _dot            : NToken,
                  mantissa2       : NToken,
                  exponent        : option[VToken[string]],
                  realTypeSuffix  : option[VToken[string]]) : Literal
    {
      def loc = GetLocation(_);
      def mantissa = mantissa1.GetText() + "." + mantissa2.GetText();
      def exponent = exponent.WithDefault("");
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(loc, mantissa, exponent, suffix)
    }

    //realLiteral_2   : Literal = decimalDigit_OneOrMany exponentPart realTypeSuffix?;
    realLiteral_2(mantissa        : NToken,
                  exponent        : VToken[string],
                  realTypeSuffix  : option[VToken[string]]) : Literal
    {
      def loc = GetLocation(_);
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(loc, mantissa.GetText(), exponent.Value, suffix)
    }

    //realLiteral_3   : Literal = decimalDigit_OneOrMany realTypeSuffix;
    realLiteral_3(mantissa        : NToken,
                  realTypeSuffix  : VToken[string]) : Literal
    {
      Literal.Real(GetLocation(_), mantissa.GetText(), "", realTypeSuffix.Value)
    }

    //realLiteral     : Literal = (realLiteral_1 / realLiteral_2 / realLiteral_3) s;
    realLiteral(opt : Literal, _ : NToken) : Literal
    {
      opt
    }

    //unicodeEscapeSequence_u   : string = "\\u" hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_u(_u : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : VToken[string]
    {
      unchecked {
        def x = 
              d1.HexDigit() << 12
          %|  d2.HexDigit() << 8
          %|  d3.HexDigit() << 4
          %|  d4.HexDigit();
        VToken(GetLocation(_), char.ConvertFromUtf32(x)) //TODO: handle exception
      }
    }

    //unicodeEscapeSequence_U   : char  = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_U(_U : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken,
                                         d5 : NToken, d6 : NToken, d7 : NToken, d8 : NToken) : VToken[string]
    {
      unchecked {
        def x = 
              d1.HexDigit() << 28
          %|  d2.HexDigit() << 24
          %|  d3.HexDigit() << 20
          %|  d4.HexDigit() << 16
          %|  d5.HexDigit() << 12
          %|  d6.HexDigit() << 8
          %|  d7.HexDigit() << 4
          %|  d8.HexDigit();
        VToken(GetLocation(_), char.ConvertFromUtf32(x)) //TODO: handle exception
      }
    }

    //unicodeEscapeSequence     : string = unicodeEscapeSequence_u / unicodeEscapeSequence_U;
    unicodeEscapeSequence(opt : VToken[string]) : VToken[string]
    {
      opt
    }

    //hexadecimalEscapeSequence : string = "\\x" hexDigit hexDigit? hexDigit? hexDigit?;
    hexadecimalEscapeSequence(_x : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : VToken[string]
    {
      def x = [d2, d3, d4].FoldLeft(d1.HexDigit(), (d, x) => (x << 4) %| d.HexDigit());
      VToken(GetLocation(_), char.ConvertFromUtf32(x)) //TODO: handle exception
    }

    //simpleEscapeSequence      : string = "\\'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
    simpleEscapeSequence(seq : NToken) : VToken[string]
    {
      def value = match(seq.GetText()) {
        | "\\'"   => "\'"
        | "\\\""  => "\""
        | "\\\\"  => "\\"
        | "\\0"   => "\0"
        | "\\a"   => "\a"
        | "\\b"   => "\b"
        | "\\f"   => "\f"
        | "\\n"   => "\n"
        | "\\r"   => "\r"
        | "\\t"   => "\t"
        | "\\v"   => "\v"
        | s => s
      }
      VToken(GetLocation(_), value)
    }

    //singleCharacter           : VString = !newLineCharacter !"'" !"\\" any;
    singleCharacter(any : NToken) : VToken[string]
    {
      VToken(GetLocation(_), any.GetText())
    }

    //character                 : VString = simpleEscapeSequence / unicodeEscapeSequence / hexadecimalEscapeSequence / singleCharacter;
    character(opt : VToken[string]) : VToken[string]
    {
      opt
    }

    //characterLiteral  : Literal = "'" character "'" s;
    characterLiteral(_lquot : NToken, character : VToken[string], _rquot : NToken, _ : NToken) : Literal
    {
      Literal.Char(GetLocation(_), char.Parse(character.Value)) //TODO: handle exception
    }

    //regularStringLiteralCharacterSequence     : string  = singleRegularStringLiteralCharacter_Many;
    regularStringLiteralCharacterSequence(seq : NToken) : VToken[string]
    {
      VToken(GetLocation(_), seq.GetText())
    }

    //regularStringLiteralPart              : string  = regularStringLiteralCharacterSequence
    //                                                / unicodeEscapeSequence
    //                                                / hexadecimalEscapeSequence
    //                                                / simpleEscapeSequence;
    regularStringLiteralPart(opt : VToken[string]) : VToken[string]
    {
      opt
    }

    //regularStringLiteral                  : Literal = "\"" regularStringLiteralPart* "\"";
    regularStringLiteral(_lquot : NToken, parts : SCG.List[VToken[string]], _rquot : NToken) : Literal
    {
      def value = match(parts.Count) {
        | 0 => ""
        | 1 => parts[0].Value
        | 2 => string.Concat(parts[0].Value, parts[1].Value)
        | 3 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value)
        | 4 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value, parts[3].Value)
        | _ =>
          def sb = System.Text.StringBuilder();
          foreach(part in parts)
            _ = sb.Append(part.Value);
          sb.ToString()
      }
      Literal.String(GetLocation(_), value, false)
    }

    //verbatimStringLiteralCharacterSequence    : string  = singleVerbatimStringLiteralCharacter_Many;
    verbatimStringLiteralCharacterSequence(seq : NToken) : VToken[string]
    {
      VToken(GetLocation(_), seq.GetText())
    }

    //quoteEscapeSequence                         : string  = "\"\"";
    quoteEscapeSequence(_quot_quot : NToken) : VToken[string]
    {
      VToken(GetLocation(_), "\"")
    }

    //verbatimStringLiteralPart                   : VString  = verbatimStringLiteralCharacterSequence
    //                                                      / quoteEscapeSequence;
    verbatimStringLiteralPart(opt : VToken[string]) : VToken[string]
    {
      opt
    }

    //verbatimStringLiteral                       : Literal = "@\"" verbatimStringLiteralPart* "\"";
    verbatimStringLiteral(_at_lquot : NToken, parts : SCG.List[VToken[string]], _rquot : NToken) : Literal
    {
      def value = match(parts.Count) {
        | 0 => ""
        | 1 => parts[0].Value
        | 2 => string.Concat(parts[0].Value, parts[1].Value)
        | 3 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value)
        | 4 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value, parts[3].Value)
        | _ =>
          def sb = System.Text.StringBuilder();
          foreach(part in parts)
            _ = sb.Append(part.Value);
          sb.ToString()
      }
      Literal.String(GetLocation(_), value, true)
    }

    //stringLiteral                         : Literal = (regularStringLiteral / verbatimStringLiteral) s;
    stringLiteral(opt : Literal, _ : NToken) : Literal
    {
      opt
    }

    //literal : Literal = booleanLiteral / nullLiteral / realLiteral / integerLiteral  / characterLiteral / stringLiteral;
    literal(opt : Literal) : Literal
    {
      opt
    }

    #endregion

    #region Identifiers

    //identifier : Identifier = !keyword "@"? identifierBody s;
    identifier( _at             : NToken,
                identifierBody  : NToken,
                _               : NToken) : Identifier
    {
      Identifier(GetLocation(_), identifierBody.GetText())
    }

    //qualifiedIdentifier   : Expr        = identifier ("::"s identifier)? typeArgumentList? ("."s identifier typeArgumentList?)*;
    qualifiedIdentifier(identifierOrAlias   : Identifier,
                        identifier          : option[NToken * NToken * Identifier],
                        typeArgumentList    : option[list[TypeRef]],
                        tail                : SCG.List[NToken * NToken * Identifier * option[list[TypeRef]]]) : Expr
    {
      mutable chain = match(identifier) {
        | Some((_, _, id)) =>
          def alias = Expr.Alias(identifierOrAlias);
          def member = Expr.Ref(id);
          Expr.Member(alias, member)
        | _ =>
          Expr.Ref(identifierOrAlias)
      }
      when(typeArgumentList is Some(args))
        chain = Expr.TypeArguments(chain.Location, chain, args); // TODO: handle location

      foreach((_, _, id, tyArgs) in tail) {
        def member = Expr.Ref(id);
        chain = Expr.Member(chain, member);
        when(tyArgs is Some(tyArgs))
          chain = Expr.TypeArguments(chain.Location, chain, tyArgs) // TODO: handle location
      }
      chain
    }

    #endregion

    #region Types

    //predefinedType : TypeName = ("sbyte" / "byte"   / "short" / "ushort"  / "int"   / "uint"
    //                            / "long" / "ulong"  / "char"  / "decimal" / "void"  / "bool"
    //                            / "string" / "dynamic" / "object" / "float" / "double" )S;
    predefinedType(builtIn : NToken, _ : NToken) : TypeRef
    {
      TypeRef.BuiltIn(GetLocation(_), builtIn.GetText())
    }

    //typeName       : TypeRef  = qualifiedIdentifier;
    typeName(id : Expr) : TypeRef
    {
      TypeRef.Name(id)
    }

    //dimSeparators             : int = (","s)*;
    dimSeparators(commaList : SCG.List[NToken * NToken]) : VToken[int]
    {
      VToken(GetLocation(_), commaList.Count)
    }

    //rankSpecifier             : TypeSpecifier = "["s dimSeparators "]"s;
    rankSpecifier(_lparen       : NToken, _ : NToken,
                  dimSeparators : VToken[int],
                  _rparen       : NToken, _ : NToken) : TypeSpecifier
    {
      TypeSpecifier.Array(GetLocation(_), dimSeparators.Value + 1)
    }

    //pointerSpecifier          : TypeSpecifier = "*"s;
    pointerSpecifier(_asterisk : NToken, _ : NToken) : TypeSpecifier
    {
      TypeSpecifier.Pointer(GetLocation(_asterisk))
    }

    //genericDimensionSpecifier : int = "<"s dimSeparators ">"s;
    genericDimensionSpecifier(_lparen       : NToken, _ : NToken,
                              dimSeparators : VToken[int],
                              _rparen       : NToken, _ : NToken) : VToken[int]
    {
      dimSeparators
    }

    //typeSpecifier             : TypeSpecifier = rankSpecifier / pointerSpecifier;
    typeSpecifier(opt : TypeSpecifier) : TypeSpecifier
    {
      opt
    }

    //anyNonArrayType           : TypeRef     = (typeName / predefinedType) genericDimensionSpecifier?;
    anyNonArrayType(baseType                  : TypeRef,
                    genericDimensionSpecifier : option[VToken[int]]) : TypeRef
    {
      match(genericDimensionSpecifier) {
        | Some(dim) => TypeRef.Generic(baseType.Location + dim.Location, baseType, dim.Value)
        | _ => baseType
      }
    }

    //anyType                   : TypeRef     = anyNonArrayType typeSpecifier*;
    anyType(anyNonArrayType   : TypeRef,
            typeSpecifiers    : SCG.List[TypeSpecifier]) : TypeRef
    {
      mutable acc = anyNonArrayType;
      foreach(ty_spec in typeSpecifiers) {
        def loc = acc.Location + ty_spec.Location;
        acc = match(ty_spec) {
          | TypeSpecifier.Array(dim)  => TypeRef.Array(loc, acc, dim)
          | TypeSpecifier.Pointer()   => TypeRef.Pointer(loc, acc)
        }
      }
      acc
    }

    //anyTypeNonPointer         : TypeRef     = anyNonArrayType rankSpecifier*;
    anyTypeNonPointer(anyNonArrayType   : TypeRef,
                      typeSpecifiers    : SCG.List[TypeSpecifier]) : TypeRef
    {
      anyType(anyNonArrayType, typeSpecifiers)
    }

    //typeArgument              : TypeRef     = anyType;
    typeArgument(opt : TypeRef) : TypeRef
    {
      opt
    }

    //typeArguments             : TypeRefList = typeArgument (","s typeArgument)*;
    typeArguments(head : TypeRef,
                  tail : SCG.List[NToken * NToken * TypeRef]) : list[TypeRef]
    {
      head.Cons(tail)
    }

    //typeArgumentList          : TypeRefList = "<"s typeArguments ">"s;
    typeArgumentList( _lparen       : NToken, _ : NToken,
                      typeArguments : list[TypeRef],
                      _rparen       : NToken, _ : NToken) : list[TypeRef]
    {
      typeArguments
    }

    //mayBeGenericArgumentList  : TypeRefList = "<"s typeArguments ">"s &('(' / ')' / ']' / '}' / ':' / ';' / ',' / '.' / '?' / "==" / "!=");
    mayBeGenericArgumentList( _lparen       : NToken, _ : NToken,
                              typeArguments : list[TypeRef],
                              _rparen       : NToken, _ : NToken) : list[TypeRef]
    {
      typeArguments
    }

    #endregion
  }
}