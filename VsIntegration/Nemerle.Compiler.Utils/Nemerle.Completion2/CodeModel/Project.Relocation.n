using System;
using System.IO;
using System.Diagnostics;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

using SR = System.Reflection;
using SCG = System.Collections.Generic;
using Typed = Nemerle.Compiler.Typedtree;

namespace Nemerle.Completion2
{
  public partial class Project
  {
    /// This method add relocation information, if changes made in 
    /// methode/property accessor body or in fields initialisation expression.
    /// If relocation added this method return changed member. Otherwise null.
    /// If relocation not added we must repars all project files.
    public AddRelocation(
      filePath   : string,
      newEndChar : int, newEndLine : int,
      oldEndChar : int, oldEndLine : int,
      startChar  : int, startLine  : int
    )
      : MemberBuilder
    {
      def fileIndex = _compileUnits.GetFileIndex(filePath);
      def isInclude(loc) { loc.Contains(startLine, startChar) && loc.Contains(oldEndLine, oldEndChar) }

      def member = match (GetActiveDecl(fileIndex, startLine,  startChar))
      {
        | Decl.Type as ty => ty.Builder.GetMemberByLocation(fileIndex, startLine, startChar);
        | GlobalAttribute | Using | Namespace | None => null
      };

      if (member == null)
        null
      else match (member) // Editing in only one member.
      {
        | method is MethodBuilder when isInclude(method.BodyLocation)       with memberBuilder = method
        | field  is FieldBuilder  when isInclude(field.InitializerLocation) with memberBuilder = field =>
          memberBuilder.ResetCodeCache();
          this.Engine.AddRelocation(fileIndex, newEndChar, newEndLine, oldEndChar, oldEndLine);
#if DebugLocations
          UpdateDebugTree(fileIndex);
#endif
          memberBuilder
        | _ => null
      }
    } // AddRelocation
  } // end class Engine
} // end namespace

