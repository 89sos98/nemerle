/*
BEGIN OUTPUT
[empty]
[ 1, 2, 3, 4 ]
[ 5, 6, 7, 8 ]
[ 5, 6, 7, 8 ]
[ 8, 7, 6, 5 ]
[ 8, 7, 6, 5, 1, 2, 3, 4, 8, 7, 6, 5 ]
l != r
[equal]
Added 100: [ 8, 7, 100, 6, 5 ] [ok]
Removed 6: [ 8, 7, 100, 5 ] [ok]
Sum of r: 120
Squares of r: [ 64, 49, 10000, 25 ]
END OUTPUT
*/

using Nemerle.Collections;
using Nemerle.IO;

public module M {
  public Main () : void 
  {
    def l = MutableList ([1, 2, 3, 4]);
    def r = MutableList ([5, 6, 7, 8]);

    if (MutableList ().IsEmpty)
      printf ("[empty]\n")
    else
      printf ("[not empty]\n");

    printf ("%s\n", l.ToString ());
    printf ("%s\n", r.ToString ());
    printf ("%s\n", r.Clone ().ToString ());
    r.Reverse ();
    printf ("%s\n", r.ToString ());

    l.Prepend (r.Clone ());
    l.Append (r.Clone ());
    printf ("%s\n", l.ToString ());

    if (l.Equals (r))
      printf ("l == r\n")
    else
      printf ("l != r\n");

    if (l.Equals (MutableList ([8, 7, 6, 5, 1, 2, 3, 4, 8, 7, 6, 5])))
      printf ("[equal]\n");
    else
      printf ("[not equal]\n");

    def e = r.GetEnumerator ();
    _ = e.MoveNext ();
    _ = e.MoveNext ();
    e.Insert (100);
    printf ("Added 100: %s", r.ToString ());
    _ = e.MoveNext ();
    if (e.Current == 100)
      printf (" [ok]\n");
    else
      printf (" [ups]\n");
    _ = e.MoveNext ();
    _ = e.Remove ();
    printf ("Removed 6: %s", r.ToString ());
    if (e.Current == 5)
      printf (" [ok]\n")
    else
      printf (" [ups]\n");

    printf ("Sum of r: %d\n", r.Fold (fun (a : int, b) { a + b; }, 0));
    printf ("Squares of r: %s\n", r.Map (fun (a : int) { a*a; }).ToString ());
  }
}
