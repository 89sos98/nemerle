using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser {

  [PegGrammar(
    start,
    grammar {
      any = ['\u0000'..'\uFFFF'];

      #region Line terminators

      newLineCharacter = '\n'
                        / '\r'
                        / '\u2028'    /*  line separator       */
                        / '\u2029';   /*  paragraph separator  */
      newLine   = "\r\n" / newLineCharacter;

      #endregion

      #region White space

      whitespace = [Zs]
                / '\t'
                / '\v'        /*  vertial tab          */
                / '\f';       /*  form feed            */

      #endregion

      #region Comments

      singleLineComment = "//" (!newLineCharacter any)*;
      delimitedComment = "/*" (!"*/" any)* "*/";
      comment = singleLineComment / delimitedComment;

      #endregion

      #region Spacer

      space = comment / whitespace / newLineCharacter;
      s = space*; // optional spacer
      S = !identifierPartCharacters space*; // identifier break spacer

      #endregion

      #region Identifiers

      // illegal identifiers:
      keyword = ("abstract"     / "as"          / "base"        / "bool"        / "break"
                / "byte"        / "case"        / "catch"       / "char"        / "checked"
                / "class"       / "const"       / "continue"    / "decimal"     / "default"
                / "delegate"    / "do"          / "double"      / "else"        / "enum"
                / "event"       / "explicit"    / "extern"      / "false"       / "finally"
                / "fixed"       / "float"       / "for"         / "foreach"     / "goto"
                / "if"          / "implicit"    / "in"          / "int"         / "interface"
                / "internal"    / "is"          / "lock"        / "long"        / "namespace"
                / "new"         / "null"        / "object"      / "operator"    / "out"
                / "override"    / "params"      / "private"     / "protected"   / "public"
                / "readonly"    / "ref"         / "return"      / "sbyte"       / "sealed"
                / "short"       / "sizeof"      / "stackalloc"  / "static"      / "string"
                / "struct"      / "switch"      / "this"        / "throw"       / "true"
                / "try"         / "typeof"      / "uint"        / "ulong"       / "unchecked"
                / "unsafe"      / "ushort"      / "using"       / "virtual"     / "void"
                / "volatile"    / "while"       ) !identifierPartCharacters;

      letterCharacter       = [Lu, Ll, Lt, Lm, Lo, Nl];
      combiningCharacter    = [Mn, Mc];
      decimalDigitCharacter = [Nd];
      connectingCharacter   = [Pc];
      formattingCharacter   = [Cf];

      identifierStartCharacter  = letterCharacter / "_";
      identifierPartCharacters  = letterCharacter / decimalDigitCharacter / connectingCharacter / combiningCharacter / formattingCharacter;
      identifier                = !keyword "@"? identifierStartCharacter identifierPartCharacters* s;

      #endregion

      #region Literals

      booleanLiteral = ("true" / "false")S;

      nullLiteral = "null"S;

      decimalDigit = ['0'..'9'];
      integerTypeSuffix = "UL" / "ul" / "uL" / "Ul" / "LU" / "lu" / "Lu" / "lU" / "U" / "u" / "L" / "l";
      decimalIntegerLiteral = decimalDigit+ integerTypeSuffix?;
      hexDigit     = ['0'..'9', 'a'..'f', 'A'..'F'];
      hexadecimalIntegerLiteral = ("0x" / "0X") hexDigit+ integerTypeSuffix?;
      integerLiteral = (hexadecimalIntegerLiteral / decimalIntegerLiteral)s;

      realTypeSuffix = "F" / "f" / "D" / "d" / "M" / "m";
      exponentPart = ("E" / "e") ("-" / "+")? decimalDigit+;
      realLiteral_1 = decimalDigit* "." decimalDigit+ exponentPart? realTypeSuffix?;
      realLiteral_2 = decimalDigit+ exponentPart realTypeSuffix?;
      realLiteral_3 = decimalDigit+ realTypeSuffix;
      realLiteral = (realLiteral_1 / realLiteral_2 / realLiteral_3)s;

      unicodeEscapeSequence_u = "\\u" hexDigit hexDigit hexDigit hexDigit;
      unicodeEscapeSequence_U = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit;
      unicodeEscapeSequence   = unicodeEscapeSequence_u / unicodeEscapeSequence_U;
      hexadecimalEscapeSequence = "\\x" hexDigit hexDigit? hexDigit? hexDigit?;
      simpleEscapeSequence = "'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
      singleCharacter = !newLineCharacter !"'" !"\\" any;
      character = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleCharacter;
      characterLiteral = "'" character "'" s;

      singleRegularStringLiteralCharacter = !newLineCharacter !"\"" !"\\" any;
      regularStringLiteralCharacter = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleRegularStringLiteralCharacter;
      regularStringLiteral = "\"" regularStringLiteralCharacter* "\"";
      quoteEscapeSequence = "\"\"";
      singleVerbatimStringLiteralCharacter = !"\"" any;
      verbatimStringLiteralCharacter = quoteEscapeSequence / singleVerbatimStringLiteralCharacter;
      verbatimStringLiteral = "@\"" verbatimStringLiteralCharacter* "\"";
      stringLiteral = (regularStringLiteral / verbatimStringLiteral)s;

      literal      = booleanLiteral / nullLiteral / realLiteral / integerLiteral  / characterLiteral / stringLiteral;

      #endregion

      #region Basic concepts

      qualifiedAliasName = identifier "::"s;
      namespaceOrTypeName = qualifiedAliasName? identifier typeArgumentList? ("."s identifier typeArgumentList?)*;
      namespaceName = namespaceOrTypeName;
      typeName = namespaceOrTypeName;

      #endregion

      #region Types

      voidType = "void"S;
      booleanType = "bool"S;
      stringType = "string"S;
      dynamicType = "dynamic"S;
      objectType = "object"S;

      integralType = ("sbyte" / "byte" / "short" / "ushort" / "int" / "uint" / "long" / "ulong" / "char")S;
      floatingPointType = ("float" / "double")S;
      decimalType = "decimal"S;
      numericType = integralType / floatingPointType / decimalType;

      predefinedType  = voidType / booleanType / stringType / dynamicType / objectType / numericType;

      dimSeparators = (","s)*;
      rankSpecifier = "["s dimSeparators "]"s;
      genericDimensionSpecifier = "<"s dimSeparators ">"s;
      anyNonArrayType = (typeName / predefinedType) genericDimensionSpecifier?;
      pointerSpecifier = "*"s;
      anyType = anyNonArrayType rankSpecifier* pointerSpecifier*;
      typeArgument = anyType;
      typeArguments = typeArgument (","s typeArgument)*;
      typeArgumentList = "<"s typeArguments ">"s;
      typeDeclaration = classStructInterfaceDeclaration
                      / enumDeclaration
                      / delegateDeclaration;


      #endregion

      #region Namespaces

      externAliasDirective = "extern"S "alias"S identifier ";"s;
      externAliasDirectives = externAliasDirective*;
      usingAliasDirective = "using"S identifier "="s namespaceOrTypeName ";"s;
      usingNamespaceDirective = "using"S namespaceName ";"s;
      usingDirective = usingAliasDirective / usingNamespaceDirective;
      usingDirectives = usingDirective*;
      qualifiedIdentifier = identifier ("."s identifier)*;
      namespaceBody = "{"s externAliasDirectives usingDirectives namespaceMemberDeclarations "}"s;
      namespaceDeclaration = "namespace"S qualifiedIdentifier namespaceBody (";"s)?;
      namespaceMemberDeclaration = namespaceDeclaration / typeDeclaration;
      namespaceMemberDeclarations = namespaceMemberDeclaration*;
      compilationUnit = s externAliasDirectives usingDirectives globalAttributes namespaceMemberDeclarations;

      #endregion

      #region Variables and Constants

      variableReference = expression;
      stackallocInitializer = "stackalloc"S anyType "["s expression "]"s;
      variableInitializer = complexInitializer / stackallocInitializer / expression;
      variableInitializerList = variableInitializer (","s variableInitializer)*;
      complexInitializer = "{"s (variableInitializerList (","s)?)? "}"s;

      constantDeclarator = identifier "="s constantExpression;
      constantDeclarators = constantDeclarator (","s constantDeclarator)*;

      variableDeclarator = identifier ("="s variableInitializer)?;
      variableDeclarators = variableDeclarator (","s variableDeclarator)*;

      #endregion

      #region Expressions

      argumentName = identifier ":"s;
      argumentValue_ref = "ref"S variableReference;
      argumentValue_out = "out"S variableReference;
      argumentValue_expr = expression;
      argumentValue = argumentValue_ref / argumentValue_out / argumentValue_expr;
      argument = argumentName? argumentValue;
      argumentList = argument (","s argument)*;

      expression  = lambdaExpression
                  / queryExpression
                  / assignmentExpression;
      expressionList = expression (","s expression)*;
      constantExpression = expression;
      booleanExpression = expression;

      simpleName = identifier typeArgumentList?;
      parenthesizedExpression = "("s expression ")"s;
      thisAccess = "this"S;
      baseAccess = "base"S;
      predefinedAccess = predefinedType;

      newExpression = "new"S (anyNonArrayType ("("s argumentList? ")"s)?)? ("["s expressionList "]"s)? rankSpecifier? complexInitializer?;

      typeofExpression = "typeof"S "("s anyType ")"s;
      checkedExpression = "checked"S "("s expression ")"s;
      uncheckedExpression = "unchecked"S "("s expression ")"s;
      defaultValueExpression = "default"S "("s anyType ")"s;

      explicitAnonymousFunctionParameterModifier = ("ref" / "out")S;
      explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameterModifier? anyType identifier;
      explicitAnonymousFunctionParameterList = explicitAnonymousFunctionParameter (","s explicitAnonymousFunctionParameter)*;
      explicitAnonymousFunctionSignature = "("s explicitAnonymousFunctionParameterList? ")"s;
      anonymousMethodExpression = "delegate"S explicitAnonymousFunctionSignature? block;

      sizeofExpression = "sizeof"S "("s anyType ")"s;

      otherExpression = simpleName
                      / literal
                      / parenthesizedExpression
                      / thisAccess
                      / baseAccess
                      / predefinedAccess
                      / newExpression
                      / typeofExpression
                      / checkedExpression
                      / uncheckedExpression
                      / defaultValueExpression
                      / anonymousMethodExpression
                      / sizeofExpression;
      indexerArguments = "["s argumentList? "]"s;
      callArguments = "("s argumentList? ")"s;
      callOrIndexerExpression = otherExpression (indexerArguments / callArguments)*;
      memberOperator = ("." / "->")s;
      memberExpression = callOrIndexerExpression (memberOperator memberExpression)?;
      qualifiedMemberExpression = qualifiedAliasName? memberExpression;
      postfixOperator = ("++" / "--")s;
      postfixExpression = qualifiedMemberExpression postfixOperator*;

      prefixOperator = ("++" / "--" / "+" / "-" / "~" / "!" / "&" / "*")s;
      castOperator = "("s anyType ")"s;
      prefixExpression = (prefixOperator / castOperator)* postfixExpression;

      multiplicativeOperator = ("*" / "/" / "%")s;
      multiplicativeExpression = prefixExpression (multiplicativeOperator expression)*;

      additiveOperator = ("+" / "-")s;
      additiveExpression = multiplicativeExpression (additiveOperator expression)*;

      shiftOperator = ("<<" / ">>")s;
      shiftExpression = additiveExpression (shiftOperator expression)*;

      releationalOperator = ("<=" / ">=" / "<" / ">")s;
      typeTestingOperator = ("is" / "as")S;
      relationalOrTypeTestingExpression = shiftExpression ((releationalOperator / typeTestingOperator) expression)*;

      equalityOperator = ("==" / "!=")s;
      equalityExpression = relationalOrTypeTestingExpression (equalityOperator expression)*;

      logicalAndOperator = "&"s;
      logicalAndExpression = equalityExpression (logicalAndOperator expression)*;

      logicalXorOperator = "^"s;
      logicalXorExpression = logicalAndExpression (logicalXorOperator expression)*;

      logicalOrOperator = "|"s;
      logicalOrExpression = logicalXorExpression (logicalOrOperator expression)*;

      conditionalAndOperator = "&&"s;
      conditionalAndExpression = logicalOrExpression (conditionalAndOperator expression)*;

      conditionalOrOperator = "||"s;
      conditionalOrExpression = conditionalAndExpression (conditionalOrOperator expression)*;

      conditionalExpression = conditionalOrExpression ("?"s expression ":"s expression)?;

      assignmentOperator = ("=" / "+=" / "-=" / "*=" / "/=" / "%=" / "&=" / "|=" / "^=" / "<<=" / ">>=")s;
      assignmentExpression = conditionalExpression (assignmentOperator expression)?;

      implicitAnonymousFunctionParameter = identifier;
      implicitAnonymousFunctionParameterList = implicitAnonymousFunctionParameter (","s implicitAnonymousFunctionParameter)*;

      implicitAnonymousFunctionSignature_1 = implicitAnonymousFunctionParameter;
      implicitAnonymousFunctionSignature_2 = "("s implicitAnonymousFunctionParameterList? ")"s;
      implicitAnonymousFunctionSignature = implicitAnonymousFunctionSignature_1 / implicitAnonymousFunctionSignature_2;

      anonymousFunctionSignature  = explicitAnonymousFunctionSignature
                                  / implicitAnonymousFunctionSignature;
      anonymousFunctionBody_expression = expression;
      anonymousFunctionBody_block = block;
      anonymousFunctionBody = anonymousFunctionBody_expression / anonymousFunctionBody_block;
      lambdaExpression = anonymousFunctionSignature "=>"s anonymousFunctionBody;

      fromClause_1 = "from"S identifier "in"S expression;
      fromClause_2 = "from"S anyType identifier "in"S expression;
      fromClause = fromClause_1 / fromClause_2;
      letClause = "let"S identifier "="s expression;
      whereClause = "where"S booleanExpression;
      joinClause_1 = "join"S identifier "in"S expression "on"S expression "equals"S expression ("into"S identifier)?;
      joinClause_2 = "join"S anyType identifier "in"S expression "on"S expression "equals"S expression ("into"S identifier)?;
      joinClause = joinClause_1 / joinClause_2;
      orderingDirection = ("ascending" / "descending")S;
      ordering = expression orderingDirection?;
      oderings = ordering (","s ordering)*;
      orderbyClause = "orderby"S oderings;
      queryBodyClause = fromClause
                      / letClause
                      / whereClause
                      / joinClause
                      / orderbyClause;
      queryBodyClauses = queryBodyClause+;

      selectClause = "select"S expression;
      groupClause = "group"S expression "by"S expression;
      selectOrGroupClause = selectClause
                          / groupClause;

      queryContinuation = "into"S identifier queryBody;

      queryBody = queryBodyClauses? selectOrGroupClause queryContinuation?;
      queryExpression = fromClause queryBody;

      #endregion

      #region Statements

      labeledStatement = identifier ":"s statement;

      localConstantDeclaration = "const"S anyType constantDeclarators;
      localVariableType_var = "var"S;
      localVariableType_any = anyType;
      localVariableType = localVariableType_var / localVariableType_any;
      localVariableDeclarator = identifier ("="s variableInitializer)?;
      localVariableDeclarators = localVariableDeclarator (","s localVariableDeclarator)*;
      localVariableDeclaration = localVariableType localVariableDeclarators;
      declarationStatement = localConstantDeclaration / localVariableDeclaration;

      emptyStatement = ";"s;

      statementExpression = expression;
      statementExpressionList = statementExpression (","s statementExpression)*;
      expressionStatement = statementExpression ";"s;

      embeddedStatement = block
                        / emptyStatement
                        / expressionStatement
                        / selectionStatement
                        / iterationStatement
                        / jumpStatement
                        / tryStatement
                        / checkedStatement
                        / uncheckedStatement
                        / lockStatement
                        / usingStatement
                        / yieldStatement
                        / unsafeStatement
                        / fixedStatement;

      ifStatement = "if"S "("s booleanExpression ")"s embeddedStatement ("else"S embeddedStatement)?;
      switchLabel_case = "case"S constantExpression ":"s;
      switchLabel_default = "default"S ":"s;
      switchLabel = switchLabel_case / switchLabel_default;
      switchLabels = switchLabel+;
      switchSection = switchLabels statementList;
      switchSections = switchSection+;
      switchBlock = "{"s switchSections? "}"s;
      switchStatement = "switch"S "("s expression ")"s switchBlock;
      selectionStatement = ifStatement
                         / switchStatement;

      whileStatement = "while"S "("s booleanExpression ")"s embeddedStatement;
      doStatement = "do"S embeddedStatement "while"S "("s booleanExpression ")"s ";"s;
      forStatement = "for"S "("s forInitializer? ";"s forCondition? ";"s forIterator? ")"s embeddedStatement;
      forInitializer = localVariableDeclaration / statementExpressionList;
      forCondition = booleanExpression;
      forIterator = statementExpressionList;
      foreachStatement = "foreach"S "("s localVariableType identifier "in"s expression ")"s embeddedStatement;
      iterationStatement = whileStatement
                         / doStatement
                         / forStatement
                         / foreachStatement;

      breakStatement = "break"S ";"s;
      continueStatement = "continue"S ";"s;
      gotoStatement_case = "goto"S "case"S constantExpression ";"s;
      gotoStatement_default = "goto"S "default"S ";"s;
      gotoStatement_id = "goto"S identifier ";"s;
      gotoStatement = gotoStatement_case / gotoStatement_default / gotoStatement_id;
      returnStatement = "return"S expression? ";"s;
      throwStatement = "throw"S expression? ";"s;
      jumpStatement = breakStatement
                    / continueStatement
                    / gotoStatement
                    / returnStatement
                    / throwStatement;

      catchClause = "catch"S ("("s anyType identifier? ")"s)? block;
      catchClauses = catchClause+;
      finallyClause = "finally"S block;
      tryStatement_catch = "try"S block catchClauses finallyClause?;
      tryStatement_finally = "try"S block finallyClause;
      tryStatement = tryStatement_catch / tryStatement_finally;

      checkedStatement = "checked"S block;

      uncheckedStatement = "unchecked"S block;

      lockStatement = "lock"S "("s expression ")"s embeddedStatement;

      resourceAcquisition = localVariableDeclaration / expression;
      usingStatement = "using"S "("s resourceAcquisition ")"s embeddedStatement;

      yieldStatement_return = "yield"S "return"S expression ";"s;
      yieldStatement_break = "yield"S "break"S ";"s;
      yieldStatement = yieldStatement_return / yieldStatement_break;

      unsafeStatement = "unsafe"S block;

      fixedStatement = "fixed"S "("s anyType variableDeclarators ")"s embeddedStatement;

      statement = labeledStatement
                / declarationStatement
                / embeddedStatement;
      statementList = statement+;
      block = "{"s statementList? "}"s;

      #endregion

      #region Type members

      varianceAnnotation = ("in" / "out")S;
      typeParameter = attributes? varianceAnnotation? identifier;
      typeParameterList = "<"s typeParameter (","s typeParameter)* ">"s;

      typeParameterConstraint_ctor = "new"S "("s ")"s;
      typeParameterConstraint_type = ("class" / "struct")S;
      typeParameterConstraint_base = anyType;
      typeParameterConstraint   = typeParameterConstraint_ctor
                                / typeParameterConstraint_type
                                / typeParameterConstraint_base;
      typeParameterConstraints = typeParameterConstraint (","s typeParameterConstraint)*;
      typeParameterConstraintsClause =  "where"S identifier ":"s typeParameterConstraints;
      typeParameterConstraintsClauses = typeParameterConstraintsClause+;

      modifier = ("new" / "public" / "protected" / "internal" / "private" / "partial" / "virtual" / "volatile" / "static" / "sealed" / "override" / "abstract" / "extern" / "unsafe")S;
      modifiers = modifier+;

      constantDeclaration = attributes? modifiers? "const"S anyType constantDeclarators ";"s;

      fieldDeclaration = attributes? modifiers? anyType variableDeclarators ";"s;

      fixedSizeBufferDeclarator = identifier "["s constantExpression "]"s;
      fixedSizeBufferDeclarators = fixedSizeBufferDeclarator (","s fixedSizeBufferDeclarator)*;
      fixedSizeBufferDeclaration = attributes? modifiers? "fixed"S anyType fixedSizeBufferDeclarators ";"s;

      memberName = typeName;

      parameterModifier = ("ref" / "out" / "this" / "params")S;
      defaultArgument = "="s expression;
      formalParameter = attributes? parameterModifier? anyType identifier defaultArgument?;
      formalParameterList = formalParameter (","s formalParameter)*;

      methodHeader = attributes? modifiers? ("partial"S)? anyType memberName typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses?;
      methodBody_empty = (";"s);
      methodBody_block = block;
      methodBody = methodBody_empty / methodBody_block;
      methodDeclaration = methodHeader methodBody;

      getAccessorDeclaration = attributes? modifiers? "get"S methodBody;
      setAccessorDeclaration = attributes? modifiers? "set"S methodBody;
      accessorDeclarations_1 = getAccessorDeclaration setAccessorDeclaration?;
      accessorDeclarations_2 = setAccessorDeclaration getAccessorDeclaration?;
      accessorDeclarations = accessorDeclarations_1 / accessorDeclarations_2;
      propertyDeclaration = attributes? modifiers? anyType memberName "{"s accessorDeclarations "}"s;

      addAccessorDeclaration = attributes? "add"S block;
      removeAccessorDeclaration = attributes? "remove"S block;
      eventAccessorDeclarations_1 = addAccessorDeclaration removeAccessorDeclaration;
      eventAccessorDeclarations_2 = removeAccessorDeclaration addAccessorDeclaration;
      eventAccessorDeclarations = eventAccessorDeclarations_1 / eventAccessorDeclarations_2;
      eventDeclaration_1 = attributes? modifiers? "event"S anyType memberName "{"s eventAccessorDeclarations "}"s;
      eventDeclaration_2 = attributes? modifiers? "event"S anyType variableDeclarators ";"s;
      eventDeclaration = eventDeclaration_1 / eventDeclaration_2;

      indexerDeclarator = anyType (anyType "."s)? "this"S "["s formalParameterList "]"s;
      indexerDeclaration = attributes? modifiers? indexerDeclarator "{"s accessorDeclarations "}"s;

      conversionOperatorDeclarator = ("implicit" / "explicit")S "operator"S anyType "("s anyType identifier ")"s;
      overloadableUnaryOperator = ("++" / "--" / "+" / "-" / "!" / "~" / "true" / "false")S;
      unaryOperatorDeclarator = anyType "operator"S overloadableUnaryOperator "("s anyType identifier ")"s;
      overloadableBinaryOperator = ("+" / "-" / "*" / "/" / "%" / "&" / "|" / "^" / "<<" / ">>" / "==" / "!=" / ">" / "<" / ">=" / "<=")s;
      binaryOperatorDeclarator = anyType "operator"S overloadableBinaryOperator "("s anyType identifier ","s anyType identifier ")"s;
      operatorDeclarator  = conversionOperatorDeclarator
                          / unaryOperatorDeclarator
                          / binaryOperatorDeclarator;
      operatorDeclaration = attributes? modifiers? operatorDeclarator methodBody;

      constructorInitializer = ":"s ("this" / "base")S "("s argumentList? ")"s;
      constructorDeclarator = identifier "("s formalParameterList? ")"s constructorInitializer?;
      constructorDeclaration = attributes? modifiers? constructorDeclarator methodBody;

      destructorDeclarator = "~"s identifier "("s ")"s;
      destructorDeclaration = attributes? modifiers? destructorDeclarator methodBody;

      typeMemberDeclaration = constantDeclaration
                            / fixedSizeBufferDeclaration
                            / eventDeclaration
                            / operatorDeclaration
                            / indexerDeclaration 
                            / fieldDeclaration
                            / methodDeclaration
                            / propertyDeclaration 
                            / constructorDeclaration
                            / destructorDeclaration
                            / typeDeclaration;
      typeMemberDeclarations = typeMemberDeclaration*;

      #endregion

      #region Class, Struct, Interface

      typeBase = ":"s anyType (","s anyType)*;
      typeBody = "{"s typeMemberDeclarations "}"s;
      classStructInterfaceDeclaration = attributes? modifiers? ("class" / "struct" / "interface")S identifier typeParameterList? typeBase? typeParameterConstraintsClauses? typeBody (";"s)?;

      #endregion

      #region Enum

      enumBase = ":"s integralType;

      enumMemberDeclaration = attributes? identifier ("="s constantExpression)?;
      enumMemberDeclarations = enumMemberDeclaration (","s enumMemberDeclaration)* (","s)?;
      enumBody = "{"s enumMemberDeclarations? "}"s;

      enumDeclaration = attributes? modifiers? "enum"S identifier enumBase? enumBody (";"s)?;

      #endregion

      #region Delegate

      delegateDeclaration = attributes? modifiers? "delegate"S anyType identifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? ";"s;

      #endregion

      #region Attributes

      attributeArgumentExpression = expression;
      positionalArgument = argumentName? attributeArgumentExpression !"="; // don't allow '=' because of namedArgument
      positionalArgumentList = positionalArgument (","s positionalArgument)*;
      namedArgument = identifier "="s attributeArgumentExpression;
      namedArgumentList = namedArgument (","s namedArgument)*;
      attributeArgumentList_all = positionalArgumentList (","s namedArgumentList)?;
      attributeArgumentList_named = namedArgumentList;
      attributeArgumentList = attributeArgumentList_all / attributeArgumentList_named;
      attributeArguments = "("s attributeArgumentList? ")"s;
      attributeName = typeName;
      attribute = attributeName attributeArguments?;
      attributeList = attribute (","s attribute)*;

      globalAttributeTarget = ("assembly" / "module")S;
      globalAttributeTargetSpecifier = globalAttributeTarget ":"s;
      globalAttributeSection = "["s globalAttributeTargetSpecifier attributeList (","s)? "]"s;
      globalAttributes = globalAttributeSection*;

      attributeTarget = ("field" / "event" / "method" / "param" / "property" / "return" / "type")S;
      attributeTargetSpecifier = attributeTarget ":"s;
      attributeSection = "["s attributeTargetSpecifier? attributeList (","s)? "]"s;
      attributes = attributeSection+;

      #endregion

      start : object = compilationUnit !any;
    }
  )]
  public partial class Parser {
    start(x : NToken, _ : NToken) : object {
      x.GetText()
    }
  }

}