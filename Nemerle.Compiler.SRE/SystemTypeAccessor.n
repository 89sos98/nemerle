using System;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Sre
{
  internal module SystemTypeAccessor
  {
    public GetNonVoidSystemType(this typeVar : TypeVar) : System.Type
    {
      GetNonVoidSystemType(typeVar.Fix())
    }

    public GetNonVoidSystemType(this fixedType : FixedType) : System.Type
    {
      match(fixedType)
      {
        | Void => fixedType.SystemTypeCache.Object
        | _ => GetSystemType(fixedType)
      }
    }

    public GetSystemType(this typeVar : TypeVar) : System.Type
    {
      GetSystemType(typeVar.Fix())
    }

    public GetSystemType(this fixedType : FixedType) : System.Type
    {
      match(fixedType)
      {
        | Void                  => fixedType.SystemTypeCache.Void
        | Tuple                 => GetSystemType(TupleType.Make(fixedType))
        | Fun                   => GetSystemType(FunctionType.Make(fixedType))
        | StaticTypeVarRef(tv)  => tv.Sre().GetSystemType()
        | Class(ti, [])         => ti.SystemType;
        | Class(ti, args)       =>
          def     tconstructor = ti.SystemType;
          def     typedargs    = array (args.Length);
          mutable idx          = 0;
          mutable formals      = ti.Typarms;
          def     errorCount   = Message.ErrorCount;

          foreach (arg in args)
          {
            match (formals)
            {
              | f :: fs =>
                formals = fs;
                f.CheckConstraints(arg, fixedType);

              | [] => Util.ice ()
            }

            typedargs [idx] = GetSystemType(arg);
            ++idx;
          }
          
          //tconstructor.BindGenericParameters (typedargs);  
          //Message.Debug ($"bgp: $this");
          if (errorCount == Message.ErrorCount)
            tconstructor.GetGenericTypeDefinition().MakeGenericType(typedargs)
          else
            fixedType.SystemTypeCache.Object

        | Ref(t) | Out(t)       => GetSystemType(t).MakeByRefType()
        | Array (et, rank)      =>
          def et_SystemType = GetSystemType(et);
          when (et_SystemType.Equals(fixedType.SystemTypeCache.Void))
            Message.FatalError ("array element type cannot be void");
          if (rank == 1)
            et_SystemType.MakeArrayType()
          else            
            et_SystemType.MakeArrayType(rank)

        | Intersection(types)   => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }

    public GetSystemType(this expr : TExpr) : System.Type
    {
      GetSystemType(expr.Type)
    }
  }
}