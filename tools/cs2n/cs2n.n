// Copyright (c) 2003-2005 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using System;
using System.IO;
using antlr;

namespace Nemerle.CSharp
{
  public class CMain
  {
        public static Main(args : array[string]) : void
        {
	    def make_conversion (in_file, out_file)
	    {
		Emit.Initialize (out_file);

		ExtendedToken.ClearWhitespaces ();
              
		def lexer = CSharpLexer (FileStream (in_file, FileMode.Open, FileAccess.Read));
		lexer.setTokenObjectClass("Nemerle.CSharp.ExtendedToken");
              
		def parser = CSharpParser (lexer);
             
		parser.compilation_unit ();
              
		Emit.End ();
	    }
	    
	    match(args.Length)
	    {
		| 1 =>
		    if(args[0].EndsWith(".cs"))
			make_conversion ( args [0], args[0].Substring(0,args[0].Length - 2) + "n" );
		    else
			make_conversion ( args [0], args[0] + ".n" );
		| 2 =>
		    make_conversion (args[0], args[1]);
		| _ => 
		    Console.WriteLine ("Usage: cs2n.exe input.cs [output.n]");
	    }
          }
      }
  }
}
