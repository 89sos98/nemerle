using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  [Record]
  public variant SwitchCaseEntry : Located
  {
    | Case    { id : Expr; body : list[Statement]; }
    | Default { body : list[Statement]; }
  }

  [Record]
  public class TryCatchEntry : Located
  {
    [Accessor] exceptionType : TypeRef;
    [Accessor] variable : Identifier;
    [Accessor] body : Statement;
  }

  [Record]
  public variant Statement : Located
  {
    | Empty
    | Block {
      stmts : list[Statement];
    }
    | Expression {
      expr : Expr;
    }
    | Label {
      label : Identifier;
      stmt  : Statement;
    }
    | VariableDecl {
      variableType : TypeRef;
      decls : list[Identifier * VariableInitializer];
    }
    | ConstantDecl {
      constantType : TypeRef;
      decls : list[Identifier * Expr];
    }
    | If {
      expr : Expr;
      trueStmt : Statement;
      falseStmt : Statement;
    }
    | Switch {
      expr: Expr;
      entries : list[SwitchCaseEntry];
    }
    | While {
      cond : Expr;
      stmt : Statement;
    }
    | DoWhile {
      cond : Expr;
      stmt : Statement;
    }
    | ForVar {
      varDecl : VariableDecl;
      cond : Expr;
      iter : list[Expr];
      body : Statement;
    }
    | ForExpr {
      init : list[Expr];
      cond : Expr;
      iter : list[Expr];
      body : Statement;
    }
    | Foreach {
      variable : Identifier;
      variableType : TypeRef;
      expr : Expr;
      body : Statement;
    }
    | Break
    | Continue
    | Goto {
      label : Identifier;
    }
    | GotoCase {
      expr : Expr;
    }
    | GotoDefault
    | Return {
      expr : Expr;
    }
    | Throw {
      expr : Expr;
    }
    | Try {
      body : Statement;
      catchList : list[TryCatchEntry];
      finallyBlock : Statement;
    }
    | Checked {
      body : Statement;
      is_checked : bool;
    }
    | Lock {
      expr : Expr;
      body : Statement;
    }
    | UsingVar {
      varDecl : VariableDecl;
      body : Statement;
    }
    | UsingExpr {
      expr : Expr;
      body : Statement;
    }
    | YieldReturn {
      expr : Expr;
    }
    | YieldBreak
    | Unsafe {
      body : Statement;
    }
    | Fixed {
      varDecl : VariableDecl;
      body : Statement;
    }
  }
}