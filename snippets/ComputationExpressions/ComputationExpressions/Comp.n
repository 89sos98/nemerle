/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  /// <summary>
  /// We need this class to instantiate a generic by the void type.
  /// </summary>
  public sealed class FakeVoid
  {
    public static Value : FakeVoid = FakeVoid ()
  }
}

namespace Nemerle.ComputationExpressions.Internal
{
  /// <summary>
  /// This is a helper module for implementing the for statement.
  /// </summary>
  public module ForHelper
  {
    public Enumerate[T] (cond : void -> bool, value : void -> T, change : void -> void) : IEnumerable[T]
    {
      while (cond ())
      {
        yield value ();
        change ();
      }
    }
  }
  
  /// <summary>
  /// This is a helper module for the enumerable comprehension.
  /// </summary>
  public module EnumerableHelper
  {
    public Empty[T] () : IEnumerable[T] {
      EmptyEnumerable.Instance
    }
    
    public Singleton[T] (t : T) : IEnumerable[T]
    {
      SingleEnumerable (t)
    }
    
    public Append[T] (ts1 :IEnumerable[T], ts2 : IEnumerable[T]) : IEnumerable[T]
    {
      AppendEnumerable (ts1, ts2)
    }
    
    public Delay[T] (cont : void -> IEnumerable[T]) : IEnumerable[T]
    {
      DelayedEnumerable (cont)
    }
    
    public While[T] (pred : void -> bool, body : IEnumerable[T]) : IEnumerable[T]
    {
      while (pred ())
      {
        foreach (t in body)  yield t;
      }
    }
    
    public ForEach[T1, T2] (coll : IEnumerable[T1], cont : T1 -> IEnumerable[T2]) : IEnumerable[T2]
    {
      foreach (x in coll)
      {
        foreach (t in cont (x))  yield t
      }
    }
    
    public TryFinally[T] (body : IEnumerable[T], handler : void -> void) : IEnumerable[T]
    {
      TryFinallyEnumerable (body, handler)
    }
    
    public TryCatch[T] (body : IEnumerable[T], cont : Exception -> IEnumerable[T]) : IEnumerable[T]
    {
      TryCatchEnumerable (body, cont)
    }
    
    public Using[T1, T2] (t1 : T1, cont : T1 -> IEnumerable[T2]) : IEnumerable[T2] where T1 : IDisposable
    {
      TryFinallyEnumerable (DelayedEnumerable (() => cont (t1)), () => 
        {
          def d = t1 : IDisposable;
          when (d != null) 
            d.Dispose ()
        })
    }
  }
  
  /// <summary>
  /// Represents an empty enumeration.
  /// </summary>
  public class EmptyEnumerable[T] : IEnumerable[T]
  {
    public static Instance : EmptyEnumerable[T] = EmptyEnumerable ();
    
    public GetEnumerator () : IEnumerator[T]
    {
      SubEnumerator.Instance
    }
    
    private class SubEnumerator : IEnumerator[T]
    {
      public static Instance : SubEnumerator = SubEnumerator ();
      
      public MoveNext () : bool
      { 
        false 
      }
      
      public Current : T 
      { 
        get { throw InvalidOperationException () }
      }
      
      public Reset () : void {}
      
      public Dispose () : void {}
    }
  }

  /// <summary>
  /// Represents a delayed enumeration.
  /// </summary>
  [Record] public class DelayedEnumerable[T] : IEnumerable[T]
  {
    private cont : void -> IEnumerable[T];
    
    public GetEnumerator () : IEnumerator[T]
    {
      cont ().GetEnumerator ();
    }
  }
  
  /// <summary>
  /// Represents a single enumerable item.
  /// </summary>
  [Record] public class SingleEnumerable[T] : IEnumerable[T]
  {
    private item : T;
    
    public GetEnumerator () : IEnumerator[T]
    {
      SubEnumerator (item)
    }
    
    private class SubEnumerator : IEnumerator[T]
    {
      private item : T;
      private mutable iterated : bool;
      
      public this (item : T)
      {
        this.item = item;
        this.iterated = false;
      }
      
      public Dispose () : void 
      {
      }
      
      public Reset () : void
      {
        iterated = false
      }
      
      public MoveNext () : bool
      {
        if (iterated)
          false
        else
        {
          iterated = true;
          true
        }
      }
      
      public Current : T
      {
        get { item }
      }
    }
  }

  /// <summary>
  /// Appends two enumerations using the tail call optimization.
  /// </summary>
  [Record] public class AppendEnumerable[T] : IEnumerable[T]
  {
    private ts1 : IEnumerable[T];
    private ts2 : IEnumerable[T];
    
    public GetEnumerator () : IEnumerator[T]
    {
      SubEnumerator (ts1.GetEnumerator (), () => ts2.GetEnumerator ())
    }
    
    public class SubEnumerator : IEnumerator[T]
    {
      private mutable ts : IEnumerator[T];
      private mutable cont : void -> IEnumerator[T];
      
      public this (ts : IEnumerator[T], cont : void -> IEnumerator[T])
      {
        this.ts = ts;
        this.cont = cont;
      }
      
      public Reset () : void
      {
        throw NotSupportedException ()
      }
      
      public Dispose () : void
      {
        ts.Dispose ();
      }
      
      public MoveNext () : bool
      {
        if (ts.MoveNext ())
          true
        else if (cont != null)
        {
          
          ts.Dispose ();
          ts = cont ();
          cont = null;
          
          match (ts)
          {
            | subts is SubEnumerator => 
              ts = subts.ts;
              cont = subts.cont;
            | _ => ()
          }
          
          MoveNext ();
        }
        else
          false
      }
      
      public Current : T
      {
        get
        {
          ts.Current
        }
      }
    }
  }
  
  /// <summary>
  /// Represents an enumeration that can imitate the try-finally block.
  /// </summary>
  [Record] public class TryFinallyEnumerable[T] : IEnumerable[T]
  {
    private body : IEnumerable[T];
    private handler : void -> void;
    
    public GetEnumerator () : IEnumerator[T]
    {
      try
      {
        SubEnumerator (body.GetEnumerator (), handler)
      }
      catch
      {
        | e is Exception =>
          try
          {
            throw e   // namely in this strange way!
          }
          finally
          {
            handler ()
          }
      }
    }
    
    private class SubEnumerator : IEnumerator[T]
    {
      private ts : IEnumerator[T];
      private handler : void -> void;
      private mutable handled : bool;
      
      public this (ts : IEnumerator[T], handler : void -> void)
      {
        this.ts = ts;
        this.handler = handler;
        this.handled = false;
      }
      
      public Dispose () : void
      {
        ts.Dispose ()
      }
      
      public Reset () : void
      {
        throw NotSupportedException ()
      }
      
      public MoveNext () : bool
      {
        try
        {
          if (ts.MoveNext ())
            true
          else
          {
            handled = true;
            handler ();   // it may raise an exception too
            false
          }
        }
        catch
        {
          | e is Exception =>
            if (handled)
              throw e
            else
              try
              {
                throw e;  // namely in this way to have the same order of calls
              }
              finally
              {
                handled = true;
                handler ()
              }
        }
      }
      
      public Current : T
      {
        get { ts.Current }
      }
    }
  }
  
  /// <summary>
  /// Represents an enumeration that imitates the try-catch block.
  /// </summary>
  [Record] public class TryCatchEnumerable[T] : IEnumerable[T]
  {
    private body : IEnumerable[T];
    private cont : Exception -> IEnumerable[T];
    
    public GetEnumerator () : IEnumerator[T]
    {
      try
      {
        SubEnumerator (body.GetEnumerator (), cont)
      }
      catch
      {
        | e is Exception =>
          cont (e).GetEnumerator ()
      }
    }
    
    private class SubEnumerator : IEnumerator[T]
    {
      private mutable ts : IEnumerator[T];
      private mutable cs : IEnumerator[T];
      private cont : Exception -> IEnumerable[T];
      
      public this (ts : IEnumerator[T], cont : Exception -> IEnumerable[T])
      {
        this.ts = ts;
        this.cs = null;
        this.cont = cont;
      }
      
      public Dispose () : void
      {
        when (ts != null)
          ts.Dispose ();
        
        when (cs != null)
          cs.Dispose ();
      }
      
      public Reset () : void
      {
        throw NotSupportedException ()
      }
      
      public MoveNext () : bool
      {
        if (cs != null)
          cs.MoveNext ()
        else
          try
          {
            ts.MoveNext ()
          }
          catch
          {
            | e is Exception =>
            
              ts.Dispose ();
              ts = null;
            
              cs = cont (e).GetEnumerator ();
              cs.MoveNext ();
          }
      }

      public Current : T
      {
        get { if (ts != null) ts.Current else cs.Current }
      }
    }
  }
}
