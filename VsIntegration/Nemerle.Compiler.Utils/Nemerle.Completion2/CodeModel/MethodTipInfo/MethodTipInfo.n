using System;
using System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public abstract class MethodTipInfo
  {
    [Accessor] protected mutable _startName       : Location;
    [Accessor] protected mutable _startParameters : Location;
    [Accessor] protected mutable _nextParameters  : List[Location] = List();
    [Accessor] protected mutable _endParameters   : Location;
    [Accessor] protected mutable _defaultMethod   : int;

    public abstract GetCount() : int;
    public abstract GetDescription(index : int) : string;
    public abstract GetType(index : int) : string;
    public abstract GetParameterCount(index : int) : int;
    public abstract GetParameterInfo(index : int, mutable parameter : int) : string * string * string;
    public abstract GetName(index : int) : string;

    public HasTip : bool
    {
      get { _startName.EndLine > 0 }
    }

    protected Init(tokens : list[Token]) : string
    {
      mutable realFuncName;

      def findRoundGroup(toks) 
      {
      | h :: t => if (h is Token.RoundGroup) toks else findRoundGroup(t)
      | _      => []
      }

      def findIdentifier(group, token : Token)
      {
        match(token)
        {
        | Identifier when token.Next == null || group.Equals(token.Next) => token
        | LooseGroup(child) => findIdentifier(group, child)
        | null              => null;
        | _                 => findIdentifier(group, token.Next);
        }
      }

      def findComma(token : Token) 
      {
      | LooseGroup as lg =>

        _nextParameters.Add(Location(
          lg.Location.FileIndex,
          lg.Location.EndLine, lg.Location.EndColumn,
          lg.Location.EndLine, lg.Location.EndColumn + 1));

        when (lg.Next != null)
          findComma(lg.Next);

        ()
      | _ => ()
      }

      match (findRoundGroup(tokens))
      {
      | group :: prev :: _ => 

        def token = findIdentifier(group, prev);

        when (token is Token.Identifier(name))
        {
          realFuncName = name;

          _startName       = token.Location;
          _startParameters = group.Location;

          findComma((group :> Token.RoundGroup).Child);

          _endParameters   = Location(
            group.Location.FileIndex,
            group.Location.EndLine,
            if (group.Location.EndColumn > 1) group.Location.EndColumn - 1 else group.Location.EndColumn);
        }
      | _ => ()
      }

      realFuncName
    }
  }
}
