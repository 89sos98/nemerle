using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Data.Linq
{
  [Record]
  public variant QueryClause : Located
  {
    | From    { ident : Name; inExpr : PExpr; }
    | Let     { ident : Name; expr : PExpr; }
    | Where   { expr : PExpr; }
    | Join    { ident : Name; inExpr : PExpr; key1Expr : PExpr; key2Expr : PExpr; into : option[Name] }
    | Orderby { orderings : list[PExpr * bool]; }
    | Select  { expr : PExpr; }
    | Group   { expr : PExpr; byExpr : PExpr; }
    | Into    { ident : Name; }
    
    public override ToString() : string
    {
      def ordiringToStr(expr : PExpr, isAsc : bool) : string
      {
        def order = if (isAsc) "" else " desc";
        $"$expr$order"
      }
      match (this)
      {
        | From    (ident, inExpr) => $"from $ident in $inExpr"
        | Let     (ident, expr)   => $"let $ident = $expr"
        | Where   (expr)          => $"where $expr"
        | Orderby (orderings)     => $<#order by ..$(orderings; ", "; ordiringToStr)#>
        | Select  (expr)          => $"select $expr"
        | Group   (expr, byExpr)  => $"group $expr by $byExpr"
        | Into    (ident)         => $<#into $ident #>
        | Join    (ident, inExpr, key1Expr, key2Expr, into) => 
          def res = $"join $ident in $inExpr on $key1Expr == $key2Expr";
          match (into)
          {
            | Some(intoIdent) => $"$res $intoIdent"
            | _ => res
          }
      }
    }
  }
}
