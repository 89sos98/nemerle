#! /bin/bash
#
# Copyright (c) 2003, 2004 The University of Wroclaw.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    3. The name of the University may not be used to endorse or promote
#       products derived from this software without specific prior
#       written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

############################################################
# VARIABLES
############################################################

# this variable is used to return values from functions
result=

config_log="configure.log"

python=
install="install"

prefix="/usr/local"
bindir="$prefix/bin"
mandir="$prefix/man/man1"
libdir="$prefix/lib"

dll_path=
tmp_dir=
nem_tmp_file=

nem_flags=
time=
quiet=@
ignore_errors=no

force_old=0

############################################################
# FUNCTIONS
############################################################

abort () {

    echo
    echo
    echo "*** $@ ***"
    if test -f $config_log; then
	echo "*** Check $config_log for details. ***"
    fi
    echo
    if [ "$ignore_errors" = yes ] ; then
      echo "*** Ignoring error. ***"
    else
      echo "Aborting..."
      rm -f $config_mak
      exit 1
    fi
}

echo_check_for () {

    echo "--------------- Checking for $@ ---------------" >> $config_log
    echo -n "Checking for $@... "
}


echo_check_if () {

    echo "--------------- Checking if $@ ----------------" >> $config_log
    echo -n "Checking if $@... "
}


echo_result () {

    echo "Result: $@" >> $config_log
    echo "-----------------------------------------------" >> $config_log
    echo >> $config_log
    echo "$@"
}


# This function tries to execute command given as an argument and returns
# shell exit code.  If the program doesn't exist in a path shell returns
# 127.  If the program is not a valid executable shell returns 126.
# If the program lacks some arguments it usually returns 1, otherwise
# this function should return 0.
#
# E.g.
# try_execute cc --version
# if test $? = 0; then
#    echo "found"
# else
#    echo "not found"
# fi
try_execute () {

    echo "Trying execute: $@" >> $config_log
    $@ >> $config_log 2>&1
    ret=$?
    echo "Execution status code: $ret." >> $config_log
    return $ret;
}


nem_try_compile () {
    echo "<<<<<<<<<<<<<<<" >> $config_log
    cat $nem_tmp_file >> $config_log
    echo ">>>>>>>>>>>>>>>" >> $config_log

    old_mono_path=$MONO_PATH
    MONO_PATH=boot

    $engine $net_flags boot/ncc.exe -q -no-color -texe -out:out.exe $nem_tmp_file_aux >> $config_log 2>&1

    MONO_PATH=$old_mono_path
    
    if test -f out.exe; then
	rm -f out.exe
	echo_result "yes"
	return 0
    else
	echo_result "no"
	return 1
    fi
}


############################################################
# PARAMETERS SCAN
############################################################

for i in $@; do
    if test "$i" = "--help" || test "$i" = "-help" || test "$i" = "-h"; then
	cat << EOF

Usage: $0 [OPTIONS]...

Defaults for the options are specified in brackets.

Configuration:
  -h, --help            display this help and exit

Installation directories:
  --prefix=DIR          use this prefix for installing Nemerle [/usr/local]
  --bindir=DIR          use this prefix for installing executables 
                        [PREFIX/bin]
  --mandir=DIR          use this prefix for installing manpages 
                        [PREFIX/man/man1]
  --libdir=DIR          object code libraries [PREFIX/lib]

Miscellaneous options:
  --nemerle-flags=FLAGS pass these flags to nemerle compiler
  --net-engine=ENGINE   use this .NET engine
  --net-flags=FLAGS     pass these flags to .NET engine
  --install-path=PATH   the path to a custom install program
  --dll-path=PATH       the path to dlls directory
  --force-old-mono      use this switch to force using your version of
                        Mono .NET environment or if you don't use Mono
                        at all but have it installed
  --ignore-errors       do not exit on errors

Optional features:
  --enable-debug        adds --debug to net-flags
  --enable-time         enable compile time statistics
  --disable-quiet       disable beautiful output

EOF
	exit 0
    fi
done



for ac_option do

    case "$ac_option" in

	--prefix=*)
	    prefix=`echo $ac_option | cut -d '=' -f 2`
	    bindir="$prefix/bin"
	    mandir="$prefix/man/man1"
	    libdir="$prefix/lib"
	    ;;
	--bindir=*)
	    bindir=`echo $ac_option | cut -d '=' -f 2`
	    ;;
	--mandir=*)
	    mandir=`echo $ac_option | cut -d '=' -f 2`
	    ;;
        --libdir=*)
	    libdir=`echo $ac_option | cut -d '=' -f 2`
	    ;;
	--nemerle-flags=*)
	    nem_flags=`echo $ac_option | cut -d '=' -f 2`
	    ;;
	--net-engine=*)
	    engine=`echo $ac_option | cut -d '=' -f 2`
	    ;;
	--net-flags=*)
	    net_flags=`echo $ac_option | cut -d '=' -f 2`
	    ;;
	--install-path=*)
	    install=`echo $ac_option | cut -d '=' -f 2 | sed 's/\/$//'`"/install"
	    ;;
	--dll-path=*)
            dll_path=`echo $ac_option | cut -d '=' -f 2`
            ;;        
	--enable-debug)
	    csc_flags="$csc_flags -debug+"
	    net_flags="$net_flags --debug"
	    ;;
	--force-old-mono)
	    force_old=1
	    ;;
	--enable-time)
	    time=time
	    ;;
        --disable-quiet)
	    quiet=
	    ;;
	--ignore-errors)
	    ignore_errors=yes
	    ;;
	*)
	    echo "Unknown parameter: $ac_option"
	    echo "Try: ./configure --help"
	    exit 1
	    ;;
    esac
done
	    


############################################################
# INITIALIZATION
############################################################

rm -f $config_log $config_mak

for tmp_dir in "$TMPDIR" "$TEMPDIR" "/tmp"; do
    if test -z $i; then
	continue
    fi
    if test -d $i; then
	break
    fi
done

nem_tmp_file="${tmp_dir}/nemerle-in$$.n"

if [ "X`cygpath -wp ${nem_tmp_file} 2>/dev/null`" != "X" ] ; then
  nem_tmp_file_aux=`cygpath -wp ${nem_tmp_file}`
else
  nem_tmp_file_aux=${nem_tmp_file}
fi

############################################################
# TESTS
############################################################


# Step 1.
# Check if user has any nemerle compiler.  Don't run it yet
# as we don't know how to do it yet.
if test -f boot/ncc.exe; then
    true
elif test -f boot/ncc-boot.exe; then
    mv boot/ncc-boot.exe boot/ncc.exe
else
    echo "*** You need a working Nemerle compiler. ***"
    echo "*** http://nemerle.org/download/ncc-boot.exe ***"
    echo "*** Place it in boot/ncc.exe ***"
    abort "Haven't found Nemerle compiler."
fi


# Step 2.
# Determine how to invoke .NET binaries.
if test -z "$engine"; then
    echo_check_for ".NET environment"
    if test -x boot/ncc.exe; then
	true
    else
	chmod u+x boot/ncc.exe 2> /dev/null
    fi
    if test -x boot/true.exe; then
	true
    else
	chmod u+x boot/true.exe 2> /dev/null
    fi
    if try_execute boot/true.exe; then
	engine=none
	echo_result "none required"
    elif try_execute mono boot/true.exe; then
	engine=mono
	echo_result "mono"
    fi
fi
if test -z "$engine"; then
    abort "Haven't found any .NET environment on your system."
elif test "$engine" = none; then
    engine=
    net_flags=
fi


# Step 3.
# Require MONO >= 1.0
echo_check_if "we are using Mono < 1.0"
version=`mono --version 2> /dev/null`
if test "$?" = 0; then
    ver=`echo $version | sed 's/.* \([0-9]*\.[0-9]*\).*/\1/g'`
    minor=`echo $ver | sed 's/[0-9]*\.\([0-9]*\)/\1/g'`

    case $ver in
	0.*)
	     echo_result "yes"
	     if test "$force_old" = 1; then
		    echo "Forcing Mono ${ver}...  "
		    echo "Hope you know, what you are doing..."
	     else
		    echo "*** Mono $ver is unsupported. ***"
		    echo "*** If you still want to try running Nemerle ***"
		    echo "*** please use --force-old-mono switch. ***"
		    abort "Too old version of Mono."
	     fi
	    ;;
	*)
	    echo_result "no"
	    ;;
    esac
else 
	echo_result "no"
fi

# Step 4.
# Check how to invoke .NET disassembler
echo_check_for ".NET disassembler"
try_execute "ildasm /?"
if test "$?" != 127 -a "$?" != 126; then
    echo_result "ildasm"
    dasm="ildasm /text"
else
    try_execute "monodis"
    if test "$?" != 127 -a "$?" != 126; then
	echo_result "monodis"
	dasm="monodis"
    else
	echo_result "not found"
	echo "*** Please make sure that the .Net disassembler is ***"
	echo "*** available somewhere in PATH. ***"
	abort "Haven't found any disassembler on your system."
    fi
fi


# Step 5.
# Check how to invoke native image generator.
echo_check_for "native image generator"
try_execute "ngen.exe"
if test "$?" != 127 -a "$?" != 126; then
    echo_result "ngen.exe"
    ngen="ngen"
else
    try_execute "mono --aot"
    if test "$?" != 127 -a "$?" != 126; then
	echo_result "mono --aot"
	ngen="mono --aot"
    else
	echo_result "not found"
	echo "*** Please make sure that the native image generator is ***"
	echo "*** available as a single executable file, somewhere in PATH. ***"
	abort "Haven't found any native image generators on your system."
    fi
fi


# Step 6.
# Try to compile an empty program with nemerle compiler to be sure,
# that it works.
echo_check_if "Nemerle compiler works"
cat > $nem_tmp_file << EOF
class M {
    public static Main () : void {}
}
EOF
nem_try_compile
if test "$?" = 1; then
    if test "$force_old" = 1; then
        echo "*** You have requested to force old version of Mono. ***"
        echo "*** Please don't submit bugs. ***"
    fi
    abort "Nemerle compiler seems to be broken."
fi


# Step 7.
# Check things for gacutil installation.
echo_check_for "gacutil"
try_execute gacutil
if test $? -lt 126; then
  echo_result found
  echo_check_if "we are using mono gacutil"
  if gacutil --help 2>/dev/null | grep -q MONO ; then
    echo_result yes
    echo_check_for "mono libdir"
    if pkg-config --version >/dev/null 2>&1 ; then
      mono_libdir=`pkg-config --variable=libdir mono 2>/dev/null`
      if [ "X$mono_libdir" = "X" ] ; then
        echo_result "no mono.pc, forcing /usr/lib"
        mono_libdir=/usr/lib
      else
        echo_result "$mono_libdir"
      fi
    else
      echo_result "no pkg-config found, forcing /usr/lib"
      mono_libdir=/usr/lib
    fi
    gacutil_base="gacutil -root \$(DESTDIR)$mono_libdir"
    gacutil_command="$gacutil_base -check_refs -package nemerle -i"
    gacutil_uninstall_command="$gacutil_base -u"
    ngen_gac="for f in \$(DESTDIR)$mono_libdir/mono/gac/Nemerle*/*/*.dll ; do mono --aot \$\$f ; done"
  else
    echo_result no
    gacutil_command="gacutil /f /i"
    gacutil_uninstall_command="gacutil /f /u"
    ngen_gac="true"
  fi
else
  echo_result "not found"
  echo "*** ''make install'' won't work for you ***"
  gacutil_command="echo 'gacutil has not been found, installation can not continue'; false"
fi

# Step 8.
# Check for Python >= 2.3, and other programs required to build
# complete documentation.
echo_check_for "Python version"
for i in python2.3 python; do
    str=`$i -V 2>&1`
    if test "$?" -gt 0; then
	continue
    fi
    
    ver=`echo $str | sed 's/.* \([0-9]\.[0-9]\).*/\1/g'`

    case $ver in
	2.3)
	    echo_result "$ver, ok"
	    python=$i
	    ;;
	*)
	    echo_result "$ver, too_old"
	    ;;
    esac
    break
done
if test -z $ver; then
  echo_result "none"
fi

echo_check_for "xspp"
try_execute xspp
if test $? -lt 126 -a $? -ne 2; then
    echo_result yes
    xspp=xspp
else
    echo_result no
    xspp=false
fi


echo_check_for "xsltproc"
try_execute xsltproc --version
if test $? -lt 126; then
    echo_result yes
    xsltproc='xsltproc --xinclude'
else
    echo_result no
    xsltproc=false
fi


echo_check_for "xmllint"
try_execute xmllint --version
if test $? -lt 126; then
    echo_result yes
    xmllint=xmllint
else
    echo_result no
    xmllint=false
fi


if test -d .svn; then
    svn_revision=`svn info . | awk '/^Revision:/ { print $2 }'`
else
    svn_revision=
fi


############################################################
# CONFIG GENERATION
############################################################

echo "Creating config.mak"

cat > config.mak <<EOF
# Generated by configure

Q          = $quiet

PACKAGE    = nemerle
VERSION    = 0.2
REVISION   = 0
SVN_REV    = $svn_revision

NET_ENGINE = $engine
NET_FLAGS  = $net_flags
DLL_PATH   = $dll_path
NGEN       = $ngen
DASM       = $dasm
TIME       = $time

NEM_FLAGS  = $nem_flags

PYTHON  = $python
XSPP    = $xspp
XSLT    = $xsltproc

INSTALL = $install

prefix = $prefix
BINDIR = $bindir
MANDIR = $mandir
LIBDIR = $libdir
GACUTIL_COMMAND = $gacutil_command
GACUTIL_UNINSTALL_COMMAND = $gacutil_uninstall_command
NGEN_GAC = $ngen_gac

EOF
