/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.IO;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System.Xml;

namespace Nemerle.Compiler 
{
  public module XmlDoc {
    mutable document : XmlDocument;
    mutable docNode : XmlNode;
    public mutable OutputFileName : string;

    public Init () : void {
      document = XmlDocument ();
      def d = document.AppendChild (document.CreateElement ("doc"));
      def name = d.AppendChild (document.CreateElement ("assembly")).
        AppendChild (document.CreateElement ("name"));
      _ = name.AppendChild (document.CreateTextNode (Flags.output_file_name));
      docNode = d.AppendChild (d.AppendChild (document.CreateElement ("members")));
    }

    public Save () : void {
      document.Save (OutputFileName);
    }

    CreateMember (name : string) : XmlNode {
      def mem = document.CreateElement ("member");
      def attr = document.CreateAttribute("name");
      attr.Value = name;
      _ = mem.SetAttributeNode(attr);
      mem
    }

    DumpMember (m : IMember) : void {
      def full_name = m.DeclaringType.FullName + "." + m.Name;
      def (prefix, suffix) = 
        match (m.GetKind ()) {
          | MemberKind.Field => ("F:", "")
          | MemberKind.Method (method) =>
            def parms = List.Map (method.GetHeader ().parms, 
                                  fun (p : Typedtree.Fun_parm) { 
                                    p.ty.ToString () 
                                  });
            ("M:", "(" + Nemerle.Utility.NString.Concat (",", parms) + ")")

          | MemberKind.Property => ("P:", "")
          | MemberKind.Type (tycon) => DumpType (tycon); ("", "")
          | MemberKind.Event => ("E:", "")
        }
      unless (prefix == "" && suffix == "")
        _ = docNode.AppendChild (CreateMember (prefix + full_name + suffix))
    }

    public DumpType (t : TypeInfo) : void {
      _ = docNode.AppendChild (CreateMember ("T:" + t.FullName));
      def mems = t.GetMembers (BindingFlags.Static %| BindingFlags.Instance %|
                               BindingFlags.Public %| BindingFlags.NonPublic %| 
                               BindingFlags.DeclaredOnly);
      List.Iter (mems, DumpMember);
    }
  }
} // end ns
