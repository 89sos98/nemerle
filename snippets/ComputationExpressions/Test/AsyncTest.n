using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.ComputationExpressions;
using Nemerle.ComputationExpressions.Async;

namespace Test
{
  public class AsyncTest
  {
    [TestCaseAttribute(<#
Value(20)
Value(20)
Value(20)
Value(121)
Value(121 20)
Value(20 123)
Value(20 20)
#>)]
    public static Test1(stream : IO.TextWriter) : void
    {
      def fn(n)
      {
        comp async
        {
          if (n < 20)
            returncomp fn(n + 1);
          else
            return n;
        }
      }
      def f(n1, n2)
      {
        comp async
        {
          defcomp n1 = fn(n1);
          defcomp n2 = fn(n2);
          return $"$n1 $n2";
        }
      }
      def li = [fn(1), fn(10), fn(15), fn(121)];
      def ls = [f(121, 1), f(11, 123), f(11, 4)];
      def li = li.Map(_.Start());
      def ls = ls.Map(_.Start());
      li.Map(_.GetResult()).Iter(stream.WriteLine(_));
      ls.Map(_.GetResult()).Iter(stream.WriteLine(_));
    }

    [TestCaseAttribute(<#
Value(243)
Value(270)
Value(297)
Value(135)
Value(121)
Exception(System.ArgumentOutOfRangeException)
#>)]
    public static Test2(stream : IO.TextWriter) : void
    {
      def fn(mutable n)
      {
        comp async
        {
          Console.Error.WriteLine($"Test2.fn($n) thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");
          when (n > 1000)
            throw ArgumentOutOfRangeException();
          while (n < 100)
          {
            when (n % 3 == 0)
            {
              callcomp Async.SwitchTo(SystemThreadPoolExecutionContext.Instance);
              callcomp Async.Yield();
            }
            n *= 3;
          }
          return n;
        }
      }
      def li = [fn(1), fn(10), fn(11), fn(15), fn(121), fn(1213)];
      def li = li.Map(_.Start());
      li.Map(_.GetResult()).Iter(stream.WriteLine(_));
    }

    public static Benchmark() : void
    {
      def count = 500000;
      def step  = 50000;
      {
        def time = System.Diagnostics.Stopwatch.StartNew();
        def arr = array(count);
        for (mutable i = 1; i < count; ++i)
        {
          def x = comp async
          {
            return 12;
          };
          arr[i] = x.Start();
          when (i % step == 0)
            Console.WriteLine($"Start $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
        def time = System.Diagnostics.Stopwatch.StartNew();
        for (mutable i = 1; i < count; ++i)
        {
          _ = arr[i].GetResult();
          when (i % step == 0)
            Console.WriteLine($"End   $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
      }
      {
        def time = System.Diagnostics.Stopwatch.StartNew();
        for (mutable i = 1; i < count; ++i)
        {
          def x = comp async
          {
            return 12;
          };
          _ = x.Start().GetResult();
          when (i % step == 0)
            Console.WriteLine($"Sync  $i $(time.Elapsed) $(i / time.Elapsed.TotalSeconds)");
        }
      }
    }
  }
}
