using System;
using Nemerle.Collections;


namespace NemerleDoc {
module HtmlGenerator
{
  public Page (f : void -> string, fname : string) : void
  {
    def buf = System.Text.StringBuilder();
    _ = buf.Append("<?xml version=\"1.0\"?>\n");
    _ = buf.Append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n");
    _ = buf.Append("  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
    _ = buf.Append("<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\n");
    _ = buf.Append("<head>\n");
    _ = buf.Append("<title>Nemerle Documentation Project</title>\n");
    _ = buf.Append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
    _ = buf.Append("<link rel=\"stylesheet\" type=\"text/css\" href=\"nemerle-doc.css\" />\n");
    _ = buf.Append("</head>\n");
    _ = buf.Append("<body>\n");
    _ = buf.Append(f());
    _ = buf.Append("<div class=\"footer\">Nemerle Documentation Project</div>");
    _ = buf.Append("</body>\n");
    _ = buf.Append("</html>\n");

    def outf = IO.StreamWriter(fname);
    outf.Write(buf);
    outf.Close();
    // Console.WriteLine("---> zapis do {0}", fname);
  }

  public Title (title : string, subtitle : string) : string
  {
    mutable content = "";
    content += "<div class=\"title\">";
    content += "<span class=\"title\">" + title + "</span><br />";
    content += "<span class=\"subtitle\">";
    content += subtitle;
    content += "</span>";
    content += "</div>\n\n";
    content;  
  }

}

variant ElementType
{
  | Unknown
  | Property
  | Method
  | Field
  | Type
}

/// <summary>
/// Top node of the tree representing a 'top' namespace, even if it is
/// empty (how's it called, by the way?)
/// </summary>
class TopNode
{
  
  internal mutable elements : list [ Node ] = [];
    
  /// <summary>A reference on a html page</summary>
  public href : string = this.ToString() + this.GetHashCode().ToString();
  
  internal mutable current : Node;
  
  internal mutable comment : string = "";
  internal mutable remark : string = "";
  internal mutable return : string = "";
  internal mutable param : string = "";
  internal mutable attr : Reflection.TypeAttributes;
  internal mutable info : string;
  internal parent : TopNode;
  
  
  /// <summary>
  /// Create html description (i.e. TOC) of the namespace
  /// </summary>
  internal namespace2html (elements : list [ Node ], ns : string) : string
  {
    // def page_ref = "<a href=\"" + ns + "\">";
    mutable res = "";
    res += "<div class=\"ns-index\">\n";
    res += "<span class=\"ns-index\" id=\"" + this.href + "\">Namespace " + (if (ns.Length == 0) "&lt;empty&gt;" else ns) +"</span>\n";
    foreach (e in elements)      
      when (e.elemType.Equals(ElementType.Type()) || e.elemType.Equals(ElementType.Unknown()))
      {
        def ahref = match (e.elemType) { | Unknown => "#" + e.href | _ => e.html_file + "#" + e.href };
        res += "<div title=\"" + e.full_name + "\" class=\"index-element\">";
        res += match (e.elemType) { | Type => "class" | Unknown => "namespace" | _ => e.elemType.ToString() };
        res += " ";
        res += "<a href=\"" + ahref + "\">" + e.name + "</a>";
        res += if (comment.Length > 0) "<div class=\"komentarz\">Comment: " + comment + "</div>" else "";
        res += if (remark.Length > 0) "<div class=\"uwaga\">Remark: " + remark + "</div>" else "";
        res += "</div>\n";
      }
    res += "</div>\n";
    res
  }
  
  /// <summary>
  /// Creates Table of Content for the current namespace. The current node is
  /// always a namespace.
  /// </summary>
  public virtual ToIndex (content : ref string) : void
  {
    // first group types in 'anonymous' namespace
    mutable is_anonymous_ns = false;
    foreach (e in elements)      
      when (e.elemType.Equals(ElementType.Type())) is_anonymous_ns = true;
    
    // add elements in anonymous
    when (is_anonymous_ns)
    {
      content += namespace2html(this.elements, "");
      foreach (e in this.elements)
          unless (e.elemType.Equals(ElementType.Unknown())) content += e.ToHtml()
    }
        
    foreach (e in elements)
       when (e.elemType.Equals(ElementType.Unknown())) e.ToIndex(ref content)
  }
  
  /// <summary>
  /// Creates description of the current node, i.e. of the current namespace
  /// </summary>
  public virtual infoPages () : void
  {       
    foreach (e in elements)
        when (e.elemType.Equals(ElementType.Unknown())) e.infoPages();    
  }
  
  /// <summary>Add comment to the current element</summary>
  public Comment(str : string) : void { 
    current.comment += str;
  }
  
  /// <summary>Add remark to the current element</summary>
  public Remark(str : string) : void { 
    current.remark += str;
  }
  
  /// <summary>Add return info to the current element</summary>
  public Return(str : string) : void { 
    current.return += str;
  }
  
  /// <summary>Add param info to the current element</summary>
  public Param(str : string) : void { 
    current.param += str;
  }   
  
}


class Node : TopNode
{
  public mutable elemType : ElementType = ElementType.Unknown();
  /// <summary>Name of the element</summary>
  public mutable name : string;
  /// <summary>Full name of the element (with namespaces path)</summary>
  public mutable full_name : string = "";
  
  /// <summary>Returns the name of a file including description of the current node</summary>
  public html_file : string {
    get { if (parent is Node) (parent :> Node).full_name + ".html" else "index.html"}
  }
  
  /// <summary>
  /// If the current node is a namespace, it creates a table of content.
  /// </summary>
  public override ToIndex (content : ref string) : void
  {
    when (this.elemType.Equals(ElementType.Unknown()))
    {
      // Console.WriteLine("Podstrona typu {0}, nazwa {1}", this.elemType, this.full_name);
      // self-explanation
      content += namespace2html(this.elements, this.full_name);
    
      foreach (e in elements)
        when (e.elemType.Equals(ElementType.Unknown())) e.ToIndex(ref content);
    }
  }

  /// <summary>
  /// Creates a html page for the current namespace
  /// </summary>
  public override infoPages () : void
  {    
    // Console.WriteLine("Zapis pliku {0}", this);
    when (this.elemType.Equals(ElementType.Unknown()))
    {
      def fname = this.full_name;
      mutable content = "";
      content += HtmlGenerator.Title("Nemerle Library", "Namespace " + fname);
      foreach (e in elements)
        content += e.ToHtml();
      HtmlGenerator.Page ( fun () { content }, fname + ".html");
    }
   
    foreach (e in elements)
      when (e.elemType.Equals(ElementType.Unknown())) e.infoPages();    
  }
  

  public this(name : string, prefiks : string, parent : TopNode) {
      this.name = name;
      this.full_name = prefiks;
      this.parent = parent;
      // Console.WriteLine("Nowy element Name " + prefiks);
  }
  
  
  
  filteredIter (l : list [ Node ], cond : Node -> bool, iter : Node -> string) : string
  {
    mutable res = "";
    foreach (e in l) when (cond(e)) res += iter(e);
    res;
  }
  
  /// <summary>
  /// Create html explanation for the current node.
  /// </summary>
  public ToHtml () : string
  {
    mutable res = "";
    mutable com = if (comment.Length > 0) "<div class=\"komentarz\">" + comment + "</div>" else "";
    com += if (remark.Length > 0) "<div class=\"uwaga\">Remark: " + remark + "</div>" else "";
    com += if (return.Length > 0) "<div class=\"return\">Return: " + return + "</div>" else "";
    com += if (param.Length > 0) "<div class=\"param\">Parameter: " + param + "</div>" else "";
    
    
    mutable att = "";
    unless (this.attr.Equals(null))
        att += " " + this.attr.ToString() + " ";
    
    match (elemType) {
      | Unknown => 
          /**
          res += att + "<span class=\"namespace\" title=\"" + this.full_name + "\">" + name + "</span>\n";
          res += com;
          res += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Method()) }, fun (e) { e.ToHtml() });
          res += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Property()) }, fun (e) { e.ToHtml() });
          res += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Field()) }, fun (e) { e.ToHtml() });
          res += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Type()) }, fun (e) { e.ToHtml() });
          // foreach (e in elements) when (!e.elemType.Equals(ElementType.Unknown())) res += e.ToHtml();
          **/
          res = "";
      | Property => res += "Property: " + att + name + com;
      | Method => res += "<span title=\"" + this.full_name + "\">Method: " + att + name + com + "</span>";
      | Field => res += "Field: " + att + name + com;
      | Type =>
          res += "<div class=\"ns-index\"" + ("id=\"" + this.href + "\"") + ">Class " + att;
          res += "<span class=\"ns-index\" title=\"" + this.full_name + "\">" + name + "</span>\n";
          res += com;
          mutable components = "";
          components += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Method()) },   fun (e) { "<li>" + e.ToHtml() + "</li>\n"});
          components += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Property()) }, fun (e) { "<li>" + e.ToHtml() + "</li>\n"});
          components += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Field()) },    fun (e) { "<li>" + e.ToHtml() + "</li>\n"});
          components += filteredIter(elements, fun (e) { e.elemType.Equals(ElementType.Type()) },     fun (e) { "<li>" + e.ToHtml() + "</li>\n"});
          when (components.Length > 0)
            res += "<ul>\n" + components + "</ul>\n";
          res += "</div>\n";
    }
    res  
  }
}

// -----------------------------------------------
class DataTree
{
  split (str : string) : char*string { (str[0], str.Substring(2)) }
  
  mutable tree : TopNode = TopNode();
  mutable sources : list [ string ] = [];
  
  public sourcesToString () : string
  {
    mutable res = "";
    res += 
        match (sources.Length) {
              | 0 => "No sources?"
              | 1 => "Source: "
              | _ => "Sources:<br /> "
        }
    res += List.Head(sources);
    def r = List.Tail(sources);
    foreach (e in r) res += ", " + e;
    res
  }
  
  public AddSource(src : string) : void
  {
    sources += [ src ]
  }     
  
  smart_strip1(path : string) : list [ string ]
  {
    smart_strip(path, '(')
  }
  
  /// <summary>Strip, but avoid stripping '[' char</summary>
  smart_strip2(path : string) : list [ string ]
  {
    smart_strip(path, '[')
  }
  
  smart_strip(path : string, sep : char) : list [ string ]
  {
    // first split into name and parameters
    def par_pos = path.IndexOf(sep);
    def path_name = if (par_pos != -1) path.Substring(0, par_pos) else path;
    def param = if (par_pos != -1) path.Substring(par_pos) else "";
    
    // Console.WriteLine("{0} = ({1},{2})", path, path_name, param);
    
    mutable token_list = Nemerle.Collections.List.FromArray(path_name.Split(array ['.']));
    mutable res = [];
    // analyze name
    while (token_list.Length > 1)
    {
      mutable r = List.Hd(token_list);
      
      /// when not .., i.e. ctor
      when (r.Length != 0)
      {
        res += [ r ];
        // Console.WriteLine("<-- " + r);
      }
      when (token_list.Length > 0) token_list = List.Tl(token_list)
    } // while ()
    def last = List.Hd(token_list);
    def last_token = if (par_pos > -1) (last + param) else last;
    res += [ last_token ];
    res
  }
  
  memb (set : TopNode, name : string) : Node
  {
    mutable res = null;
    foreach (e in set.elements) when (name.Equals(e.name)) res = e;
    res;
  }
  
  /// <summary>
  /// Add a new element to the tree. Used by assembly analyzer.
  /// </summary>
  public AddItem(str : string, attr : System.Reflection.TypeAttributes, ty : ElementType) : void
  {
    def path = smart_strip2(str);
    // Console.WriteLine("Ścieżka {0}", str);
    mutable pointer = tree;
    mutable next;
    foreach (edge in path)
    {    
      // Console.WriteLine("--> podścieżka " + edge);
      next = memb(pointer, edge);
      when (next == null)
      {
        def pref = if (pointer is Node) ((pointer :> Node).full_name + "." + edge) else edge;
        next = Node(edge, pref, pointer);
        pointer.elements = pointer.elements + [ next ];
      }
      pointer = next;
    }
    pointer.attr = attr; 
    next.elemType = ty
  }
  
  /// <summary>
  /// Add a new element to the tree. Used by XML analyzer.
  /// </summary>
  public AddItem(ns_path : string, typename : string, ty : ElementType) : void
  {
    def path = smart_strip2(ns_path) + [ typename ];
    // Console.WriteLine("Ścieżka {0}", str);
    mutable pointer = tree;
    mutable next;
    foreach (edge in path)
    {    
      // Console.WriteLine("--> podścieżka " + edge);
      next = memb(pointer, edge);
      when (next == null)
      {
        def pref = if (pointer is Node) ((pointer :> Node).full_name + "." + edge) else edge;
        next = Node(edge, pref, pointer);
        pointer.elements = pointer.elements + [ next ];
      }
      pointer = next;
    }
    next.elemType = ty
  }
  
  /// <summary>
  /// Add a new element to the tree. Used by assembly analyzer.
  /// </summary>
  public AddItem (str : string) : void
  {
    // System.Console.WriteLine("---> " + str);
    def (tySy, path) = split(str);
    // System.Console.WriteLine("---> split({0}) = ({1}, {2})", str, tySy, path);
    def ty = 
      match (tySy) {
        | 'T' => ElementType.Type();
        | 'F' => ElementType.Field();
        | 'M' => ElementType.Method();
        | 'P' => ElementType.Property()
        | _   => ElementType.Unknown()
      }
      
    def pathList = smart_strip1(path);
    mutable pointer = tree;
    mutable next;
    foreach (edge in pathList)
    {    
      next = memb(pointer, edge);
      when (next == null)
      {
        def pref = if (pointer is Node) ((pointer :> Node).full_name + "." + edge) else edge;
        next = Node(edge, pref, pointer);
        pointer.elements = pointer.elements + [ next ];
      }
      pointer = next;
    }
    tree.current = next;
    tree.current.elemType = ty;
    // Console.WriteLine("Added {0} {1}", tree.current.full_name, tree.current.elemType);
  }
    
  public AddComment (str : string) : void 
  {
    tree.Comment(str);
  }
  
  public AddRemark (str : string) : void 
  {
    tree.Remark(str);
  }
  
  public AddReturn (str : string) : void 
  {
    tree.Return(str);
  }
  
  public AddParam (str : string) : void 
  {
    tree.Param(str);
  }
  
  
  index_content () : string
  {
    mutable content = "";
    content += HtmlGenerator.Title("Nemerle Library", this.sourcesToString());
    // teraz zawartość
    
    tree.ToIndex(ref content);
    content;
  }
  
  
  public indexPage() : void
  {
    HtmlGenerator.Page(index_content, "index.html");
  }
  
  public infoPages () : void
  {
    tree.infoPages();
  }
  
}

}
