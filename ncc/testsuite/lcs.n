(*
 * Longest Common Subsequence
 *)

class IntArray2D {

  private mutable _m : System.Array;

  public this (w : int, h : int) {
      
    this._m <- System.Array.CreateInstance (w.GetType (), w + 1, h + 1);
  }
  
  public Get (x : int, y : int) : int {
  
    (this._m.GetValue (x, y) :> int)
  }
  
  public Set (x : int, y : int, value : int) : void {
  
    this._m.SetValue (value, x, y)
  }
}


class LCS
{
  private static Max2 (x : int, y : int) : int {
  
    if (x < y) y else x;
  }
  
  private static Max3 (x : int, y : int, z : int) : int {
  
    Max2 (Max2 (x, y), z)
  }
  
  private mutable _M : IntArray2D;
  private mutable _l : array (char);
  private mutable _r : array (char);
  
  
  private Step (i : int, j : int) : int {
     
    if (i == 0 || j == 0) {
    
      this._M.Set (i, j, 0);
      0
    }
    else { 
      def value =
        if (this._l [i - 1] != this._r [j - 1]) {
        
          LCS.Max2 (this.Step (i, j - 1), this.Step (i - 1, j))
        }
        else {
        
          LCS.Max3 (this.Step (i - 1, j - 1) + 1, this.Step (i - 1, j), this.Step (i, j - 1));
        };
        
      this._M.Set (i, j, value);
      value
    }
  }
  
  
  public this (l : string, r : string) {
  
    System.Console.WriteLine ("Calculating LCS of {0} and {1}...", l, r);
    
    this._M <- IntArray2D (l.Length, r.Length);
    this._l <- l.ToCharArray ();
    this._r <- r.ToCharArray ();
    
    print_endline (string_of_int (this.Step (l.Length, r.Length)));
  }
  
  
  public static Main () : void {
  
    def r1 = LCS ("alamakotazz", "komarezzk");
    def r2 = LCS ("axbyczd", "exfygzh");
    
    ()
  }
}
