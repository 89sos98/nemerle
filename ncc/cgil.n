(*
 * Copyright (c) 2003 University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

namespace Nemerle.Compiler 
{
  open Nemerle.Compiler;
  open Nemerle.Compiler.Tyops;
  open Nemerle.Compiler.Typedtree;
  open Nemerle.Collections;

  (**
   * An IL code generator
   *)
  public class CGIL
  {
    (* -- PUBLIC CONSTRUCTORS ---------------------------------------------- *)
    
    (** 
     * Outputs objects from cgtree.n as IL code. 
     *)
    public this (decls : list (CM_class))
    {
      (* create a weak assembly name and define a dynamic assembly *)
      this._assembly_name <- System.Reflection.AssemblyName ();
      this._assembly_name.Version <- System.Version (1, 0, 0, 0); // FIXME
      this._assembly_name.Name <- "CGILTest"; // FIXME

      this._assembly_builder <- 
        System.AppDomain.CurrentDomain.DefineDynamicAssembly (this._assembly_name, 
          (* AssemblyBuilderAccess.RunAndSave *) (3 :> System.Reflection.Emit.AssemblyBuilderAccess)); // FIXME

      (* create a dynamic module *)
      this._module_builder <- this._assembly_builder.DefineDynamicModule ("CGILTest", "cgil-test.dll");      

      (* iterate the top declarations, adding them to the newly created assembly *)
      def emit_decl (decl : CM_class) : void {
        this.process_top_level_declaration (decl)
      };
      List.iter (emit_decl, decls);
      
      (* save the assembly *)
      this._assembly_builder.Save ("cgil-test.dll"); // FIXME
    }


    (* -- PRIVATE METHODS -------------------------------------------------- *)
    
    (**
     * Outputs a top level class
     *)
    private process_top_level_declaration (decl : CM_class) : void
    {
      Message.debug ("processing class " + decl.ns + decl.name);

(*
      def attrs = 
        System.Reflection.TypeAttributes.Class | System.Reflection.TypeAttributes.Public;

      def tb = this._module_builder.DefineType (decl.ns + decl.name, attrs);
*)
      
      ()
    }


    (* -- PRIVATE FIELDS --------------------------------------------------- *)

    private mutable _assembly_name : System.Reflection.AssemblyName;
    private mutable _assembly_builder : System.Reflection.Emit.AssemblyBuilder;
    private mutable _module_builder : System.Reflection.Emit.ModuleBuilder;
    
  } (* end of the module *)
  
} (* end of the namespace *)
