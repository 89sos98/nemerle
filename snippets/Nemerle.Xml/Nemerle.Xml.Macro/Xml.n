using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System.Xml.Linq;
using X = System.Xml.Linq;

namespace Nemerle.Xml
{
  public macro XmlQuoting(expr)
  syntax ("xml", expr)
  {
    Impl.ToXLinq(Nemerle.Macros.ImplicitCTX(), expr)
  }

  internal module Impl
  {
    internal ToXLinq(typer : Typer, expr : PExpr) : PExpr
    {
      _ = typer;
      
      match (expr)
      {
        | PExpr.Literal(Literal where(RawString=rs)) =>
          if (rs.Length == 0 || rs[0] != '<')
            Message.FatalError(expr.Location, "The literal in 'xml' macro must be recursive string.")
          else
          {
            def parser = XmlQuotParser();
            def str = rs.Substring(2, rs.Length - 4);
            match (parser.Parse(str))
            {
              | Some(result) => XmlAstToXLinq(result)
              | _ => Message.FatalError(expr.Location, "Invalid XML literal")
            }
          }
          
        | _ => Message.FatalError(expr.Location, "You must pass recursive string with XML literal into 'xml' macro.")
      }
    }

    //XmlAstToXLinq(xmlAst : XmlAst) : PExpr
    //{
    //    | Attr(name, value)     => null
    //    | Text(Splicable.Value(value)) => <[ X.XText($(value : string)) ]>
    //    | Tag(name, content)    => <[ X.XElement($(value : string)) ]>
    //    | Splice(expr, isList)  => null
    //}
  }
}
