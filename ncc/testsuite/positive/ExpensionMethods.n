using Nemerle.IO;
using System.Console;
using Nemerle.Utility;
using System.Collections.Generic;
using SCG = System.Collections.Generic;

public module Ext
{
  public WithPrePostPolicy(this call : void -> void, pre : (void -> void) -> void -> void, post : void -> void) : void -> void
  {
    fun() { def newCall = pre(call); try { newCall(); } finally { post(); } }
  }
}

module Program
{
  public Main () : void
  {
    // IsEmpty() test
    WriteLine("IsEmpty() test");
    WriteLine(array[1].IsEmpty());
    WriteLine(array(0).IsEmpty());
    WriteLine([1].IsEmpty());
    WriteLine([1].Tail.IsEmpty());
    WriteLine(SCG.List().IsEmpty());
    WriteLine(SCG.List(array[1, 2]).IsEmpty());
    def dic = SCG.Dictionary();
    dic.Add("aaa", 123);
    WriteLine(dic.IsEmpty());
    dic.Clear();
    WriteLine(dic.IsEmpty());

    // ForAll2 test
    WriteLine("ForAll2 test");
    WriteLine(Sec1().ForAll2(Sec1(), _ == _));
    WriteLine(Sec1().ForAll2(Sec1L(), _ == _));
    WriteLine(Sec2().ForAll2(Sec2().ToArray(), _ == _));
    WriteLine(Sec2().ToArray().ForAll2(Sec2().ToArray(), _ == _));
    WriteLine(List(Sec1()).ForAll2(Sec1().ToArray(), _ == _));
    WriteLine(List(Sec1()).ForAll2(List(Sec1()), _ == _));
    WriteLine(List(Sec1()).ToArray().ForAll2(List(Sec1()), _ == _));
    WriteLine(Sec1().ForAll2(Sec2(), _ == _));
    WriteLine(List(Sec1()).ForAll2(Sec2().ToArray(), _ == _));
    WriteLine(List(Sec1()).ForAll2(List(Sec2()), _ == _));
    WriteLine(Sec1().ToArray().ForAll2(Sec2().ToArray(), _ == _));
    
    WriteLine("WithPrePostPolicy test");
    def test() : void { Write("Test!") }
    def f = test.WithPrePostPolicy(fun(f) { Write("Pre:"); fun() { Write("In call:"); f() }}, // pre
                                   () => Write(":Post"));                                     // post
    f();
  }

  Sec1() : IEnumerable[int]
  {
    yield 2; yield 5; yield 1; yield 4; yield 3;
  }

  Sec1L() : IEnumerable[long]
  {
    foreach (val in Sec1())
      yield val;
  }

  Sec2() : IEnumerable[int]
  {
    foreach (val in Sec1())
      yield val;
    
    yield 6;
  }
}

/*
BEGIN-OUTPUT
IsEmpty() test
False
True
False
True
True
False
False
True
ForAll2 test
True
True
True
True
True
True
True
False
False
False
False
WithPrePostPolicy test
Pre:In call:Test!:Post
END-OUTPUT
*/
