using System;
using System.IO;
using System.Xml;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.TextEditor.Document;

using Nemerle.Utility;

namespace Nemerle.SharpDevelop {

    /// <summary>
    /// Description of NemerleProject.
    /// </summary>
    public sealed class NemerleLanguageBinding : ILanguageBinding {

        static this() {
            def nemerle_env = Environment.GetEnvironmentVariable("Nemerle");
            def programs_env = Environment.GetEnvironmentVariable("ProgramFiles");

            NemerleBinPath = 
                if(string.IsNullOrEmpty(nemerle_env))
                    Path.Combine(programs_env, "Nemerle")
                else
                    nemerle_env;

            // TODO: Nemerle-Mode.xshd should be placed in resources.
            def addin_dir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            def mode_provider = FileSyntaxModeProvider(Path.Combine(addin_dir, "Resources"));
            HighlightingManager.Manager.AddSyntaxModeFileProvider(mode_provider);
        }

        public static NemerleBinPath : string {
            get {
                PropertyService.Get("Nemerle.SharpDevelop.NemerleBinPath")
            }
            private set {
                PropertyService.Set("Nemerle.SharpDevelop.NemerleBinPath", value)
            }
        }

        public Language : string {
            get { NemerleLanguageProperties.LanguageName }
        }

        public LoadProject(provider : IMSBuildEngineProvider, fileName : string, projectName : string) : IProject {
            NemerleProject(provider, fileName, projectName);
        }

        public CreateProject(info : ProjectCreateInformation) : IProject {
            NemerleProject(info);
        }

    }

}
