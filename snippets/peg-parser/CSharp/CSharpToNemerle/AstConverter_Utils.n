using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MakeName(id : CS.Identifier) : PT.Name
    {
      PT.Name.NameInCurrentColor(id.Id, id.NLocation(), currentEnv)
    }

    MakeName(name : string, loc : Location) : PT.Name
    {
      PT.Name.NameInCurrentColor(name, loc, currentEnv)
    }

    MakeSplicableName(id : CS.Identifier) : PT.Splicable
    {
      PT.Splicable.Name(MakeName(id))
    }

    MakeSplicableName(expr : CS.Expr) : PT.Splicable
    {
      | Ref(id) => MakeSplicableName(id)
      | _ => Message.FatalError(expr.NLocation(), $"`$expr' is not valid name")
    }

    QualifiedIdentifier(name : CS.Expr, allowAlias : bool = true) : list[string]
    {
      def walk_expr(expr : CS.Expr, result : list[string]) {
        match(expr) {
          | Alias(id) when allowAlias
          | Ref(id) =>
            id.Id :: result

          | Member(expr, member) =>
            walk_expr(expr, walk_expr(member, result))

          | Alias(_) =>
            Message.Error(expr.NLocation(), "namespace alias qualifier not allowed here");
            result

          | _ =>
            Util.ice("invalid name")
        }
      }
      walk_expr(name, [])
    }
  }
}