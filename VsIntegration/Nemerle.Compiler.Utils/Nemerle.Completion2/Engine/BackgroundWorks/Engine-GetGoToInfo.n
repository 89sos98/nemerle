using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using Nemerle.Completion2;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    public BeginGetGotoInfo(source : ISource, line : int, col : int, kind : GotoKind) : GotoInfoAsyncRequest
    {
      def request = GotoInfoAsyncRequest(AsyncRequestType.GetGotoInfo, this, source, GetGotoInfo, line, col, kind);
      request.GotoInfos = array(0);
      AsyncWorker.AddWork(request);
      request
    }

    public GetGotoInfo(source : ISource, line : int, col : int, kind : GotoKind) : array[GotoInfo]
    {
      def request = BeginGetGotoInfo(source, line, col, kind);
      _ = request.AsyncWaitHandle.WaitOne();
      request.GotoInfos
    }

    public GenerateCode(member : IMember, fileIndex : int, writer : System.IO.TextWriter) : GotoInfo
    {
      def mi = member.GetHandle();
			def ty = if (mi.MemberType == SR.MemberTypes.TypeInfo || mi.MemberType == SR.MemberTypes.NestedType) 
                 mi :> Type else mi.DeclaringType;

      def nameAndGenericArgs =
        if (ty.IsGenericType)
          (ty.FullName.Split('`')[0], ty.GetGenericArguments().Length);
        else
          (ty.FullName, 0);

      def typeInfo = Lookup(nameAndGenericArgs);
      Debug.Assert(null != typeInfo, $"type $(ty.FullName) not found");

      def generator = SourceGenerator(fileIndex, writer, mi);
      generator.WriteTypeDeclaration(typeInfo);
      GotoInfo(generator.Location);
    }

    public GenerateCode(ty : System.Type, member : SR.MemberInfo, fileIndex : int, writer : System.IO.TextWriter) : GotoInfo
    {
      def nameAndGenericArgs =
        if (ty.IsGenericType)
          (ty.FullName.Split('`')[0], ty.GetGenericArguments().Length);
        else
          (ty.FullName, 0);

      def typeInfo = Lookup(nameAndGenericArgs);
      Debug.Assert(null != typeInfo, $"type $(ty.FullName) not found");

      def generator = SourceGenerator(fileIndex, writer, member);
      generator.WriteTypeDeclaration(typeInfo);
      GotoInfo(generator.Location);
    }

    private GetGotoInfo(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
      def fileIndex = request.Source.FileIndex;

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> GotoInfoAsyncRequest;
            req.GotoInfos = 
              match (req.Kind)
              {
                | Definition          => project.GetDefinition(fileIndex, req.Line, req.Column);
                | Usages              => project.GetUsages    (fileIndex, req.Line, req.Column);
                | UsagesInCurrentFile => project.GetUsages    (fileIndex, req.Line, req.Column); //!!!
                | _                   => array(0)
              };
            
            request.MarkAsCompleted();
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetGotoInfo operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace
