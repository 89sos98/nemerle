/*using System;
using SCG = System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using LRPEGCC;

namespace FSM
{
  public class State
  {
    public Add(to : State, signal : RangeSet) : void
    {
      if (_transition.ContainsKey(to))
        _transition[to] = _transition[to].Sum(signal);
      else
        _transition.Add(to, signal);
    }

    public AddEpsilon(to : State) : void
    {
      _ = _epsilonTransition.Add(to);
    }

    public Transitions : SCG.IEnumerable[State * RangeSet]
    {
      get { _transition }
    }

    public Epsilon : SCG.IEnumerable[State]
    {
      get { _epsilonTransition }
    }

    private _transition : Hashtable[State, RangeSet] = Hashtable();
    private _epsilonTransition : SCG.HashSet[State] = SCG.HashSet();

    public static Print(start : State, end : State) : void
    {
      
    }
  }

  public module Template
  {
    public Parse(template : string) : State * State
    {
      def start = State();
      mutable end = State();
      start.AddEpsilon(end);
      foreach (c in template)
      {
        def (s, e) = match (c)
        {
        | '*' =>
          def s = State();
          def e = State();
          s.AddEpsilon(e);
          e.AddEpsilon(s);
          s.Add(e, RangeSet().AddRange('\u0000', '\uFFFF'));
          (s, e)
        | '?' =>
          def s = State();
          def e = State();
          s.Add(e, RangeSet().AddRange('\u0000', '\uFFFF'));
          (s, e)
        | c =>
          def s = State();
          def e = State();
          s.Add(e, RangeSet().AddRange(c, c));
          (s, e)
        }
        end.AddEpsilon(s);
        end = e;
      }
      (start, end);
    }
  }
}
*/