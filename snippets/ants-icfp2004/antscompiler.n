public variant ConstantExpr {
  | Const_const { v : int; }
  | Const_ref { name : string; }
  | Const_binary { op : BinaryOperator; e1 : ConstantExpr; e2 : ConstantExpr; }
  | Const_not { e : ConstantExpr; }
}

public variant BinaryOperator {
  | Bin_plus
  | Bin_minus
  | Bin_equal
  | Bin_less_than
  | Bin_more_than
}

public variant NodeCondition {
  | C_sense {
      dir : Direction;
      cond : What;
    }
  | C_pickup
  | C_move
  | C_flip { max : int; }
}

public variant NodeAction {
  | A_mark { color : int; }
  | A_unmark { color : int; }
  | A_drop
  | A_turn { is_left : bool; }
}

public variant BooleanFormula {
  | BF_cond { cond : NodeCondition; }
  | BF_dummy_true
  | BF_const { cond : ConstantExpr; }
  | BF_not { v : BooleanFormula; }
  | BF_and { v1 : BooleanFormula; v2 : BooleanFormula; }
  | BF_or { v1 : BooleanFormula; v2 : BooleanFormula; }
}

public variant Stmt {
  | S_if { 
      cond : BooleanFormula;
      then_part : list <Stmt>; 
      else_part : list <Stmt>; 
    }
  | S_action { act : NodeAction; }
  | S_label { name : string; }
  | S_goto { assigns : list <string * BooleanFormula>; target : string; }
  | S_vars {
      vars : list <string * int>;
      body : list <Stmt>;
    }

  public override ToString () : string
  {
    match (this) {
      | S_label (n) => "S_label (" + n + ")"
      | S_goto (_, n) => "S_goto (" + n + ")"
      | _ => this.GetType ().ToString ()
    }
  }
}

public variant What {
  | C_friend
  | C_foe
  | C_friend_with_food
  | C_foe_with_food
  | C_food
  | C_rock
  | C_marker { color : int; }
  | C_foe_marker
  | C_home
  | C_foe_home

  public override ToString () : string
  {
    match (this) {
      | C_friend => "Friend"
      | C_foe => "Foe"
      | C_friend_with_food => "FriendWithFood"
      | C_foe_with_food => "FoeWithFood"
      | C_food => "Food"
      | C_rock => "Rock"
      | C_marker (c) => "Marker " + c.ToString ()
      | C_foe_marker => "FoeMarker"
      | C_home => "Home"
      | C_foe_home => "FoeHome"
    }
  }
}

public variant Direction {
  | D_here
  | D_ahead
  | D_left
  | D_right

  public override ToString () : string
  {
    match (this) {
      | D_here => "Here"
      | D_ahead => "Ahead"
      | D_left => "LeftAhead"
      | D_right => "RightAhead"
    }
  }
}
