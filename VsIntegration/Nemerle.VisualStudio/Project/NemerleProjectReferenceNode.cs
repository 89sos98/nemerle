using System;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Project;
using System.IO;

namespace Nemerle.VisualStudio.Project
{
	[CLSCompliant(false), ComVisible(true)]
	public class NemerleProjectReferenceNode : ProjectReferenceNode
	{
		#region ctors

		/// <summary>
		/// Constructor for the ReferenceNode. It is called when the project is reloaded, when the project element representing the refernce exists. 
		/// </summary>
		public NemerleProjectReferenceNode(ProjectNode root, ProjectElement element)
			: base(root, element)
		{
		}

		/// <summary>
		/// constructor for the NemerleProjectReferenceNode
		/// </summary>
		public NemerleProjectReferenceNode(ProjectNode root, string referencedProjectName, string projectPath, string projectReference)
			: base(root, referencedProjectName, projectPath, projectReference)
		{
		}

		#endregion

    protected override NodeProperties CreatePropertiesObject()
    {
      return new NemerleProjectReferencesProperties(this, "Project Reference Properties");
      //return new ProjectReferencesProperties(this);
    }

		/// <summary>
		/// Gets the full path to the assembly generated by this project.
		/// </summary>
		public new string ReferencedProjectOutputPath
		{
			get
			{
				// Make sure that the referenced project implements the automation object.
				if (null == this.ReferencedProjectObject)
					return null;

				// Get the configuration manager from the project.
				EnvDTE.ConfigurationManager confManager = this.ReferencedProjectObject.ConfigurationManager;
				if (null == confManager)
					return null;

				// Get the active configuration.
				EnvDTE.Configuration config = confManager.ActiveConfiguration;
				if (null == config)
					return null;

				//Debug.WriteLine("config.Properties.Count = " + config.Properties.Count);
				//foreach (EnvDTE.Property prop in config.Properties)
				//	Debug.WriteLine(prop.Name + " = " + prop.Value);

				// Get the output path for the current configuration.
				EnvDTE.Property outputPathProperty = config.Properties.Item("OutputPath");
				if (null == outputPathProperty)
					return null;
				
				string outputPath = outputPathProperty.Value.ToString();

				// Ususally the output path is relative to the project path, but it is possible
				// to set it as an absolute path. If it is not absolute, then evaluate its value
				// based on the project directory.
				if (!Path.IsPathRooted(outputPath))
				{
					string projectDir = Path.GetDirectoryName(this.Url);
					outputPath = Path.Combine(projectDir, outputPath);
				}

				// Now get the name of the assembly from the project.
				// Some project system throw if the property does not exist. We expect an ArgumentException.
				EnvDTE.Property assemblyNameProperty = null;
				try
				{
					assemblyNameProperty = this.ReferencedProjectObject.Properties.Item("OutputFileName");
				}
				catch (ArgumentException)
				{
				}

				if (null == assemblyNameProperty)
					return null;

				// build the full path adding the name of the assembly to the output path.
				outputPath = System.IO.Path.Combine(outputPath, assemblyNameProperty.Value.ToString());

				return outputPath;
			}
		}

    private EnvDTE.Project _referencedProject;

    /// <summary>
    /// Gets the automation object for the referenced project.
    /// </summary>
    /// Это свойство перекрывается чтобы исправить баг присутствующий в реализации MS (см. коментарий "VladD2:")
    internal new EnvDTE.Project ReferencedProjectObject
    {
      get
      {
        // If the referenced project is null then re-read.
        if (this._referencedProject == null)
        {

          // Search for the project in the collection of the projects in the
          // current solution.
          EnvDTE.DTE dte = (EnvDTE.DTE)this.ProjectMgr.GetService(typeof(EnvDTE.DTE));
          if ((null == dte) || (null == dte.Solution))
          {
            return null;
          }
          foreach (EnvDTE.Project prj in dte.Solution.Projects)
          {
            //Skip this project if it is an umodeled project (unloaded)
            if (string.Compare(EnvDTE.Constants.vsProjectKindUnmodeled, prj.Kind, StringComparison.OrdinalIgnoreCase) == 0)
            {
              continue;
            }

            // Get the full path of the current project.
            EnvDTE.Property pathProperty = null;
            try
            {
              if (prj.Properties == null) // VladD2: Fix бага в реализации MS. 
                continue;

              pathProperty = prj.Properties.Item("FullPath");
              if (null == pathProperty)
              {
                // The full path should alway be availabe, but if this is not the
                // case then we have to skip it.
                continue;
              }
            }
            catch (ArgumentException)
            {
              continue;
            }
            string prjPath = pathProperty.Value.ToString();
            EnvDTE.Property fileNameProperty = null;
            // Get the name of the project file.
            try
            {
              fileNameProperty = prj.Properties.Item("FileName");
              if (null == fileNameProperty)
              {
                // Again, this should never be the case, but we handle it anyway.
                continue;
              }
            }
            catch (ArgumentException)
            {
              continue;
            }
            prjPath = System.IO.Path.Combine(prjPath, fileNameProperty.Value.ToString());

            // If the full path of this project is the same as the one of this
            // reference, then we have found the right project.
            if (NativeMethods.IsSamePath(prjPath, Url))
            {
              this._referencedProject = prj;
              break;
            }
          }
        }

        return this._referencedProject;
      }
      set
      {
        this._referencedProject = value;
      }
    }
  }
}
