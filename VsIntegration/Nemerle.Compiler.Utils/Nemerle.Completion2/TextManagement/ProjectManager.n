using System;

using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class ProjectManager : IProjectSources
  {
    public Engine : Engine
    {
      mutable _engine : Engine;
      get { ManagerClass.Instance = _engine; _engine; }
      set { _engine = value }
    }

    /// Get manager of code file by file path.
    public virtual GetSource(filePath : string) : ISource
    {
      SimpleSourceTextManager(Location.GetFileIndex(filePath), this.Engine.Sources[filePath])
    }

    /// Get manager of code file by file index.
    public GetSource(fileIndex : int) : ISource
    {
      def filePath = Location.GetFileName(fileIndex);
      GetSource(filePath)
    }

    [Record]
    internal class SimpleSourceTextManager : ISource
    {
      [Accessor] _fileIndex : int;
      [Accessor] _code : string;

      /// !!! Coordinats is zero based!
      private ToPositionImpl(
        startLine     : int, 
        startChar     : int, 
        startPosition : int,
        line          : int, 
        @char         : int
      )
        : int
      {
        assert(line > startLine || line == startLine && @char >= startChar);
        def code        = Code;
        mutable i       = startPosition;
        def peek() { if (i < code.Length) code[i] else '\0' }
        def next() { def ch = peek(); i++; ch }
        def skip() { i++; }

        def scanLines(ln, stopLn)
        {
          def ch = next();
          def x = i; def code = code; _ = x;

          if (ln == stopLn)
          {
            def chOffset = if (startLine == stopLn) @char - startChar else @char;
            if (chOffset + i >= code.Length)
              throw ArgumentOutOfRangeException("char");
            else if (code.IndexOfAny(array['\r', '\n'], i - 1, chOffset) >= 0)
              throw ArgumentOutOfRangeException("char");
            else
              i + chOffset - 1
          }
          else match (ch)
          {
            | '\r' =>
              when (peek() == '\n')
                skip();  
             scanLines(ln + 1, stopLn)

            | '\n' => scanLines(ln + 1, stopLn)
            | '\0' => throw ArgumentOutOfRangeException("line or char");
            | _    => scanLines(ln, stopLn)
          }
        }

        def result = scanLines(startLine, line);
        assert(result >= 0 && result < code.Length);
        result
      }

      public GetText() : string
      {
        System.Diagnostics.Debug.Assert(_code != null, "_code is null!");
        _code
      }

      /// Return string corresponding to given coordinates.
      /// Coordinats is 1 based.
      public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string
      {
        def startPos = ToPositionImpl(0, 0, 0, lineStart - 1, colStart - 1);
        def endPos   = ToPositionImpl(lineStart - 1, colStart - 1, startPos,
          lineEnd - 1, colEnd - 1);
        Code.Substring(startPos, endPos - startPos);
      }

      /// Return string corresponding to given location.
      /// Coordinats is 1 based.
      public GetRegion(location : Location) : string
      {
        def x = location;
        GetRegion(x.Line, x.Column, x.EndLine, x.EndColumn)
      }

      /// Return string corresponding to given line.
      /// Coordinate is 1 based.
      public GetLine(line : int) : string
      {
        def startPos = ToPositionImpl(0, 0, 0, line - 1, 0);
        def endIndex = Code.IndexOfAny(array['\r', '\n'], startPos, Code.Length - startPos);
        if (endIndex >= 0)
          Code.Substring(startPos, endIndex - startPos);
        else
          Code.Substring(startPos, Code.Length - startPos);
      }

      /// Convert location (line/char coordinate) to position (character offset).
      /// Coordinats is 1 based.
      public GetPositionOfLineIndex(line : int, @char : int) : int
      {
        ToPositionImpl(0, 0, 0, line - 1, @char - 1);
      }

      /// Return coordinate corresponding to given position.
      /// "position" is zero based. Returning coordinate is 1 based.
      public GetLineIndexOfPosition(position : int) : int * int
      {
        mutable i = 0;
        def code  = Code;
        def peek() { if (i < code.Length) code[i] else '\0' }
        def next() { def ch = peek(); i++; ch }
        def skip() { i++; }

        def scanLines(ln, @char)
        {
          if (i == position)
            (ln, @char)
          else match (next())
          {
            | '\r' =>
              when (peek() == '\n')
                skip();  
             scanLines(ln + 1, 1)

            | '\n' => scanLines(ln + 1, 1)
            | '\0' => throw ArgumentOutOfRangeException("position");
            | _    => scanLines(ln, @char + 1)
          }
        }

        scanLines(1, 1);
      }

      public LineCount : int
      {
        // phantom: didn't think whether this implementation right or wrong
        // (guess wrong, but i needed to implement it in some way for use)
        [Obsolete("TODO: implement LineCount right")]
        get
        {
          mutable i = 0;
          mutable position = -1;
          do {
            position = Code.IndexOfAny(array['\r', '\n'], position + 2);
            i++;
          } while (position >= 0);
          --i;
          i
        }
      }

    } // class SimpleSourceTextManager
  } // class ProjectManager
} // namespace Nemerle.Completion2
