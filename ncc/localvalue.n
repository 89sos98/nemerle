/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler {

public variant LocalValueKind
{
  | D_local_fun {
      header : Fun_header; 
      uses_closure_of : list [Fun_header]; 
    }
  | D_fun_parm { kind : ParmKind; }
  | D_local_value
  | D_exn
  | D_pattern_variable
  | D_closurised_this_ptr
}

public class LocalValue 
{
  public loc : Location;
  public name : string;
  public mutable is_ref : bool;
  public mutable ty : TType;
  public id : int;
  public color : int;
  public kind : LocalValueKind;
  
  public mutable parent_fun : Fun_header;
  public mutable in_closure : bool;
  public mutable used_in : SystemMap [int, Fun_header];
  /**
   * Used for pattern variables. True iff variable is used in body of match,
   * not only in guard. 
   */
  public mutable is_pattern_outcome : bool;

  /** True if value was ever used.  Used by unused value warning. */
  public mutable ever_used : bool;
  
  public this (n : string, color : int, k : LocalValueKind, ty : TType, par : Fun_header)
  {
    this.loc = Location_stack.top();
    this.name = n;
    this.color = color;
    this.ty = ty;
    this.kind = k;
    this.is_ref = false;
    this.parent_fun = par;
    this.id = Util.next_id();
    this.used_in = SystemMap ();
  }
    
  public kind_as_string () : string 
  {
    match (this.kind) {
      | LocalValueKind.D_local_fun => "a local function"
      | LocalValueKind.D_fun_parm => "a function parameter"
      | LocalValueKind.D_local_value => "a local value"
      | LocalValueKind.D_exn => "a caught exception"
      | LocalValueKind.D_pattern_variable => "a value bound in pattern"
      | LocalValueKind.D_closurised_this_ptr => "a 'this' pointer" // not reached?
    }
  }
}

} // ns
