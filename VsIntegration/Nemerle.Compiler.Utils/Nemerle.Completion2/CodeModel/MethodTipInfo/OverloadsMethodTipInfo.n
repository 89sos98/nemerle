using System;
using System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class OverloadsMethodTipInfo : MethodTipInfo
  {
    public this([NotNull] overloads : List[OverloadPossibility], tokens : list[Token])
    {
      _overloads = overloads;

      _overloads.Sort((x, y) =>
        {
          def xparms = (x.Member :> IMethod).GetParameters();
          def yparms = (y.Member :> IMethod).GetParameters();

          xparms.Length - yparms.Length;
        });

      def name = Init(tokens);

      _overloads = _overloads.FindAll(fun(o)
        {
          if (o.Member.Name == ".ctor")
            o.From.tycon.Name == name
          else
            o.Member.Name == name
        });

      when (HasTip) // The "HasTip" must be used after "Init"!
      {
        // TODO: This works incorrectly and should be redone.
        // VladD2: We should use information from TExpr for get this information.
        _defaultMethod = _overloads.FindIndex(o => (o.Member :> IMethod).GetParameters().Length == NextParameters.Count);

        when (_defaultMethod < 0)
          _defaultMethod = 0;
      }
    }

    mutable _overloads : List[OverloadPossibility];

    public override GetCount() : int { _overloads.Count }

    public override GetDescription(index : int) : string
    {
      def member = _overloads[index].Member;
      def xml    = XmlDocReader.GetInfo(member, member.Location);

      if (xml != null) xml.Summary else "";
    }

    public override GetType(index : int) : string
    {
      (_overloads[index].Member :> IMethod).ReturnType.ToString()
    }

    public override GetParameterCount(index : int) : int
    {
      def overload = _overloads[index];
      def method   = overload.Member :> IMethod;
      def len      = method.GetParameters().Length;

      if (len > 0 && IsExtension(overload)) len - 1 else len;
    }

    public override GetParameterInfo(index : int, mutable parameter : int) : string * string * string
    {
      def method = _overloads[index].Member :> IMethod;

      when (IsExtension(_overloads[index])) parameter++;

      def parm        = method.GetParameters().Nth(parameter);
      def xml         = XmlDocReader.GetInfo(method, method.Location);
      def description = if (xml != null)
      {
        match (xml.Params.Find((name, _) => name == parm.name))
        {
        | Some((_, text)) => text
        | _               => ""
        }
      }
      else
        "";

      (parm.Name, $"$(parm.name) : $(parm.ty)", description)
    }

    public override GetName(index : int) : string
    {
      def method = _overloads[index].Member :> IMethod;

      match (method.MemberKind)
      {
      | Constructor => method.DeclaringType.Name;
      | _           => method.Name;
      }
    }

    IsExtension(overload : OverloadPossibility) : bool
    {
      match (overload.ExtensionMethodObject)
      {
      | Error
      | null => false
      | _    => 

        match (overload.Member)
        {
        | m is IMethod => m.IsExtension
        | _            => false
        }

      }
    }
  }
}
