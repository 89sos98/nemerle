using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public abstract class AsyncJobBase
  {
    public module JobState
    {
      public Ready         = 0;
      public SwitchContext = 1;
      public Wait          = 2;
      public Canceled      = 3;
    }

    public ExecutionContext : ExecutionContext { get; set; }

    protected mutable volatile _state : int = JobState.Ready;
    public SetState(newState : int) : void
    {
      def state = _state;
      when (state != JobState.Canceled && state != newState)
      {
        def prevState = Threading.Interlocked.CompareExchange(ref _state, newState, state);
        when (prevState != state)
          SetState(newState);
      }
    }

    public Cancel() : void
    {
      SetState(JobState.Canceled);
      Start();
    }

    public IsReady : bool
    {
      get { _state == JobState.Ready }
    }

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (_state == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }

    public abstract Start() : void;

    internal mutable NextJob : AsyncJobBase = null;
  }

  internal class AsyncJob[A] : AsyncJobBase
  {
    private mutable async : Async[A];

    [Accessor]
    private result : AsyncPromise[A] = AsyncPromise();
    public RunCache : void -> void;

    public this(executionContext : ExecutionContext, async : Async[A])
    {
      this.async = async;
      ExecutionContext = executionContext;
      RunCache = Run;
    }

    public override Start() : void
    {
      ExecutionContext.Execute(RunCache);
    }

    private syncRoot : object = object();
    private Run() : void
    {
      lock (syncRoot)
      {
        mutable res;
        SetState(JobState.Ready);
        try
        {
          async = ExecWhileReady(async, ref res);
        }
        catch
        {
          | ex is Exception =>
            result.SetException(ex);
            return;
        }
        match (_state)
        {
          | JobState.Ready         =>
            assert2(async == null);
            result.SetValue(res);

          | JobState.SwitchContext =>
            Start();
            Console.Error.WriteLine($"Context switch. Thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

          | JobState.Wait          =>
            Console.Error.WriteLine($"Async operation wait. Thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

          | JobState.Canceled      =>
            result.SetResult(AsyncResult.Canceled());
            when (async != null)
            {
              async.Cancel();
              async = null;
            }

          | _ =>
            throw NotImplementedException();
        }
      }
    }
  }
}
