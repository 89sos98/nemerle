using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    //expressionInitializer   : VariableInitializer     = expression;
    expressionInitializer(expr : Expr) : VariableInitializer
    {
      VariableInitializer.Expr(expr)
    }

    //propertyInitializer     : VariableInitializer     = identifier "="s (complexInitializer / expressionInitializer);
    propertyInitializer(id    : Identifier,
                        _eq   : NToken,
                        init  : VariableInitializer) : VariableInitializer
    {
      VariableInitializer.Property(id, init)
    }

    //stackallocInitializer   : VariableInitializer     = "stackalloc"S anyType "["s expression "]"s;
    stackallocInitializer(_stackalloc : NToken,
                          allocType   : TypeRef,
                          _lparen     : NToken,
                          expr        : Expr,
                          _rparen     : NToken) : VariableInitializer
    {
      VariableInitializer.StackAlloc(allocType, expr)
    }

    //variableInitializerList : VariableInitializerList = variableInitializer (","s variableInitializer)*;
    variableInitializerList(head : VariableInitializer,
                            tail  : SCG.List[NToken * VariableInitializer]) : list[VariableInitializer]
    {
      head.Cons(tail)
    }

    //complexInitializer      : VariableInitializer     = "{"s (variableInitializerList (","s)?)? "}"s;
    complexInitializer( _lparen : NToken,
                        init    : option[list[VariableInitializer] * NToken],
                        _rparen : NToken) : VariableInitializer
    {
      match(init) {
        | Some( (init, _) ) => VariableInitializer.Complex(init)
        | _                 => VariableInitializer.Complex([])
      }
    }

    //variableInitializer     : VariableInitializer     = complexInitializer
    //                                                  / stackallocInitializer
    //                                                  / expressionInitializer;
    variableInitializer(opt : VariableInitializer) : VariableInitializer
    {
      opt
    }

    //constantDeclarator  : ConstantDeclarator      = identifier "="s constantExpression;
    constantDeclarator( identifier          : Identifier,
                        _eq                 : NToken,
                        constantExpression  : Expr) : Location * Identifier * Expr
    {
      (GetLocation(_), identifier, constantExpression)
    }

    //constantDeclarators : ConstantDeclaratorList  = constantDeclarator (","s constantDeclarator)*;
    constantDeclarators(head : Location * Identifier * Expr,
                        tail  : SCG.List[NToken * (Location * Identifier * Expr)]) : list[Location * Identifier * Expr]
    {
      head.Cons(tail)
    }

    //variableDeclarator  : VariableDeclarator      = identifier ("="s variableInitializer)?;
    variableDeclarator(identifier           : Identifier,
                       variableInitializer  : option[NToken * VariableInitializer]) : Location * Identifier * VariableInitializer
    {
      def loc = GetLocation(_);
      match(variableInitializer) {
        | Some( (_, init) ) => (loc, identifier, init)
        | _                 => (loc, identifier, null)
      }
    }

    //variableDeclarators : VariableDeclaratorList  = variableDeclarator (","s variableDeclarator)*;
    variableDeclarators(head : Location * Identifier * VariableInitializer,
                        tail : SCG.List[NToken * (Location * Identifier * VariableInitializer)]) : list[Location * Identifier * VariableInitializer]
    {
      head.Cons(tail)
    }
  }
}