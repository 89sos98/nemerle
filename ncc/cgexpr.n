(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Collections;

open Nemerle.Compiler;
open Nemerle.Compiler.CGexpr;
open Nemerle.Compiler.Tyops;
open Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler {

  class CGexpr
    {
      fun cg_tydecl (decl : Type_decl) : list (CM_class) =
        letfun make_cm (kind : CM_kind) : CM_class =
          let r = (CM_class ("", kind, Nil (), Nil ()) :> CM_class) in {
            r#loc <- decl#loc;
            r#name <- decl#name;
            r#attrs <- Nil ();
            r
          }
        in
        match decl with [
          | TD_interface (?members) =>
            let cm = make_cm (CK_interface ()) in
            List.cons (cm)
          | TD_external => Nil ()
          // C# doesn't seem to provide typedef, not sure about CLS though
          | TD_alias => Nil () 
        ];
      
      fun run (decls : list (Type_decl)) : list (CM_class) =
        letfun run_cg_tydecl (decl : Type_decl) : list (CM_class) =
          letfun set_ns (cmc : CM_class) : void =
            cmc#ns <- decl#env#current_namespace 
          in
          let res = cg_tydecl (decl) in {
            List.iter (set_ns, res);
            res
          }
        in
        let decls = List.map (run_cg_tydecl, decls) in
        List.concat (decls);
    }
  
} // end ns
