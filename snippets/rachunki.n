(* ------------------------------------------------------------------------- *)
(*   Rachunki za FIT                                                         *)
(* ------------------------------------------------------------------------- *)

class Odbiorca
{
  private mutable _nazwa_i_adres : string;
  private mutable _nip : string;

  public this (nazwa_adres_i_nip : string) 
  {
    // Instytut Informatyki, Uniwersytet Warszawski, ul. Banacha 2, 02-097 Warszawa, NIP  525-001-12-66
    def nip_pos = nazwa_adres_i_nip.IndexOf (", NIP");
    
    if (nip_pos == -1) raise Invalid_argument ("nazwa_adres_i_nip") else ();

    this._nazwa_i_adres <- (nazwa_adres_i_nip.Substring (0, nip_pos)).Trim ();
    this._nip <- (nazwa_adres_i_nip.Substring (nip_pos + 6)).Trim ();
  }
  
  public NazwaOrazAdres () : string { this._nazwa_i_adres }
  public Nip () : string { this._nip }
  
  private ZweryfikujNip () : bool
  {
    // FIXME: add NIP number verification
    true
  }
}


class Rachunek
{
  private static mutable _id : int;
  private mutable _odbiorca : Odbiorca;
  private mutable _uczestnik : string;
  private mutable _cena : string;
  
  public static this () 
  {
    _id <- 0;
  }
  
  public this (uczestnik : string, cena : string, odbiorca : string)
  {
    this._uczestnik <- uczestnik;
    this._cena <- cena;
    this._odbiorca <- Odbiorca (odbiorca)
  }
    
  public ToLaTeX () : string
  {
    _id <- _id + 1;
        
    def eu () : string {
      System.String ((322 :> System.Char), 1);
    };
    
    def ou () : string {
      System.String ((261 :> System.Char), 1);      
    };
    
    "\\begin{tabular}{c}\n\\hline\n" +
    "  Polskie Stowarzyszenie \\\\ " +
    "  dla Maszyn Liczacych we Wroc" + eu () + "awiu \\\\ " +
    "  ul. Przesmyckiego 20 \\\\ " +
    "  51-151 Wroc" + eu () + "aw \\\\ " +
    "  REGON 930724005\n \\\\ \\hline " +
    "\\end{tabular}\n\n\\vspace{1 cm}\n\n" +

    "{\\large \\bf RACHUNEK NR " + string_of_int (_id) + "/FIT/03}\n\n\\vspace{1 cm}\n\n" +
    
    "Wroc" + eu () + "aw, dnia 13 XII 2003\n\n\\vspace{1 cm}\n\n" +
        
    "Uczestnik: " + this._uczestnik + "\n\n" +
    "Cena: " + this._cena + " z" + eu () + "\n\n" +
    "Nazwa i adres p" + eu () + "atnika: " + this._odbiorca.NazwaOrazAdres () + "\n\n" +
    "NIP p" + eu () + "atnika: " + this._odbiorca.Nip () + "\n\n\\newpage\n\n"    
  }
}


class RachunkiZaFit
{
  public static LaTeXHeader () : string 
  {
    "\\documentclass[draft,12pt]{article}\n" +
    "\\usepackage[latin2]{inputenc}\n" +
    "\\usepackage{fancyvrb}\n" +
    "\\usepackage{fancyhdr}\n" +
    "\\usepackage{hcolor}\n" +
    "\\usepackage{color}\n" +
    "\\usepackage{polski}\n" +
    "\\usepackage[a4paper]{geometry}\n\n" +

    "\\addtolength{\\marginparwidth}{-60pt}\n\n" +

    "\\DefineVerbatimEnvironment\n" +
    "  {Code}{Verbatim}\n" +
    "  {frame=lines,numbers=left,xleftmargin=15mm,%\n" +
    "  xrightmargin=10mm,framesep=2mm,framerule=1mm,%\n" +
    "  rulecolor=\\color[rgb]{0.8,0.8,0.8}}\n" +

    "\\begin{document}\n" +

    "\\pagestyle{fancy}\n" +
    "\\lhead{\\small XVII Forum Informatyki Teoretycznej, Karpacz 2003}\n" +
    "\\rhead{}\n" +
    "\\cfoot{}\n\n"
  }

  public static LaTeXFooter () : string
  {
    "\n\\end{document}\n"
  }
  
  public static Main () : void
  {
    print_endline ("Rachunki za FIT...");
    
    def sr = System.IO.StreamReader ("rachunki-za-fit.csv");
    def sw = System.IO.StreamWriter ("rachunki/rachunki-za-fit.tex", false, (System.Text.UnicodeEncoding () :> System.Text.Encoding), 2048);

    mutable rachunki <- [];

    // read all the bill information from the CSV file...
    while (sr.Peek () != -1, {

      // read a line and split it along the tab characters
      def line = sr.ReadLine ();
      def split = line.Split (("\t").ToCharArray ());

      if ((split :> System.Array).Length != 4) raise Invalid_argument ("line") else ();
      
      // the text fields are quoted using the " character
      def unquote (token : string) : string {      
        if (token [0] == '"' && token [token.Length - 1] == '"')
          token.Substring (1, token.Length - 2)
        else
          token
      };
            
      // the format of the bills file is: [NAME; INSTITUTION; PRICE; INSTITUTION_ADDRESS_NIP]
      rachunki <- Rachunek (unquote (split [0]), split [2], unquote (split [3]))  :: rachunki;
    });
        
    // process the bills and save them in the output format
    def iter (rachunki : list (Rachunek)) : void {    
      match (rachunki) {
        | [] => ()
        | rachunek :: reszta =>
          sw.Write (rachunek.ToLaTeX ());
          iter (reszta)
      }
    }; 
    
    sw.Write (LaTeXHeader ());
    iter (rachunki);   
    sw.Write (LaTeXFooter ());
    
    sw.Close ();
    sr.Close ()    
  }
}
