using Nemerle.IO;
using Nemerle.Concurrency;

namespace Test 
{
    class RendezVous
    {
        class Thunk
        {
            [ChordMember]
            public Reply (j : int) : void {}

            [Chord
            ([Reply], {
                j
            })]
            public Wait () : int {}
        }
        
        public f (i : int) : int
        {
            def t = Thunk ();
            af (i, t);
            t.Wait ()
        }

        [ChordMember]
        private af (i : int, t : Thunk) : void {}

        [Chord
        ([af], {
            t.Reply (j);
            i
        })]
        public g (j : int) : int {}
    }

    module Main
    {
        Main () : void
        {
            def rv = RendezVous ();

            async 
            {
                def i = rv.f (3);
                assert (i == 13)
            }

            async
            {
                def i = rv.g (13);
                assert (i == 3)
            }
        }
    }
}
