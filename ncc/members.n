/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Tyops;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;

using System.Reflection;
using System.Reflection.Emit;

namespace PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler {

class NemerleMember : IMember {
  loc : Location;
  protected mutable name : string;
  protected accessibility : Accessibility;
  internal mutable modifiers : list <Modifier>;
  declaring_type : Tyinfo;
  id : int;
  protected mutable kind : MemberKind;
  internal mutable ty : Type;

  mutable is_protected : bool;
  mutable is_public : bool;
  mutable is_internal : bool;

  protected this (par : Tyinfo, d : PT.Class_member) {
    loc <- d.loc;
    modifiers <- d.modifiers;
    name <- Macros.UnSString (d.name); 
    declaring_type <- par;
    id <- Util.next_id ();

    def parse_mod (mod) {
      match (mod) {
        | Mod_public => is_public <- true
        | Mod_internal => is_internal <- true
        | Mod_protected => is_protected <- true
        | _ => ()
      }
    };
    List.Iter (d.modifiers, parse_mod);

    if (is_public)
      accessibility <- A_public ()
    else if (is_protected && is_internal)
      accessibility <- A_protected_or_internal ()
    else if (is_protected)
      accessibility <- A_protected ()
    else if (is_internal)
      accessibility <- A_internal ()
    else
      accessibility <- A_private ();

    match ((par.GetAccessibility (), accessibility)) {
      | (A_private, _) =>
        accessibility <- A_private ()
      | (A_public, _) => ()
      | (A_internal, A_public) =>
        accessibility <- A_internal ()
      | (A_protected, A_internal)
      | (A_internal, A_protected) =>
        accessibility <- A_protected_and_internal ()
      | _ => ()
    }
  }

  public CanAccess (source : Tycon) : bool
  {
    def walk_declaring (tc : Tycon) {
      tc.SameAs (declaring_type) || 
        (tc.GetDeclaringTycon () != null && walk_declaring (tc.GetDeclaringTycon ()))
    };
    is_public || 
    declaring_type.SameAs (source) ||
    (is_internal && 
      match (source.GetTyconKind ()) { 
        | TK_NemerleType => true 
        | _ => false 
      }) || 
    (is_protected && Option.IsSome (source.SuperType (declaring_type))) ||
    walk_declaring (source)
  }

  public GetName () : string 
  { name }

  public GetMemType () : Type
  { ty }

  public GetKind () : MemberKind
  { kind }

  public GetDeclaringTycon () : Tycon
  { declaring_type }
  
  public GetLocation () : Location
  { loc }
  
  public GetModifiers () : list <Modifier>
  { modifiers }

  public IsStatic () : bool
  { List.Exists (GetModifiers (), fun (x) { 
      match (x) { Mod_static => true | _ => false } 
    }) 
  }

  public GetId () : int
  { id }

  public GetHandle () : System.Reflection.MemberInfo
  { null }

}

public class NemerleField 
  : NemerleMember, IField
{
  is_mutable : bool;
  public mutable field_builder : FieldBuilder;
  
  public this (par : Tyinfo, f : PT.M_field) {
    base (par, f);
    def is_static = List.Exists (GetModifiers (), fun (m) { 
      match (m) { Mod_static => true | _ => false } 
    });
    is_mutable <- Util.is_mutable (this);
    ty <-
      if (is_static)
        par.BindType (Tyvar.TEnv (), f.ty)
      else
        par.BindType (f.ty);
    kind <- MK_field (this);
    Tyutil.CheckAccessibility (accessibility, ty);
  }

  public IsMutable () : bool
  {
    is_mutable
  }

  public GetFieldInfo () : FieldInfo
  {
    field_builder
  }
}

public class NemerleProperty
  : NemerleMember, IProperty
{
  is_mutable : bool;
  getter : NemerleMethod;
  setter : NemerleMethod;
  internal parms : list <Type>;
  
  internal mutable property_builder : PropertyBuilder;
  
  public this (par : Tyinfo, f : PT.M_property) {
    base (par, f);
    is_mutable <- Option.IsSome (f.set);
    
    def is_static = List.Exists (GetModifiers (), fun (m) { 
      match (m) { Mod_static => true | _ => false } 
    });
    ty <-
      if (is_static)
        par.BindType (Tyvar.TEnv (), f.ty)
      else
        par.BindType (f.ty);

    kind <- MK_property (this);
    Tyutil.CheckAccessibility (accessibility, ty);

    def loc = f.loc;
    def par = par;
    
    parms <- 
      List.Map (f.dims, fun (parm : PT.Fun_parm) {
        par.BindType (parm.ty)
      });
      
    match (f.get) {
      | Some (meth) =>
        def name = PT.SS_string (PT.Name ("get_" + GetName ()));
        def fh = PT.Fun_header (loc, name, f.ty, f.dims);
        def fn = PT.M_function (loc, fh.name, f.modifiers, fh, FK_method ([]), meth);
        getter <- NemerleMethod (par, (fn :> PT.M_function));
        par.AddMember (getter);
      | None => ()
    };
    match (f.set) {
      | Some (meth) =>
        def value_parm = PT.Fun_parm (loc, PT.SS_string (PT.Name ("value")), 
                                      f.ty, PT.FP_normal ());
        def parms = List.Append (f.dims, [value_parm]);
        def name = PT.SS_string (PT.Name ("set_" + GetName ()));
        def fh = PT.Fun_header (loc, name, PT.T_void (), parms);
        def fn = PT.M_function (loc, fh.name, f.modifiers, fh, FK_method ([]), meth);
        setter <- NemerleMethod (par, (fn :> PT.M_function));
        par.AddMember (setter);
      | None => ()
    };
  }

  public IsMutable () : bool
  {
    is_mutable
  }

  public GetPropertyInfo () : PropertyInfo
  {
    property_builder
  }

  public GetGetter () : IMethod
  {
    getter
  }
  
  public GetSetter () : IMethod
  {
    setter
  }
}

public class NemerleMethod
  : NemerleMember, IMethod
{
  // FIXME: make these private
  public mutable fun_kind : Fun_kind;
  public mutable fun_body : Fun_body;
  public mutable fun_header : Fun_header;
  
  public mutable method_builder : System.Reflection.Emit.MethodBuilder;
  public mutable ctor_builder : System.Reflection.Emit.ConstructorBuilder;

  public GetMethodBase () : MethodBase
  {
    if (method_builder == null)
      (ctor_builder : MethodBase)
    else
      method_builder
  }

  public GetConstructorBuilder () : ConstructorBuilder 
    implements IMethod.GetConstructorInfo
  {
    assert (ctor_builder != null);
    ctor_builder
  }
  
  public GetMethodBuilder () : MethodBuilder 
    implements IMethod.GetMethodInfo
  {
    assert (method_builder != null);
    method_builder
  }

  public GetExternName () : string
  {
    match (fun_body) {
      | FB_extern (name) => name
      | _ => null
    }
  }
  
  public this (par : Tyinfo, f : PT.M_function) {
    base (par, f);

    // convert +, -, /= name to op_Addition equivalents
    match (OperatorLongName (this.name, List.Length (f.header.parms))) {
      | Some (long) => this.name <- long
      | None => ()
    };
    
    def par = par; // hack, so previouse par is not closurised
    def accessibility = accessibility; // ditto, this

    def is_static = List.Exists (GetModifiers (), fun (m) { 
      match (m) { Mod_static => true | _ => false } 
    });
 
    def (tenv', typarms) =
      if (is_static)
        par.BindTyparms (Tyvar.TEnv (), f.header.typarms)
      else
        par.BindTyparms (f.header.typarms);
    
    List.Iter (typarms, fun (tv) { 
      List.Iter (Tyvar.constraints (tv), fun (t) { 
        Tyutil.CheckAccessibility (accessibility, t)
      })
    });
    def bind (t) {
      def ty = par.BindType (tenv', t);
      Tyutil.CheckAccessibility (accessibility, ty);
      ty
    };
    def mkparm (p : PT.Fun_parm) : Fun_parm {
      def name = Macros.NameOfSString (p.name);
      Fun_parm (loc = p.loc, name = name.id, color = name.color, ty = bind (p.ty), 
                decl = null)
    };
    fun_body <- f.body;
    
   /* We need to convert things like:
        foo (x : int * int) : int { bar }
            ===>
        foo (_1 : int, _2 : int) : int { def x = (_1, _2); bar }
      To be consistent. */

    def parms =
      match (f.header.parms) {
        | [parm] =>
          match (Tyutil.top_expand (bind (parm.ty))) {
            | T_prod (types) =>
              def mkdummyparm (t : Type) {
                Fun_parm (loc = parm.loc, 
                          name = Util.tmpname ("tupled"),
                          color = TypingContext.MacroColor,
                          ty = t, 
                          decl = null)
              };
              def parms = List.Map (types, mkdummyparm);
              def refs = List.Map (parms, fun (fp : Fun_parm) {
                PT.E_ref (PT.Name (fp.name))
              });
              match (fun_body) {
                | FB_parsed_expr (body) =>
                  fun_body <- FB_parsed_expr (<[ { def $(parm.name) =
                    ( .. $refs ); $body } ]>)
                | _ => Util.ice ()
              };
              parms
            | _ => List.Map (f.header.parms, mkparm)
          }
        | _ => List.Map (f.header.parms, mkparm)
      };

    fun_kind <-
      match ((f.kind, this.name)) {
        | (FK_method ([]), ".ctor") when is_static =>
          this.name <- ".cctor";
          FK_static_ctor ()
        | (FK_method ([]), ".ctor") =>
          FK_ctor ()
        | (FK_method ([]), _) when is_static =>
          FK_function ()
        | (FK_ctor, _) when is_static =>
          this.name <- ".cctor";
          FK_static_ctor ()
        | (FK_method (_ :: _), ".ctor") =>
          Message.error ("constructor cannot implement anything");
          FK_ctor ()
        | (FK_method (_ :: _), _) when is_static =>
          Message.error ("static function cannot implement anything");
          FK_function ()
        | (x, _) => x
      };

    fun_header <- Fun_header (
      ret_type = bind (f.header.ret_type),
      typarms = typarms,
      name = this.name,
      parms = parms,
      tenv = tenv',
      loc = f.header.loc);
      
    ty <- Tyutil.fun_type (fun_header);
    
    kind <- MK_method (this);
  }

  public SetHeader (h : Fun_header) : void {
    fun_header <- h;
    ty <- Tyutil.fun_type (fun_header);
  }

  public GetHeader () : Fun_header
  { fun_header }

  public GetFreshType () : Type
  { GetMemType () /- Tyvar.fresh_subst (fun_header.typarms) }

  public GetFunKind () : Fun_kind
  { fun_kind }

  static OperatorLongName (op : string, params_amount : int) : option <string>
  {
    if (params_amount == 2) {
      match (op) {
        | ":" => Some ("op_Implicit")
        | ":>" => Some ("op_Explicit")
        | "+" => Some ("op_Addition")
        | "-" => Some ("op_Subtraction")
        | "*" => Some ("op_Multiply")
        | "/" => Some ("op_Division")
        | "%" => Some ("op_Modulus")
        | "%^" => Some ("op_ExclusiveOr")
        | "%&" => Some ("op_BitwiseAnd")
        | "%|" => Some ("op_BitwiseOr")
        | "&&" => Some ("op_LogicalAnd")
        | "||" => Some ("op_LogicalOr")
        | "<-" => Some ("op_Assign")
        | "<<" => Some ("op_LeftShift")
        | ">>" => Some ("op_RightShift")
        // | ">>*" => Some ("op_SignedRightShift")
        // | ">>&" => Some ("op_UnsignedRightShift")
        | "==" => Some ("op_Equality")
        | ">" => Some ("op_GreaterThan")
        | "<" => Some ("op_LessThan")
        | "!=" => Some ("op_Inequality")
        | ">=" => Some ("op_GreaterThanOrEqual")
        | "<=" => Some ("op_LessThanOrEqual")
        | "*=" => Some ("op_MultiplicationAssignment")
        | "-=" => Some ("op_SubtractionAssignment")
        | "^=" => Some ("op_ExclusiveOrAssignment")
        | "<<=" => Some ("op_LeftShiftAssignment")
        | "%=" => Some ("op_ModulusAssignment")
        | "+=" => Some ("op_AdditionAssignment")
        | "&=" => Some ("op_BitwiseAndAssignment")
        | "|=" => Some ("op_BitwiseOrAssignment")
        | "," => Some ("op_Comma")
        | "/=" => Some ("op_DivisionAssignment")
        | _ => None ()
      }
    }
    else if (params_amount == 1) {
      match (op) {
        | "+" when params_amount == 1 => Some ("op_UnaryPlus")
        | "-" => Some ("op_UnaryNegation")        
        | "--" => Some ("op_Decrement")
        | "++" => Some ("op_Increment")
        | "~" => Some ("op_OnesComplement")
        | "!" => Some ("op_LogicalNot")
        | _ => None ()
      }
    }
    else None ()
  }
}

}
