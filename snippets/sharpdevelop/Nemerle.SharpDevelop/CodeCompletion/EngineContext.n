using System;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public sealed class EngineContext : IIdeProject, IDisposable {

        internal this(project : IProject) {
            this.project = project;
            this.engine = EngineFactory.Create(this, TraceWriter(), false);

            ProjectService.ProjectItemAdded += OnProjectServiceProjectItemAdded;
            ProjectService.ProjectItemRemoved += OnProjectServiceProjectItemRemoved;
            Application.Idle += OnApplicationIdle;

            Reload();
        }

        [Accessor] engine : IEngine;

        [Accessor] sync_root : object = object();

        [Accessor] project : IProject;

        source_map : SCG.Dictionary[int, Source] = SCG.Dictionary();

        private FindSource(item : FileProjectItem) : bool * Source {
            foreach(source in source_map.Values) {
                when(ReferenceEquals(source.Item, item))
                    Nemerle.Imperative.Return( (true, source) )
            }
            (false, null)
        }

        private AddSourceNoCheck(item : FileProjectItem) : ISource {
            def source = Source(this, item);
            source_map.Add(source.FileIndex, source);
            source
        }

        private AddSource(item : FileProjectItem) : ISource {
            match(FindSource(item)) {
                | (true, source) => source
                | (false, _) =>
                    def source = AddSourceNoCheck(item);
                    _ = engine.BeginReloadProject();
                    source
            }
        }

        private RemoveSource(item : FileProjectItem) : bool {
            match(FindSource(item)) {
                | (true, source) =>
                    source_map.Remove(source.FileIndex)

                | (false, _) =>
                    false
            }
        }

        private Clear() : void {
            source_map.Clear();
        }

        mutable reload_project_async : AsyncRequest = null;

        public Reload() : void  {
            lock(sync_root) {
                when(null == reload_project_async || reload_project_async.IsCompleted) {
                    Clear();
                    foreach(item is FileProjectItem in project.GetItemsOfType(ItemType.Compile)) {
                        _ = AddSourceNoCheck(item)
                    }
                    reload_project_async = engine.BeginReloadProject();
                }
            }
        }

        mutable build_types_tree_async : AsyncRequest = null;

        public BuildTypesTree() : void {
            lock(sync_root) {
                when(null == build_types_tree_async || build_types_tree_async.IsCompleted) {
                    build_types_tree_async = engine.BeginBuildTypesTree();
                }
            }
        }

        #region IIdeProject

        public GetAssemblyReferences() : SCG.IEnumerable[string] {
            foreach(item is ReferenceProjectItem in project.GetItemsOfType(ItemType.Reference)) {
                yield item.AssemblyName.FullName
            }
        }

        public GetMacroAssemblyReferences() : SCG.IEnumerable[string] {
            foreach(item is MacroReferenceProjectItem in project.GetItemsOfType(ItemTypeExt.MacroReference)) {
                yield item.AssemblyName.FullName
            }
        }

        public GetOptions() : CompilationOptions {
            def opt = CompilationOptions();

            opt.GreedyReferences = false;
            opt.ColorMessages    = false;
            opt.IgnoreConfusion  = true;

            opt
        }

        public GetSource(fileIndex : int) : ISource {
            lock(sync_root) {
                source_map[fileIndex - 1]
            }
        }

        public GetSources() : SCG.IEnumerable[ISource] {
            lock(sync_root) {
                def sources = array(source_map.Count);
                source_map.Values.CopyTo(sources, 0);
                sources
            }
        }

        public ClearAllCompilerMessages() : void {
        }

        public SetCompilerMessageForCompileUnit(compileUnit : CompileUnit) : void {
        }

        public SetMethodCompilerMessages(member : MemberBuilder, messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public SetStatusText(text : string) : void {
        }

        public SetTopLevelCompilerMessages(messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public ShowMessage(message : string, messageType : MessageType) : void {
        }

        public LookupLocationsFromDebugInformation(info : GotoInfo) : array[GotoInfo] {
            array(0)
        }

        public SetHighlights(source : ISource, highlights : SCG.IEnumerable[GotoInfo]) : void {
        }

        public AddUnimplementedMembers(source : ISource, ty : TypeBuilder, unimplementedMembers : SCG.IEnumerable[IMember]) : void {
        }

        public AddOverrideMembers(source : ISource, ty : TypeBuilder, notOverriden : SCG.IEnumerable[IMember]) : void {
        }

        public TypesTreeCreated() : void {
        }

        #endregion


        #region File load/unload handlers

        internal NotifyFileOpened(fileName : string, document : IDocument) : void {
            lock(sync_root) {
                foreach(source in source_map.Values) {
                    when(source.Item.FileName == fileName)
                        source.Document = document;
                }
            }
        }

        internal NotifyFileClosed(document : IDocument) : void {
            lock(sync_root) {
                foreach(source in source_map.Values) {
                    when(ReferenceEquals(source.Document, document))
                        source.Document = null;
                }
            }
        }

        #endregion


        #region Event handlers

        private OnProjectServiceProjectItemAdded(_ : object, e : ProjectItemEventArgs) : void {
            when(ReferenceEquals(e.ProjectItem.Project, project)
                && e.ProjectItem.ItemType == ItemType.Compile) {

                match(e.ProjectItem) {
                    | item is FileProjectItem =>
                        lock(sync_root) {
                            _ = AddSource(item);
                        }
                    | _ => ();
                }
            }
        }

        private OnProjectServiceProjectItemRemoved(_ : object, e : ProjectItemEventArgs) : void {
            when(ReferenceEquals(e.ProjectItem.Project, project)
                && e.ProjectItem.ItemType == ItemType.Compile) {

                match(e.ProjectItem) {
                    | item is FileProjectItem =>
                        lock(sync_root) {
                            _ = RemoveSource(item);
                        }
                    | _ => ();
                }
            }
        }

        private OnApplicationIdle(_ : object, _ : EventArgs) : void {
            lock(sync_root) {
                engine.OnIdle();
            }
        }

        #endregion


        #region Disposable

        [Accessor] mutable disposed : bool = false;

        public Dispose() : void {
            lock(sync_root) {
                unless(disposed) {
                    try {
                        engine.Close();
                    } finally {
                        Clear();

                        ProjectService.ProjectItemAdded -= OnProjectServiceProjectItemAdded;
                        ProjectService.ProjectItemRemoved -= OnProjectServiceProjectItemRemoved;
                        Application.Idle -= OnApplicationIdle;

                        disposed = true;
                    }
                }
            }
        }

        protected override Finalize() : void {
            Dispose();
        }

        #endregion

    }


}