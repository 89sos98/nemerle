/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  using ComputationExpressions.Internal;
  using ComputationExpressions.InternalMacros;
  using ComputationExpressions.ComputationError;
  
  public macro @defcomp (expr)
  syntax ("defcomp", expr)
  {
    UnexpectedCall ("defcomp", expr)
  }
  
  public macro @call (expr)
  syntax ("call", expr)
  {
    UnexpectedCall ("call", expr)
  }
  
  public macro @callcomp (expr)
  syntax ("callcomp", expr)
  {
    UnexpectedCall ("callcomp", expr)
  }

  public macro @return (expr)
  syntax ("return", expr)
  {
    UnexpectedCall ("return", expr)
  }

  public macro @returncomp (expr)
  syntax ("returncomp", expr)
  {
    UnexpectedCall ("returncomp", expr)
  }

  public macro @yieldcomp (expr)
  syntax ("yieldcomp", expr)
  {
    UnexpectedCall ("yieldcomp", expr)
  }

  public macro @comp (builder, expr)
  syntax ("comp", builder, expr)
  {
    def builder = match (builder)
    {
      | PExpr.Ref(name) when name.Id == "list"       => Extensions.ListBuilder()
      | PExpr.Ref(name) when name.Id == "array"      => Extensions.ArrayBuilder()
      | PExpr.Ref(name) when name.Id == "enumerable" => Extensions.EnumerableBuilder.Instance
      | _                                            => DefaultBuilder(builder)
    }
    ComputationExpander.Expand (builder, expr)
  }
  
  /// <summary>
  /// Represents an internal computation builder that actually generates a code.
  /// </summary>
  public abstract class ComputationBuilder
  {
    public abstract Return (expr : PExpr) : PExpr;
    
    public abstract ReturnComp (expr : PExpr) : PExpr;
    
    public abstract Yield (expr : PExpr) : PExpr;
    
    public abstract YieldComp (expr : PExpr) : PExpr;
    
    public abstract Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr;
    
    public abstract Delay (expr : PExpr) : PExpr;
    
    public abstract Combine (expr1 : PExpr, expr2 : PExpr) : PExpr;
    
    public abstract Run (expr : PExpr) : PExpr;
    
    public abstract Zero () : PExpr;
    
    public abstract While (pred : PExpr, body : PExpr) : PExpr;
    
    protected abstract ForEach (coll : PExpr, cont : PExpr) : PExpr;
    
    public virtual ForEach (name : PExpr, coll : PExpr, body : PExpr) : PExpr 
    {
      def cont =
        match (body)
        {
          | <[ match ($(null)) { ..$cases } ]> =>
          
            match (name) {
              | <[ $(x : name) ]> when char.IsLower (x.Id[0]) | <[ (..$_) ]> => ()
              | _ => Message.FatalError ("only simple names available in pattern"
                                         " of foreach with direct matching")
            }

            <[ $name => match ($name) { ..$cases } ]>
            
          | _ =>
      
          def temp = Macros.NewSymbol ("temp");
            
          def mat =
            match (name)
            {
              | <[ $pat :> $ty ]> =>
                <[ match ($(temp : name) :> $ty) { | $pat => $body; | _ => $(Zero ()) } ]>
              | _ =>
                <[ match ($(temp : name)) { | $name => $body; | _ => $(Zero ()) } ]>  
            }
          
          // supress the possible warnings
          mat.cases.Iter (fun (x : MatchCase) { x.disable_warnings = true });
          
          <[ $(temp : name) => $mat ]>
        }
      
      ForEach (coll, cont)
    }
    
    public virtual For (init : PExpr, cond : PExpr, change : PExpr, body : PExpr) : PExpr
    {
      def expr =
        match (init)
        {
          | Sequence (_) =>
            Message.FatalError (init.Location, "Expected a single expression.")
          
          | <[ def $name = _ ]> => Some (<[ $name ]>)
          | <[ mutable $name = _ ]> => Some (<[ $name ]>)
          
          | Define (name, _) => Some (<[ $name ]>)
          | DefMutable (name, _) => Some (<[ $name ]>)
          
          | _ => None ()
        }
      
      def temp = Macros.NewSymbol ("temp");
      
      def var = 
        match (expr)
        {
          | Some (name) => name
          | None => <[ $(temp : name) ]>
        }
        
      def postInit =
        match (expr)
        {
          | Some (_) => <[ () ]>
          | None => <[ def $(temp : name) = FakeVoid.Value ]>
        }
        
      def pattern =
        match (expr)
        {
          | Some (name) => name
          | None => <[ _ ]>
        }
      
      def coll =
        <[
            EnumerableHelper.Delay (() =>
              {
                $init;
                $postInit;
                
                ForHelper.Enumerate(() => $cond, () => $var, () => $change)
              })
          ]>;
      
      ForEach (pattern, coll, body);
    }
    
    public virtual DoWhile (pred : PExpr, body : PExpr) : PExpr
    {
      def flag = Macros.NewSymbol ("flag");
      
      <[
          {
            mutable $(flag : name) = true;
            $(While (<[ $(flag : name) || ($pred) ]>,
                        <[ $(flag : name) = false; $body ]>))
          }
      ]>
    }
    
    public abstract TryFinally (body : PExpr, handler : PExpr) : PExpr;
    
    protected abstract TryCatch (body : PExpr, cont : PExpr) : PExpr;
    
    public virtual TryCatch (body : PExpr, cases : list [TryCase]) : PExpr
    {
      def e = Macros.NewSymbol ("e");
      def p = PExpr.Try (<[ throw $(e : name) ]>, cases);
      
      TryCatch (body, <[ $(e : name) => $p ]>)
    }
  }

  /// <summary>
  /// This is a default F#-like computation builder.
  /// </summary>
  public class DefaultBuilder : ComputationBuilder
  {
    private builder : PExpr;
    
    public this (builder : PExpr)
    {
      this.builder = builder
    }
    
    public override Return (expr : PExpr) : PExpr
    {
      <[ $builder.Return ($expr) ]>
    }
    
    public override ReturnComp (expr : PExpr) : PExpr
    {
      <[ $builder.ReturnComp ($expr) ]>
    }
    
    public override Yield (expr : PExpr) : PExpr
    {
      <[ $builder.Yield ($expr) ]>
    }
    
    public override YieldComp (expr : PExpr) : PExpr
    {
      <[ $builder.YieldComp ($expr) ]>
    }
    
    public override Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.Bind ($expr, ($name) => $cont) ]>
    }
    
    public override Delay (expr : PExpr) : PExpr
    {
      <[ $builder.Delay (() => $expr) ]>
    }
    
    public override Combine (expr1 : PExpr, expr2 : PExpr) : PExpr 
    {
      <[ $builder.Combine ($expr1, $builder.Delay (() => $expr2)) ]>
    }
    
    public override Run (expr : PExpr) : PExpr
    {
      <[ ComputationRun ($builder, $expr) ]>
    }
    
    public override Zero () : PExpr
    {
      <[ $builder.Zero () ]>
    }
    
    public override While (pred : PExpr, body : PExpr) : PExpr
    {
      <[ $builder.While (() => $pred, $builder.Delay (() => $body)) ]>
    }
    
    protected override ForEach (coll : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.ForEach ($coll, $cont) ]>
    }
    
    public override TryFinally (body : PExpr, handler : PExpr) : PExpr
    {
      <[ $builder.TryFinally ($builder.Delay (() => $body), () => $handler) ]>
    }
    
    protected override TryCatch (body : PExpr, cont : PExpr) : PExpr
    {
      <[ $builder.TryCatch ($builder.Delay (() => $body), $cont) ]>
    }
  }
  
  /// <summary>
  /// This module allows us to expand any computation expression using
  /// the specified internal builder.
  /// </summary>
  public module ComputationExpander
  {
    /// <summary>
    /// Expands the expression using the specified computation builder.
    /// </summary>
    public Expand (builder : ComputationBuilder, expr : PExpr) : PExpr
    {
      def transform (expr : PExpr, requireComputation : bool)
      {
        // Returns a tuple of two values: the transformed expression and
        // a flag indicating whether the former is a computation (monad).
        
        match (expr)
        {
          | Sequence (exprs) => transformList (exprs, requireComputation);
          | expr => transformList ([expr], requireComputation);
        }
      }
      and transformList (exprs : list [PExpr], requireComputation : bool)
      {
        // Returns a tuple of two values: the result of transformation and
        // a flag indicating whether the former is a computation (monad).
        //
        // Also this is the only place where we can process the monadic binding.
        
        match (exprs)
        {
          | [] =>
            Message.FatalError ("The computation expression is not complete.")
          
          | [expr] =>
            match (expr)
            {
              | MacroCall (name, _, parms) =>
                match (name.Id)
                {
                  | "defcomp" =>
                    match (parms)
                    {
                      | [Expression (Assign (_, _))] =>
                        Message.FatalError (expr.Location, "Incomplete defcomp expression.");
                      | _ =>
                        Message.FatalError (expr.Location, "Invalid defcomp expression.");
                    };
                    
                  | "callcomp" =>
                    match (parms)
                    {
                      | [Expression (_)] =>
                        Message.FatalError (expr.Location, "Incomplete callcomp expression.");
                      | _ =>
                        Message.FatalError (expr.Location, "Invalid callcomp expression.");
                    };
                    
                  | _ => 
                    transform2 (expr, requireComputation)
                }
              
              | Throw (_) =>    // we can process it only in one place
                (expr, requireComputation)
              
              | expr =>
                transform2 (expr, requireComputation)
            }

          | expr :: exprs =>
            match (expr)
            {
              | MacroCall (name, _, parms) =>
                match (name.Id)
                {
                  | "defcomp" =>
                    match (parms)
                    {
                      | [Expression (Assign (name, comp))] =>
                        def (p, f) = transformList (exprs, true);
                        assert (f);
                        (builder.Bind (comp, name, p), true)
                      | _ =>
                        Message.FatalError (expr.Location, "Invalid defcomp expression.");
                    };
                    
                  | "callcomp" =>
                    match (parms)
                    {
                      | [Expression (comp)] =>
                        def (p, f) = transformList (exprs, true);
                        assert (f);
                        (builder.Bind (comp, <[ (_ : FakeVoid) ]>, p), true)
                      | _ =>
                        Message.FatalError (expr.Location, "Invalid callcomp expression.");
                    };

                  | _ => 
                    transformList2 (expr, exprs, requireComputation)
                }
              
              | expr =>
                transformList2 (expr, exprs, requireComputation)
            }
        }
      }
      and transform2 (expr : PExpr, requireComputation : bool)
      {
        // Makes the transformation a computation if required. 
        // Adds a monadic zero in case of need.
        
        match (transform3 (expr))
          {
            | (_, true) as result => 
              result
            | (_, false) as result when !requireComputation => 
              result
            | (p, false) => 
              def p2 = builder.Zero ();
              (<[ $p; $p2 ]>, true)
          }
      }
      and transformList2 (expr : PExpr, exprs : list [PExpr], requireComputation : bool)
      {
        // Makes the transformation a computation if required.
        // Apply the monadic then function in case of need.
        
        match (transform3 (expr))
        {
          | (p, true) => 
            def (p2, f2) = transformList (exprs, true);
            assert (f2);
            (builder.Combine (p, p2), true);
          
          | (p, false) =>
            def (p2, f2) = transformList (exprs, requireComputation);
            (<[ $p; $p2 ]>, f2)
        }
      }
      and transform3 (expr : PExpr)
      {
        // This is a workhorse of the macro expander. Returns a tuple of two values:
        // the result of transformation which can be either a computation (monad) or
        // a simple expression and also returns a flag indicating whether this 
        // transformation is a computation (monad).
        
        match (expr)
        {
          | <[ def _ = _ ]> => (expr, false)
          
          | <[ mutable _ = _ ]> => (expr, false)
          
          | Match (x, cases, _) =>  // pattern matching
          
            def cs = cases.Map (fun (c) 
            {
                def (p, f) = transform (c.body, false);
                (MatchCase (c.patterns, p), f)
            });
          
            match (cs.Exists ((_, f) => f))
            {
              | false =>
                (PExpr.Match (x, cs.Map ((c, _) => c)), false);
              
              | true =>
              
                def ps = cs.Map (fun (c, f)
                  {
                    match (f)
                    {
                      | false => 
                        def p = c.body;
                        def p2 = builder.Zero ();
                        MatchCase (c.patterns, <[ $p; $p2 ]>);
                      
                      | true => c
                    }
                  });
              
                (PExpr.Match (x, ps), true)
            }
          
          | MacroCall (name, _, parms) =>
            match (name.Id)
            {
              | "return" =>
                match (parms)
                {
                  | [Expression (expr)] =>
                    (builder.Return (expr), true)
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid return expression.");
                }
              
              | "returncomp" =>
                match (parms)
                {
                  | [Expression (expr)] =>
                    (builder.ReturnComp (expr), true)
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid returncomp expression.");
                }
              
              | "yield" =>
                match (parms)
                {
                  | [Expression (expr)] =>
                    (builder.Yield (expr), true)
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid yield expression.");
                }
              
              | "yieldcomp" =>
                match (parms)
                {
                  | [Expression (expr)] =>
                    (builder.YieldComp (expr), true)
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid yieldcomp expression.");
                }
                
              | "call" =>
                match (parms)
                {
                  | [Expression (expr)] =>
                    (expr, false)
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid call expression.");
                }
              
              | "if" =>
                match (parms)
                {
                  | [Expression (cond), Expression (expr1), Expression (expr2)] =>
                    match (transform (expr1, false), transform (expr2, false))
                    {
                      | ((p1, false), (p2, false)) => 
                        (<[ if ($cond) $p1; else $p2 ]>, false)
                      
                      | ((p1, true), (p2, true)) =>
                        (<[ if ($cond) $p1; else $p2 ]>, true)
                      
                      | ((p1, false), (p2, true)) =>
                        def p = builder.Zero ();
                        (<[ if ($cond) { $p1; $p } else $p2 ]>, true)
                        
                      | ((p1, true), (p2, false)) =>
                        def p = builder.Zero ();
                        (<[ if ($cond) $p1 else { $p2; $p } ]>, true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid if expression.");
                };
              
              | "when" =>
                match (parms)
                {
                  | [Expression (cond), Expression (expr)] =>
                    match (transform (expr, false))
                    {
                      | (p, false) =>
                        (<[ when ($cond) $p ]>, false)
                      
                      | (p, true) =>
                        def p2 = builder.Zero ();
                        (<[ if ($cond) $p; else $p2 ]>, true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid when expression.");
                };
              
              | "unless" =>
                match (parms)
                {
                  | [Expression (cond), Expression (expr)] =>
                    match (transform (expr, false))
                    {
                      | (p, false) =>
                        (<[ unless ($cond) $p ]>, false)
                      
                      | (p, true) =>
                        def p2 = builder.Zero ();
                        (<[ if ($cond) $p2; else $p ]>, true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid unless expression.");
                };
              
              | "while" =>
                match (parms)
                {
                  | [Expression (pred), Expression (body)] =>
                    match (transform (body, false))
                    {
                      | (p, false) => 
                        (<[ while ($pred) $p ]>, false)
                      
                      | (p, true) =>
                        (builder.While (pred, p), true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid while expression.");
                };
              
              | "do" =>
                match (parms)
                {
                  | [Expression (pred), Expression (body)] =>
                  
                    match (transform (body, false))
                    {
                      | (p, false) => 
                        (<[ do $p while ($pred) ]>, false)
                      
                      | (p, true) =>
                        (builder.DoWhile (pred, p), true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid do-while expression.");
                };
                
              | "foreach" =>
                match (parms)
                {
                  | [Expression (<[ $name in $coll ]>), Expression (body)] =>
                    match (transform (body, false))
                    {
                      | (p, false) =>
                        (<[ foreach ($name in $coll) $p ]>, false)
                      
                      | (p, true) =>
                        (builder.ForEach (name, coll, p), true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid foreach expression.");
                };
                
              | "for" =>
                match (parms)
                {
                  | [Expression (init), Expression (cond), Expression (change), Expression (body)] =>
                  
                    def init = if (init != null) init else <[ () ]>;
                    def cond = if (cond != null) cond else <[ true ]>;
                    def change = if (change != null) change else <[ () ]>;
                  
                    match (transform (body, false))
                    {
                      | (p, false) =>
                        (<[ for ($init; $cond; $change) $p ]>, false)
                      
                      | (p, true) =>
                        (builder.For (init, cond, change, p), true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid for expression.");
                };
                
              | "repeat" =>
                match (parms)
                {
                  | [Expression (times), Expression (body)] =>
                  
                    match (transform (body, false))
                    {
                      | (p, false) =>
                        (<[ repeat ($times) $p ]>, false)
                      
                      | (p, true) =>
                      
                        def var = Macros.NewSymbol ("counter");
                        def init = <[ mutable $(var : name) = $times ]>;
                        def cond = <[ $(var : name) > 0 ]>;
                        def change = <[ $(var : name) -- ]>;
                      
                        (builder.For (init, cond, change, p), true)
                    }
                  | _ =>
                    Message.FatalError (expr.Location, "Invalid repeat expression.");
                };
                
              | _ => 
                (expr, false)
            }
            
          | TryFinally (body, handler) =>
            
            match (transform (body, false))
            {
              | (p, false) => (PExpr.TryFinally (p, handler), false)
              | (p, true) => (builder.TryFinally (p, handler), true)
            }
            
          | Try (body, cases) =>
            transformTry (body, cases)
            
          | _ => 
            (expr, false)
        }
      }
      and transformTry (body : PExpr, cases : list [TryCase])
      {
        // Transforms the try-catch block and returns a tuple of two values: 
        // the result of transformation and a flag indicating whether the 
        // result is a computation (monad).
        
        def cs = cases.Map (fun (c : TryCase)
          {
            | Catch (exn, exn_ty, handler) => 
              def (p, f) = transform (handler, false);
              (TryCase.Catch (exn, exn_ty, p), f)
            
            | Filter (exn, exn_ty, filter, handler) =>
              def (p, f) = transform (handler, false);
              (TryCase.Filter (exn, exn_ty, filter, p), f)
            
            | Ellipsis (handler) =>
              def (p, f) = transform (handler, false);
              (TryCase.Ellipsis (p), f)
          });
        
        def (body, isComp) = transform (body, false);
          
        match (isComp || cs.Exists ((_, f) => f))
        {
          | false => 
            (PExpr.Try (body, cs.Map ((c, _) => c)), false)
          
          | true =>
            
            def ps = cs.Map (fun (c, f)
              {
                match (f)
                {
                  | false =>
                  
                    match (c : TryCase)
                    {
                      | Catch (exn, exn_ty, handler) => 
                        TryCase.Catch (exn, exn_ty, <[ $handler; $(builder.Zero ()) ]>)
                      
                      | Filter (exn, exn_ty, filter, handler) =>
                        TryCase.Filter (exn, exn_ty, filter, <[ $handler; $(builder.Zero ()) ]>)
                      
                      | Ellipsis (handler) =>
                        TryCase.Ellipsis (<[ $handler; $(builder.Zero ()) ]>)
                    }
                  
                  | true => c
                }
              });
              
            def body = if (isComp) body else <[ $body; $(builder.Zero ()) ]>;
              
            (builder.TryCatch (body, ps), true)
        }
      }
      
      def (p, f) = transform (expr, true);
      assert (f);
      
      // ---
      // Console.WriteLine ("Expansion=\r\n{0}", p);
      // ---
      
      builder.Run (p)
    }
  }
  
  /// <summary>
  /// This is a helper diagnostic module.
  /// </summary>
  internal module ComputationError
  {
    /// <summary>
    /// Is is called whenever the macro specified by its name is invalid in the current context.
    /// </summary>
    public UnexpectedCall (name : string, expr : PExpr) : PExpr
    {
      Message.FatalError (expr.Location, $"Unexpected use of the $name construct. "
        "It can be applied only inside the known constructs of the computation expression. "
        "Please refer to the documentation for more details.")
    }
  }
}

namespace Nemerle.ComputationExpressions.InternalMacros
{
  /// <summary>
  /// Wraps the F#-like computation expression in the result at the final step.
  /// </summary>
  public macro ComputationRun (builder, expr)
  {
    def typer = Macros.ImplicitCTX ();
    def tbuilder = typer.TypeExpr (builder);
    def texpr = typer.TypeExpr (expr);
    
    def delay (info, expr)
    {
      match (info.LookupMember ("Delay"))
      {
        | [] => expr
        | _ => <[ $(tbuilder : typed).Delay (() => $expr) ]>
      }
    }
    
    def run (info, expr)
    {
      match (info.LookupMember ("Run"))
      {
        | [] => expr
        | _ => <[ $(tbuilder : typed).Run ($expr) ]>
      }
    }
    
    match (tbuilder.Type.Hint, texpr.Type.Hint)
    {
      | (Some (tb), Some (_)) =>
        run (tb.TypeInfo, delay (tb.TypeInfo, PExpr.Typed (texpr)))
      
      | _ =>
        typer.DelayMacro (fun (lastChance) 
        {
          match (tbuilder.Type.Hint, texpr.Type.Hint)
          {
            | (Some (tb), Some (_)) =>
              Some (run (tb.TypeInfo, delay (tb.TypeInfo, PExpr.Typed (texpr))))
            
            | (None, _) =>
              when (lastChance)
                Message.Error (builder.Location, "Cannot infer the computation builder type.");
              None ()
            
            | (_, None) =>
              when (lastChance)
                Message.Error (expr.Location, "Cannot infer the expression type.");
              None ()
          }
        })
    }
  }
}
