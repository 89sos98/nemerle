using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  [Record]
  public class CSharpParser : IParser
  {
    manager : ManagerClass;

    public Parse(fileName : string) : list[PT.TopDeclaration]
    {
      def fileIndex = Location.GetFileIndex(fileName);
      def source =
        using(file = IO.FileStream(fileName, IO.FileMode.Open, IO.FileAccess.Read))
        using(reader = IO.StreamReader(file, Text.Encoding.ASCII, true))
          Nemerle.Peg.SourceSnapshot(reader.ReadToEnd(), fileIndex, fileName);

      def preParser = CS.PreParser();
      match(preParser.Parse(source))
      {
        | Some(preAst) =>
          def preResult = CS.Preprocessor.Run(preAst, []); // TODO: pass conditionals
          when(preResult.HasErrors)
          {
            foreach(error in preResult.Errors)
              Message.Error(error.NLocation(), $"C# preprocessor: $error");
          }

          foreach(directive in preResult.CompilationMessages)
          {
            | CompilationError(msg) =>
              Message.Error(directive.NLocation(), msg);

            | CompilationWarning(msg) =>
              Message.Warning(directive.NLocation(), msg);

            | _ => ()
          }

          def parser = CS.Parser();
          match(parser.Parse(preResult.Source))
          {
            | Some(unit) =>
              def converter = AstConverter(manager);
              converter.Convert(unit)

            | _ =>
              def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
              def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
              Message.FatalError(loc.NLocation(), $"failed to parse file `$fileName'.")
          }

        | _ =>
          def (errorPos, _) = preParser.GetMaxRollbackPosAndIds();
          def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
          Message.FatalError(loc.NLocation(), $"failed to pre-parse file `$fileName'.")
      }
    }
  }
}