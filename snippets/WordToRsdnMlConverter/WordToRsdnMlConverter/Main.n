#define USE_XML_FORMATING
using System;
using System.Collections.Generic;
using System.Console;
using System.IO.Path;
using System.Linq;
using System.Xml.Linq;
using System.Xml.XPath;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;
using Utilities;

module Program
{
  mutable ErrorCount : int = 0;

  Error(paragraphIndex : int, msg : string) : void
  {
    ErrorCount++;
    WriteLine($"Ошибка в параграфе $paragraphIndex:  $msg");
  }
  
  Main(args : array[string]) : void
  {
    mutable paraIndex = 0;
    mutable picIndex  = 0;
    
    #region Пути к обрабатываемому файлу.
    def exePath      = GetDirectoryName(Uri(Reflection.Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def path         = if (args.Length == 1 && IO.File.Exists(args[0]))
                         GetFullPath(args[0])
                       else if (IO.File.Exists(Combine(exePath, @"..\..\TestData\TestDoc.xml")))
                         Combine(exePath, @"..\..\TestData\TestDoc.xml")
                       else "";
    when (path == "")
    {
      WriteLine("usages: WordToRsdnMlConverter.exe Word2003XmlFileToConvert.xml");
      return;
    }
    def dir          = GetDirectoryName(path);
    #endregion 
    
    def root         = XDocument.Load(path);
    
    #region XNames
    def ns_auxHint   = Utils.NsAuxHint;
    def nsAml        = XNamespace.Get("http://schemas.microsoft.com/aml/2001/core");
    def wml          = Utils.NsWordMl;
    def annName      = nsAml + "annotation";
    def valName      = wml + "val";
    def bName        = wml + "b";
    def iName        = wml + "i";
    def rStyleName   = wml + "rStyle";
    def trName       = wml + "tr";
    def tcName       = wml + "tc";
    def pName        = wml + "p";
    def tcPrName     = wml + "tcPr";
    def gridSpanName = wml + "gridSpan";
    def vmergeName   = wml + "vmerge";
    def destName     = wml + "dest";
    def styleIdName  = wml + "styleId";
    def titleName    = XName.Get("{urn:schemas-microsoft-com:office:office}title");
    #endregion
    
    #region Создания ассациативного массива идентификаторов стилей к их названиям.
    def makeStylesMap(root : XDocument) : Hashtable[string, string]
    {
      def makeDisplayName(style : XElement) : string
      {
        def uiName = style.Element(ns_auxHint + "uiName");
        def name   = style.Element(wml + "name").Attribute(valName).Value;
        if (uiName == null) name
        else $<#$(uiName.Attribute(ns_auxHint + "val").Value) ($name)#>
      }
      def map = Hashtable();
      def styles = root.Root.Element(wml + "styles");
      foreach (style in styles.Elements(wml + "style"))
        map[style.Attribute(styleIdName).Value] = makeDisplayName(style);
        
      map
    }
    def styleIdToNameMap = makeStylesMap(root);
    #endregion 

    #region Булевы функции    
    def isPanel(style)
    {
      | "NOTE" | "TIP" | "WARNING" => true
      | _ => false
    }
    def isList(style) { style == "OL" || style == "UL" }
    def isName(tag : XElement, name : string) : bool
    {
      wml == tag.Name.Namespace && tag.Name.LocalName == name
    }
    def isName2(tag : XElement, name : XName) : bool
    {
      tag.Name == name
    }
    #endregion 
    
    #region Обработка тегов WordMl-я.
    def pStyle(tags : IEnumerable[XElement], _e) : string
    {
      if (tags.Any(e => e.Name.LocalName == "pPr"))
      {
        //def pStyle2 = e.XPathSelectElement("./pPr/pStyle");
        def pStyle = tags.First(e => e.Name.LocalName == "pPr").Elements().First(x => x.Name.LocalName == "pStyle");
        //_ = pStyle2;
        
        def val = pStyle.Attribute(valName);
        def newTagName =
          match (val.Value)
          {
            | "Paragraph" | "Normal" | "Обычный"                            => "P"
            | "H1" | "1" | "Heading 1" | "Заголовок 1" | "Title"            => "H1"
            | "H2" | "2" | "Heading 2" | "Заголовок 2" | "Subtitle"         => "H2"
            | "H3" | "3" | "Heading 3" | "Заголовок 3" | "PARTHeader"       => "H3"
            | "H4" | "4" | "Heading 4" | "Заголовок 4" | "SECTIONHeader"    => "H4"
            | "H5" | "5" | "Heading 5" | "Заголовок 5" | "SUBSECTIONHeader" => "H5"
            | "H6" | "6" | "Heading 6" | "Заголовок 6"                      => "H6"
            | "Epigraph"                                                    => "Epigraph"
            | "Code"                                                        => "CODE"
            | "Name"                                                        => "NAME"
            | "Note"                                                        => "NOTE"
            | "OL"                                                          => "OL"
            | "Tip"                                                         => "TIP"
            | "UL"                                                          => "UL"
            | "Warning"                                                     => "WARNING"
            | name                                                          => 
              def styleName = styleIdToNameMap[name];
              if (styleName.EndsWith("(caption)", StringComparison.CurrentCultureIgnoreCase))
                "NAME"
              else
              {
                Error(paraIndex, $"Не поддерживаемый стиль параграфа: '$styleName'!");
                name
              }
          };
          
        newTagName
      }
      else "P"
    }
    def makeText(e : XElement, t : XElement) : Tag
    {
      def rStyle = e.Element(rStyleName);
      def b      = e.Element(bName);
      def i      = e.Element(iName);
      def style1 = if (rStyle == null) "" else rStyle.Attribute(valName).Value;
      def style2 = 
        match (style1)
        {
          | "KEYWORD"        => "KEYWORD"
          | "NUMBER"         => "NUMBER"
          | "PREPROCESSOR"   => "PREPROCESSOR"
          | "STRING"         => "STRING"
          | "ACCENT"         => "ACCENT"
          | "COMMENT"        => "COMMENT"
          | "CodeNone"       => ""
          | ""               => ""
          | "a3"             => "" // Hyperlink / Гиперссылка
          | name             =>
            Error(paraIndex, 
              $"Не поддерживаемый стиль символов: '$(styleIdToNameMap[name])' (строка '$(t.Value)')!");
            name
        }
      Tag.Text(style2, b != null, i != null, t.Value)
    }
    def readAndSetProp(tag : Tag, attrName : string, elem : XElement, propType : XName, propName : XName) : void
    {
      def propElem = elem.Element(propType);
      
      when (propElem != null)
      {
        def prop = propElem.Element(propName);
        
        when (prop != null)
          tag.Attrs[attrName] = prop.Attribute(valName).Value;
      }
    }
    def readProp(elem : XElement, propType : XName, propName : XName) : string
    {
      def propElem = elem.Element(propType);
      
      if (propElem != null)
      {
        def prop = propElem.Element(propName);
        
        if (prop != null)
        {
          def attr = prop.Attribute(valName);
          if (attr == null) "" 
          else              prop.Attribute(valName).Value
        }
        else
          null
      }
      else null
    }
    def pic(e : XElement) : Tag
    {
      picIndex++;
      def img = Tag.Text("IMG", false, false, "");
      def ns = XNamespace.Get("urn:schemas-microsoft-com:vml");
      def imagedata = e.Element(ns + "shape").Element(ns + "imagedata");
      mutable src = imagedata.Attribute("src").Value;
      def ext = GetExtension(src);
      when (src.StartsWith("wordml://", StringComparison.OrdinalIgnoreCase))
      {
        def base64Str   = e.Element(wml + "binData").Value;
        def data        = Convert.FromBase64String(base64Str);
        def picFileName = imagedata.Attribute(titleName).Value;
        def nameWoExt   = GetFileNameWithoutExtension(path);
        def dirName     = nameWoExt + "Pics/";
        src             = dirName + picFileName + ext;
        def picPath     = Combine(dir, src);
        
        _ = IO.Directory.CreateDirectory(Combine(dir, dirName));
        IO.File.WriteAllBytes(picPath, data);
      }
      
      match (ext.ToLowerInvariant())
      {
        | ".png" | ".gif" | ".jpg"| ".jpeg" => () // OK
        | _ => Error(paraIndex, $"Не поддерживаймый формат картинок '$ext' (картинка # $picIndex)");
      }
      
      img.Attrs["src"] = src;
      img
    }
    def r(e : XElement, parent : XElement) : Tag
    {
      def es = e.Elements().NToList();
      
      match (es)
      {
        | [br]      when isName(br, "br")                         => paraIndex++; Tag.Text("BR", false, false, "")
        | [rPr, br] when (isName(rPr, "rPr") && isName(br, "br")) => paraIndex++; Tag.Text("BR", false, false, "")
        | [rPr, hyphen] when (isName(rPr, "rPr") && isName(hyphen, "softHyphen")) => 
          Tag.Text("", false, false, "­") // Осторожно! В строке юникодный символ!
          
        | [rPr, hyphen] when (isName(rPr, "rPr") && isName(hyphen, "noBreakHyphen")) => 
          Tag.Text("", false, false, "‑") // Осторожно! В строке юникодный символ!
          
        | [rPr, t] when (isName(rPr, "rPr") && isName(t, "tab"))  => Tag.Text("", false, false, "  ")
        
        | [rPr, t] when (isName(rPr, "rPr") && isName2(t, annName)) =>
          //def kind = t.Attribute(wml + "type").Value;
          //when (kind == "")
          
          Tag.Text("", false, false, "")
          
        | [rPr, t]  when (isName(rPr, "rPr") && isName(t, "t"))   => makeText(rPr, t)
        | [t]       when isName(t, "t")                           => Tag.Text("", false, false, t.Value)
        | [e]       when isName(e, "pict")                        => pic(e)
        | []                                                      => Tag.Text("", false, false, "")
        | xs                                                      => 
          mutable errors = false;
          
          foreach (x in xs)//noBreakHyphen
          {
            match (x.Name.LocalName)
            {
              | "fldChar" | "instrText" => ()
              | name => 
                errors = true;
                Error(paraIndex, $"Не поддерживаемый тег <$name>");
            }
          }
          
          Console.ForegroundColor = ConsoleColor.Cyan;
          when (errors)
            Error(paraIndex, $"Код тега (абзаца) содержащего недопустимые теги (приведенные выше):\n$parent");
          Console.ResetColor();
            
          Tag.Text("", false, false, "")
      }
    }
    def hlink(e : XElement) : Tag
    {
      def content    = List();
      
      foreach (se in e.Elements().OnlyWordMl().Where(x => x.Name.LocalName == "r"))
        content.Add(r(se, e));
      
      def a = Tag.P("A", content.NToList());
      a.Attrs["href"] = e.Attribute(destName).Value;
      a
    }
    def p(e : XElement) : Tag
    {
      def tags       = e.Elements().OnlyWordMl();
      def pStyleName = pStyle(tags, e);
      def content    = List();
      
      foreach (se in tags.Where(x => x.Name.LocalName != "pPr"))
      {
        match (se.Name.LocalName)
        {
          | "r"     => content.Add(r(se, e));
          | "hlink" => content.Add(hlink(se));
          | name    => WriteLine("\np:" + name + ": " + se.ToString());
        }
      }
      
      paraIndex++;
      def xxx = paraIndex;
      _ = xxx;
      
           if (isList(pStyleName))  Tag.P(pStyleName, [Tag.P("LI", content.NToList())])
      else if (isPanel(pStyleName)) Tag.P(pStyleName, [Tag.P("P", content.NToList())])
      else                          Tag.P(pStyleName, content.NToList())
    }
    def tbl(e : XElement) : Tag
    {
      //WriteLine("\n" + e.Name.LocalName + ": " + e.ToString());
      def trs = List();
      
      def rows = e.Elements(trName).ToArray();
      def tbl = array(rows.Length);
      
      when (rows.Length > 0)
      {
        // Создаем двумерный массив описывающий таблицу.
        foreach (rowIndex in [0 .. rows.Length - 1])
          tbl[rowIndex] = rows[rowIndex].Elements(tcName).ToArray();

        def colCount = tbl.MapLazy(_.Length).Max();
        def rowSpanMap = array(rows.Length); // > 0 - кол. соедененных ячеек, < 0 - игнорировать колонку
        foreach (rowIndex in [0 .. rows.Length - 1])
          rowSpanMap[rowIndex] = array.[int](colCount); // инициаилизируем двумерный массив нулями
        
        // Перебераем ячейки в порядке клонки -> строки...
        foreach (colIndex in [0 .. colCount - 1])
        {
          mutable rowSpanStartIndex = -1;
          mutable vmergeCound = 0;

          foreach (rowIndex in [0 .. rows.Length - 1])
          {
            when (colIndex >= tbl[rowIndex].Length)
              continue;
            
            def tc     = tbl[rowIndex][colIndex];
            def vmerge = readProp(tc, tcPrName, vmergeName);

            if (vmerge == "restart") // начало соеденяемых колонок...
            {
              rowSpanStartIndex = rowIndex;
              vmergeCound++;
            }
            else if (vmerge == "") // продолжение соеденения колонк...
            {
              rowSpanMap[rowIndex][colIndex] = -1;
              vmergeCound++;
              
              when (rowIndex == rows.Length - 1)
                rowSpanMap[rowSpanStartIndex][colIndex] = vmergeCound;
            }
            else when (vmergeCound > 0) // окончание соеденения колокнок.
            { 
              rowSpanMap[rowSpanStartIndex][colIndex] = vmergeCound;
              vmergeCound = 0;
            }
          }
        }
        
        foreach (rowIndex in [0 .. rows.Length - 1])
        {
          def tcs = List();
          
          foreach (colIndex in [0 .. colCount - 1])
          {
            def rowSpan = rowSpanMap[rowIndex][colIndex];
            
            when (rowSpan < 0)
              continue;

            when (colIndex >= tbl[rowIndex].Length)
              continue;
              
            def ps = List();
            def tc = tbl[rowIndex][colIndex];
            
            foreach (p1 in tc.Elements(pName))
              ps.Add(p(p1));

            def tdTag = Tag.P("td", ps.NToList());
            
            readAndSetProp(tdTag, "colspan", tc, tcPrName, gridSpanName);
            
            when (rowSpan > 0)
              tdTag.Attrs["rowspan"] = rowSpan.ToString();
              
            tcs.Add(tdTag);
          }
        
          trs.Add(Tag.P("tr", tcs.NToList()));
        }        
      }
      
      Tag.P("TABLE", trs.NToList())
    }
    def ps = List();
    def subSection(e : XElement) : void
    {
      foreach (se in e.Elements().OnlyWordMl())
        match (se.Name.LocalName)
        {
          | "p"           => ps.Add(p(se));
          | "tbl"         => ps.Add(tbl(se));
          | "sectPr"      => () // ignore it
          | "sub-section" => subSection(se)
          | name          => WriteLine("\n" + name + ": " + se.ToString());
        }
    }
    def body       = root.Root.Element(wml + "body");
    def topSection = body.Element(ns_auxHint + "sect") ?? body;
       
    if (topSection.Element(ns_auxHint + "sub-section") != null)
      foreach (e in topSection.Elements())
        subSection(e);
    else
      subSection(topSection);
    #endregion

    #region Генерация заголовков статьи.      
    def title() : string
    {
      def titles = ps.Where(_ is Tag.P("H1", _)).ToArray();
      
      match (titles.Length)
      {
        | 0 =>
          Error(0, "Первым абзацем должен идти заголовок статьи помеченный стилем 'H1'");
          "<<Не задан заголовок статьи>>"
        | 1 => 
          def title = titles[0];
          
          when (ps[0] : object != title)
            Error(ps.IndexOf(title), "Заголовок статьи (помеченный стилем 'H1') должен быть идти первым абзецем");
            
          (title.ToXml() :> XElement).Value
          
        | _ =>
          Error(0, "В статье должен быть только один заголовок (обазац помеченный стилем 'H1')");
          $<#..$(titles; " "; title => (title.ToXml() :> XElement).Value)#>
      }
    }
    def subtitle() : string
    {
      def titles = ps.Where(_ is Tag.P("H2", _)).ToArray();
      
      match (titles.Length)
      {
        | 0 => ""
        | 1 => 
          def title = titles[0];
          
          when (ps.Count < 2 || ps[1] : object != title)
            Error(ps.IndexOf(title), "Заголовок статьи (помеченный стилем 'H1') должен быть идти первым абзецем");
            
          $<#<SUBTITLE>$((title.ToXml() :> XElement).Value)</SUBTITLE>#>
        | _ =>
          Error(0, "В статье должен быть только один заголовок (обазац помеченный стилем 'H1')");
          $<#<SUBTITLE>..$(titles; " "; title => (title.ToXml() :> XElement).Value)</SUBTITLE>#>
      }
    }
    def title = title();
    // Удаляем загаловки H1 и H2 их списка тегов...
    def ps = ps.Where(p => !(p is Tag.P("H1", _)) && !(p is Tag.P("H2", _))).NToList();
    #endregion 

    #region Трасформация тегов для соотвествия RSDN ML-ю
    def transform(ps : list[Tag]) : list[Tag]
    {
      def loop(cur, ps, res) : list[Tag]
      {
        match (cur, ps)
        {
          | (Tag.P("CODE", content1), Tag.P("CODE", content2) :: tail) =>
            def content =
              match (content1 + (Tag.Text("", false, false, "\r\n") :: content2))
              { // если первый блок кода не текст, то нужно встать пустой текст, чтобы предотвратить 
                // форматирование тега при преобрзоавнии его в строку.
                | (Tag.Text("", false, false, _) :: _) as content => content
                | content => Tag.Text("", false, false, "") :: content
              };
            
            loop(Tag.P("CODE", content), tail, res)
            
          | (Tag.P(s1, content1), Tag.P(s2, content2) :: tail) when (s1 == s2 && (isPanel(s1) || isList(s1))) =>
            loop(Tag.P(s1, content1 + content2), tail, res)

          | (Tag.P(_, content) as p, head :: tail) =>
            res.Add(p.ReplaceContent(transform(content)));
            loop(head, tail, res)
            
          | (Tag.P(_, content) as p, []) =>
            res.Add(p.ReplaceContent(transform(content)));
            res.NToList()
          
          | (_, head :: tail) => res.Add(cur); loop(head, tail, res)
          | (_, [])           => res.Add(cur); res.NToList()
        }
      }
      
      if (ps.IsEmpty) ps else loop(ps.Head, ps.Tail, List())
    }

    def ps = transform(ps);

    // Преобразует плоский список фараграфов содежащий заголовки H3-H5 в иерархию:
    // PART\SECTION\SUBSECTION преобразуя заголовки в теги HEADER соответствющего 
    // раздела иерархии. 
    // Особенность: Раздел может начинаться и не с заголовка. Это происходит когда
    // перед первым заголовком раздела идет обычный текст (параграфы не заголовки).
    // В этом случае этот текст добавляется в предыдущий раздел.
    def transformPart(styleName : string, sectionName : string, ps : list[Tag]) : list[Tag]
    {
      def parts = List();
      def partContent = List();
      
      foreach (p in ps)
      {
        | Tag.P(style, content) when style == styleName =>
          // найден заголовок начинающий новый раздел этого уровня
          
          when (partContent.Count > 0) // имеется текст перед заголовком...
          {
            if (sectionName == "PART" || parts.Count > 0) // если это не первый раздел или "PART"...
              // ... добавляет тег секции и помещаем в него собранное содержимое (применяяк нему 
              // данное преобразование, но для секции следующего уровня)
              parts.Add(Tag.P(sectionName, transformSection(sectionName, partContent.NToList())));
            else // если это первый раздел и не "PART" (PART обрабатывается особо)
              // добавляем в содержимое не помещая его в тег, так как оно пренадлежит предыдущему разделу.
              parts.AddRange(transformSection(sectionName, partContent.NToList()));
            partContent.Clear();
          }
          
          partContent.Add(Tag.P("HEADER", content));
          
        | _ => partContent.Add(p);
      }
      
      if (parts.Count > 0) // если встретились заголовки текущего раздела...
      {
        when (partContent.Count > 0) // ... и остался не пресоедененный контент...
          // добавляем его...
          parts.Add(Tag.P(sectionName, transformSection(sectionName, partContent.NToList())));
          
        parts.NToList()
      }
      else ps // если заголовков нет, то возвращаем не изменное содержимое.
    }
    // Применяет функцию transformPart для подуровнй тем самым обеспечивая псевдо-рекурсивное
    // применение функции transformPart.
    and transformSection(prevSecName : string, ps : list[Tag]) : list[Tag]
    { 
      match (prevSecName)
      {
        | "PART"    => transformPart("H4", "SECTION", ps)
        | "SECTION" => transformPart("H5", "SUBSECTION", ps)
        | _         => ps
      }
    }
    
    def ps = transformPart("H3", "PART", ps);
    #endregion
    
    //TODO: Реализовать считывание авторов.
    //TODO: Реализовать обработку <aml:annotation aml:author="автор" w:type="Word.Insertion">.
    
    #region Запись сгенерированного содержимого в файл.
    def doc = XDocument.Parse($<#<ARTICLE>
<TITLE>$title</TITLE>
$(subtitle())
<AUTHOR company="The RSDN Group" >VladD2</AUTHOR>

<DATE>$(DateTime.Now.ToString("dd.mm.yyyy"))</DATE>
<VERSION>1.0</VERSION>
<CONTENTS/>
</ARTICLE>
#>);
    def contents = doc.Descendants().First(x => x.Name.LocalName == "CONTENTS");
    contents.AddAfterSelf(ps.MapToArray(p => p.ToXml()));
    def rsdnMlFilePath = Combine(GetDirectoryName(path), "out.xml");
    IO.File.WriteAllText(rsdnMlFilePath, 
      <#<?xml version="1.0" encoding="UTF-8" ?>#> + "\r\n" + doc.ToString(),
      Text.Encoding.UTF8);
    #endregion

    #region Xsl Transform
    
    def xslt = Xml.Xsl.XslCompiledTransform(true);
    xslt.Load(typeof(RsdnMlXslt));
    
    
    def writer = IO.StringWriter();
    xslt.Transform(rsdnMlFilePath, Xml.Xsl.XsltArgumentList(), writer);
    
    def sbOut = Text.StringBuilder();
    _ = sbOut.AppendLine($<#<html>
  <head>
    <title>$title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet"  type="text/css" href="http://rsdn.ru/css/article.css" />
  </head>
  <body>
  #>);
    
    _ = sbOut.AppendLine(writer.ToString())
             .AppendLine("</body>\r\n</html>")
             .Replace(<#"/images/#>, <#"http://rsdn.ru/images/#>);
      
    def outFilePath = ChangeExtension(rsdnMlFilePath, "html");
    IO.File.WriteAllText(outFilePath, sbOut.ToString(), Text.Encoding.UTF8); // запись htm-а.
    #endregion
    
    _ = Diagnostics.Process.Start(outFilePath);

    when (ErrorCount > 0)
    {
      WriteLine("Нажмите Enter для завершения работы...");
      _ = ReadLine();
    }
  }
}