/*
 * Copyright (c) 2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Compiler 
{
  /** Represents a single possibility in the overloading resulution process.
      It is used in the TExpr.Overloaded node.  */
  public class OverloadPossibility
  {
    /** Tell if this overload is still possible in the current solver.  */
    [Nemerle.NotImplemented]
    public StillPossibile : bool
    {
      get {
      }
    }
    

    /** If not [StillPossibile], then return an error message describing why. 
        Warning: It invalidates the current solver, which has to be the
        toplevel one.  */
    [Nemerle.NotImplemented]
    public ErrorMessage : string
    {
      get {
      }
    }
    

    /** Enforce this particular overloading possibility in the current
        solver.  */
    [Nemerle.NotImplemented]
    public Compile () : TExpr
    {
    }


    public override ToString () : string
    {
      member.ToString ()
    }
    

    public this (typer : Typer, expr : TExpr, member : IMember)
    {
      when (expr == null)
        assert (member.IsStatic);

      this.expr = expr;
      this.member = member;
      this.typer = typer;
    }
  
    expr : TExpr;
    member : IMember;
    solver : Solver;
    public mutable VarArgs : bool;

    /** Filter out impossible overloads from the list.  If there are no 
        possible overloads and we are in the error reporting mode, present
        an appropriate error message.  */
    static public OnlyPossible (overloads : list [OverloadPossibility]) 
                                          : list [OverloadPossibility]
    {
      assert (!l.IsEmpty);

      def res = List.Filter (overloads, 
                                fun (o : OverloadPossibility) { 
                                  o.StillPossibile 
                                });
      
      when (res.IsEmpty) {
        def hd = List.Hd (overloads);
        def messenger = hd.solver.CurrentMessenger;
        ReportError (messenger,
                     $ "none of the overloads of $(hd.member.Name) is "
                       "possible:");
          foreach (overload in overloads)
            ReportError (messenger,
                         $ "  $overload because $(overload.ErrorMessage)");
        }
      }
      
      res
    }

  }
}
