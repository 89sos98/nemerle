using Nemerle.Collections.List;
using Nemerle.Utility.NString;
using SC=System.Console;
using System.Text.RegularExpressions.Regex;
  
namespace Nemerle.Evaluation.Interpreter
{
  public module Internals
  {
    interpassembly : string = System.Reflection.Assembly.
                              GetAssembly (typeof (Internals)).Location;
    interpnamespace : option [string] * string = 
    (Some ("Interp"), "Nemerle.Evaluation.Interpreter.Internals");

    mutable @using = "";
    mutable usingparsed : list [option [string] * string] = [interpnamespace];
    mutable @ref = "";
    mutable refparsed : list [string] = [interpassembly];
    mutable ps1 = "- ";
    mutable ps2 = "= ";
    mutable prompt : string = ps1;
  
    public Using : string {
      get { @using }
      set { 
        @using = value;
  
        def tmpusing = Split (Replace (@using, @"\s", ""), array [',']);
        def newusing = FoldLeft (tmpusing, [], fun (x, acc) {
          match (Split (x, array ['='])) {
            | [h] => (None (), h) :: acc
            | [h, t] => (Some (h), t) :: acc
            | _ => assert (false)
          }
        });
  
        usingparsed = interpnamespace :: newusing;
      }
    }
  
    public UsingParsed : list [option [string] * string] {
      get { usingparsed }
    }
  
    public Ref : string {
      get { @ref }
      set { 
        @ref = value;
        refparsed = interpassembly ::
                    Split (Replace (@ref, @"\s", ""), array [',']);
      }
    }
  
    public RefParsed : list [string] {
      get { refparsed }
    }
  
    public PS1 : string {
      get { ps1 }
      set { ps1 = value }
    }
  
    public PS2 : string {
      get { ps2 }
      set { ps2 = value }
    }
  
    public Prompt : string {
      get { prompt }
      set { prompt = value }
    }
  
    public Help : void {
      get { 
        SC.WriteLine ("Interp.Help\t-\tPrint this help.");
        SC.WriteLine ("Interp.Ref\t-\tLink specified assembly.\n"
                      "\t\t\t(ex. Interp.Ref = \"Nemerle.dll, "
                      "Nemerle.Compiler.dll\")");
        SC.WriteLine ("Interp.PS1\t-\tSet primary prompt.\n"
                      "\t\t\t(ex. Interp.PS1 = \">>> \")");
        SC.WriteLine ("Interp.PS2\t-\tSet secondary prompt.\n"
                      "\t\t\t(ex. Interp.PS2 = \"... \")");
        SC.WriteLine ("\nNote1: All these, as properties, "
                      "can be set, or got.");
        SC.WriteLine ("Note2: \"Interp\" is actually a namespace alias for\n"
                      "       Nemerle.Evaluation.Interpreter.Internals");
        SC.WriteLine ("\nYou can also invoke a command in a subshell with "
                      "\"!command;;\",\nor simply \"!;;\" for a shell.\n");
        SC.WriteLine ("Use ^d (ctrl-d) to quit.\n")
      }
    }
  }
}
