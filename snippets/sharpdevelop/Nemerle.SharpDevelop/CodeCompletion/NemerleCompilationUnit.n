using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class NemerleCompilationUnit : DefaultCompilationUnit {

        public this(projectContent : IProjectContent, source : Source) {
            base(projectContent);
            this.source = source;
            this.FileName = source.Item.FileName;
            when(null != source.CompileUnit)
                Import(source.CompileUnit);
        }

        [Accessor] source : Source;

        private Import(cu : CompileUnit) : void {
            def loc_to_dom(loc) {
                DomRegion(loc.Line, loc.Column, loc.EndLine, loc.EndColumn)
            }
            def import_decl(decl) {
                def class_type = match(decl) {
                    | TopDeclaration.Alias          => ClassType.Class
                    | TopDeclaration.Class          => ClassType.Class
                    | TopDeclaration.Delegate       => ClassType.Delegate
                    | TopDeclaration.Enum           => ClassType.Enum
                    | TopDeclaration.Interface      => ClassType.Interface
                    | TopDeclaration.Macro          => ClassType.Class
                    | TopDeclaration.Variant        => ClassType.Class
                    | TopDeclaration.VariantOption  => ClassType.Class
                }

                def c = DefaultClass(this, decl.FullName);
                c.Region = loc_to_dom(decl.HeaderLocation);
                c.ClassType = class_type;

                Classes.Add(c);
            }
            def import_top_decls(decls) {
                | [] => ();
                | decl :: decls =>
                    import_decl(decl);
                    import_top_decls(decls);
            }

            import_top_decls(cu.TopDeclarations);

            def import_ns(ns) {
                unless(null == ns) {
                    def scope = DefaultUsingScope();
                    scope.NamespaceName = NString.Concat(".", ns.Name);
                    UsingScope = scope;
                }
            }

            import_ns(cu.TopNamespace)
        }

    }

}