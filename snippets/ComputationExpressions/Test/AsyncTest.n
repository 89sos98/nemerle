using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  public class AsyncTest
  {
    [TestCaseAttribute(<#
20
20
20
121
121 20
20 123
20 20
#>)]
    public static Test1(stream : IO.TextWriter) : void
    {
      def async = AcyncBuilder();
      def fn(n)
      {
        comp async
        {
          if (n < 20)
            returncomp fn(n + 1);
          else
            return n;
        }
      }
      def f(n1, n2)
      {
        comp async
        {
          defcomp n1 = fn(n1);
          defcomp n2 = fn(n2);
          return $"$n1 $n2";
        }
      }
      stream.WriteLine(Async.ExecAll(fn(1)));
      stream.WriteLine(Async.ExecAll(fn(10)));
      stream.WriteLine(Async.ExecAll(fn(15)));
      stream.WriteLine(Async.ExecAll(fn(121)));
      stream.WriteLine(Async.ExecAll(f(121, 1)));
      stream.WriteLine(Async.ExecAll(f(11, 123)));
      stream.WriteLine(Async.ExecAll(f(11, 4)));
    }

    [TestCaseAttribute(<#
20
20
20
121
#>)]
    public static Test2(stream : IO.TextWriter) : void
    {
      def async = AcyncBuilder();
      def fn(mutable n)
      {
        comp async
        {
          while (n < 20)
          {
            when (false)
            {
              defcomp x = fn(n);
              stream.WriteLine(x);
            }
            ++n;
          }
          return n;
        }
      }
      stream.WriteLine(Async.ExecAll(fn(1)));
      stream.WriteLine(Async.ExecAll(fn(10)));
      stream.WriteLine(Async.ExecAll(fn(15)));
      stream.WriteLine(Async.ExecAll(fn(121)));
    }
  }
}
