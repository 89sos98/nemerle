(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Collections;

open Nemerle.Compiler;
open Nemerle.Compiler.CGexpr;
open Nemerle.Compiler.Tyops;
open Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler {

  class CGexpr
    {
      static ref cg_members : Int_map (CG_member);
      
      static lookup_field (decl : M_field) : CM_field =
        match cg_members#find (decl#id) with [
          | Some (?r) => (r :> CM_field)
          | None =>
            let m = (CM_field (cg_type (decl#ty)) :> CM_field) in {
              m#name <- decl#name;
              m#attrs <- cg_attrs (decl#modifiers);
              cg_members <- cg_members#add (decl#id, m);
              m
            }
        ];

      static lookup_value (decl : M_value) : CM_field =
        match cg_members#find (decl#id) with [
          | Some (?r) => (r :> CM_field)
          | None =>
            let m = (CM_field (cg_type (decl#ty)) :> CM_field) in {
              m#name <- decl#name;
              m#attrs <- cg_attrs (decl#modifiers);
              make_static (m);
              cg_members <- cg_members#add (decl#id, m);
              m
            }
        ];

      static lookup_function (h : Fun_header) : CM_method =
        match cg_members#find (h#id) with [
          | Some (?r) => (r :> CM_method)
          | None =>
            let m = cg_fun_header (h) in {
              cg_members <- cg_members#add (h#id, m);
              m
           }
        ];

      static lookup_class (decl : Type_decl) : CM_class =
        match cg_members#find (decl#id) with [
          | Some (?r) => (r :> CM_class)
          | None =>
            let ti = Tyinfo.lookup (decl) in
            let inh = List.map (cg_type, ti#direct_supertypes ()) in
            let r = (CM_class ("", CK_class (), inh, Nil ()) :> CM_class) in {
              r#loc <- decl#loc;
              r#name <- decl#name;
              r#attrs <- Nil ();
              cg_members <- cg_members#add (decl#id, r);
              r
            }
        ];
        
      static cg_type (t : Type) : CG_type =
        match Tyutil.top_expand (t) with [
          | T_void => CT_void ()
          | T_prod (?l) => CT_tuple (List.length (l))
          | T_fun (?args, _) => CT_fun (List.length (args))
          | T_var (_, ?id) =>
            match Tyvars.constraints (id) with [
              | Nil => CT_object ()
              | Cons (?t, _) => cg_type (t)
            ]
          | T_app (_, _, ?id) => 
            CT_ref ((Tyinfo.lookup (id))#fullname())
          | T_ref => Util.ice ("FIXME: cg ref")
          | T_out => Util.ice ("FIXME: cg out")
        ];

      static type_of (ex : CG_expr) : CG_type =
        if ex#expr_ty == null then Util.ice ()
        else ex#expr_ty;

      static fixup (ex : CG_expr, t : CG_type) : CG_expr {
        ex#loc <- Location_stack.top ();
        ex#expr_ty <- t;
        ex
      }

      static ref closures : list (CG_member);

      record CTX
        {
          ref current_fun : Decl;
          ref current_closure : option (CG_val);
          ref closure_fields : Int_map (CM_field);
          ref closure_ptrs : Int_map (CM_field);
          ref locals : Int_map (CG_val);
        }

      static copy_ctx (c : CTX) : CTX =
        CTX (current_fun = c#current_fun,
             current_closure = c#current_closure,
             closure_fields = c#closure_fields,
             closure_ptrs = c#closure_ptrs,
             locals = c#locals);

      static empty_ctx () : CTX =
        CTX (current_fun = null,
             current_closure = None (),
             closure_fields = Map.int_map (),
             closure_ptrs = Map.int_map (),
             locals = Map.int_map ());

      static store_in_closure (ctx : CTX, d : Decl, val : CG_expr) : CG_expr =
        let rf = CE_field_ref (CE_ref (Util.unsome (ctx#current_closure)),
                               ctx#closure_fields#get (d#id)) in
        CE_assign (rf, val);

      static store_local (ctx : CTX, d : Decl, val : CG_expr) : CTX * CG_val =
        if d#in_closure then
          let assign = store_in_closure (ctx, d, val) in
          let cgv = CG_val (loc = d#loc, 
                            name = "_N_dummy_" + string_of_int (Util.next_id ()), 
                            ty = CT_void (), 
                            val = assign) in
          (copy_ctx (ctx), cgv)
        else
          let cgv = CG_val (loc = d#loc, name = d#name, ty = cg_type (d#ty), val = val) in
          let ctx' = copy_ctx (ctx) in {
            ctx'#locals <- ctx#locals#add (d#id, cgv);
            (ctx', cgv)
          };

      static closure_ref (ctx : CTX, fn : Decl) : CG_expr =
        if ctx#current_fun#id == fn#id then
          CE_ref (Util.unsome (ctx#current_closure))
        else
          CE_field_ref (CE_this (), ctx#closure_ptrs#get (fn#id));

      static cg_match (ctx : CTX, val : CG_expr, mcs : list (Match_case)) : CG_expr =
        match mcs with [
          | Nil =>
            let match_failure =
              match Env.lookup_global ("Nemerle.Core.Match_failure") with [
                | {kind = D_class_member (M_type (?x))} =>
                  lookup_class (x)
                | _ => Util.ice ()
              ]
            in
            CE_raise (CE_call (CE_ctor_ref (match_failure), Nil ()))
          | Cons (?m, ?ms) =>
            cg_match (ctx, val, ms)
        ];

      static raw_cg_expr (ctx : CTX, inex : Expr) : CG_expr =
        letfun self (e : Expr) : CG_expr = cg_expr (ctx, e) in
        let ex =
          match inex with [
            | E_ref (?d) =>
              if d#in_closure then
                let defined_in = Util.unsome (d#parent_fun) in
                CE_field_ref (closure_ref (ctx, defined_in), 
                              ctx#closure_fields#get (d#id))
              else
                match d#kind with [
                  | D_class_member (M_value ?v) => 
                    CE_global_ref (lookup_value (v))
                    
                  | D_class_member (M_function ?f) => 
                    // FIXME: need proxy here
                    CE_global_ref (lookup_function (f#fun_header))

                  | D_class_member => Util.ice ()

                  | _ => 
                    if ctx#locals#mem (d#id) then
                      CE_ref (ctx#locals#get (d#id))
                    else {
                      Message.error ("blah, not finished");
                      Util.ice ("ref to undef val " + d#name)
                    }
                ]

            | E_field_ref (?o, ?f) =>
              CE_field_ref (self (o), lookup_field (f))

            | E_method_ref (?o, ?m) =>
              CE_method_ref (self (o), lookup_function (m#fun_header))

            | E_call (?f, ?p) =>
              letfun mkp (p : Parm) : CG_expr = self (p#expr) in
              CE_call (self (f), List.map (mkp, p))

            | E_assign (?e1, ?e2) =>
              CE_assign (self (e1), self (e2))

            | E_let (?d, ?v, ?b) =>
              let (?ctx', ?cgv) = store_local (ctx, d, self (v)) in
              CE_let (cgv, cg_expr (ctx', b))

            | E_letfun (?fs, ?body) =>
              let ref l = Nil () in
              letfun store (ctx : CTX, f : Function_decl) : CTX =
                let cl = make_lambda_class (ctx, f#decl) in
                let ct = make_lambda_ctor (ctx, f#decl, cl) in
                let (?ctx, ?val) = store_local (ctx, f#decl, ct) in
                let _ = l <- Cons ((val, cl), l) in
                ctx
              in

              let ctx = List.fold_left (store, ctx, fs) in
              
              letfun fill (f : Function_decl, acc : CG_val * CM_class) : void =
                let (?val, ?cl) = acc in {
                  closures <- Cons ((cl : CG_member), closures);
                  fill_lambda_class (ctx, f#decl, f#body, cl)
                }
              in

              let _ = List.iter2 (fill, fs, List.rev (l)) in

              letfun mklet (acc : CG_expr, x : CG_val * CM_class) : CG_expr =
                let (?val, ?cl) = x in
                CE_let (val, acc)
              in

              List.fold_left (mklet, cg_expr (ctx, body), l)

            | _ => CE_none ()
          ]
        in {
          if ex#expr_ty == null then
            ex#expr_ty <- cg_type (Tyexpr.type_of (inex))
          else ();
          ex
        };

      static cg_expr (ctx : CTX, ex : Expr) : CG_expr =
        Util.locate (ex#loc, fun () : CG_expr =>
          let e = raw_cg_expr (ctx, ex) in {
            e#loc <- ex#loc;
            e
          });

      static fixup_function (f : M_function) : CM_method =
        let m = lookup_function (f#fun_header) in {
          m#attrs <- cg_attrs (f#modifiers);
          let ti = Tyinfo.lookup (f#id) in
          match f#fun_kind with [
            | FK_method => ()
            | FK_static_ctor => 
              {
                m#name <- ti#basename ();
                make_static (m)
              }
            | FK_ctor => m#name <- ti#basename ()
            | FK_function => make_static (m)
            | FK_iface_method => Util.ice ()
          ];
          m
        };

      static decl_uniq_name (d : Decl) : string =
        d#name + "_" + string_of_int (d#id);

      static prepare_ctx_for_fun (ctx : CTX, fn : Decl) : CTX =
        letfun mk_clo_fld (d : Decl) : CG_member =
          let f = CM_field (cg_type (d#ty)) in {
            f#name <- decl_uniq_name (d);
            f#loc <- d#loc;
            f
          }
        in
      
        letfun mk_clo_var (clo_vars : Int_map (CM_field), d : Decl, v : CG_member) : Int_map (CM_field) =
          clo_vars#add (d#id, (v :> CM_field))
        in
        
        let ctx = 
          if fn#closure_vars == null then Util.ice () else
          match fn#closure_vars with [
            | Nil => 
              let ctx = copy_ctx (ctx) in {
                ctx#current_closure <- None ();
                ctx
              }

            | Cons =>
              let fields = List.map (mk_clo_fld, fn#closure_vars) in
              let clovars = List.fold_left2 (mk_clo_var, ctx#closure_fields, 
                                             fn#closure_vars, fields) in
              let cloclass = (CM_class ("", CK_class (), Nil (), fields) :> CM_class) in
              let cloclname = "_N_cl_" + decl_uniq_name (fn) in
              let clotype = CT_ref (cloclname) in
              let cloexpr = fixup (CE_call (CE_ctor_ref (cloclass), Nil ()), clotype) in
              let cloval = CG_val (fn#loc, "_N_closure", clotype, cloexpr) in
              let ctx = copy_ctx (ctx) in {
                cloclass#name <- cloclname;
                cloclass#loc <- fn#loc;
                closures <- Cons ((cloclass : CG_member), closures); // push it
                ctx#closure_fields <- clovars;
                ctx#current_closure <- Some (cloval);
                ctx
              }
          ]
        in {
          ctx#closure_ptrs <- Map.int_map ();
          ctx#locals <- Map.int_map ();
          ctx#current_fun <- fn;
          ctx
        };

      static make_lambda_class (ctx : CTX, fn : Decl) : CM_class =
        match fn#kind with [
          | D_local_fun (?h, _) =>
            let funty = CT_fun (List.length (h#parms)) in
            let lambdaclass = CM_class ("", CK_class (), List.cons (funty), Nil ()) in {
              lambdaclass#name <- decl_uniq_name (fn);
              (lambdaclass :> CM_class)
            }
          | _ => Util.ice ()
        ];

      static make_lambda_ctor (ctx : CTX, fn : Decl, cl : CM_class) : CG_expr =
        match fn#kind with [
          | D_local_fun (_, ?pars) =>
            letfun cloref (fn : Decl) : CG_expr = closure_ref (ctx, fn) in
            CE_call (CE_ctor_ref (cl), List.map (cloref, pars))
          | _ => Util.ice ()
        ];

      static fill_lambda_class (ctx : CTX, fn : Decl, body : Expr, lambdaclass : CM_class) : void =
        letfun make_ctor (mems : list (CG_member)) : CG_member =
          letfun mkparm (f : CG_member) : CG_val =
            CG_val (loc = f#loc, name = f#name, ty = (f :> CM_field)#ty, val = CE_none ())
          in
          letfun mkassign (p : CG_val, f : CG_member) : CG_expr =
            CE_assign (CE_field_ref (CE_this (), (f :> CM_field)), CE_ref (p))
          in
          let parms = List.map (mkparm, mems) in
          let assigns = List.map2 (mkassign, parms, mems) in
          let meth = CM_method (parms, CT_void (), CE_sequence (assigns)) 
          in {
            meth#name <- decl_uniq_name (fn);
            meth
          }
        in
        let (?meth, ?pars) = 
          match fn#kind with [
            | D_local_fun (?h, ?pars) => (lookup_function (h), pars)
            | _ => Util.ice ()
          ]
        in
        let ctx = prepare_ctx_for_fun (ctx, fn) in
        letfun mkcloptr (fn : Decl) : CG_member =
          let clotype = CT_ref ("_N_cl_" + decl_uniq_name (fn)) in
          let fld = CM_field (clotype) in {
            fld#name <- decl_uniq_name (fn);
            ctx#closure_ptrs <- ctx#closure_ptrs#add (fn#id, (fld :> CM_field));
            fld
          }
        in
        let fields = List.map (mkcloptr, pars) in
        let members = Cons (make_ctor (fields), Cons ((meth : CG_member), fields)) in {
          lambdaclass#decls <- members;
          meth#body <- cg_fun_body (ctx, body)
        };

      static cg_fun_body (ctx : CTX, body : Expr) : CG_expr =
        let body = cg_expr (ctx, body) in
        match ctx#current_closure with [
          | Some (?v) => 
            // FIXME load parms into closure
            CE_let (v, body)
          | None => body
        ];

      static cg_global_fun (ctx : CTX, fn : Decl, body : Expr) : CG_member =
        let ctx = prepare_ctx_for_fun (ctx, fn) in
        let meth =
          match fn#kind with [
            | D_class_member (M_function ?f) => fixup_function (f)
            | _ => Util.ice ()
          ]
        in {
          meth#body <- cg_fun_body (ctx, body);
          meth
        };
        
      // produce cast only if needed
      static cast_expr (ex : CG_expr, t : CG_type) : CG_expr =
        letfun cast (ex : CG_expr) : CG_expr =
          fixup (CE_cast (ex, t), t)
        in
        match (type_of (ex), t) with [
          | (CT_void, CT_void) => ex
          | (CT_void, _) => Util.ice ()
          | (CT_object, CT_object) => ex
          | (CT_tuple (?l1), CT_tuple (?l2)) =>
            if l1 == l2 then ex
            else Util.ice ()
          | (CT_fun (?l1), CT_fun (?l2)) =>
            if l1 == l2 then ex
            else Util.ice ()
          | (_, CT_object) => 
            // not strictly needed, but we'll better have this
            cast (ex) 
          | (CT_object, _) => 
            cast (ex)
          | (CT_ref (?n1), CT_ref (?n2)) =>
            if n1 == n2 then ex
            else cast (ex)
          | _ => Util.ice ()
        ];

      static cg_fun_header (h : Fun_header) : CM_method =
        letfun mkparm (p : Fun_parm) : CG_val =
          CG_val (loc = Location_stack.top (),
                  name = p#name, 
                  ty = cg_type (p#ty),
                  val = CE_none ())
        in
        let m = CM_method (parms = List.map (mkparm, h#parms), 
                           ret_type = cg_type (h#ret_type),
                           body = CE_none ())
        in {
          m#name <- h#name;
          (m :> CM_method)
        };

      static cg_attrs (mods : list (Modifier)) : list (string) = 
        List.cons ("public");

      static make_static (m : CG_member) : void =
        m#attrs <- Cons ("static", m#attrs);

      static cg_decl (decl : Class_member) : list (CG_member) =
        Util.locate (decl#loc, fun () : list (CG_member) =>
          match decl with [
            | M_type (?t) => 
              List.map (fun (x : CM_class) : CG_member => (x : CG_member), 
                        cg_tydecl (t))

            | M_value ?v => List.cons ((lookup_value (v) : CG_member))

            | M_field ?v => List.cons ((lookup_field (v) : CG_member))

            | M_function ?f =>
              match f#body with [
                | FB_extern => Nil () // skip?
                | FB_expr => Util.ice ()
                | FB_typed_expr (?body) =>
                  let decl = Env.global_by_id (f#id) in
                  let _ = CGexpr.closures <- Nil () in
                  let mem = cg_global_fun (empty_ctx (), decl, body) in
                  Cons (mem, CGexpr.closures)
                | FB_abstract =>
                  List.cons ((fixup_function (f) :> CG_member))
              ]
          ]);
      
      static cg_list_decl (decls : list (Class_member)) : list (CG_member) =
        List.concat (List.map (cg_decl, decls));
        
      static cg_tydecl (decl : Type_decl) : list (CM_class) =
        let ti = Tyinfo.lookup (decl) in
        letfun make_cm (decl : Type_decl, kind : CM_kind) : CM_class =
          let r = lookup_class (decl) in {
            r#kind <- kind;
            r
          }
        in
        match decl with [
          | TD_interface (?members) =>
            letfun mkmember (m : Class_member) : CG_member =
              match m with [
                | M_function {fun_kind = FK_iface_method (?new_flag); fun_header = ?h} =>
                  let m = cg_fun_header (h) in {
                    if new_flag then m#attrs <- Cons ("new", m#attrs) else ();
                    m
                  }
                | _ => Util.ice ()
              ]
            in
            let cm = make_cm (decl, CK_interface ()) in {
              cm#decls <- List.map (mkmember, members);
              List.cons (cm)
            }

          | TD_variant (?opts) =>
            letfun mkopt (m : Type_decl) : CG_member =
              match m with [
                | TD_variant_option ?o =>
                  let cm = make_cm (o, CK_class ()) in {
                    cm#inheritance <- List.cons (cg_type (ti#generic_type ()));
                    cm#decls <- cg_list_decl (o#decls);
                    cm
                  }
                | _ => Util.ice ()
              ]
            in
            let cm = make_cm (decl, CK_class ()) in {
              cm#decls <- List.map (mkopt, opts);
              List.cons (cm)
            }

          | TD_class (?decls) =>
            let cm = make_cm (decl, CK_class ()) in {
              cm#decls <- cg_list_decl (decls);
              List.cons (cm)
            }

          | TD_variant_option => Util.ice ()
            
          | TD_external => Nil ()
          // C# doesn't seem to provide typedef, not sure about CLS though
          | TD_alias => Nil () 
        ];
      
      static run (decls : list (Type_decl)) : list (CM_class) =
        letfun run_cg_tydecl (decl : Type_decl) : list (CM_class) =
          letfun set_ns (cmc : CM_class) : void =
            cmc#ns <- decl#env#current_namespace 
          in
          let res = Util.locate (decl#loc, fun () : list (CM_class) => 
                                                cg_tydecl (decl)) 
          in {
            List.iter (set_ns, res);
            res
          }
        in
        let _ = cg_members <- Map.int_map () in
        let decls = List.map (run_cg_tydecl, decls) in
        List.concat (decls);
    }
  
} // end ns
