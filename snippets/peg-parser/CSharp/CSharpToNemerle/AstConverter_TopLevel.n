using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MergeExternAliases(_ : list[CS.ExternAlias]) : void
    {
      | [] =>
        ();
      | alias :: _ =>
        Message.Error(alias.NLocation(), "extern aliases are not supported");
    }

    MergeGlobalAttributes(attributes : list[CS.CustomAttribute]) : void
    {
      foreach(atb in attributes) {
        match(atb.Target) {
          | Assembly =>
            def atbDef = PT.PExpr.Call(atb.NLocation(), ConvertExpr(atb.Name), atb.Args.Map(ConvertExpr));
            manager.Hierarchy.AddAssemblyAttribute(currentEnv, atbDef)
          | other =>
            Message.Error(other.NLocation(), $"custom attribute target `$other' is not supported")
        }
      }
    }

    MergeUsingDirectives(usingDirectives : list[CS.UsingDirective]) : void
    {
      foreach(u in usingDirectives) {
        def loc = u.NLocation();
        match(u) {
          | Namespace(ns) =>
            currentEnv = currentEnv.AddOpenNamespace(QualifiedIdentifier(ns, false), loc);
  
          | Alias(alias, name) =>
            match(TryQualifiedIdentifier(name, true)) {
              | Some(qualifiedName) =>
                currentEnv = currentEnv.AddNamespaceAlias(alias.Id, qualifiedName, loc);
  
              | _ when currentEnv.LookupType([alias.Id]).IsNone =>
                def typeAlias = PT.TopDeclaration.Alias(
                  loc   = loc,
                  name  = MakeSplicableName(alias),
                  modifiers = Modifiers(),
                  typarms   = PT.Typarms.Empty,
                  ty = ConvertExpr(name));
                manager.ScanningPipeline(typeAlias);
  
              | _ => (); // type alias already defined
            }
        }
      }
    }

    MergeNamespaceNodes(nodes : list[CS.NamespaceNode]) : void
    {
      foreach(n in nodes) {
        | Namespace(name, externs, usings, nodes) =>
          def previousEnv = currentEnv;
          currentEnv = currentEnv.EnterIntoNamespace(QualifiedIdentifier(name, false));
          MergeExternAliases(externs);
          MergeUsingDirectives(usings);
          MergeNamespaceNodes(nodes);
          currentEnv = previousEnv;

        | TypeDeclaration(decl) =>
          MergeTypeDeclaration(decl);
      }
    }
  }
}