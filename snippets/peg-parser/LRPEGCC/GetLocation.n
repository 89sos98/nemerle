using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace LRPEGCC
{
  macro GetLocation(params args : array[expr])
  {
    def typer = Macros.ImplicitCTX();
    match(NList.ToList(args))
    {
      | [ <[ _ ]> ]
      | [ <[ _ ]>,  <[ _ ]> ] => GetLocationImpl.GetLocationForRule(typer.CurrentMethodBuilder)
      | [ t                 ] => GetLocationImpl.GetLocationForToken(typer, t)
      | [ <[ _ ]>,  t       ] => GetLocationImpl.GetLocationFromStartToToken(typer, t)
      | [ t,        <[ _ ]> ] => GetLocationImpl.GetLocationFromTokenToEnd(typer, t)
      | [ t1,       t2      ] => GetLocationImpl.GetLocationFromTokenToToken(typer, t1, t2)
      | _ => Message.Error("One or two token arguments required."); <[ () ]>
    }
  }

  [ManagerAccess(ManagerClass.Instance)]
  module GetLocationImpl
  {
    public GetLocationForToken(typer : Typer, tok : PT.PExpr) : PT.PExpr
    {
      def default_result = <[ Nemerle.Peg.Location.FromToken(this.ParsingSource, $tok) ]>;

      match(tok) {
        | <[ $(_ : name) ]> =>
          match(typer.TypeExpr(tok)) {
            | TT.TExpr.LocalRef(decl)
              when decl.ValKind is LocalValue.Kind.FunParm =>

              def parms = PartitionParameters(decl.Name, decl.DefinedIn.parms);
              EvalLocation(parms, false)

            | _ => default_result
          }
        | _ => default_result
      }
    }

    public GetLocationFromStartToToken(typer : Typer, tok : PT.PExpr) : PT.PExpr
    {
      match(typer.TypeExpr(tok)) {
        | TT.TExpr.LocalRef(decl)
          when decl.ValKind is LocalValue.Kind.FunParm =>

          def parms = PartitionParameters(decl.Name, decl.DefinedIn.parms.Rev()).Rev();
          EvalLocation(parms);

        | _ => Message.Error(tok.Location, "Method parameter expected."); <[ () ]>
      }
    }

    public GetLocationFromTokenToEnd(typer : Typer, tok : PT.PExpr) : PT.PExpr
    {
      match(typer.TypeExpr(tok)) {
        | TT.TExpr.LocalRef(decl)
          when decl.ValKind is LocalValue.Kind.FunParm =>

          def parms = PartitionParameters(decl.Name, decl.DefinedIn.parms);
          EvalLocation(parms)

        | _ => Message.Error(tok.Location, "Method parameter expected."); <[ () ]>
      }
    }

    public GetLocationFromTokenToToken(typer : Typer, tok1 : PT.PExpr, tok2 : PT.PExpr) : PT.PExpr
    {
      match(typer.TypeExpr(tok1)) {
        | TT.TExpr.LocalRef(decl1)
          when decl1.ValKind is LocalValue.Kind.FunParm =>

          match(typer.TypeExpr(tok2)) {
            | TT.TExpr.LocalRef(decl2)
              when decl2.ValKind is LocalValue.Kind.FunParm =>

              if(decl1.DefinedIn.Equals(decl2.DefinedIn)) {
                def parms = PartitionParameters(decl1.Name, decl1.DefinedIn.parms).Rev();
                def parms = PartitionParameters(decl2.Name, parms).Rev();
                match(parms) {
                  | [] => Message.Error("Invalid parameter order."); <[ () ]>
                  | _ => EvalLocation(parms)
                }
              } else {
                 Message.Error("Invalid parameters specified."); <[ () ]>
              }

            | _ => Message.Error(tok2.Location, "Method parameter expected."); <[ () ]>
          }

        | _ => Message.Error(tok1.Location, "Method parameter expected."); <[ () ]>
      }
    }

    public GetLocationForRule(mb : MethodBuilder) : PT.PExpr
    {
      EvalLocation(mb.GetParameters())
    }

    private PartitionParameters(parName : string, parms : list[TT.TParameter]) : list[TT.TParameter]
    {
      match(parms) {
        | head :: _ when head.name == parName => parms
        | _ :: tail  => PartitionParameters(parName, tail)
        | _ => []
      }
    }

    private EvalLocation(parms : list[TT.TParameter], greedy : bool = true) : PT.PExpr 
    {
      def eval_argument(parms, left_to_right) {
        def walk_type(t, expr, default_result) {
          if(t.IsFixed) {
            match(t.Fix()) {
              | FixedType.Class(opt, [t])
                when opt.Equals(Manager.InternalType.Nemerle_option_tc) =>
                def x = Macros.NewSymbol("x");
                def some = walk_type(t, <[ $(x : name) ]>, default_result);
                def none = default_result();
                <[
                  match($expr) {
                    | Some($(x : name)) => $some : Nemerle.Peg.IToken
                    | _                 => $none : Nemerle.Peg.IToken
                  }
                ]>

              | FixedType.Class(_, [t]) as lst
                when lst.TryRequire(FixedType.Class(Manager.InternalType.Generic_IList_tc, [t])) =>
                def x = Macros.NewSymbol("x");
                def some = walk_type(t, <[ $(x : name) ]>, default_result);
                def none = 
                  try {
                    default_result()
                  } catch {
                    | _ is WalkFailedException =>
                      <[ Nemerle.Peg.NToken(int.MaxValue, int.MinValue, "", "") ]>
                  }
                if(left_to_right)
                  <[
                    if($expr.Count > 0) {
                      def $(x : name) = $expr[0];
                      $some : Nemerle.Peg.IToken
                    } else
                      $none : Nemerle.Peg.IToken
                  ]>
                else
                  <[
                    if($expr.Count > 0) {
                      def $(x : name) = $expr[$expr.Count - 1];
                      $some : Nemerle.Peg.IToken
                    } else
                      $none : Nemerle.Peg.IToken
                  ]>

              | FixedType.Tuple(ts) when left_to_right =>
                def walk_tuple(index, ts) {
                  match(ts) {
                    | t :: ts =>
                      walk_type(t, <[ $expr[$(index : int)] ]>, () => walk_tuple(index + 1, ts))
                    | _ => default_result()
                  }
                }
                walk_tuple(0, ts)
  
              | FixedType.Tuple(ts) => // right to left
                def walk_tuple(index, ts) {
                  match(ts) {
                    | t :: ts =>
                      walk_type(t, <[ $expr[$(index : int)] ]>, () => walk_tuple(index - 1, ts))
                    | _ => default_result()
                  }
                }
                walk_tuple(ts.Length - 1, ts)
  
              | _ => expr
            }
          } else expr
        }
        def walk_parms(parms, default_result) {
          def visit_parm(parm, parms) {
            walk_type(parm.ty, parm.ReferencingExpr, () => walk_parms(parms, default_result))
          }
          match(parms) {
            | wildcard :: parms when wildcard.name.StartsWith("_N_wildcard") =>
              try {
                walk_parms(parms, default_result)
              } catch {
                | _ is WalkFailedException => visit_parm(wildcard, parms)
              }
            | parm :: parms => visit_parm(parm, parms)
            | _ => default_result()
          }
        }
        try {
          walk_parms(parms, () => throw WalkFailedException())
        } catch {
          | _ is WalkFailedException =>
            Message.Error("To few parameters."); <[ () ]>
        }
      }
      if(greedy) {
        def start = eval_argument(parms, true);
        def end = eval_argument(parms.Rev(), false);
        <[ Nemerle.Peg.Location.FromToken(this.ParsingSource, $start, $end) ]>
      } else {
        def arg = eval_argument(parms, true);
        <[ Nemerle.Peg.Location.FromToken(this.ParsingSource, $arg) ]>
      }
    }

    private class WalkFailedException : Exception { }
  }
}