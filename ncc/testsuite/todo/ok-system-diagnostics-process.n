(* Requires $nempath/lib/hashtable.n and $nempath/lib/list.n *)
open System;
open System.Diagnostics;
open System.ComponentModel;
open System.IO;
open System.String;
open Nemerle.Collections;


class Tester{

	private _nem_runtime:string;
	private _csc_runtime:string;
	private mutable _filename:string;
	private mutable _warn_lines:Hashtable(string,string);
	private mutable _err_lines:Hashtable(string,string);
	private mutable _ok_lines:Hashtable(string,string);
	private mutable _is_reading_output:bool;
	private mutable _expected_output:list(string);


 public this(nem_comp:string,csc_comp:string)
	{

		this._nem_runtime<-nem_comp+" ../../lib/aliases.n ../../lib/core.n ../../lib/list.n ../../lib/option.n ";
		this._csc_runtime<-csc_comp+" out.cs";
		this.Init("");
		
 }



 private Init(filename:string):void
	{
	this._filename<-filename;
	this._warn_lines<-Hashtable();
	this._err_lines<-Hashtable();
	this._ok_lines<-Hashtable();
	this._is_reading_output<-false;
	this._expected_output<-Nil();
	()
	}

 private CheckLine(str:string,line_index:int):void		
	{
// TODO: Change IndexOf calls to corresponding regexps

		if (0==str.IndexOf("END_OUTPUT"))
		   {
			this._is_reading_output<-false;
			()
		   }
		else
		if (this._is_reading_output)
			{
			 this._expected_output<-(str::(this._expected_output));
			}
		 else 
		 {
		def index=str.IndexOf("// E:");
		if ((-1)!=index)
		   {
			this._err_lines.Add(string_of_int(line_index),str.Substring(index+6));
//			print_endline(str.Substring(index+6));
			()
		   }
		else
		 {
		 def index=str.IndexOf("// W:");
		 if ((-1)!=index)
		   {
			this._warn_lines.Add(string_of_int(line_index),str.Substring(index+6));
//			print_endline(str.Substring(index+6));
			()
		   }
		else
		if (0 ==str.IndexOf("BEGIN_OUTPUT"))
		   {
			this._is_reading_output<-true;
			()
		   } 
		else
		if ((-1)!=str.IndexOf("// OK"))
		   {
			this._ok_lines.Add(string_of_int(line_index),"");
			()
		   }
		else{
		  ()
		};
		};
		};
		()			
	}

 private GetLineAndMsgType(out_str:string):int*string
	{
	  def temp_int=out_str.IndexOf(':')+1;
	  def line_number=out_str.Substring(temp_int,out_str.IndexOf(':',temp_int)-1);
	  if (out_str.IndexOf("error:")!=(-1))
		(0,line_number)
	  else
	   if (out_str.IndexOf("warning:")!=(-1))
		(1,line_number)
	   else
	        (-1,line_number)
	}

 private HandleMsg(out_str:string):bool
	{
	  match (this.GetLineAndMsgType(out_str)){
		| (0,line) => 	mutable temp_bool<-true;
				 match (this._err_lines.Get(line)){
				| Some (err) => temp_bool<-(out_str.IndexOf(err)!=(-1))
				| None => temp_bool<-false
				 };
				if (!temp_bool)
				 if ((this._err_lines.Count())==0)
					false
				 else
				 {
				  match (this._ok_lines.Get(line)){
					| Some (_) => false
					| None => true
					}
				 }
				else
				  true
		| (1,line) =>  	 match (this._err_lines.Get(line)){
				| Some (warn) => (out_str.IndexOf(warn)!=(-1))
				| None => false
				 }
		| _ => true
		}		 
	}

 public AttachFile(filename:string):void
	{
		
		if (File.Exists(filename))
		 {
		
		this.Init(filename);
// TODO: Add IO exeptions handling
		def reader=File.OpenText(filename);
		mutable temp_str<-reader.ReadLine();
		mutable index<-0;	
		while(temp_str != null)
		 {
//		   print_endline(temp_str);
		   this.CheckLine(temp_str,index);
		   index<-index+1;
		   temp_str<-reader.ReadLine()
		 };

		this._expected_output<-List.rev(this._expected_output);
		 ()
		}
		else
		 ()
	}

 public Test():void 
	{
	print_endline("Testing..."+this._filename);
	
	mutable nem_compile<-System.Diagnostics.Process();
	nem_compile.StartInfo.FileName<-(this._nem_runtime+this._filename);
	nem_compile.StartInfo.RedirectStandardOutput<-true;
	nem_compile.StartInfo.UseShellExecute<-false;
	nem_compile.Start();
	mutable nem_output<-nem_compile.StandardOutput.ReadLine();
	mutable is_ok<-true;
	while(nem_output != null)
	{
	   is_ok<-(is_ok && this.HandleMsg(nem_output));
	   nem_output<-nem_compile.StandardOutput.ReadLine()
	};
	()	
	}

 public static Main (args : array(string)): void 
	{	
		mutable nem_comp <- "ncc2";
		mutable csc_comp <- "mcs";
		def length = (args:Array).Length;

		if (length>0)
		{
		  nem_comp<-args[0];
	 	  if (length>1)
		   {
		    csc_comp<-args[1];
		   }
		  else
		   ();
		}
		else 
		();
		
		def tester = Tester(nem_comp,csc_comp);
		def str = Directory.GetFiles(Directory.GetCurrentDirectory(),"*.n");
		mutable fcounter<- ((str:Array).Length-1);

		while(fcounter>=0)
		{
		  if (!(str[fcounter]).Equals("test.n"))
			{
		  tester.AttachFile(str[fcounter]);
		  tester.Test()
			}
		else
		  ();	
		  fcounter<-fcounter-1;
		};
		()
	}

}
