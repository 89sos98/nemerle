using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Constant

    //constantDeclaration : TypeMemberList = attributes? modifiers? "const"S anyType constantDeclarators ";"s;
    constantDeclaration(attributes  : option[NToken],
                        modifiers   : option[NToken],
                        _const      : NToken, _ : NToken,
                        memberType  : VToken[TypeRef],
                        decls       : VToken[list[Identifier * Expr]],
                        _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Value.Map((id, expr) => TypeMember.Constant(Expr.Ref(id), memberType.Value, expr))
    }

    #endregion

    #region Field

    //fieldDeclaration    : TypeMemberList = attributes? modifiers? anyType variableDeclarators ";"s;
    fieldDeclaration( attributes  : option[NToken],
                      modifiers   : option[NToken],
                      memberType  : VToken[TypeRef],
                      decls       : VToken[list[Identifier * VariableInitializer]],
                      _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Value.Map((id, init) => TypeMember.Field(Expr.Ref(id), memberType.Value, init))
    }

    #endregion

    #region Fixed size buffer

    //fixedSizeBufferDeclarator   : FixedSizeBufferDeclarator     = identifier "["s constantExpression "]"s;
    fixedSizeBufferDeclarator(identifier          : VToken[Identifier],
                              _lparen             : NToken, _ : NToken,
                              constantExpression  : VToken[Expr],
                              _rparen             : NToken, _ : NToken) : Identifier * Expr
    {
      (identifier.Value, constantExpression.Value)
    }

    //fixedSizeBufferDeclarators  : FixedSizeBufferDeclaratorList = fixedSizeBufferDeclarator (","s fixedSizeBufferDeclarator)*;
    fixedSizeBufferDeclarators( head : VToken[Identifier * Expr],
                                tail : SCG.List[NToken * NToken * VToken[Identifier * Expr]]) : list[Identifier * Expr]
    {
      head.Cons(tail)
    }

    //fixedSizeBufferDeclaration  : TypeMemberList                = attributes? modifiers? "fixed"S anyType fixedSizeBufferDeclarators ";"s;
    fixedSizeBufferDeclaration( attributes  : option[NToken],
                                modifiers   : option[NToken],
                                _fixed      : NToken, _ : NToken,
                                elementType : VToken[TypeRef],
                                decls       : VToken[list[Identifier * Expr]],
                                _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Value.Map((id, size) => TypeMember.FixedSizeBuffer(Expr.Ref(id), elementType.Value, size))
    }

    #endregion

    #region Method

    //methodBody  : Statement = emptyStatement / block;
    methodBody(opt : VToken[Statement])  : Statement
    {
      opt.Value
    }

    //methodDeclaration : TypeMemberList = attributes? modifiers? anyType qualifiedIdentifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? methodBody;
    methodDeclaration(attributes          : option[NToken],
                      modifiers           : option[NToken],
                      returnType          : VToken[TypeRef],
                      name                : VToken[Expr],
                      typeParameterList   : option[VToken[list[TypeParameter]]],
                      _lparen             : NToken, _ : NToken,
                      formalParameterList : option[VToken[list[FormalParameter]]],
                      _rparen             : NToken, _ : NToken,
                      constraints         : option[VToken[list[TypeParameterConstraintClause]]],
                      body                : VToken[Statement]) : list[TypeMember]
    {
      [TypeMember.Method(
        name.Value,
        returnType.Value,
        formalParameterList.WithDefault([]),
        typeParameterList.WithDefault([]),
        constraints.WithDefault([]),
        body.Value)]
    }

    #endregion

    #region Property

    //getAccessorDeclaration  : PropertyAccessor  = attributes? modifiers? "get"S methodBody;
    getAccessorDeclaration( attributes  : option[NToken],
                            modifiers   : option[NToken],
                            _get        : NToken, _ : NToken,
                            body        : VToken[Statement]) : PropertyAccessor
    {
      PropertyAccessor(body.Value)
    }

    //setAccessorDeclaration  : PropertyAccessor  = attributes? modifiers? "set"S methodBody;
    setAccessorDeclaration( attributes  : option[NToken],
                            modifiers   : option[NToken],
                            _set        : NToken, _ : NToken,
                            body        : VToken[Statement]) : PropertyAccessor
    {
      PropertyAccessor(body.Value)
    }

    //accessorDeclarations_1  : PropertyAccessors = getAccessorDeclaration setAccessorDeclaration?;
    accessorDeclarations_1( getter : VToken[PropertyAccessor],
                            setter : option[VToken[PropertyAccessor]]) : PropertyAccessor * PropertyAccessor
    {
      (getter.Value, setter.WithDefault(null))
    }

    //accessorDeclarations_2  : PropertyAccessors = setAccessorDeclaration getAccessorDeclaration?;
    accessorDeclarations_2( setter : VToken[PropertyAccessor],
                            getter : option[VToken[PropertyAccessor]]) : PropertyAccessor * PropertyAccessor
    {
      (getter.WithDefault(null), setter.Value)
    }

    //accessorDeclarations    : PropertyAccessors = accessorDeclarations_1 / accessorDeclarations_2;
    accessorDeclarations(opt : VToken[PropertyAccessor * PropertyAccessor]) : PropertyAccessor * PropertyAccessor
    {
      opt.Value
    }

    //propertyDeclaration     : TypeMemberList    = attributes? modifiers? anyType qualifiedIdentifier "{"s accessorDeclarations "}"s;
    propertyDeclaration(attributes  : option[NToken],
                        modifiers   : option[NToken],
                        memberType  : VToken[TypeRef],
                        name        : VToken[Expr],
                        _lparen     : NToken, _ : NToken,
                        accessors   : VToken[PropertyAccessor * PropertyAccessor],
                        _rparen     : NToken, _ : NToken) : list[TypeMember]
    {
      def (getter, setter) = accessors.Value;
      [TypeMember.Property(
        name.Value,
        memberType.Value,
        getter,
        setter)]
    }

    #endregion

    #region Event

    //addAccessorDeclaration      : EventAccessor   = attributes? "add"S block;
    addAccessorDeclaration( attributes  : option[NToken],
                            _add        : NToken, _ : NToken,
                            body        : VToken[Statement]) : EventAccessor
    {
      EventAccessor(body.Value)
    }

    //removeAccessorDeclaration   : EventAccessor   = attributes? "remove"S block;
    removeAccessorDeclaration( attributes : option[NToken],
                                _remove   : NToken, _ : NToken,
                                body      : VToken[Statement]) : EventAccessor
    {
      EventAccessor(body.Value)
    }

    //eventAccessorDeclarations_1 : EventAccessors  = addAccessorDeclaration removeAccessorDeclaration;
    eventAccessorDeclarations_1(adder   : VToken[EventAccessor],
                                remover : VToken[EventAccessor]) : EventAccessor * EventAccessor
    {
      (adder.Value, remover.Value)
    }

    //eventAccessorDeclarations_2 : EventAccessors  = removeAccessorDeclaration addAccessorDeclaration;
    eventAccessorDeclarations_2(remover : VToken[EventAccessor],
                                adder   : VToken[EventAccessor]) : EventAccessor * EventAccessor
    {
      (adder.Value, remover.Value)
    }

    //eventAccessorDeclarations   : EventAccessors  = eventAccessorDeclarations_1 / eventAccessorDeclarations_2;
    eventAccessorDeclarations(opt : VToken[EventAccessor * EventAccessor]) : EventAccessor * EventAccessor
    {
      opt.Value
    }

    //eventDeclaration_1  : TypeMemberList = attributes? modifiers? "event"S anyType qualifiedIdentifier "{"s eventAccessorDeclarations "}"s;
    eventDeclaration_1( attributes  : option[NToken],
                        modifiers   : option[NToken],
                        _event      : NToken, _ : NToken,
                        memberType  : VToken[TypeRef],
                        name        : VToken[Expr],
                        _lparen     : NToken, _ : NToken,
                        accessors   : VToken[EventAccessor * EventAccessor],
                        _rparen     : NToken, _ : NToken) : list[TypeMember]
    {
      def (adder, remover) = accessors.Value;
      [TypeMember.Event(
        name.Value,
        memberType.Value,
        adder,
        remover,
        null)]
    }

    //eventDeclaration_2  : TypeMemberList = attributes? modifiers? "event"S anyType variableDeclarators ";"s;
    eventDeclaration_2( attributes  : option[NToken],
                        modifiers   : option[NToken],
                        _event      : NToken, _ : NToken,
                        memberType  : VToken[TypeRef],
                        decls       : VToken[list[Identifier * VariableInitializer]],
                        _semicolon : NToken, _ : NToken)  : list[TypeMember]
    {
      decls.Value.Map((id, init) =>
        TypeMember.Event(
          Expr.Ref(id),
          memberType.Value,
          EventAccessor(Statement.Empty()),
          EventAccessor(Statement.Empty()),
          init))
    }

    //eventDeclaration    : TypeMemberList = eventDeclaration_1 / eventDeclaration_2;
    eventDeclaration(opt : VToken[list[TypeMember]]): list[TypeMember]
    {
      opt.Value
    }

    #endregion

    #region Indexer

    //indexerDeclaration  : TypeMemberList = attributes? modifiers? anyType (qualifiedIdentifier "."s)? "this"S "["s formalParameterList? "]"s "{"s accessorDeclarations "}"s;
    indexerDeclaration( attributes        : option[NToken],
                        modifiers         : option[NToken],
                        returnType        : VToken[TypeRef],
                        ifaceType         : option[VToken[Expr] *  NToken * NToken],
                        _this             : NToken, _ : NToken,
                        _lparen1          : NToken, _ : NToken,
                        formalParameters  : option[VToken[list[FormalParameter]]],
                        _rparen1          : NToken, _ : NToken,
                        _lparen2          : NToken, _ : NToken,
                        accessors         : VToken[PropertyAccessor * PropertyAccessor],
                        _rparen2          : NToken, _ : NToken,) : list[TypeMember]
    {
      def name = match(ifaceType) {
        | Some( (ifaceType, _, _) ) => Expr.Member(ifaceType.Value, Expr.This())
        | _ => Expr.This()
      }
      def (getter, setter) = accessors.Value;
      [TypeMember.Indexer(
        name,
        returnType.Value,
        formalParameters.WithDefault([]),
        getter,
        setter)]
    }

    #endregion

    #region Operator

    //overloadableOperator : string = ("++" / "--" / "!" / "~" / "+" / "-" / "*" / "/" / "%" / "&" / "|"
    //                                / "^" / "<<" / ">>" / "==" / "!=" / ">" / "<" / ">=" / "<=" / "true" / "false")S;
    overloadableOperator(op : NToken, _ : NToken) : string
    {
      op.GetText()
    }

    //overloadableOperatorDeclarator  : OperatorDeclarator = anyType "operator"S overloadableOperator;
    overloadableOperatorDeclarator( returnType  : VToken[TypeRef],
                                    _operator   : NToken, _ : NToken,
                                    op          : VToken[string]) : string * TypeRef
    {
      (op.Value, returnType.Value)
    }

    //conversionOperatorDeclarator    : OperatorDeclarator = ("implicit" / "explicit")S "operator"S anyType;
    conversionOperatorDeclarator( op          : NToken, _ : NToken,
                                  _operator   : NToken, _ : NToken,
                                  returnType  : VToken[TypeRef]) : string * TypeRef
    {
      (op.GetText(), returnType.Value)
    }

    //operatorDeclarator : OperatorDeclarator = conversionOperatorDeclarator
    //                                        / overloadableOperatorDeclarator;
    operatorDeclarator(decl : VToken[string * TypeRef]) : string * TypeRef
    {
      decl.Value
    }

    //operatorDeclaration : TypeMemberList = attributes? modifiers? operatorDeclarator "("s formalParameterList? ")"s methodBody;
    operatorDeclaration(attributes        : option[NToken],
                        modifiers         : option[NToken],
                        decl              : VToken[string * TypeRef],
                        _lparen           : NToken, _ : NToken,
                        formalParameters  : option[VToken[list[FormalParameter]]],
                        _rparen           : NToken, _ : NToken,
                        body              : VToken[Statement]) : list[TypeMember]
    {
      def (op, returnType) = decl.Value;
      [TypeMember.Operator(
        op,
        returnType,
        formalParameters.WithDefault([]),
        body.Value)]
    }

    #endregion

    #region Constructor

    //constructorInitializer : ConstructorInitializer = ":"s ("this" / "base")S "("s argumentList? ")"s;
    constructorInitializer( _colon  : NToken, _ : NToken,
                            keyword : NToken, _ : NToken,
                            _lparen : NToken, _ : NToken,
                            args    : option[VToken[list[FunctionArgument]]],
                            _rparen : NToken, _ : NToken) : ConstructorInitializer
    {
      match(keyword.GetText()) {
        | "this" => ConstructorInitializer.This(args.WithDefault([]))
        | "base" => ConstructorInitializer.Base(args.WithDefault([]))
        | _ => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //constructorDeclaration : TypeMemberList = attributes? modifiers? identifier "("s formalParameterList? ")"s constructorInitializer? methodBody;
    constructorDeclaration( attributes        : option[NToken],
                            modifiers         : option[NToken],
                            name              : VToken[Identifier],
                            _lparen           : NToken, _ : NToken,
                            formalParameters  : option[VToken[list[FormalParameter]]],
                            _rparen           : NToken, _ : NToken,
                            init              : option[VToken[ConstructorInitializer]],
                            body              : VToken[Statement]) : list[TypeMember]
    {
      [TypeMember.Constructor(
        Expr.Ref(name.Value),
        formalParameters.WithDefault([]),
        init.WithDefault(ConstructorInitializer.Default()),
        body.Value)]
    }

    #endregion

    #region Destructor

    //destructorDeclaration  : TypeMemberList = attributes? modifiers? "~"s identifier "("s formalParameterList? ")"s methodBody;
    destructorDeclaration(attributes        : option[NToken],
                          modifiers         : option[NToken],
                          _tild : NToken, _ : NToken,
                          name              : VToken[Identifier],
                          _lparen           : NToken, _ : NToken,
                          formalParameters  : option[VToken[list[FormalParameter]]],
                          _rparen           : NToken, _ : NToken,
                          body              : VToken[Statement]) : list[TypeMember]
    {
      [TypeMember.Destructor(
        Expr.Ref(name.Value),
        formalParameters.WithDefault([]),
        body.Value)]
    }

    #endregion

    //nestedTypeDeclaration  : TypeMemberList = typeDeclaration;
    nestedTypeDeclaration(typeDeclaration : VToken[TypeDeclaration]) : list[TypeMember]
    {
      [TypeMember.TypeDeclaration(typeDeclaration.Value)]
    }

    //typeMemberDeclaration  : TypeMemberList = constantDeclaration
    //                                        / fixedSizeBufferDeclaration
    //                                        / eventDeclaration
    //                                        / operatorDeclaration
    //                                        / indexerDeclaration 
    //                                        / fieldDeclaration
    //                                        / methodDeclaration
    //                                        / propertyDeclaration 
    //                                        / constructorDeclaration
    //                                        / destructorDeclaration
    //                                        / typeDeclaration;
    typeMemberDeclaration(opt : VToken[list[TypeMember]]) : list[TypeMember]
    {
      opt.Value
    }

    //typeMemberDeclarations : TypeMemberList = typeMemberDeclaration*;
    typeMemberDeclarations(members : SCG.List[VToken[list[TypeMember]]]) : list[TypeMember]
    {
      members.Values().Flatten()
    }
  }
}