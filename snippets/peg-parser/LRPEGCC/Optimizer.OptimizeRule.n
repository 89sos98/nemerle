using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  partial internal class Optimizer
  {
    public static OptimizeRule(rule : Rule, grammar : Grammar, weights : Map[RuleRef, option[int]]) : Rule
    {
      def optimize(_ : Rule)
      {
        | Choice(rules) =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Choice(rules) => rules
              | rule               => [rule]
            });
          def rules = rules.Flatten();
          def catChars(_)
          {
            | Rule.Chars([chars1]) :: Rule.Chars([chars2]) :: rules =>
              catChars(Rule.Chars([chars1.Sum(chars2)]) :: rules)

            | rule :: rules => rule :: catChars(rules)
            | []            => []
          }
          def rules = catChars(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Choice(rules)
          }

        | Sequence(rules) =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Sequence(rules) => rules
              | rule                 => [rule]
            });
          def rules = rules.Flatten();
          def catChars(_)
          {
            | Rule.Not(Rule.Chars([chars1])) :: Rule.Chars([chars2]) :: rules =>
              catChars(Rule.Chars([chars2.Sub(chars1)]) :: rules)

            | Rule.And(Rule.Chars([chars1])) :: Rule.Chars([chars2]) :: rules =>
              catChars(Rule.Chars([chars2.Sum(chars1)]) :: rules)

            | Rule.Chars(chars1) :: Rule.Chars(chars2) :: rules =>
              catChars(Rule.Chars(chars1.Append(chars2)) :: rules)

            | rule :: rules => rule :: catChars(rules)
            | [] => []
          }
          def rules = catChars(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Sequence(rules)
          }

        | RepeatMin(min, rule)         => Rule.RepeatMin(min, optimize(rule))
        | RepeatMinMax(min, max, rule) => Rule.RepeatMinMax(min, max, optimize(rule))
        | Not(Not(rule))               => optimize(Rule.And(rule))
        | And(Not(rule))               => optimize(Rule.Not(rule))
        | Not(And(rule))               => optimize(Rule.Not(rule))
        | And(And(rule))               => optimize(Rule.And(rule))
        | Not(rule)                    => Rule.Not(optimize(rule))
        | And(rule)                    => Rule.And(optimize(rule))
        | Capture(kind, rule)          => Rule.Capture(kind, optimize(rule))
        | Scope(name, rule)            => Rule.Scope(name, optimize(rule))
        | Chars as rule                => rule
        | ExtensionPoint as rule       => rule
        | Call(name)                   =>
          match (weights.Get(name))
          {
            | Some(weight) when weight < 6 =>
              optimize(grammar.GetRule(name))
            | _ =>
              Rule.Call(name)
          }
      }

      optimize(rule);
    }
  }
}
