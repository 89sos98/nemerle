using System;
using System.Reflection;

namespace Test {
	
	public class MyAttribute: Attribute {
		public  mutable  val : string;
		public this ( stuff : string) {
			System.Console.WriteLine (stuff);
			val = stuff;
		}
	}
	
	public class My2Attribute: MyAttribute {
		public  mutable  ival : int;
		public this ( stuff : string, blah :  int) {  base (stuff);
			System.Console.WriteLine ("ctor with int val"+stuff);
			ival = blah;
		}
	}

	[Flags ]
	enum X {
		| A | B
	}
	
	[My("testclass")]
	[My2("testclass", 22)]
	public class Test {
		static public Main() :  int {
			mutable  info = typeof (Test);
			mutable  attributes = info.GetCustomAttributes (false);
			for (mutable  i = 0; i < attributes.Length; i += 1) {
				System.Console.WriteLine(attributes[i]);
			}
			if (attributes.Length != 2)
			{
				 1;
			}
			else {
			mutable  attr = ( attributes [0] :> MyAttribute);
			if (attr.val != "testclass")
			{
				 2;
			}
			else {
			 0;
		}
		}
		}
	}
}
/*
BEGIN-OUTPUT
testclass
ctor with int valtestclass
testclass
Test.My2Attribute
Test.MyAttribute
END-OUTPUT
*/
