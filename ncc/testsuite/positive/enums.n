
using System;

[FlagsAttribute ()]
enum Foo {
  | X = 0x01
  | Y = 0x01 * X
  | Z = 0x04 %| Y
  | U = (Z %& Y) %| 0x10
  | V = ~X
  | W = V %| X
  | ZERO = ~W
  | XOR = Z %^ Y
  | MINUS = Z - Y
}

[Flags]
enum Foo1 {
  | X1 = 0x01
  | Y1 = 0x02
}


public class EnumsTest
{
  public static Main () : void 
  {
    Console.WriteLine ("Enums test.");

    def x = Reflection.FieldAttributes.NotSerialized;
    def y = Reflection.FieldAttributes.NotSerialized;
    def z = ~(x %| y);
    when (z %&& x) Nemerle.IO.printf ("bad\n");
    def x = Foo.X %| Foo.Y;
    when (x %&& Foo.X) Nemerle.IO.printf ("good\n");
    def _ = Foo1.X1 %| Foo1.Y1;
    def x = ~Foo.X;
    when (x %&& Foo.X) Nemerle.IO.printf ("bad\n");
    when ((Foo.Z :> int) == 6 && (Foo.U :> int) == 18) Nemerle.IO.print ("good\n");
    Nemerle.IO.printf ("%i %i %i %i %i\n", Foo.V :> int, Foo.W :> int,
                       Foo.ZERO :> int, Foo.XOR :> int, Foo.MINUS :> int)
  }
}

/*
BEGIN-OUTPUT
Enums test.
good
good
-2 -1 0 4 4
END-OUTPUT
*/
