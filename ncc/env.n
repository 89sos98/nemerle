(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Collections;
open Nemerle.Compiler.Typedtree;
open Nemerle.Compiler;

namespace PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler {

public variant Symbol
{
  | Sym_type { tycon : Tycon; }
  | Sym_type_member { member : IMember; }
}

public class GlobalEnv 
  {
    static mutable types : Hashtable (string, Tycon);

    static this () {
      types <- Hashtable (2000);
    }

    mutable open_namespaces : list (string);
    mutable current_namespace : string;
    mutable namespace_aliases : String_map (string);

    public static AddType (name : string, t : Tycon) : void {
      match (types.Get (name)) {
        | Some (t') when t'.SameAs (t) => ()
        | Some (t') =>
          Message.error (t.GetLocation (), "redefinition of type `" + name + "'");
          Message.error (t'.GetLocation (), "first defined here")
        | None => 
          types.Add (name, t)
      }
    }
    
    expand_namespace_aliases (sym : string) : string {
      def ns = Util.get_ns (sym);
      if (ns == "") sym
      else
        match (namespace_aliases.find (ns)) {
          | Some (r) => r + "." + sym.Substring (sym.LastIndexOf ('.') + 1)
          | None => sym
        }
    }

    public static LookupInternalType (name : string) : Tycon {
      match (LookupExactType (name)) {
        | Some (t) => t
        | None => Util.ice ("unbound internal type " + name)
      }
    }

    public static LookupExactType (name : string) : option (Tycon) {
      //Message.debug ("let " + name);
      match (types.Get (name)) {
        | (Some) as r => r
        | None =>
          def res = LibraryReferenceManager.LookupType (name);
          // this is just speed cache
          match (res) {
            | Some (tc) => types.Add (name, tc)
            | None => ()
          };
          res
      }
    }

    public GetType (name : string) : Tycon {
      match (LookupType (name)) {
        | Some (r) => r
        | _ =>
          Message.fatal_error ("unbound type name `" + name + "'")
      }
    }

    public LookupType (name : string) : option (Tycon) {
      def name = expand_namespace_aliases (name);
      match (LookupExactType (name)) {
        | (Some) as r => r
        | None =>
          def collect (res, pref) {
            match ((res, LookupExactType (pref + "." + name))) {
              | (x, None) | (None, x) => x
              | (Some (x), Some (y)) when x.SameAs (y) => res
              | (Some (x), Some (y)) =>
                Message.error ("type name `" + name + "' is ambiguous, it could be:");
                Message.error (x.GetLocation (), "   this declaration");
                Message.error (y.GetLocation (), "   or this declaration");
                res
            }
          };
          List.fold_left (collect, None (), current_namespace :: open_namespaces)
      }
    }
    
    public LookupSymbol (name : string) : list (Symbol) {
      def visited = Hashtable (10);
      def lookup_members (acc, pref) {
        match (LookupExactType (pref)) {
          | Some (t) when ! visited.Contains (t.GetId ()) => 
            def encapsulate (acc, m : IMember) {
              match (m.GetKind ()) {
                | MK_type => acc // nested types already added
                | _ => Sym_type_member (m) :: acc
              }
            };
            def members = t.LookupMember (name, LF_all ());
            visited.Add (t.GetId (), null);
            List.fold_left (encapsulate, acc, members)
          | _ => acc
        }
      };
      def types =
        match (LookupType (name)) {
          | Some (t) => [Sym_type (t)]
          | None => []
        };
      List.fold_left (lookup_members, types, open_namespaces);
    }

    public AddOpenNamespace (ns : string) : void 
    {
      open_namespaces <- List.append (open_namespaces, [ns]);
    }

    public AddNamespaceAlias (short_name : string, long_name : string) : void
    {
      namespace_aliases <- namespace_aliases.add (short_name, long_name)
    }
    
    public InPrefix (pref : string) : GlobalEnv
    {
      def env' = Copy ();
      env'.current_namespace <- current_namespace + pref + ".";
      env'
    }

    public Copy () : GlobalEnv
    {
      def c = GlobalEnv ();
      c.open_namespaces <- open_namespaces;
      c.current_namespace <- current_namespace;
      c.namespace_aliases <- namespace_aliases;
      c
    }

    public this () 
    {
      current_namespace <- "";
      open_namespaces <- [];
      namespace_aliases <- Map.string_map();
    }

    public GetCurrentNamespace () : string
    {
      current_namespace
    }
  }


} // ns
