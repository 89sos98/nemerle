open Nemerle.Collections;

open Nemerle.Compiler;
open Nemerle.Compiler.Tyvars;

namespace Nemerle.Compiler {

  class Tyvars
    {
      record Tyvar
        {
          name : string;
          ref constraints : list (Type);
          is_free : bool;
        }
        
      value ref tyvars : Int_map(Tyvar);
      value ref typarms : Int_map (list (int));
      
      fun this () 
        { 
          tyvars <- Map.int_map(); 
          typarms <- Map.int_map(); 
        }

      fun add (name : string) : int =
        let id = Util.next_id() in {
          tyvars <- tyvars#add(id, Tyvar(name, Nil(), false));
          id
        };

      fun free_variable (proto : int) : Type =
        let proto = Util.unsome (tyvars#find (proto)) in
        let id = Util.next_id() in {
          tyvars <- tyvars#add (id, Tyvar(proto#name, proto#constraints, true));
          T_var (proto#name, id)
        };

      fun free_variable () : Type =
        let id = Util.next_id() in {
          tyvars <- tyvars#add (id, Tyvar("", Nil(), true));
          T_var ("", id)
        };

      fun is_free (id : int) : bool =
        match tyvars#find(id) with [
          | Some (?tv) => tv#is_free
          | None => Util.ice()
        ];

      fun add_constraint (id : int, ty : Type) : void =
        match tyvars#find(id) with [
          | Some (?tv) => tv#constraints <- Cons(ty, tv#constraints)
          | None => Util.ice()
        ];

      fun constraints (id : int) : list (Type) =
        match tyvars#find(id) with [
          | Some (?l) => l#constraints
          | None => Nil ()
        ];

      fun set_parms (id : int, parms : list (int)) : void =
        typarms <- typarms#add(id, parms);
        
      fun get_parms (id : int) : list (int) = 
        match typarms#find(id) with [
          | Some (?x) => x
          | None => Util.ice()
        ];
        
    }

} // end ns
