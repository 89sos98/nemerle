using System;
using System.IO;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Dom;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class Parser : IParser {

        public LexerTags : array[string] {
            get;
            set;
        }

        public Language : LanguageProperties {
            get { NemerleLanguageProperties.Instance }
        }

        public CreateExpressionFinder(fileName : string) : IExpressionFinder {
            ExpressionFinder(fileName)
        }

        public CreateResolver() : IResolver {
            Resolver()
        }

        public CanParse(fileName : string) : bool {
            string.Equals(Path.GetExtension(fileName), ".n", StringComparison.OrdinalIgnoreCase);
        }

        public CanParse(project : IProject) : bool {
            project.Language == NemerleLanguageProperties.LanguageName
        }

        public Parse(projectContent : IProjectContent, fileName : string, fileContent : string) : ICompilationUnit {
            LoggingService.Debug($"Parse $fileName");

            def engine_context = EngineService.GetEngineContext(projectContent.Project :> IProject);
            unless(null == engine_context) {
                LoggingService.Debug($"Engine context accuired for $fileName");
            }

            DefaultCompilationUnit.DummyCompilationUnit
        }

    }

}