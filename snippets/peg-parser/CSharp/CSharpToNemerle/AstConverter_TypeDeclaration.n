using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MergeTypeDeclaration(decl : CS.TypeDeclaration) : void
    {
      manager.ScanningPipeline(ConvertTypeDeclaration(decl))
    }

    ConvertModifiers(attributes : list[CS.CustomAttribute], modifiers : list[CS.Modifier]) : Modifiers
    {
      def flags = modifiers.FoldLeft(NemerleAttributes.None, fun(flag : CS.Modifier, flags : NemerleAttributes) {
        def setFlag(value) {
          when(flags %&& value)
            Message.Error(flag.NLocation(), $"duplicated modifier `$flag'");
          flags %| value
        }
        match(flag) {
          | New         => setFlag(NemerleAttributes.New)
          | Public      => setFlag(NemerleAttributes.Public)
          | Protected   => setFlag(NemerleAttributes.Protected)
          | Internal    => setFlag(NemerleAttributes.Internal)
          | Private     => setFlag(NemerleAttributes.Private)
          | Partial     => setFlag(NemerleAttributes.Partial)
          | Virtual     => setFlag(NemerleAttributes.Virtual)
          | Volatile    => setFlag(NemerleAttributes.Volatile)
          | Static      => setFlag(NemerleAttributes.Static)
          | Sealed      => setFlag(NemerleAttributes.Sealed)
          | Override    => setFlag(NemerleAttributes.Override)
          | Abstract    => setFlag(NemerleAttributes.Abstract)
          | Extern      => setFlag(NemerleAttributes.Extern)
          | Unsafe      =>
            Message.Error(flag.NLocation(), "unsafe code is not supported");
            flags
          | Readonly =>
            flags //TODO: deal with Readonly
        }
      });
      def attrs = attributes.Map(fun(atb) {
        match(atb.Target : CS.CustomAttributeTarget) {
          | Default => ()
          | _ =>
            // TODO: deal with attribute target
            Message.Warning(atb.Target.NLocation(), "custom attribute target is ignored")
        }
        PT.PExpr.Call(atb.NLocation(), ConvertExpr(atb.Name), atb.Args.Map(ConvertExpr))
      });
      Modifiers(flags, attrs)
    }

    ConvertTyparms(tyvars : list[CS.TypeParameter], constClauses : list[CS.TypeParameterConstraintClause]) : PT.Typarms
    {
      | ([], []) => PT.Typarms.Empty
      | _ =>
        def tyvars = tyvars.Map(fun(tp){
          match(tp.Attributes) {
            | [] => ()
            | _ :: _ =>
              Message.Warning(tp.Name.NLocation(), "type parameter attributes are ignored");
          }
          match(tp.Variance) {
            | CS.TypeParameterVariance.Normal => ()
            | x =>
              Message.Error(x.NLocation(), "type parameter variance specifier is not supported");
          }
          MakeSplicableName(tp.Name)
        });

        def constraints = constClauses.Map(fun(constrClause) {
          def tyVar = MakeSplicableName(constrClause.ParameterName);
          constrClause.Constraints.Map(fun(c) {
            def loc = c.NLocation();
            def expr = match(c : CS.TypeParameterConstraint) {
              | DefaultCtor   => PT.PExpr.Ref(loc, MakeName("new", loc))
              | Struct        => PT.PExpr.Ref(loc, MakeName("struct", loc))
              | Class         => PT.PExpr.Ref(loc, MakeName("class", loc))
              | Base(typeRef) => ConvertExpr(typeRef)
            }
            PT.Constraint(tyVar, expr)
          })
        });

        PT.Typarms(tyvars, constraints.Flatten())
    }

    ConvertTypeDeclaration(decl : CS.TypeDeclaration) : PT.TopDeclaration
    {
      def loc = decl.NLocation();
      def mods = ConvertModifiers(decl.Attributes, decl.Modifiers);
      def name = MakeSplicableName(decl.Name);
      def typarms = ConvertTyparms(decl.TypeParameters, decl.Constraints);

      match(decl) {
        | Class(baseTypes, members) =>
          PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember))

        | Struct(baseTypes, members) =>
          mods.mods |= NemerleAttributes.Struct;
          PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember))

        | Interface(baseTypes, members) =>
          PT.TopDeclaration.Interface(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember))

        | Delegate
        | Enum => Message.FatalError(loc, "not implemented")
      }
    }

    ConvertTypeMember(member : CS.TypeMember) : PT.ClassMember
    {
      def loc = member.NLocation();
      def mods = ConvertModifiers(member.Attributes, member.Modifiers);
      match(member) {
        | Constant(name, memberType, value) =>
          //TODO: handle initializer
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType))

        | Field(name, memberType, CS.VariableInitializer.Default) =>
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType))

        | Field(name, memberType, initialValue) =>
          //TODO: handle initializer
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType))

        | FixedSizeBuffer(name, elementType, _) =>
          Message.Error(loc, "fixed size buffers are not supported");
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(elementType))

        | Method(CS.Expr.Ref(id),                         returnType, formalParameters, typeParameters, constraints, body) with iface = null
        | Method(CS.Expr.Member(iface, CS.Expr.Ref(id)),  returnType, formalParameters, typeParameters, constraints, body)
        | Method(_,                                       returnType, formalParameters, typeParameters, constraints, body) with (id = null, iface = null) =>
          def name = match(id) {
            | null => Message.FatalError(loc, "bad method name")
            | _ => MakeSplicableName(id)
          }
          def header = PT.PFunHeader(loc, ConvertTyparms(typeParameters, constraints), name, ConvertExpr(returnType), formalParameters.Map(ConvertParam));
          def iface = match(iface) {
            | null => []
            | _ => [ConvertExpr(iface)]
          }
          def body = match(body) {
            | Empty => FunBody.Abstract()
            | _ => FunBody.Parsed(ConvertExpr(body))
          }
          def method = PT.ClassMember.Function(loc, name, mods, header, iface, body);
          method.IsExtension = formalParameters.Exists(HasThisModifier);
          method

        | Property
        | Event
        | Indexer
        | Operator
        | Constructor
        | Destructor => Message.FatalError(loc, "not implemented")

        | TypeDeclaration(decl) =>
          def ndecl = ConvertTypeDeclaration(decl);
          PT.ClassMember.TypeDeclaration(ndecl.loc, ndecl.name, ndecl.modifiers, ndecl)
      }
    }

    ConvertParam(parm : CS.FormalParameter) : PT.PParameter
    {
      def loc = parm.NLocation();
      def parmName = MakeSplicableName(parm.Name);
      def parmMods = ConvertModifiers(parm.Attributes, []);
      mutable parmTy =
        match(parm.ParameterType) {
          | null  => PT.PExpr.Wildcard(loc)
          | ty    => ConvertExpr(ty)
        }
      match(parm.Modifier) {
        | Normal  => ()
        | This    => ()
        | Ref     => parmTy = PT.PExpr.ParmByRef(loc, parmTy);
        | Out     => parmTy = PT.PExpr.ParmOut(loc, parmTy);
        | Params  => parmMods.custom_attrs ::= Util.locate(loc, <[ System.ParamArrayAttribute ]>);
      }
      match(parm.DefaultValue) {
        | null  => ()
        | val   =>
          def val = ConvertExpr(val);
          parmMods.custom_attrs ::= Util.locate(loc, <[ System.ComponentModel.DefaultValueAttribute($val) ]>);
      }
      PT.PParameter(loc, parmName, parmTy, parmMods)
    }

    HasThisModifier(parm : CS.FormalParameter) : bool
    {
      match(parm.Modifier) {
        | This => true
        | _ => false
      }
    }

  }
}