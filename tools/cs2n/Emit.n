// Copyright (c) 2003, 2004 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using System;
using System.IO;
using System.Collections;

namespace Nemerle.CSharp
{
    /**
     *  Module used to emit Nemerle code
     */
    public module Emit
    {
        public static Initialize (file_name : string) : void
        {                        
            out_stream = FileStream (file_name, FileMode.Create);
            writer = StreamWriter (out_stream);            
        }

        public static EmitEOL () : void
        {
            EmitString ("\n");
        }
        
        public static EmitString (s : string) : void
        {
            when(is_buffered)
                buffer += s;
            writer.Write(s);
        }

        public static EmitCollection (col : IEnumerable) : void
        {
            foreach ( s : string in col)
            {
                EmitString (s);
            }
        }

        public static EmitToken (t : antlr.Token) : void
        {
            EmitString ( t.getText());
        }
        
        public static End () : void
        {
            writer.Close ();
            out_stream.Close ();
        }

        public static BeginBuffer () : void
        {
            buffer = "";
            is_buffered = true;
        }

        public static EndBuffer () : void
        {
            is_buffered = false;
        }

        public static Buffer : string
        {
            get
            {
                buffer
            }
        }

        private mutable static out_stream : FileStream;
        private mutable static writer : StreamWriter;
        
        private mutable static buffer : string;        
        private mutable static is_buffered : bool = false;
    }    
}
