using System.Threading;
using Nemerle.Macros;
using Nemerle.Compiler.Tyexpr;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle {
module Concurrency
{
    MakeAsync (expr : PT.Expr) : PT.Expr
    {
        <[ 
            def threadBody () { $expr }; 
            def thread = Thread (ThreadStart (threadBody));
            thread.Start ();
        ]>
    }
    
    /* Executes an expresion asynchronously */
    macro async (expr)
    syntax ("async", expr)
    {
        def texpr = ty_expr (Nemerle.Macros.ImplicitCTX (), expr);
        expect_type ("asynchronous expresion", texpr, <[ ttype: void ]>);

        MakeAsync (expr);
    }

    /* Executes the body of the method always asynchronously */
    [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                         Nemerle.MacroTargets.Method,
                         Inherited = true)]
    macro Async (_ : TypeBuilder, m : ParsedMethod)
    {
        m.Body = MakeAsync (m.Body)
    }
}
}
