using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Assertions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace LRPEGCC
{
  [Record]
  public struct TerminalToken
  {
    private _startPos : int;
    private _endPos   : int;
    
    [Accessor]
    private _text     : string;
    [Accessor]
    private _name     : string;   
    
    [RecordIgnore] private mutable _data : string;
    
    public Data : string
    {
      get
      {
        when(_data == null)
          _data = GetData();
        
        _data
      }      
    }
    
    private GetData() : string
    {
      _text.Substring(_startPos, _endPos - _startPos)
    }
        
    private static GetTextPoint(_text : string, _pos : int) : TextPoint
    {
      // TODO: Implement
      throw NotImplementedException();
    }
    
    public GetLocation(fileName : string) : Location
    {
      Location(fileName, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public GetLocation(fileIndex : int) : Location
    {
      Location(fileIndex, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public override ToString() : string 
    {
      $<#"$_name: Start: $_startPos Len: $(_endPos - _startPos) Data: "$(GetData())"#>;
    }
  }
 
  [Record]
  public struct NonTerminalToken[TValue]
  {           
    private _startPos : int;
    private _endPos   : int;
    
    [Accessor]      private         _text   : string;
    [Accessor]      private         _name   : string;   
    [RecordIgnore]  private mutable _data   : string;
    [Accessor]      private         _value  : TValue;
    
    public Data : string
    {
      get
      {
        when(_data == null)
          _data = GetData();
        
        _data
      }      
    }
    
    private GetData() : string
    {
      _text.Substring(_startPos, _endPos - _startPos)
    }
        
    private static GetTextPoint(_text : string, _pos : int) : TextPoint
    {
      // TODO: Implement
      throw NotImplementedException();
    }
    
    public GetLocation(fileName : string) : Location
    {
      Location(fileName, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public GetLocation(fileIndex : int) : Location
    {
      Location(fileIndex, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public override ToString() : string
    {
      $<#"$_name: Start: $_startPos Len: $(_endPos - _startPos) Data: "$(GetData())  Value: $(_value)"#>;
    }
  } 
  
}
