using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Peg;
using LRPEGCC;

namespace Nemerle.Xml
{
  using XmlAst;
  
  [PegGrammar(start,
  grammar
  {  
    any                        = ['\u0000'..'\uFFFF'];
    digit                      = ['0'..'9'];
    newLine                    = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
    letter                     = (['A'..'Z', 'a' .. 'z', 'А' .. 'Я', 'а' .. 'я'] / '_');
    s                          = (' ' / '\t' / newLine)*;
    
    spliceBody1                = identifier1;
    noBracket                  = !('(' / ')') any;
    spliceBody2                = '(' s (noBracket / spliceBody2)* ')' s;
    spliceBody                 = spliceBody1 / spliceBody2;
    splice         : Splicable =        '$' spliceBody;
    spliceList     : Splicable = ".." s '$' spliceBody;
    splicedTag     : XmlAst    = splice / spliceList;
    
    identifier1               = '@'? letter (letter / digit)*;
    identifier2    : Splicable = identifier1;
    
    identifier     : Splicable = (identifier2 / splice) s;
    tagOpen        : TagOpen   = '<' s identifier attr* '>' s;
    tagClose       : TagClose  = '<' s '/' s identifier '>' s;
    tagEmpty       : XmlAst    = '<' s identifier attr* '/' s '>' s;
    xtextValue                 = (!('<' / '>' / '$' / ".." '$') any)+;
    xtext          : XmlAst    = xtextValue;
    tagFull        : XmlAst    = tagOpen content* tagClose;
    tag            : XmlAst    = tagFull / tagEmpty;
    content        : XmlAst    = tagFull / tagEmpty / splicedTag / xtext;
    attrValue1                 = '"'  (!'"'  any)* '"';
    attrValue2                 = '\'' (!'\'' any)* '\'';
    attrValue3     : Splicable = attrValue2 / attrValue1;
    attrValue      : Splicable = (attrValue3 / splice) s;
    attr           : XmlAst    = identifier '=' s attrValue;
    start          : XmlAst    = s tag !any;
  })]
  internal class XmlQuotParser
  {
    identifier(id : VToken[Splicable], _ : NToken) : Splicable
    {
      Splicable.Value(id.StartPos, id.EndPos, id.GetText())
    }
    
    identifier2(id : NToken) : Splicable
    {
      Splicable.Value(id.StartPos, id.EndPos, id.GetText())
    }
    //splice         : Splicable =        '$' spliceBody;
    splice(_ : NToken, expr : NToken) : Splicable
    {
      Splicable.Expr(expr.StartPos, expr.EndPos, expr.GetText())
    }
    //spliceList     : Splicable = ".." s '$' spliceBody;
    spliceList(_ : NToken, _ : NToken, _ : NToken, expr : NToken) : Splicable
    {
      Splicable.ListExpr(expr.StartPos, expr.EndPos, expr.GetText())
    }
    //splicedTag     : XmlAst    = splice / spliceList;
    splicedTag(splice : VToken[Splicable]) : XmlAst
    {
      //assert2(false);
      match (splice.Value)
      {
        | Expr(expr)     => 
          Splice(splice.StartPos, splice.EndPos, expr, false)
          
        | ListExpr(expr) => Splice(splice.StartPos, splice.EndPos, expr, true)
        | Value          => assert(false);
      }
    }
    //tagOpen        : TagOpen   = '<' s identifier attr* '>' s;
    tagOpen(lt : NToken, _ : NToken, id : VToken[Splicable], attrs : List[VToken[XmlAst]], _ : NToken, gt : NToken) : TagOpen
    {
      TagOpen(lt.StartPos, gt.EndPos, id.Value, attrs.Map(x => x.Value :> Attr))
    }

    //tagClose       : TagClose  = '<' s '/' s identifier '>' s;
    tagClose(lt : NToken, _ : NToken, _ : NToken, _ : NToken, id : VToken[Splicable], gt : NToken, _ : NToken) : TagClose
    {
      TagClose(lt.StartPos, gt.EndPos, id.Value)
    }
    
    //tagEmpty       : Tag       = '<' s identifier attr* '/' s '>' s;
    tagEmpty(lt : NToken, _ : NToken, id : VToken[Splicable], attrs : List[VToken[XmlAst]], _ : NToken, _ : NToken, gt : NToken, _ : NToken) : XmlAst
    {
      Tag(lt.StartPos, gt.EndPos, id.Value, attrs.Map(_.Value));
    }
    //xtext           : Text      = (!('<' | '>') any)+;
    xtext(txt : NToken) : XmlAst
    {
      Text(txt.StartPos, txt.EndPos, Splicable.Value(txt.StartPos, txt.EndPos, txt.GetText()))
    }
    //tagFull        : Tag       = tagOpen content* tagClose;
    tagFull(tagOpen : VToken[TagOpen], content : List[VToken[XmlAst]], tagClose: VToken[TagClose]) : XmlAst
    {
      def open = tagOpen.Value;
      def cont = open.attrs.Map(x => x) + content.Map(_.Value);
      Tag(tagOpen.StartPos, tagClose.EndPos, open.ident, cont)
    }
    //tag            : Tag       = tagFull / tagEmpty;
    tag(t : VToken[XmlAst]) : XmlAst { t.Value }
    //content        : XmlAst    = xtext / tagFull / tagEmpty;
    content(cont : VToken[XmlAst]) : XmlAst
    {
      cont.Value
    }
    //attrValue3      : Splicable = attrValue2 / attrValue1;
    attrValue3(value : NToken) : Splicable
    {
      Splicable.Value(value.StartPos, value.EndPos, value.GetText())
    }
    //attrValue      : Splicable = (attrValue3 / splice) s;
    attrValue(value : VToken[Splicable], _ : NToken) : Splicable
    {
      value.Value
    }    
    //attr           : Attr      = identifier '=' s attrValue s;
    attr(id : VToken[Splicable], _ : NToken, _ : NToken, value : VToken[Splicable]) : XmlAst
    {
      Attr(id.Value.StartPos, value.Value.EndPos, id.Value, value.Value)
    }
    //start          : Tag       = s tag !any;
    start(_ : NToken, tag : VToken[XmlAst], _ : NToken) : XmlAst
    {
      tag.Value
    }
  }
}
