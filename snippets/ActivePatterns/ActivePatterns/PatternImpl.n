using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ActivePatterns
{
  module PatternImpl
  {
    IsOption(typer : Typer, t : TypeVar) : bool
    {
      def optionTi = typer.BindType(<[ Nemerle.Core.option[_] ]>);
      def optionTi = (optionTi.Fix() :> FixedType.Class).tycon;
      match(t.Fix())
      {
        | FixedType.Class(info, _) when info.Equals(optionTi) => true
        | _ => false
      }
    }
    
    public MarkAsPattern(typer : Typer, t : TypeBuilder, m : MethodBuilder) : void 
    {
      match(IsOption(typer, m.ReturnType))
      {
        | true => 
          {
            when(!PatternTypes.ContainsKey(t.Name)) PatternTypes[t.Name] = HashSet();
            _ = PatternTypes[t.Name].Add(m.Name);
          }
        | false => Message.Error("Only partial patterns are supported")
      }
    }
    
    // className -> methodName
    public PatternTypes : Dictionary[string, HashSet[string]] = Dictionary();
  }
}
