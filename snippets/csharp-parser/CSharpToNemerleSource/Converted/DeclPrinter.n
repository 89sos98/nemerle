using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.IO;
using System.Text;

namespace Nemerle.Compiler
{
  public partial class DeclPrinter 
  {

    PrintTop(td : TopDeclaration, remove_mods : NemerleAttributes) : void 
    {
      def print_extends (ext : _ )  
      {
        match ((ext.IsEmpty() : bool))
            {
          | true => 
            ""
          | _  => 
            string.Concat(": ", string.Join(", ", NCollectionsExtensions.MapToArray.[_ , string]((ext : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x))))
        }
      } : _ ;
      match (td)
        {
        | Class(name = n, modifiers = mods, typarms = ty, t_extends = ext, decls = decls) => 
          
          {
            def attr = print_attributes(mods);
            def (ty, cons) = print_typarms(ty);
            def ext = print_extends(ext);
            match ((mods.mods & NemerleAttributes.Static != 0 : bool))
                    {
              | true => 
                
                {
                  def mods = print_modifiers(mods, remove_mods | NemerleAttributes.Static);
                  Write(string.Concat((Convert.ToString(attr) : string)));
                  Write(string.Concat((Convert.ToString(mods) : string), "module ", (Convert.ToString(n) : string), (Convert.ToString(ty) : string), " ", (Convert.ToString(ext) : string), (Convert.ToString(cons) : string)));
                  WriteBlockTop(fun  () : _  
    PrintClassBody(decls, NemerleAttributes.Static))
                }
              | _  => 
                
                {
                  def mods = print_modifiers(mods, remove_mods);
                  Write(string.Concat((Convert.ToString(attr) : string)));
                  Write(string.Concat((Convert.ToString(mods) : string), "class ", (Convert.ToString(n) : string), (Convert.ToString(ty) : string), " ", (Convert.ToString(ext) : string), (Convert.ToString(cons) : string)));
                  WriteBlockTop(fun  () : _  
    PrintClassBody(decls))
                }
            }
          }
        | Interface(name = n, modifiers = mods, typarms = ty, t_extends = ext, methods = decls) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods | NemerleAttributes.Public);
            def (ty, cons) = print_typarms(ty);
            def ext = print_extends(ext);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "interface ", (Convert.ToString(n) : string), (Convert.ToString(ty) : string), " ", (Convert.ToString(ext) : string), (Convert.ToString(cons) : string)));
            WriteBlockTop(fun  () : _  
    PrintClassBody(decls, NemerleAttributes.Public))
          }
        | Alias(name = name, modifiers = mods, typarms = parms, ty = typ) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            def (ty, cons) = print_typarms(parms);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "type ", (Convert.ToString(name) : string), (Convert.ToString(ty) : string), (Convert.ToString(cons) : string), "=", (Convert.ToString(typ) : string), ";"))
          }
        | Delegate(name = _ , modifiers = mods, typarms = parms, header = head) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            def (_ , cons) = print_typarms(parms);
            def head = head.ToString().Trim();
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "delegate ", (Convert.ToString(head) : string), (Convert.ToString(cons) : string), ";"))
          }
        | Enum(name = name, modifiers = mods, t_extends = ext, decls = decls) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            def ext = print_extends(ext);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "enum ", (Convert.ToString(name) : string), " ", (Convert.ToString(ext) : string)));
            WriteBlockTop(fun  () : _  
    PrintClassBody(decls))
          }
        | Macro(name = _ , header = head, synt = synt, expr = body) => 
          
          {
            Write(string.Concat("macro ", (Convert.ToString(head) : string), Environment.NewLine));
            match ((!synt.IsEmpty() : bool))
                    {
              | true => 
                (Write(string.Concat("syntax (", string.Join(", ", NCollectionsExtensions.MapToArray.[_ , string]((synt : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x))), ")")) : void )
              | _  => 
                ()
            };
            print_fun_body(body)
          }
        | Variant(name = n, modifiers = mods, typarms = ty, t_extends = ext, decls = decls) => 
          
          {
            def attr = print_attributes(mods);
            def (ty, cons) = print_typarms(ty);
            def ext = print_extends(ext);
            def mods = print_modifiers(mods, remove_mods);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "variant ", (Convert.ToString(n) : string), (Convert.ToString(ty) : string), " ", (Convert.ToString(ext) : string), (Convert.ToString(cons) : string)));
            WriteBlockTop(fun  () : _  
    PrintClassBody(decls))
          }
        | VariantOption(name = n, decls = decls, modifiers = mods) => 
          
          {
            def attr = print_attributes(mods);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat("|", (Convert.ToString(n) : string)));
            match ((!decls.IsEmpty() : bool))
                    {
              | true => 
                (WriteBlock(fun  () : _  
    PrintClassBody(decls)) : void )
              | _  => 
                ()
            }
          }
        | _  => 
          ()
      };
      is_on_one_line = true
    }

    print_attributes(mods : Modifiers) : string
    {
      def attrs = mods.custom_attrs + mods.GetMacroAttributes();
      match ((attrs.IsEmpty() : bool))
        {
        | true => 
          ""
        | _  => 
          string.Concat((Convert.ToString(attrs) : string), Environment.NewLine)
      }
    }

    print_fun_body(expr : PExpr) : void 
    {
      def expr = match (((expr is PExpr.Sequence) : bool))
        {
        | true => 
          expr
        | _  => 
          <[ 
    {
      $(expr)
    } ]>
      };
      def typer = match ((compiler != null : bool))
        {
        | true => 
          
          {
            def ty = compiler.ComponentsFactory.CreateTyper(compiler.CoreEnv);
            Some(ty)
          }
        | _  => 
          None()
      };
      def str = PrettyPrint.SprintExpr(typer, expr);
      Write(str)
    }

    print_typarms(ty : Typarms) : string * string
    {
      match (ty)
        {
        | Typarms where (tyvars = ty, constraints = cons) => 
          
          {
            def cons = cons.Map(fun  (x : _ ) : _  
    string.Concat("where ", (Convert.ToString(x.tyvar) : string), " : ", (Convert.ToString(x.ty) : string)));
            match ((ty.IsEmpty() : bool))
                    {
              | true => 
                ("", "")
              | _  => 
                (string.Concat((Convert.ToString(ty) : string)), string.Concat(" ", string.Join(" ", NCollectionsExtensions.MapToArray.[_ , string]((cons : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x)))))
            }
          }
      }
    }

    print_modifiers(mods : Modifiers, remove_mods : NemerleAttributes) : string
    {
      def mods = mods.mods;
      def get_values (mod : _ )  
      {
        mod.ToString().SplitToList(',', ' ')
      } : _ ;
      def mods = mods & ~remove_mods;
      def vals = get_values(mods);
      def names = vals.Map(_ .ToLower());
      match ((names.IsEmpty() : bool))
        {
        | true => 
          ""
        | _  => 
          
          {
            match (names)
                    {
              | ["none"] => 
                ""
              | _  => 
                string.Concat(string.Join(" ", NCollectionsExtensions.MapToArray.[_ , string]((names : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x))), " ")
            }
          }
      }
    }

    PrintProperty(mem : ClassMember.Property, remove_mods : NemerleAttributes) : void 
    {
      match ((mem, remove_mods))
        {
        | (Property(name = n, modifiers = mods, getter = getter, setter = setter, returnType = ty), _ ) => 
          
          {
            def is_auto ()  
            {
              def is_abstract (func : _ )  match (func)
                        {
                | Some(ClassMember.Function(body = FunBody.Abstract))
                | None => 
                  true
                | _  => 
                  false
              } : _ ;
              match ((is_abstract(getter) : bool))
                        {
                | true => 
                  is_abstract(setter)
                | _  => 
                  false
              }
            } : _ ;
            def print (accessor : _ , acc_type : _ )  match ((accessor, acc_type))
                    {
              | (Some(ClassMember.Function(body = FunBody.Parsed(expr), modifiers = mods)), _ ) => 
                
                {
                  def mods = print_modifiers(mods, NemerleAttributes.Public);
                  Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(acc_type) : string)));
                  print_fun_body(expr)
                }
              | _  => 
                ()
            } : _ ;
            def print_auto (accessor : _ , acc_type : _ )  match ((accessor, acc_type))
                    {
              | (Some(ClassMember.Function(body = FunBody.Abstract, modifiers = mods)), _ ) => 
                
                {
                  def mods = print_modifiers(mods, NemerleAttributes.Public);
                  string.Concat((Convert.ToString(mods) : string), (Convert.ToString(acc_type) : string), ";")
                }
              | _  => 
                ""
            } : _ ;
            def func ()  
            {
              print(getter, "get");
              match ((setter.IsSome : bool))
                        {
                | true => 
                  (Write("\n") : void )
                | _  => 
                  ()
              };
              print(setter, "set")
            } : _ ;
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            Write(string.Concat((Convert.ToString(attr) : string)));
            match ((is_auto() : bool))
                    {
              | true => 
                
                {
                  def get = print_auto(getter, "get");
                  def set = print_auto(getter, "set");
                  Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(n) : string), " : ", (Convert.ToString(ty) : string), " {", (Convert.ToString(get) : string), (Convert.ToString(set) : string), "}"))
                }
              | _  => 
                
                {
                  Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(n) : string), " : ", (Convert.ToString(ty) : string)));
                  WriteBlock(func)
                }
            }
          }
      }
    }

    PrintEvent(mem : ClassMember) : void 
    {
      match (mem)
        {
        | Event(add = add, remove = rem) => 
          
          {
            def print (accessor : _ , acc_type : _ )  match ((accessor, acc_type))
                    {
              | (ClassMember.Function(body = FunBody.Parsed(expr)), _ ) => 
                
                {
                  Write(string.Concat((Convert.ToString(acc_type) : string)));
                  print_fun_body(expr)
                }
              | _  => 
                ()
            } : _ ;
            print(add, "add");
            Write("\n");
            print(rem, "remove")
          }
        | _  => 
          ()
      }
    }

    public PrintClassMember(mem : ClassMember, remove_mods : NemerleAttributes) : void 
    {
      match (mem)
        {
        | with(, name = f.Name) => 
          match (bd)
                {
            | when(Parsed(expr), match ((name == ".ctor" : bool))
                    {
              | true => 
                true
              | _  => 
                name == ".cctor"
            }) => 
              
              {
                def attr = print_attributes(mods);
                def mods = print_modifiers(mods, remove_mods);
                Write(string.Concat((Convert.ToString(attr) : string)));
                Write(string.Concat((Convert.ToString(mods) : string), "this(", string.Join(", ", NCollectionsExtensions.MapToArray.[_ , string]((pars : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x))), ")"));
                print_fun_body(expr)
              }
            | Parsed(expr) => 
              
              {
                def attr = print_attributes(mods);
                def mods = print_modifiers(mods, remove_mods);
                def (_ , cons) = print_typarms(ty);
                Write(string.Concat((Convert.ToString(attr) : string)));
                Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(head) : string), (Convert.ToString(cons) : string)));
                print_fun_body(expr)
              }
            | Abstract => 
              
              {
                def attr = print_attributes(mods);
                def mods = print_modifiers(mods, remove_mods);
                def (_ , cons) = print_typarms(ty);
                Write(string.Concat((Convert.ToString(attr) : string)));
                Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(head) : string), (Convert.ToString(cons) : string), ";"))
              }
            | _  => 
              ()
          }
        |  => 
          PrintProperty(p, remove_mods)
        | TypeDeclaration(td) => 
          PrintTop(td, remove_mods)
        | Field(name = n, modifiers = mods, ty = ty) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), (Convert.ToString(n) : string), " : ", (Convert.ToString(ty) : string), ";"))
          }
        | Event(name = n, modifiers = mods, ty = ty, add = a) => 
          
          {
            def attr = print_attributes(mods);
            def mods = print_modifiers(mods, remove_mods);
            Write(string.Concat((Convert.ToString(attr) : string)));
            Write(string.Concat((Convert.ToString(mods) : string), "event ", (Convert.ToString(n) : string), " : ", (Convert.ToString(ty) : string)));
            match (((a.body is FunBody.Parsed) : bool))
                    {
              | true => 
                WriteBlock(fun  () : _  
    PrintEvent(mem))
              | _  => 
                writer.Write(";")
            }
          }
        | EnumOption(name = n, value = val) => 
          
          {
            Write(string.Concat("|", (Convert.ToString(n) : string)));
            val.Iter(fun  (x : _ ) : _  
    writer.Write(string.Concat(" = ", (Convert.ToString(x) : string))))
          }
        | _  => 
          ()
      }
    }
  }


}