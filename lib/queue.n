(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)
 
class Empty_queue extends System.Exception 
   {
     this () {}
   }

class Queue ('a)
  {
     mutable frst : list ('a);
     mutable lst  : list ('a);

     this () {
       this.frst <- [];
       this.lst  <- [];
     }
     

     private move () : void {
       match ( this.frst ) {
       	 | [] => this.frst <- List.rev (this.lst)
	 | _  => ()
       }
     }

     add (x : ('a)) : void {
       this.lst <- x::this.lst;
     }
     
     push (x : ('a)) : void {
       this.add(x)
     }
     
     take () : ('a) {
       this.move ();
       match (this.frst) {
       	 | x::xs => 
	   this.frst <- xs;
	   x
	 | [] => raise Empty_queue ()
       }
     }

     pop () : ('a) {
       this.take ()
     }

     peek () : ('a) {
       this.move ();
       match (this.frst) {
       	 | x::xs => x
	 | [] => raise Empty_queue ()
       }
     }

     top () : ('a) {
       this.peek ()
     }

     clear () : void {
       this.frst <- [];
       this.lst  <- [];
     }

     copy () : Queue ('a) {
       def q =  Queue();
       q.frst <- this.frst;
       q.lst  <- this.lst;
       q
     }

     is_empty () : bool {
       this.move ();
       match ( this.frst ) {
       	 | [] => true
	 | _  => false
       }
     }

     length () : int {
       List.length (this.frst) + List.length (this.lst)
     }

     iter (f : ('a) -> void) : void {
       this.move ();
       List.iter (f,this.frst);
     }

     'b fold (f : ('b * 'a) -> 'b, x : 'b) : 'b {
       this.move ();
       List.fold_left (f,x,this.frst)
     }

     transfer(q : Queue('a)) : void {
       this.move();
       q.move();
       this.lst <- List.rev (q.frst);
       q.frst <- []
     }

  } (* end of module Queue *)