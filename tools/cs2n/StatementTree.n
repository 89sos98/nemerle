// Copyright (c) 2003-2005 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//


using Nemerle.Collections;

namespace Nemerle.CSharp
{

    /**
     *  C# wrapper for STree class
     */
    public class StatementTree
    {
        public this ()
        {
            s_tree = STree.TokS ("")
        }

        public this (t : antlr.Token)
        {
            s_tree = STree.Tok (t)
        }

        public this (s : string)
        {
            s_tree = STree.TokS (s)
        }

        public this (s : string,ch : LinkedList[StatementTree])
        {
            mutable l = [];
            
            def get_stree (t : StatementTree)
            {             
                  l = t.s_tree :: l;
            }

            ch.Iter (get_stree);

            s_tree = STree.Statement(s,l)
        }        
        
        public ToString (tp : string) : string
        {	 
	    STree.set_type(tp);	
            def st = s_tree.eliminate_continues (). eliminate_breaks ();
            match (st)
            {
                | [tree] =>
                  tree.eliminate_return_body (false).ToString ()
                | _ => assert (false);
            }            
        }
        
        private s_tree : STree;
    }

    /**
     *  STree class, representing single statement
     */
    public variant STree
    {        
        | TokS { s : string; }
        | Tok { t : antlr.Token; }
        | Statement { s_name : string; children : list[STree] ; }                           
        
        override public ToString () : string
        {	    
            match(this)
            {             
                | Tok (t) => t.getText ()
                | TokS (s) => s

                | Statement ( "RETURN" , [Tok (t), expr, s]) =>
                  ExtendedToken.getWhitespaces (t) + expr.ToString () + s.ToString ()

                | Statement ( "RETURN" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "()" + s.ToString ()

                | Statement ( "CONTINUE" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "/*" + ExtendedToken.getTextOnly (t)+ "*/()" +s.ToString ()
                
		| Statement ("WHILE",children) =>
		  def new_while = Statement("WHILE_",children);
		  match(children)
		  {
		     | [_,_,_,_,Statement("BLOCK",_)] =>		       
     		       new_while.ToString () + ";";
		     | _ => new_while.ToString ();
		  }
		
                | Statement ( _ , children) =>
                  
                  def sb = System.Text.StringBuilder ();
                  def loop (l)
                  {
                      match(l : list[STree])
                      {
                          | [] => ()
                          | x :: xs =>  ignore (sb.Append (x.ToString ()));loop (xs)
                      }
                  }

                  loop(children);
                  
                  sb.ToString ()                  
            }
        }                        

	/* -- JUMP ELIMINATION ------------------------------------------- */

	private jump_inside (continue : bool) : bool
	{
          if(continue)
	    continue_inside();
	  else	
	    return_inside();
	}

	private cut_off_braces (lst : list [STree]) : STree * list [STree] * STree
        {
            def st = Statement("BLOCK",lst);
            cut_off_braces (st)
        }
        
        private cut_off_braces (t : STree) : STree * list [STree] * STree
        {
            def loop ['a](lst : list['a],acc : list['a]) : list ['a] * 'a
            {
                match(lst)
                {
                    | [x] => (List.Rev (acc),x)
                    | x :: xs =>loop (xs,x :: acc)
                    | _ => assert(false);
                }
            }         
            match(t)
            {
                | Statement("BLOCK",x::xs) =>                  
                  def (sx,end) = loop(xs,[]);
                  (x,sx,end)
                | _ => 		
		assert(false);
            }
        }


        /* -- CONTINUE ELIMINATION --------------------------------------- */

	/**
         *  Main 'continue' elimination function. Returns tree made by 'continue' elimnation.
         *  Function first searchs for loop, then transforms it.
         */

        internal eliminate_continues () : STree
        {
            def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_continues () :: acc)
                }
            }
            	  
	    def eliminate_block (block) : STree
	    {
	      	| Statement("BLOCK",_) => 
		  def (lbrace,body_eliminated,rbrace) = cut_off_braces(block.eliminate_return_body (true));
		  Statement("BLOCK",lbrace :: body_eliminated + [rbrace]);		  
				  
		| _  => 
		  def body = Statement ("BLOCK",[TokS("{"),block,TokS("}")]);
		  def (_,body_eliminated,_) = cut_off_braces(body.eliminate_return_body (true));
		  match(body_eliminated)
                  {
                    | [block_eliminated] => block_eliminated
	     	    | _ => assert(false); 
        	  }	  
	    }
		  
            match (this)
            {
                | Statement("BLOCK",stmts) =>
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
                  Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])
		  
                // WHILE loop
                
                | Statement("WHILE",[w,lp,be,rp,block]) =>
                  if (block.continue_inside ())
		      Statement("WHILE",[w,lp,be,rp,eliminate_block(block)])
                  else                  
                      Statement("WHILE",[w,lp,be,rp,block.eliminate_continues ()])
                
		// DO ... WHILE loop
		
		| Statement("DO",[d,block,w,lp,be,rp,s]) =>
                  if (block.continue_inside ())
		      Statement("DO",[d,eliminate_block(block),w,lp,be,rp,s]) 
                  else                  
		      Statement("DO",[d,block.eliminate_continues() ,w,lp,be,rp,s]) 

                // FOR loop
  
		| Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block]) =>
		  if (block.continue_inside ())
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,eliminate_block(block)]) 
                  else                  
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block.eliminate_continues()]) 

                // FOREACH loop

		| Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block]) =>      
		  if (block.continue_inside ())
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,eliminate_block(block)])  
                  else                  
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block.eliminate_continues()])       
		
                | _ => this
            }
        }

	/**
	 * Returns true if statement or one of substatement contains 'continue'
	 */
        protected continue_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.continue_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("CONTINUE",_) => true
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.continue_inside () || st2.continue_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.continue_inside () 
                | _ => false
            }
        }
        
        /* -- RETURN ELIMINATION ----------------------------------------- */
        
	/**
         *  Function used to eliminate 'return' from function bodies
	 *  and eliminate 'continue' from loop bodies
         */	
        internal eliminate_return_body (continue : bool) : STree
        {
            def (lbrace,statements,rbrace) = cut_off_braces (this);

            def loop (sts : list [STree],acc : list [STree]) : list [STree]
            {
                match(sts)
                {
                    | (Statement("IF", _) as if_st)  :: tail
                    | (Statement("WHEN", _) as if_st) :: tail =>                      
                      def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
                      def est_block       = block_statement.eliminate_return_body (continue);
                      def est_if          = if_st.eliminate_return_in_if (est_block,continue);
                      
                      List.Rev(est_if :: acc)
                      
                    | Statement("BLOCK",xs) :: tail =>
                      def (_,ys,_) = cut_off_braces (xs);
                      def block_statement = Statement("BLOCK",lbrace :: ys + tail  + [rbrace]);
                      def est_block       = block_statement.eliminate_return_body (continue);
                      List.Rev(est_block :: acc)

                    | (Statement("RETURN", _) as ret_st) :: tail =>
		      if(!continue)
                      	List.Rev ((ret_st :> STree) :: acc)
		      else	
                        loop (tail, (ret_st :> STree) :: acc )
			
	 	    | (Statement("CONTINUE", _) as con_st) :: tail =>		      
		      if(continue)
                      	List.Rev ((con_st :> STree) :: acc)
		      else	
                        loop (tail, (con_st :> STree) :: acc )

                    | (Statement("FOREACH", _) as while_st) :: tail
		    | (Statement("FOR", _) as while_st) :: tail	
		    | (Statement("DO", _) as while_st) :: tail
		    | (Statement("WHILE", _) as while_st) :: tail =>		      
		      if(continue)
		      	loop (tail, (while_st.eliminate_continues () :> STree) :: acc )		
		      else
		        loop (tail, (while_st :> STree) :: acc )
		 
                    | head :: tail => loop (tail, head :: acc )
                    | _ =>  List.Rev(acc)
                }
            }

            Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])
            
        }
	
	/**
         *  Function used to transform 'if' trees containing 'return' or 'continue'
         */
        protected eliminate_return_in_if (return_st : STree,continue : bool) : STree
        {
            def(_,sts,_) = cut_off_braces (return_st);
            match(this)
            {
                | Statement("IF",[Tok(i),lp,exp,rp,st1,Tok(e),st2]) =>

                  def ws_if    = ExtendedToken.getWhitespaces(i);
                  def ws_else  = ExtendedToken.getWhitespaces(e);
                  
                  // checking "if"
                  
                  if(st1.jump_inside (continue) || st2.jump_inside (continue))
		  {
		    def s1 = Statement("BLOCK",[TokS(ws_if+"{"),st1] + sts +[TokS(ws_if+"}")]);
		    def es1 = s1.eliminate_return_body (continue);
		    def s2 = Statement("BLOCK",[TokS(ws_else+"{"),st2] + sts +  [TokS(ws_else+"}")]);
                    def es2 = s2.eliminate_return_body (continue);

		    Statement("IF",[Tok(i),lp,exp,rp,es1,Tok(e),es2])
		  }
                    
                  else
                      Statement("BLOCK", this :: sts)
 		
		// checking "when"
                      
                | Statement("WHEN",[Tok (i),lp,exp,rp,st1]) =>		  
                  if(st1.jump_inside (continue))
                  {
		    //System.Console.WriteLine(st1);
		    def es1 = 
		    match(st1)
		    {
		      | Statement("BLOCK",_) => st1.eliminate_return_body (continue);
		      | _ => Statement("BLOCK",[TokS("{"),st1,TokS("}")])
		    }

                    def whitespaces = ExtendedToken.getWhitespaces(i);
                    Statement("IF", [TokS(whitespaces + "if"), lp, exp, rp, es1, TokS(whitespaces + "else"), return_st])
                  }                  
                  else                  
                      Statement("BLOCK", this :: sts)

                | Statement("WHEN", _) =>
                  assert(false);
                      
                | x => x
            }
        }
                
	/**
	 * Returns true if statement or one of substatement contains 'return'
	 */
        private return_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.return_inside())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("RETURN",_) => true
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.return_inside () || st2.return_inside ()  
                | _ => false
            }            
        }     
	

        /* -- BREAK ELIMINATION -------------------------------------------- */

        /**
         *  Main 'break' elimination function. Returns list of trees made by 'break' elimnation.
         *  Function first searchs for loop, then transforms it.
         */
        internal eliminate_breaks () : list [STree]
        {
            def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_breaks () + acc)
                }
            }
            
	    def eliminate_block(block : STree, w : antlr.Token) : STree
	    {
		match(block.eliminate_breaks ())
		{
		  | [x] => x
                  | xs => 
		    Statement("BLOCK",
		    TokS(ExtendedToken.getWhitespaces (w) + "{") :: List.Rev(xs) + [TokS(ExtendedToken.getWhitespaces (w) + "}")]);
		}    
	    }
	    
            def make_when_statement (w : antlr.Token, rs : string, ns : string) : STree
	    {
	        def return_statement = 
		Statement("RETURN",[Tok (ExtendedToken (ExtendedToken.getWhitespaces (w), "return")),TokS(" " + rs),TokS(";")]);
			
	        Statement("WHEN",
		[Tok (ExtendedToken (ExtendedToken.getWhitespaces (w),"when")),
		 TokS("( "),TokS(ns),TokS(" )"),return_statement]);
	    }
	    
            match(this)
            {
                | Statement("BLOCK",stmts) =>
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
                  [Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])]

                // FOREACH loop  -  FIXME: emit warning message about uneffectivness
                  
                | Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block]) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     
		     def when_eliminated = Statement
		      ("WHEN",[Tok(ExtendedToken(ExtendedToken.getWhitespaces (f), "when")),TokS(" ("),TokS("!" + ns),TokS(" )"),block_eliminated2]);
		      
		     if(!ret)
		     {
		     	[Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
                        TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(f,rs,ns);
						
                        [when_statement,
			Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
                        TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block_eliminated])]
                  
                // FOR loop  
                  
                | Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block]) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     
		     def new_fc = 
		     if (fc == "")
                        "!" + ns;
                     else
                        fc + " && !" + ns;

		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
                        TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(f,rs,ns);
						
                        [when_statement,
			Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
                        TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block_eliminated])]
		     
                // DO ... WHILE loop
                  
                | Statement("DO",[Tok(d),block,w,lp,TokS(be),rp,s]) =>
                  def block_eliminated = eliminate_block(block,d);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("DO",[Tok(d),block_eliminated2,w,lp,TokS(be + " && !" + ns),rp,s]),
                        TokS (ExtendedToken.getWhitespaces (d) + "mutable " + ns + " = false;")];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(d,rs,ns);
						
                        [when_statement,
			Statement("DO",[Tok(d),block_eliminated2,w,lp,TokS(be + " && !" + ns),rp,s]),
                        TokS (ExtendedToken.getWhitespaces (d) + "mutable " + ns + " = false;"),
			TokS (ExtendedToken.getWhitespaces (d) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("DO",[Tok(d),block_eliminated,w,lp,TokS(be),rp,s])]

                // WHILE loop
                  
                | Statement("WHILE",[Tok(w),lp,TokS(be),rp,block]) =>
		  def block_eliminated = eliminate_block(block,w);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp,block_eliminated2]),
                        TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;")];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(w,rs,ns);
						
                        [when_statement,
			Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp,block_eliminated2]),
                        TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
			TokS (ExtendedToken.getWhitespaces (w) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("WHILE",[Tok(w),lp,TokS(be),rp,block_eliminated])]
		                                    
                | _ => [this]
            }
        }

        /**
         *  Function used to transform loops containig 'break' statements
         */
        protected eliminate_break_in_loop (ns : string,rs : string) : STree * bool
        {
            def loop (sts : list [STree], acc : list [STree],acc2 : bool) : list [STree] * bool
            {
                match (sts)
                {
                    | [] => (List.Rev (acc),acc2)

                    | (Statement ("WHEN",_) as if_st) :: []
                    | (Statement ("IF",_) as if_st) :: [] =>
                      def (if_st_el,ret) = if_st.eliminate_break_in_loop (ns,rs);
                      
                      (List.Rev (if_st_el :: acc),ret || acc2)

                    | (Statement ("WHEN",[Tok(i),_,_,_,_]) as if_st) :: tail 
                    | (Statement ("IF",[Tok(i),_,_,_,_,_,_]) as if_st) :: tail =>
                      if (if_st.break_inside ())
                      {
                          def whitespaces = ExtendedToken.getWhitespaces (i);
                          def (if_st_el,ret1) = if_st.eliminate_break_in_loop (ns,rs);
                          def block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
                          def (block_el,ret2) = block.eliminate_break_in_loop (ns,rs);
                          def when_st = Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),TokS("( "),TokS("!"+ns),TokS(" )"),block_el]);
                          
                          (List.Rev (when_st :: if_st_el :: acc),ret1 || ret2 || acc2)
                      }
                      else
                          (loop (tail , (if_st :> STree) :: acc,acc2))
			  
		    | Statement("RETURN",[Tok(b),TokS(expr),s]) :: _ =>		  
	              def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		      [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		      Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
		      [TokS(ExtendedToken.getWhitespaces(b) + "}")]);  // oh, this is ugly
		      
		      (List.Rev(new_block :: acc),true)
		      
                    | Statement("RETURN",[Tok(b),s]) :: _ =>
		      def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		      [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		      Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
		      [TokS(ExtendedToken.getWhitespaces(b) + "}")]);

	              (List.Rev(new_block :: acc),true)
		      
                    | Statement("BREAK",[Tok(b),s]) :: _ =>                     
                      (List.Rev(Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]) :: acc),acc2)
		      
		    | head :: tail => (loop (tail , head :: acc,acc2))
                }
            }
            
            match(this)
            {
                | Statement("IF",[i,lp,be,rp,st1,e,st2]) =>

                  mutable st1_el = null;
                  mutable st2_el = null;
                  
                  match (st1.eliminate_breaks ())
                  {
                      | [tree] => st1_el = tree
                      | _ => assert(false);
                  }

                  match (st2.eliminate_breaks ())
                  {
                      | [tree] => st2_el = tree
                      | _ => assert(false);
                  }
                  
                  if (st1.break_inside () && st2.break_inside ())
		  {
		      def (st1_el,ret1)= st1.eliminate_break_in_loop (ns,rs);
		      def (st2_el,ret2)= st2.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret1 || ret2)
		  }

                  else if (st1.break_inside ())
		  {
		      def (st1_el,ret)= st1.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret)
		  }    
                       
                  else if (st2.break_inside ())
		  {
		      def (st2_el,ret)= st2.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret)
		  }
                  else
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),false)
                      
                | Statement("WHEN",[w,lp,be,rp,st]) =>
		  def (st_el,ret)= st.eliminate_break_in_loop (ns,rs);
                  (Statement("WHEN",[w,lp,be,rp,st_el]),ret)
                  
                | Statement("BREAK",[Tok(b),s]) =>
		  (Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),false)

		| Statement("RETURN",[Tok(b),s]) =>		  
                  (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		  [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		   Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
		  [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true)

		| Statement("RETURN",[Tok(b),TokS(expr),s]) =>		  
		  (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		  [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		  Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
		  [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true)
		  
                | Statement("BLOCK",stmts) =>                  
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
		  def (block_eliminated,ret) = loop (statements,[],false);
                  (Statement("BLOCK",lbrace :: block_eliminated + [rbrace]),ret)
                  
                | x =>
                  match(x.eliminate_breaks ())
                  {
                      | [y] => (y,false)
                      | _ => assert(false);
                  }
            }
        }

        /**
         *  Returns true, if statement or one of substatement contains 'break'
         */
        protected break_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.break_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {	        
	        | Statement("RETURN",_) => true		
                | Statement("BREAK",_) => true		
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.break_inside () || st2.break_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.break_inside () 
                | _ => false
            }
        }

        /* -- SYMBOL GENERATION ----------------------------------------- */
        
        private new_symbol (suffix : string) : string
        {
            ++ symbol_count;
            "temp_" + symbol_count.ToString() + suffix
        }

        private new_break_loop_symbol () : string
        {
            new_symbol ("_break_loop_")
        }

	private new_return_symbol () : string
        {
            new_symbol ("_return_")
        }
	
	public static set_type (tpe : string) : void
	{
	    tp = tpe;
	}
	
	private static mutable tp : string = "";
        private static mutable symbol_count : int = 0;
        
    }

}
