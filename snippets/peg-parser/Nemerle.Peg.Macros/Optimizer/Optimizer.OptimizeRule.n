using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  partial internal class Optimizer
  {
    public static OptimizeRule(rule : Rule, grammar : Grammar, weights : Map[NameRef, option[int]]) : Rule
    {
      def optimize(r : Rule)
      {
        | Choice(rules)                 =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Choice(rules) => rules
              | rule               => [rule]
            });
          def rules = rules.Flatten();
          def catChars(_)
          {
            | (Rule.Chars([chars1]) as r1) :: (Rule.Chars([chars2]) as r2) :: rules =>
              catChars(Rule.Chars(r1.Location + r2.Location, [chars1.Sum(chars2)]) :: rules)

            | (Rule.Chars(chars1)   as r1) :: (Rule.Chars(chars2)   as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Choice([FSMBuilder.Seq(chars1), FSMBuilder.Seq(chars2)])) :: rules)

            | (Rule.Chars(chars)    as r1) :: (Rule.Fsm(fsm)        as r2) :: rules
            | (Rule.Fsm(fsm)        as r1) :: (Rule.Chars(chars)    as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Choice([fsm, FSMBuilder.Seq(chars)])) :: rules)

            | (Rule.Fsm(fsm1)       as r1) :: (Rule.Fsm(fsm2)       as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Choice([fsm1, fsm2])) :: rules)

            | rule :: rules => rule :: catChars(rules)
            | []            => []
          }
          def rules = catChars(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Choice(r.Location, rules)
          }

        | Sequence(rules)               =>
          def rules = rules.Map(optimize);
          def rules = rules.Map(
            fun(_)
            {
              | Rule.Sequence(rules) => rules
              | rule                 => [rule]
            });
          def rules = rules.Flatten();
          def catChars(_)
          {
            | (Rule.Not(Rule.Chars([chars1])) as r1) :: (Rule.Chars([chars2]) as r2) :: rules =>
              catChars(Rule.Chars(r1.Location + r2.Location, [chars2.Sub(chars1)]) :: rules)

            | (Rule.And(Rule.Chars([chars1])) as r1) :: (Rule.Chars([chars2]) as r2) :: rules =>
              catChars(Rule.Chars(r1.Location + r2.Location, [chars2.Sum(chars1)]) :: rules)

            | (Rule.Chars(chars1) as r1) :: (Rule.Chars(chars2) as r2) :: rules =>
              catChars(Rule.Chars(r1.Location + r2.Location, chars1.Append(chars2)) :: rules)

            | (Rule.Chars(chars) as r1) :: (Rule.Fsm(fsm) as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Seq([FSMBuilder.Seq(chars), fsm])) :: rules)

            | (Rule.Fsm(fsm) as r1) :: (Rule.Chars(chars) as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Seq([fsm, FSMBuilder.Seq(chars)])) :: rules)

            | (Rule.Fsm(fsm1) as r1) :: (Rule.Fsm(fsm2) as r2) :: rules =>
              catChars(Rule.Fsm(r1.Location + r2.Location, FSMBuilder.Seq([fsm1, fsm2])) :: rules)

            | rule :: rules => rule :: catChars(rules)
            | [] => []
          }
          def rules = catChars(rules);

          match (rules)
          {
            | [rule] => rule
            | _      => Rule.Sequence(rules)
          }

        | RepeatMin(min, rule)      =>
          match (optimize(rule))
          {
            | Chars(chars) with fsm = FSMBuilder.Seq(chars)
            | Fsm(fsm)      => Rule.Fsm(r.Location, FSMBuilder.RepeatMin(min, fsm))
            | rule          => Rule.RepeatMin(r.Location, min, rule)
          }

        | RepeatMinMax(min, max, rule)      =>
          match (optimize(rule))
          {
            | Chars(chars) with fsm = FSMBuilder.Seq(chars)
            | Fsm(fsm)      => Rule.Fsm(r.Location, FSMBuilder.RepeatMinMax(min, max, fsm))
            | rule          => Rule.RepeatMinMax(r.Location, min, max, rule)
          }

        | Not(Not(rule))                => optimize(Rule.And(r.Location, rule))
        | And(Not(rule))                => optimize(Rule.Not(r.Location, rule))
        | Not(And(rule))                => optimize(Rule.Not(r.Location, rule))
        | And(And(rule))                => optimize(Rule.And(r.Location, rule))
        | Not(rule)                     => Rule.Not(r.Location, optimize(rule))
        | And(rule)                     => Rule.And(r.Location, optimize(rule))
        | Capture(kind, rule)           => Rule.Capture(r.Location, kind, optimize(rule))
        | Scope(name, rule)             => Rule.Scope(r.Location, name, optimize(rule))
        | Chars(chars)                  => Rule.Fsm(r.Location, FSMBuilder.Seq(chars))
        | Cut as rule                   => rule
        | Fsm as rule                   => rule
        | Call(name)                    =>
          match (weights.Get(name), grammar.GetRule(name).Rule)
          {
            | (Some(weight), Some(rule)) when weight < 20 => optimize(rule)
            | _                                           => Rule.Call(name)
          }
      }

      optimize(rule);
    }
  }
}
