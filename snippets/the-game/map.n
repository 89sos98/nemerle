using System;
using Nemerle;
using Nemerle.Utility;

abstract class MapObject
{
  [Accessor]
  mutable map : WorldMap;

  [Accessor]
  mutable x : int;
  [Accessor]
  mutable y : int;
  
  public abstract Draw () : void;

  public virtual Init (map : WorldMap, x : int, y : int) : void
  {
    this.map = map;
    this.x = x;
    this.y = y;
    PostInit ();
  }

  protected virtual PostInit () : void {}

  public virtual CanEnter : bool
  {
    get { false }
  }

  public virtual MoveTo (x : int, y : int) : void
  {
    Map [this.x, this.y] = Map [this.x, this.y].Filter (_ != this : object);
    this.x = x;
    this.y = y;
    Map [x, y] ::= this;
  }
}

class Territory : MapObject
{
  protected DisplayWhenVisible : ColoredChar;
  protected DisplayWhenSeen : ColoredChar;
  protected DisplayWhenUnseen : ColoredChar = ColoredChar (' ');

  protected mutable ever_seen : bool;
  
  public override Draw () : void
  {
    if (Map.PlayerCanSee (this)) {
      ever_seen = true;
      ConsoleBuffer.DrawChar (DisplayWhenVisible)
    } else if (ever_seen)
      ConsoleBuffer.DrawChar (DisplayWhenSeen)
    else
      ConsoleBuffer.DrawChar (DisplayWhenUnseen)
  }
}

class Floor : Territory
{
  public this ()
  {
    DisplayWhenVisible = ColoredChar ('.', ConsoleColor.Yellow);
    DisplayWhenSeen = ColoredChar ('.', ConsoleColor.Gray);
  }

  public override CanEnter : bool
  {
    get { true }
  }
}

class Wall : Territory
{
  public this ()
  {
    DisplayWhenVisible = ColoredChar ('#', ConsoleColor.DarkYellow);
    DisplayWhenSeen = DisplayWhenVisible;
  }

  Visible : bool
  {
    [Memoize]
    get {
      def check (x, y) { Map [x, y].Exists (_.CanEnter) }

      check (X - 1, Y - 1) ||
      check (X + 1, Y - 1) ||
      check (X - 1, Y + 1) ||
      check (X + 1, Y + 1) ||
      check (X - 1, Y) ||
      check (X, Y - 1) ||
      check (X, Y + 1) ||
      check (X + 1, Y)
    }
  }
  

  public override Draw () : void
  {
    if (Visible)
      base.Draw ()
    else
      ConsoleBuffer.DrawChar (DisplayWhenUnseen);
  }
}

class Player : MapObject
{
  public override Draw () : void
  {
    ConsoleBuffer.DrawChar (ColoredChar ('@', ConsoleColor.Cyan));
  }

  public PerformMove () : void
  {
    def key = Console.ReadKey (true);
    def (x, y) =
      match (key.Key) {
        | LeftArrow => (X - 1, Y)
        | RightArrow => (X + 1, Y)
        | UpArrow => (X, Y - 1)
        | DownArrow => (X, Y + 1)
        | _ => (X, Y)
      }
    if (x != X || y != Y) 
      if (Map [x, y].ForAll (_.CanEnter))
        MoveTo (x, y)
      else
        Map.StatusMessage ("Cannot move there!")
    else
      match (key.KeyChar) {
        | 'r' => Map.ResetMap ();
        | 'q' => System.Environment.Exit (0);
        | _ => 
          Map.StatusMessage ("Move with arrows, [h] for help!")
      }
  }
}

class WorldMap {
  width = 78;
  height = 20;

  mutable status : string = "";

  map : array [2, list [MapObject]];
  mutable player : Player;

  public Item [x : int, y : int] : list [MapObject]
  {
    get {
      if (x < 0 || y < 0 || x >= width || y >= height)
        []
      else
        map [x, y]
    }
    set { map [x, y] = value }
  }

  public this ()
  {
    map = array (width, height);
    ResetMap ();
  }

  public ResetMap () : void
  {
    def gen = MapGenerator (width, height);
    def bool_map = gen.Generate ();
    
    for (mutable x = 0; x < width; ++x)
      for (mutable y = 0; y < height; ++y) {
        def f = 
          if (bool_map [x, y])
            Floor ()
          else 
            Wall ();
        map [x, y] = [f];
        f.Init (this, x, y);
      }

    player = Player ();
    player.Init (this, width / 2, height / 2);
    map [player.X, player.Y] ::= player;
  }

  public StatusMessage (msg : string) : void
  {
    status += $"$msg ";
  }

  public Draw () : void
  {
    ConsoleBuffer.Clear ();
    for (mutable y = 0; y < height; ++y) {
      ConsoleBuffer.Goto (1, y);
      for (mutable x = 0; x < width; ++x)
        map [x, y].Head.Draw ();
    }
    ConsoleBuffer.Goto(0, height);
    ConsoleBuffer.DrawString (status, ConsoleColor.Yellow);
    status = "";

    ConsoleBuffer.Flush ();
  }

  public PlayerCanSee (target : MapObject) : bool
  {
    def dx = player.X - target.X;
    def dy = player.Y - target.Y;
    (dx * dx + dy * dy) < 10
  }
  
  public MainLoop () : void
  {
    try {
      while (true) {
        Draw ();
        player.PerformMove ();
      }
    } catch {
      | e =>
        Console.WriteLine (e);
        _ = Console.ReadLine ();
    }
  }

  public static Main () : void
  {
    def world = WorldMap ();
    world.MainLoop ();
  }
}
