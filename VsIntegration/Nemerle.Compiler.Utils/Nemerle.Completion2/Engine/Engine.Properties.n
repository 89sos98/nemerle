using System;
using System.IO;
using System.Diagnostics;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;

using SCG   = System.Collections.Generic;
using SR    = System.Reflection;
using Typed = Nemerle.Compiler.Typedtree;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    syncObject : object;

    [Accessor] mutable _defines        : DefineCollection;
    [Accessor]         _sources        : SourceCollection;
    /// [Obsolete] for dont us it accidentally.
    /// Don't use this field directly! Use Project propert.
    [Obsolete] mutable _project        : Project;
    /// Don't use this field directly! Use Project propert.
    [Obsolete] mutable _rowProject     : Project;
    [Accessor]         _projectSources : IProjectSources;
                       _callback       : IEngineCallback;

    public        LastResetAstTime : DateTime { get; private set; }
		public        LastParseTime    : DateTime { get; private set; }

    static StrsToCompletionElems(
      strs      : SCG.IEnumerable[string],
      glyphType : int,
      info      : string
    )
      : array[CompletionElem]
    {
      def ary = SCG.List();

      foreach (name when name != null in strs)
        ary.Add(CompletionElem(glyphType, name, info, null));
      
      ary.ToArray();
    }

    [Accessor] static _topKeywords               : array[CompletionElem];
    [Accessor] static _expressionDefaultKeywords : array[CompletionElem];
    static _expressionKeywords : array[string]
      = array["mutable", "typeof", "def", "array", "true", "false", "null", "throw",
              "#if", "#region"];

#pragma warning disable 618 // Obsolete
    public Project : Project
    {
      get
      {
        unless (this.Equals(Instance))
        {
          Debug.WriteLine("Someone steal my instance!");
          Instance = this;
        }

        when (_project == null)
          BuildTypeTree();

        _project;
      }
    }

    [Obsolete("Do not use this property. Use the Project property instead.")]
    public RawProject : Project
    {
      get
      {
        if (_project == null)
        {
          when (_rowProject == null)
            BuildTypeTree();

          _rowProject
        }
        else
          _project;
      }
    }

    public ResetNamespaceTree() : void
    {
      _project = null;
      LastResetAstTime = DateTime.Now;
    }

    public IsProjectAvailable : bool { get { _project != null; } }
#pragma warning restore 618 // Obsolete

    // If you want to recover the messages done by the parser/typer
    public Output : System.IO.TextWriter
    {
      get { Message_output }
      set { Message_output = value }
    }
  } // end class Engine
} // end namespace
