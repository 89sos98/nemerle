using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;

using LRPEGCC;

module Program
{
  Main() : void
  {
    def print(fsm : FSM)
    {
      foreach (state in $[0..fsm.StateCount - 1])
      {
        Write($"$state ");
        when (state == fsm.StartState)
          Write(" start");
        when (state == fsm.OkState)
          Write(" ok");
        WriteLine();
        foreach (transition in fsm.Transitions.Filter(t => t.From == state))
        {
          match (transition)
          {
          | Symbol(chars) => WriteLine($"-> $(transition.To) [$chars]");
          | Epsilon       => WriteLine($"-> $(transition.To) Epsilon");;
          }
        }
        WriteLine();
      }
      WriteLine("============================================================================");
    }

    //def words = ["abstract"     , "as"          , "base"        , "bool"        , "break"
    //            , "byte"        , "case"        , "catch"       , "char"        , "checked"
    //            , "class"       , "const"       , "continue"    , "decimal"     , "default"
    //            , "delegate"    , "do"          , "double"      , "else"        , "enum"
    //            , "event"       , "explicit"    , "extern"      , "false"       , "finally"
    //            , "fixed"       , "float"       , "for"         , "foreach"     , "goto"
    //            , "if"          , "implicit"    , "in"          , "int"         , "interface"
    //            , "internal"    , "is"          , "lock"        , "long"        , "namespace"
    //            , "new"         , "null"        , "object"      , "operator"    , "out"
    //            , "override"    , "params"      , "private"     , "protected"   , "public"
    //            , "readonly"    , "ref"         , "return"      , "sbyte"       , "sealed"
    //            , "short"       , "sizeof"      , "stackalloc"  , "static"      , "string"
    //            , "struct"      , "switch"      , "this"        , "throw"       , "true"
    //            , "try"         , "typeof"      , "uint"        , "ulong"       , "unchecked"
    //            , "unsafe"      , "ushort"      , "using"       , "virtual"     , "void"
    //            , "volatile"    , "while"       ];
    def words = ["++" , "--" , "<<" , ">>" , "==" , "!=" , ">=" , "<=" , ">" , "<" , "true" , "false"
                                          , "^" , "!" , "~" , "+" , "-" , "*" , "," , "%" , "&" , "|"];
    def wordsFsm = FSMBuilder.Choice(words.Map(FSMBuilder.String));
    def wordsFsm = DFSMTransform.Normalize(wordsFsm);

    print(wordsFsm);
    print(DFSMTransform.Do(wordsFsm));

    def any = FSMBuilder.Symbol(RangeSet().AddRange('\u0000', '\uFFFF'));
    def star = FSMBuilder.Symbol(RangeSet().AddRange('*', '*').AddRange('0', '9'));
    def slash = FSMBuilder.Symbol(RangeSet().AddRange('/', '/'));
    def commentEnd = FSMBuilder.Seq([star, slash]);
    //print(any);
    //print(star);
    //print(slash);
    //print(commentEnd);
    //def test = FSMBuilder.Choice([commentEnd, star, slash, star, slash]);
    //def test = FSMBuilder.Choice([commentEnd, slash]);
    //print(test);
    def test = FSM();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, _) = test.NewState();
    def (test, start) = test.NewStartState();
    def (test, ok) = test.NewOkState();

    //def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('0', '9')));
    //def test = test.AddTransition(Transition.Symbol(0, 4, RangeSet().AddRange('0', '9')));
    //def test = test.AddTransition(Transition.Symbol(0, 5, RangeSet().AddRange('2', '2')));
    //def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('6', '6')));
    //def test = test.AddTransition(Transition.Symbol(0, 3, RangeSet().AddRange('4', '9')));

    //def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('a', 'x')));
    //def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('f', 'z')));
    //def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('A', 'W')));
    //def test = test.AddTransition(Transition.Symbol(0, 2, RangeSet().AddRange('E', 'Z')));
    //def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('F', 'W')));

    def test = test.AddTransition(Transition.Symbol(10, 11, RangeSet().AddRange('0', '1')));
    def test = test.AddTransition(Transition.Epsilon(10, 11));
    def test = test.AddTransition(Transition.Epsilon(11, 10));

    def test = test.AddTransition(Transition.Epsilon(start, 10));
    def test = test.AddTransition(Transition.Epsilon(11, 0));

    def test = test.AddTransition(Transition.Symbol(0, 1, RangeSet().AddRange('1', '1')));
    def test = test.AddTransition(Transition.Symbol(1, 2, RangeSet().AddRange('1', '1')));
    def test = test.AddTransition(Transition.Symbol(2, ok, RangeSet().AddRange('0', '0')));

    def test = test.AddTransition(Transition.Symbol(0, 4, RangeSet().AddRange('1', '1')));
    def test = test.AddTransition(Transition.Symbol(4, 5, RangeSet().AddRange('0', '0')));
    def test = test.AddTransition(Transition.Symbol(5, ok, RangeSet().AddRange('1', '1')));

    def test = test.AddTransition(Transition.Symbol(0, 6, RangeSet().AddRange('0', '0')));
    def test = test.AddTransition(Transition.Symbol(6, 7, RangeSet().AddRange('1', '1')));
    def test = test.AddTransition(Transition.Symbol(7, ok, RangeSet().AddRange('1', '1')));

    def test = DFSMTransform.Normalize(test);

    //print(test);
    //print(DFSMTransform.Do(test));
  }
}