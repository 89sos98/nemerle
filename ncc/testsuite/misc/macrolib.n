
using Nemerle.Compiler;
using System;

namespace A {

macro forp (i, n : int, m : int, body)
syntax ("forpermutation", "(", i, "in", n, "to", m, ")", body)
{
  def a = array (m - n + 1);
  for (mutable j <- 0; j < m - n + 1; j <- j + 1)
    a[j] <- j + n;
  mutable p <- [];
  def r = System.Random ();
  for (mutable k <- m - n; k >= 0; k <- k - 1) {
    def rand = r.Next (k + 1);
    p <- <[ $(a[rand] : int) ]> :: p;
    a[rand] <-> a[k];
  };
  <[
    def p = array [..$p];
    for (mutable j <- 0; j < $(m - n + 1 : int); j <- j + 1) {
      $i <- p[j];
      $body
    }
  ]>
}

macro ala()
{
  def c = _N_ctx.env.DefineClass([Mod_public ()], "haha", []);
  c.DefineMember(<[ field: x : Nemerle.Core.int; ]>);
  c.DefineMember(<[ method: public this(){}]>);
  <[ Console.WriteLine ("proba") ]>;
}

}
