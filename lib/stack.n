(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

namespace Nemerle.Collections {

  (**
   * An exception thrown when an invalid stack operation is executed
   *)
  public class Empty_stack extends System.Exception 
  {
    public this () {}
  }


  (**
   * A stack
   *)
  public class Stack ('a)
  {
    mutable stack : list ('a);

    public this () {
      this.stack <- []
    }

    public push (x : ('a)) : void {
      this.stack <- x :: this.stack;
    }

    public pop () : ('a) {
      match (this.stack) {
        | x :: xs =>
          this.stack <- xs;
          x
        | _ => raise Empty_stack ()
      }
    }

    public top () : ('a) {
      match (this.stack) {
        | x :: xs => x
        | _ => raise Empty_stack ()
      }
    }

    public clear () : void {
      this.stack <- []
    }

    public copy () : Stack ('a) {
      def s = Stack ();
      s.stack <- this.stack;
      s
    }

    public is_empty () : bool {
      match (this.stack) {
        | [] => true
        | _  => false
      }
    }

    public length () : int {
      List.length (this.stack)
    }

    public iter (f : ('a -> void)) : void {
      List.iter (f, this.stack)
    }
  }
}
