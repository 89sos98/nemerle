using System;
using System.Console;
using Nemerle.Utility;
using SCG = System.Collections.Generic;

using Nemerle.Extensions;

namespace Sample {

    module Bar {
        public GetObject(a : string, b : int) : IAnonymous {
            new (a = a, b = b)
        }
    }

    module Program {
    
        Main() : void {
            //this is syntax:
            def t = new (f1 = "asdasdf", f2 = 10, f3 = array[1.0, 2.0]);
            WriteLine($"t is: $t");

            //more complex sample
            def h = new ("qwerqwe".Replace("q", "").Length, f2 = new(t));
            WriteLine($"h is: $h");


            //and more ...
            def g = new (f1 = "qwerqwe", f2 = new(x = 10.0f, f2 = new(x = "bla"), f3 = h));
            WriteLine($"g is: $g");
            
            //trivial form
            def trivial = new ();
            WriteLine($"trivial is $trivial, its type $(trivial.GetType())");
            WriteLine($"trivial is null ? $(null == trivial)");
            WriteLine($"trivial is not null ? $(trivial != null)");

            //class cache
            def a1 = new (x1 = "qwerqwe", x2 = new(x = "bla"));
            def a2 = new (x1 = "ewdzffs", x2 = new(x = "tydfg"));
            WriteLine($"a1.GetType() == a2.GetType(), true ? $(a1.GetType().Equals(a2.GetType()))");
            WriteLine(a1 == a2);
            WriteLine(a1 != a2);

            //interop with external assembly
            def o1 = Foo.GetObject("str", 10);
            def o2 = Bar.GetObject("str", 10);
            def o3 = Bar.GetObject("str", 11);
            def o4 = Foo.GetObject.[string, int]("str", 10);
            WriteLine($"o1 == o2, true ? $(o1.Equals(o2))");
            WriteLine($"o1 == o3, false ? $(o1.Equals(o3))");
            WriteLine($"o1 == o4, true ? $(o1.Equals(o4))");

            // Dictionary
            def table = SCG.Dictionary();
            table[ new ( k = 10, t = "qwerty" )] = "value1";
            table[ new ( k = 20, t = "asdfgh" )] = "value2";
            WriteLine($<#Using dictionary, value1: $(table[new (k = 10, t = "qwerty")])#>);

            // conversion to tuple:
            def tup = new (t = "asdfsd", h = 123).ToTuple();
            WriteLine(tup);

            // tuple constructors:
            def obj = new[g, f](tup.Field0, tup.Field1);
            WriteLine(obj);
            def obj = new[g, f](tup);
            WriteLine(obj);
            def obj = new[x](10);
            WriteLine(obj);

            // complex expressions
            def tup_list = [ (10, "s10"), (20, "s20"), (30, "s30") ];
            def obj_list = tup_list.Map(t => new[num, str](t));
            WriteLine($"Tuple list converted to object list: $(tup_list) -> $(obj_list)");

            // accessing members:
            WriteLine("Accessing members: " + new[x]("asdfasdf").x.ToString());

            // very long anonymous:
            def very_long_1 = new (
                f1 = 10, f2 = 10, f3 = 10, f4 = 10, f5 = 10,
                f6 = 10, f7 = 10, f8 = 10, f9 = 10, f10 = 10,
                f11 = 10, f12 = 10, f13 = 10, f14 = 10, f15 = 10,
                f16 = 10, f17 = 10, f18 = 10, f19 = 10, f20 = 10,
                f21 = 10);
            def very_long_2 = new (
                f1 = 10, f2 = 10, f3 = 10, f4 = 10, f5 = 10,
                f6 = 10, f7 = 10, f8 = 10, f9 = 10, f10 = 10,
                f11 = 10, f12 = 10, f13 = 10, f14 = 10, f15 = 10,
                f16 = 10, f17 = 10, f18 = 10, f19 = 10, f20 = 10,
                f21 = 10) : IAnonymous;
            WriteLine(very_long_1);
            WriteLine(very_long_1 == very_long_2);
            WriteLine(very_long_2.GetContent());

            WriteLine("Press any key...");
            _ = ReadKey(true);
        }
    }

}