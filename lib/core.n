/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Internal
{
  public interface Func0 : Func1
  {
    apply () : object;
  }

  public interface Func1
  {
    apply (_ : object) : object;
  }
  
  public interface Func2 : Func1
  {
    apply (_ : object, _ : object) : object;
  }
  
  public interface Func3 : Func1
  {
    apply (_ : object, _ : object, _ : object) : object;
  }
  
  public interface Func4 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object) : object;
  }
  
  public interface Func5 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object) : object;
  }
  
  public interface Func6 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object, 
           _ : object) : object;
  }

  public interface Func7 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object) : object;
  }

  public interface Func8 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object) : object;
  }

  public interface Func9 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object, _ : object) : object;
  }

  public class Tuple2
  {
    public field1 : object;
    public field2 : object;
  }
  
  public class Tuple3
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
  }
  
  public class Tuple4
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
  }
  
  public class Tuple5
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
  }
  
  public class Tuple6
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
  }
  
  public class Tuple7
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
    public field7 : object;
  }
  
  /**
   * Used to store the Nemerle types in genereated assembly metadata
   */    
  public class TypeAttribute : System.Attribute
  {
    public this (encoded_type : string) 
    {    
      _encoded_type <- encoded_type
    }
    
    public GetEncodedType () : string 
    { 
      _encoded_type
    }
    
    public mutable _encoded_type : string;
  }

  /**
   * Marks a Nemerle variant type
   */
  public class VariantAttribute : System.Attribute
  {
    public this () { }
    public this (variant_options : string) 
    {    
      _variant_options <- variant_options
    }
    
    public GetVariantOptions () : string 
    {
      _variant_options
    }
    
    public mutable _variant_options : string;
  }

  /**
   * Marks a Nemerle variant option
   */    
  public class VariantOptionAttribute : System.Attribute
  {
    public this () { }
  }
  
  /**
   * Marks a constant Nemerle variant option
   */    
  public class ConstantVariantOptionAttribute : System.Attribute
  {
    public this () { }
  }
  
  /**
   * Container for type aliases.
   */    
  public class TypeAliasAttribute : System.Attribute
  {
    public this (variant_options : string) 
    {    
      _variant_options <- variant_options
    }
    
    public GetAliasedType () : string 
    {
      _variant_options
    }
    
    public _variant_options : string;
  }
  
  /**
   * Used on assembly to list contained macros.
   */    
  public class ContainsMacroAttribute : System.Attribute
  {
    public this (name : string) 
    {    
      _name <- name
    }
    
    public GetName () : string 
    {
      _name
    }

    public _name : string;
  }
}

/**
 * This namespace is always opened
 */
namespace Nemerle.Core 
{
  public class AssertionException : System.Exception 
  {
    public this (file : string, line : int, msg : string) 
    { 
      def m = "assertion failed in file " + file + ", line " + line.ToString ();

      if (msg != "")
        base (m + ": " + msg)
      else
        base (m)
    }
  }

  public class MatchFailureException : System.Exception 
  {
    public this () {}
  }

  public class NullMatchException : System.Exception
  {
    public this () {}

    public static raise_self () : bool 
    { 
      def _ = throw NullMatchException ();
      true
    }
  }

  public class AssemblyFindException : System.Exception 
  {
    public this () {}
  }

  public type byte = System.Byte;
  public type sbyte = System.SByte;  
  public type short = System.Int16;
  public type ushort = System.UInt16;  
  public type int = System.Int32;
  public type uint = System.UInt32;  
  public type long = System.Int64;
  public type ulong = System.UInt64;  
  public type float = System.Single;
  public type double = System.Double;
  public type decimal = System.Decimal; 
  public type string = System.String;
  public type object = System.Object;
  public type bool = System.Boolean;
  public type char = System.Char;
}
