/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler; // Message, Macros.NewSymbol
 
using Nemerle.Collections;
using System;
using System.Text.RegularExpressions;

namespace PT = Nemerle.Compiler.Parsetree;

namespace Nemerle {
module IO {

  variant FormatToken {
    | Text { body : string; }
    | TextNewline { body : string; }
    | Number
    | NumberFloat
    | Str
    | Chr
  }

  /// parse printf-style formatting string
  /// http://www.gnu.org/software/libc/manual/html_node/Formatted-Output.html#Formatted%20Output
  parse_format (form : string) : list <FormatToken>
  {
    def buf = Text.StringBuilder ();
    mutable result = [];
    mutable i = 0;
    def n = form.Length;
/*    
    def parse_percent () : FormatToken {
      match (form [i]) {
        |

      }
     };
*/
    def append_text (x : string, new_line) {
      match (result) {
        | Text (t) :: rest =>
          if (new_line)
            result = TextNewline (t + x) :: rest
          else
            result = Text (t + x) :: rest
        | _ =>
          if (new_line)
            result = TextNewline (x) :: result            
          else
            result = Text (x) :: result
      }
    };
    
    while (i < n) { 
      match (form[i]) {
        | '%' =>
          // % occured - first, dump text from buffer
          when ( buf.Length > 0 ) {
            append_text (buf.ToString (), false);
            ignore (buf.Remove (0, buf.Length))
          };
          // now analyze next character
          i = i + 1;
          if ( i < n ) {
            match (form[i]) {
              | 'd' => result = Number () :: result
              | 'i' => result = Number () :: result
              | 'f' => result = NumberFloat () :: result
              | 's' => result = Str () :: result
              | 'c' => result = Chr () :: result
              | '%' => ignore (buf.Append ('%'))
              | _ => 
                Message.error ("Unsupported formatting sequence after % character")
            }
          }
          else
            Message.error ("Unexpected end of format after % character")
        | '\n' =>
          append_text (buf.ToString (), true);
          ignore (buf.Remove (0, buf.Length))
        | c =>
          ignore (buf.Append (c))
      };
      i = i + 1;
    };

    when (buf.Length > 0) append_text (buf.ToString (), false);

    // the result is reversed, but function using it will reverse it again
    result
  }
  
  macro printf (format : string, params parms : array <expr>) 
  {
    def make_expressions (toks, i, acc) {
      match ((toks, i)) {
        | ([], 0) => acc
        | (Text (t) :: xs, _) => 
          make_expressions (xs, i, 
            <[ Console.Write ($(t : string)) ]> :: acc)
        | (TextNewline (t) :: xs, _) => 
          make_expressions (xs, i, 
            <[ Console.WriteLine ($(t : string)) ]> :: acc)

        | (_, 0) =>
          Message.error ("not enough arguments for printf macro");
          acc
            
        | (Number :: xs, _) =>
          make_expressions (xs, i - 1, <[ Console.Write (($(parms[i - 1]) : int))
                                       ]> :: acc)

        | (NumberFloat :: xs, _) =>
          make_expressions (xs, i - 1,
               <[ Console.Write (Convert.ToString (($(parms[i - 1]) : double),
                Globalization.NumberFormatInfo.InvariantInfo)) ]>
                :: acc)

        | (Str :: xs, _) =>
          make_expressions (xs, i - 1,
                            <[ Console.Write (($(parms[i - 1]) : string)) ]> :: acc)

        | (Chr :: xs, _) =>
          make_expressions (xs, i - 1,
                            <[ Console.Write (($(parms[i - 1]) : char)) ]> :: acc)

        | ([], _) =>
          Message.error ("too many arguments for printf macro");
          acc
      }
    };

    def seq = make_expressions (parse_format (format), parms.Length, []);
    <[ {.. $seq } ]>
  }

  macro scanf (format : string, params parms : array <expr>) 
  {
    def make_expressions (toks, i, acc) {
      match ((toks, i)) {
        | ([], 0) => acc
        | (Text (t) :: xs, _) => 
          make_expressions (xs, i, 
            <[ Nemerle.IO.CheckInput ($(t : string)) ]> :: acc)

        | (TextNewline (t) :: xs, _) => 
          make_expressions (xs, i, 
            <[ Nemerle.IO.CheckInput ($(t : string)) ]> :: acc)

        | (_, 0) =>
          Message.error ("not enough arguments for scanf macro");
          acc
            
        | (Number :: xs, _) =>
          make_expressions (xs, i - 1, 
            <[ $(parms[i - 1]) = Nemerle.IO.ReadInt () ]> :: acc)

        | (NumberFloat :: _, _) =>
          Message.fatal_error ("scaning floats not supported")

        | (Str :: xs, _) =>
          make_expressions (xs, i - 1, 
            <[ $(parms[i - 1]) = Nemerle.IO.ReadString () ]> :: acc)

        | (Chr :: xs, _) =>
          make_expressions (xs, i - 1, 
            <[ $(parms[i - 1]) = Char.ToChar (Console.Read ()) ]> :: acc)

        | ([], _) =>
          Message.error ("too many arguments for scanf macro");
          acc
      }
    };

    def seq = make_expressions (parse_format (format), parms.Length, []);
    <[ 
      Nemerle.IO.EatWhiteSpace ();
      {.. $seq } 
    ]>
  }

  macro sprintf (format : string, params parms : array <expr>)
  {
    def make_exprs (toks, i, acc) {
      match ((toks, i)) {
        | ([], 0) => acc
        | (Text (t) :: xs, _) => 
          make_exprs (xs, i, 
                      <[ ignore (result.Append ($(t : string))) ]> :: acc)

        | (TextNewline (t) :: xs, _) => 
          make_exprs (xs, i, 
                      <[ ignore (result.Append ($(t : string))) ]> ::
                      <[ ignore (result.Append ("\n")) ]> :: acc)

        | (_, 0) =>
          Message.error ("not enough arguments for sprintf macro");
          acc
                      
        | (Number :: xs, _) =>
          make_exprs (xs, i - 1, <[ ignore (result.Append (($(parms[i - 1])
                                                            : int))) ]> :: acc)

        | (NumberFloat :: xs, _) =>
          make_exprs (xs, i - 1, <[ ignore (result.Append
            (Convert.ToString (($(parms[i - 1]) : double),
               Globalization.NumberFormatInfo.InvariantInfo))) ]> :: acc)

        | (Str :: xs, _) =>
          make_exprs (xs, i - 1, <[ ignore (result.Append (($(parms[i - 1])
                                                            : string))) ]> :: acc)

        | (Chr :: xs, _) =>
          make_exprs (xs, i - 1, <[ ignore (result.Append (($(parms[i - 1])
                                                            : char))) ]> :: acc)

        | ([], _) =>
          Message.error ("too many arguments for sprintf macro");
          acc
        }
      };

    def seq = make_exprs (parse_format (format), parms.Length,
                          [ <[ result.ToString () ]> ]);
    <[ 
      def result = Text.StringBuilder ();
      {.. $seq } 
    ]>
  }

  macro print (str : string)
  {
    // take names after $
    def namesreg = Regex (@"(([^\$]*)\$(\w+))|(.+)", RegexOptions.Singleline);
    mutable m = namesreg.Match (str);
    mutable res = [];

    while (m.Success) {
      if (m.Groups[1].Success) {
        def variable_name = Macros.UseSiteSymbol (m.Groups[3].ToString ());
        res = <[ Console.Write ($(variable_name : name).ToString ()) ]> ::
               <[ Console.Write ($(m.Groups[2].ToString () : string)) ]> ::
               res;
      }
      else
        res = <[ Console.Write ($(m.Groups[4].ToString () : string)) ]> :: res;

      m = m.NextMatch ();
    };

    <[ {.. $(List.Rev (res)) } ]>
  }

/*
    macro sscanf (..)
    {
      match (get_params (args)) {
        | valstr :: <[ $(format : string) ]> :: parms =>
          def make_expressions (toks, parms, acc) {
            match ((toks, parms)) {
              | ([], []) => acc
              | (Text (t) :: xs, _) => 
                make_expressions (xs, parms, 
                  <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

              | (TextNewline (t) :: xs, _) => 
                make_expressions (xs, parms, 
                  <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

              | (Number :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p = Nemerle.Input.ReadInt () ]> :: acc)

              | (NumberFloat :: _, _) =>
                Util.ice ("scanning floats not supported")

              | (Str :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p = Nemerle.Input.ReadString () ]> :: acc)

              | (Chr :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p = Char.ToChar (Console.Read ()) ]> :: acc)

              | (_, _ :: _) =>
                Message.error ("too many arguments for sscanf macro");
                acc
              | (_ :: _, _) =>
                Message.error ("not enough arguments for sscanf macro");
                acc
            }
          };
          
          def seq = <[ def _N_sscanf_str = $valstr ]> ::
                    <[ mutable _N_sscanf_pos = 0 ]> ::
                    <[ def _N_sscanf_len = _N_sscanf_str.Length ]> ::
                    <[ Nemerle.Input.EatWhiteSpace () ]> ::
            make_expressions (parse_format (format), List.Rev (parms), []);
          <[ {.. $seq } ]>
        | _ => 
          Message.fatal_error ("sscanf macro expects string and formating " +
                               "string as first arguments")
      }
    }
  }
*/
}
}

namespace Nemerle.Text {

  /** translation of match on regular expressions to operations on .Net
      regular expressions and its Groups, which allows short and simple
      extraction of regular subpatterns.
      Syntax of this macro is like in following example:
      <code>
        regexp match (str) {
          | "a+.*" => printf ("a\n");
          | @"(?<num : int>\d+)-\w+" => printf ("%d\n", num + 3);
          | "(?<name>(Ala|Kasia))? ma kota" =>
            match (name) {
              | Some (n) => printf ("%s\n", n)
              | None => printf ("noname?\n")
            }
          | _ => printf ("default\n");
        }
      </code>
  */
  macro @regexp (mat)
  syntax ("regexp", mat) 
  {
    /// syntax is [regexp match { .. }], so [mat] must be [match]
    match (mat) {
      | <[ match ($val) { ..$cases } ]> =>
        // final pattern of regular expression for builded match
        mutable pat = Text.StringBuilder ();
        // names of created groups of final regular expression, names
        // of existing named groups in patterns and associated expressions
        // to execute 
        mutable alternatives = [];
        // variable used for valid creation of alternatives [(..)|(..)|(..)] 
        mutable first = true;
        // default matching case if occurred
        mutable default = None ();

        // walks through cases of given match and builds final regular
        // expression in [pat] and stores group names and related expressions
        // to [alternatives]
        def create_regpattern (cass : list <PT.Match_case>) {
          mutable patnames = [];

          // walks thorough guards of single case, collecting names
          // for each created group of regular expression and storing
          // names of existing group names inside in [patnames]
          def walk_guards (gs, acc) {
            match (gs) {
              | <[ caseguard: $(str : string) ]> :: xs =>
                // take names of named groups
                def namesreg = Regex (@"\(\?\<(\w+)\s*(:\s*((\w|\.)+))?");
                mutable m = namesreg.Match (str); 
                // find all occurrenceces of existing gropus inside
                while (m.Success) {
                  mutable end = false;
                  mutable paren = 0;
                  mutable optional = false;
                  // check if this group is optional (it's context information)
                  // so we must count [(] and [)]
                  for (mutable i = m.Index; !end && i < str.Length; ++i) {
                    match (str[i]) {
                      | '(' => paren = paren + 1
                      | ')' => 
                        paren = paren - 1;
                        when (paren == 0 && i + 1 < str.Length && str[i + 1] == '?') {
                          end = true;
                          optional = true;
                        }
                      | _ => ()
                    }
                  };

                  // store this existing named group with its name, information 
                  // if it's optional and name of its enforced type  
                  // - [(?<name : type>..)?]
                  match ((m.Groups[1].Success, m.Groups[3].Success)) {
                    | (true, false) =>
                      patnames = (m.Groups[1].ToString (), optional, 
                                   None ()) :: patnames
                    | (true, true) =>
                      patnames = (m.Groups[1].ToString (), optional,
                                   Some (m.Groups[3].ToString ())) :: patnames;
                    | _ => ()
                  };
                  m = m.NextMatch ();
                };
                def nsymb = Macros.NewSymbol ();
                // add | if it is not first alternative in our pattern
                unless (first) pat = pat.Append ("|");
                first = false;
                def newstr = namesreg.Replace (str, "(?<$1");
                // add current alternative to our pattern
                pat = pat.Append("(?<" + nsymb.GetHead () + ">^" + newstr + "$)");
                walk_guards (xs, nsymb.GetHead () :: acc)

              | [] => acc

              | <[ caseguard: $(_) when $(_) ]> :: _ =>
                Message.fatal_error ("guarded pattern not allowed in regexp macro")
              | _ :: _ =>
                Message.fatal_error ("only string patterns allowed in regexp macro")
            }
          };
          match (cass) {
            // default case it special and we must store it
            | [ <[ case: _ => $expr ]> ] => default = Some (expr)

            | <[ case: | ..$guards => $expr ]> :: xs =>
              alternatives = (walk_guards (guards, []), patnames, expr) 
                              :: alternatives;
              create_regpattern (xs)

            | [] => ()
          }
        };
        create_regpattern (cases);

        // build decision tree, which checks created groups one by one and if
        // some has matched executes corresponding expression
        def build_checking (cass) {
          // build || condition for patterns from one case in initial matching
          def build_alts (alts) {
            match (alts) {
              | [str] => 
                <[ matchobj.Groups[$(str : string)].Success ]>
              | x::xs =>
                <[ 
                  matchobj.Groups[$(x : string)].Success || 
                  $(build_alts (xs)) 
                ]>
                  
              | [] => Message.fatal_error ("empty list of guards?")
            }
          };
          // build expressions containing values of existing named groups
          // converting their type (parsing them from string) if needed
          def build_bindings (patnames, acc) {
            match (patnames) {
              | (name, opt, choosen_type) :: xs =>
                def strin = 
                  <[ matchobj.Groups[$(name : string)].ToString () ]>;
                def value =
                  match (choosen_type) {
                    | None => strin
                    | Some (t) =>
                      <[ $(Nemerle.Macros.Symbol ((t : string)) : name).Parse ($strin) ]>
                  };
                def name_symbol = Macros.UseSiteSymbol (name);
                def binding =
                  if (opt) 
                    <[ 
                      def $(name_symbol : name) = 
                        match (matchobj.Groups[$(name : string)].Success) {
                          | true => Some ($value) | _ => None ()
                        }
                    ]>
                  else
                    <[ def $(name_symbol : name) = $value ]>;
                build_bindings (xs, binding :: acc);
                
              | [] => acc
            }
          };
          match (cass) {
            // creates entire expression checking if one case have succeeded
            | (grds, patnames, expr) :: xs =>
              <[ 
                match ($(build_alts (grds))) { 
                  | true => {
                    .. $(List.Append (build_bindings (patnames, []), [expr])) 
                  }
                  | _ => $(build_checking (xs)) 
                }
              ]>
            
            | [] => <[ throw MatchFailureException () ]>
          }
        };
        //
        def defexpr = 
          match (default) {
            | None =>
              Message.warning ("this pattern might be not exhaustive");
              <[ () ]>
            | Some (defexpr) => defexpr
          };              

        // generation of final code for building regular expression and
        // extracting its groups
        <[ 
          def regobj = Regex ($(pat.ToString () : string), 
                              RegexOptions.ExplicitCapture);

          def matchobj = regobj.Match ($val);

          match (matchobj.Success) {
            | true => $(build_checking (alternatives))
            | _ => $defexpr 
          }
        ]>
      | _ =>
        Message.fatal_error ("regexp macro expects match construct")
    }
  }
}
