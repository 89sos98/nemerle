using System;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    public class SourceCollection
    {
      public Engine : Engine
      {
        mutable _engine : Engine;
        get         { ManagerClass.Instance = _engine; _engine; }
        private set { _engine = value }
      }

      internal this (engine : Engine)
      {
        Engine  = engine;
        _sources = Hashtable();
      }
      
      private mutable _sources     : Hashtable[string, string];
      private         _fileIndices : SCG.List[int] = SCG.List();

      public GetFileIndices() : array[int]
      {
        _fileIndices.ToArray();
      }

      public AddOrUpdate (file : string, content : string) : void
      {
        when (!ContainsKey(file))
        {
          _fileIndices.Add(Location.GetFileIndex(file));
          Engine.ResetNamespaceTree();
        }

        _sources[file] = content;
      }
      
      public Remove (file : string) : void
      {
        // K-Liss: sometimes file may not be present in _fileIndices
        // for example, when trying to delete file that is missing on disk.
        def fileIndex = Location.GetFileIndex(file);
        when(_fileIndices.Contains(fileIndex))
        {
          assert(_fileIndices.Remove(fileIndex));
        }
        _sources.Remove(file);
        Engine.ResetNamespaceTree();
      }

      public Clear () : void
      {
        _sources.Clear();
        Engine.ResetNamespaceTree();
      }

      public ContainsKey (file : string) : bool { _sources.ContainsKey (file) }

      public GetKeys () : System.Collections.Generic.IEnumerable[string]
      {
        _sources.Keys
      }

      public Item[filePath : string] : string
      {
        get { _sources[filePath] }
      }
      
      public Item[fileIndex : int] : string
      {
        get { _sources[Location.GetFileName(fileIndex)] }
      }
   

      public Count : int { get { _sources.Count } }
    }
  }
} // end namespace

