using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  [PegGrammar(
    start,
    grammar
    {
      #region Primitives

      any                     = ['\u0000'..'\uFFFF'];

      newLine = "\n"
              / "\r"
              / "\r\n"
              / "\u2028"    /*  line separator       */
              / "\u2029";   /*  paragraph separator  */

      whitespace = [Zs]
                / '\t'
                / '\v'        /*  vertial tab          */
                / '\f';       /*  form feed            */

      s = whitespace*;

      #endregion

      #region Strings

      delimitedStringLiteral    = "\"" delimitedStringCharacter* "\"";
      delimitedStringCharacter  = "\\\""
                                / !(newLine / "\"") any;

      verbatimStringLiteral     = "@\"" verbatimStringCharacter* "\"";
      verbatimStringCharacter   = "\"\""
                                / !"\"" any;

      stringLiteral = delimitedStringLiteral / verbatimStringLiteral;

      #endregion

      #region Comments

      singleLineComment         = "//" (!newLine any)*;
      delimitedComment          = "/*" (!"*/" any)* "*/";
      comment : PreParseElement = singleLineComment / delimitedComment;

      #endregion

      #region Directives

      expression = (!(newLine / comment) any)*;
      message = (!(newLine / comment) any)*;

      ifDirective         : Directive = "if" expression;
      elifDirective       : Directive = "elif" expression;
      elseDirective       : Directive = "else" message;
      endifDirective      : Directive = "endif" message;
      defineDirective     : Directive = "define" expression;
      undefDirective      : Directive = "undef" expression;
      lineDirective       : Directive = "line" expression;
      errorDirective      : Directive = "error" message;
      warningDirective    : Directive = "warning" message;
      regionDirective     : Directive = "region" message;
      endregionDirective  : Directive = "endregion" message;
      invalidDirective    : Directive = message;

      directive             : PreParseElement = s"#"s (ifDirective
                                                      / elifDirective
                                                      / elseDirective
                                                      / endifDirective
                                                      / defineDirective
                                                      / undefDirective
                                                      / lineDirective
                                                      / errorDirective
                                                      / warningDirective
                                                      / regionDirective
                                                      / endregionDirective
                                                      / invalidDirective);

      //[DisableLocationTracking]
      directiveFromNewLine  : PreParseElement = newLine directive;

      #endregion

      #region Top rules

      rawText = (!(comment / directiveFromNewLine / stringLiteral) any)+ / stringLiteral;

      //[DisableLocationTracking]
      element : PreParseElement         = rawText* (directiveFromNewLine / comment);

      start   : PreparedCompilationUnit = directive? element* rawText* !any;

      #endregion
    }
  )]
  public partial class PreParser
  {
    //comment           : PreParseElement = singleLineComment / delimitedComment;
    comment(c : NToken) : PreParseElement
    {
      PreParseElement.Comment(GetText(c))
    }

    //ifDirective         : Directive = "if" expression;
    ifDirective(_ : NToken, expression : NToken) : Directive
    {
      Directive.If(expression)
    }

    //elifDirective       : Directive = "elif" expression;
    elifDirective(_ : NToken, expression : NToken) : Directive
    {
      Directive.Elif(expression)
    }

    //elseDirective       : Directive = "else" message;
    elseDirective(_ : NToken, _ : NToken) : Directive
    {
      Directive.Else()
    }

    //endifDirective      : Directive = "endif" message;
    endifDirective(_ : NToken, _ : NToken) : Directive
    {
      Directive.EndIf()
    }

    //defineDirective     : Directive = "define" expression;
    defineDirective(_ : NToken, expression : NToken) : Directive
    {
      Directive.Define(expression)
    }

    //undefDirective      : Directive = "undef" expression;
    undefDirective(_ : NToken, expression : NToken) : Directive
    {
      Directive.Undefine(expression)
    }

    //lineDirective       : Directive = "line" expression;
    lineDirective(_ : NToken, expression : NToken) : Directive
    {
      Directive.Line(expression)
    }

    //errorDirective      : Directive = "error" message;
    errorDirective(_ : NToken, message : NToken) : Directive
    {
      Directive.CompilationError(GetText(message))
    }

    //warningDirective    : Directive = "warning" message;
    warningDirective(_ : NToken, message : NToken) : Directive
    {
      Directive.CompilationWarning(GetText(message))
    }

    //regionDirective     : Directive = "region" message;
    regionDirective(_ : NToken, message : NToken) : Directive
    {
      Directive.Region(GetText(message))
    }

    //endregionDirective  : Directive = "endregion" message;
    endregionDirective(_ : NToken, _ : NToken) : Directive
    {
      Directive.EndRegion()
    }

    //invalidDirective    : Directive = message;
    invalidDirective(text : NToken) : Directive
    {
      Directive.Error("unknown directive: " + GetText(text))
    }

    //directive             : PreParseElement = s"#"s (ifDirective
    //                                                / elifDirective
    //                                                / elseDirective
    //                                                / endifDirective
    //                                                / defineDirective
    //                                                / undefDirective
    //                                                / lineDirective
    //                                                / errorDirective
    //                                                / warningDirective
    //                                                / regionDirective
    //                                                / endregionDirective
    //                                                / invalidDirective);
    directive(_       : NToken,
              _sharp  : NToken,
              _       : NToken,
              opt     : Directive) : PreParseElement
    {
      PreParseElement.Directive(opt)
    }

    //element : PreParseElement = rawText* (directiveFromNewLine / comment);
    element(_ : NToken, opt : PreParseElement) : PreParseElement
    {
      opt
    }

    //directiveFromNewLine  : PreParseElement = newLine directive;
    directiveFromNewLine(_ : NToken, directive : PreParseElement) : PreParseElement
    {
      directive
    }

    //start   : PreparedCompilationUnit = directive? element* rawText* !any;
    start(firstLineDirective  : option[PreParseElement],
          elements            : SCG.List[PreParseElement],
          _                   : NToken) : PreparedCompilationUnit
    {
      PreparedCompilationUnit(match(firstLineDirective)
      {
        | Some(first) => first :: elements.ToList()
        | _ => elements.ToList()
      })
    }
  }
}