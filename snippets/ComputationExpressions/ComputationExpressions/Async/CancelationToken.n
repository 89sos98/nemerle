using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions.Async
{
  public class CancelationToken
  {
    private syncroot : object = object();
    private jobs : List[WeakReference] = List();
    internal Register(job : AsyncJobBase) : void
    {
      lock (syncroot)
      {
        jobs.Add(WeakReference(job));
      }
    }

    public Cancel() : void
    {
      lock (syncroot)
      {
        def aggregateException = AysncAggregateException();
        foreach (job in jobs)
        {
          def job = job.Target :> AsyncJobBase;
          when (job != null)
            try
            {
              job.Cancel();
            }
            catch
            {
              | ex => aggregateException.Add(ex);
            }
        }
        jobs.Clear();
        aggregateException.ThrowIfAny();
      }
    }
  }
}
