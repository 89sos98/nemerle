
using Nemerle.Collections;
using Nemerle.IO;


module TestCollections
{
  print_sorted (l : list <string>) : void {
    def sorted = List.Sort (l, fun (x, y) { string.CompareOrdinal (x, y) });
    List.Iter (sorted, fun (x) { printf ("%s", x) });
  }
  
  test_hashtables (seed : int) : void
  {
    printf ("----------------\nTesting hashtables...\n");
    
    def ht = Hashtable (seed);

    ht [10] = Some ("Ala");
    ht [20] = Some ("ma");
    ht [30] = Some ("kota");

    def cl = ht.Clone ();

    ht.Clear ();

    mutable output = [];
    cl.Iter (fun (i : int, s : string) { output = sprintf ("[%i : %s] ", i, s) :: output; });
    print_sorted (output);

    printf ("total: %i elements\n", cl.Count);

    output = cl.Fold ([], fun (_, s : string, a) { s + " " :: a });
    printf ("folded: ");    
    print_sorted (output);
    printf ("\n");

    def mapped = cl.Map (fun (i : int, s : string) { (i + s.Length, "`" + s + "'") });

    output = [];
    mapped.Iter (fun (i : int, s : string) { output = sprintf ("[%i : %s] ", i, s) :: output });
    print_sorted (output);    

    printf ("\nremoved 13: ");
    
    mapped.Remove (13);

    output = [];    
    mapped.Iter (fun (i : int, s : string) { output = sprintf ("[%i : %s] ", i, s) :: output });
    print_sorted (output);    

    mapped.Set (13, "Bumtarara");

    printf ("\nset 13: ");
    
    match (mapped.Get (13)) {
      | Some => printf ("Bumtarara!\n")
      | _ => printf ("bad!\n")
    }
    
    match (mapped.Get (14)) {
      | Some => printf ("bad!\n")
      | _ => printf ("LO XIV glosno spiewa...\n")
    }

    when (!mapped.ContainsKey (13))
      printf ("bad!\n");

    when (mapped.ContainsKey (14))
      printf ("bad!\n");
      
    when (!mapped.ContainsValue ("`ma'"))
      printf ("bad!\n");
      
    when (mapped.ContainsValue ("matryca"))
      printf ("bad!\n");

    mapped.Clear ();

    printf ("After clearing: %i elements left\n", mapped.Count);

    try {
      mapped.Add (13, "lyzeczka!");
      mapped.Add (13, "bach!");
      mapped.Add (13, "dedelec!");
      mapped.Add (13, "bach!");
      printf ("bad!\n")
    }
    catch {
      _ : System.Exception => printf ("Good, can't add more than once!\n")
    }
  }

  
  test_linked_lists (seed : int) : void
  {
    printf ("----------------\nTesting linked lists...\n");

    // FIXME
    ignore (seed)
  }

  
  test_stacks (seed : int) : void
  {
    printf ("----------------\nTesting stacks...\n");

    // FIXME
    ignore (seed)
  }

  
  test_queues (seed : int) : void
  {
    printf ("----------------\nTesting queues...\n");

    // FIXME
    ignore (seed)
  }

  
  test_red_black_trees (seed : int) : void
  {
    printf ("----------------\nTesting red-black trees...\n");

    // FIXME
    ignore (seed)
  }

  
  test_heaps (seed : int) : void
  {
    printf ("----------------\nTesting heaps...\n");
    
    // FIXME
    ignore (seed)
  }

  
  Main () : void
  {
    test_hashtables (10);
    test_linked_lists (20);
    test_stacks (30);
    test_queues (50);
    test_red_black_trees (80);
    test_heaps (130);
  }
}


/*
BEGIN-OUTPUT
----------------
Testing hashtables...
[10 : Ala] [20 : ma] [30 : kota] total: 3 elements
folded: Ala kota ma
[13 : `Ala'] [22 : `ma'] [34 : `kota']
removed 13: [22 : `ma'] [34 : `kota']
set 13: Bumtarara!
LO XIV glosno spiewa...
After clearing: 0 elements left
Good, can't add more than once!
----------------
Testing linked lists...
----------------
Testing stacks...
----------------
Testing queues...
----------------
Testing red-black trees...
----------------
Testing heaps...
END-OUTPUT
*/
