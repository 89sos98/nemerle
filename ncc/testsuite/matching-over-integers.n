
module M {

  method_a (parm : int) : int {
    match (parm) {
      | 5281 => 1   
      | 5297 => 7     
      | 5303 => 3   
      | 5309 => 9            
      | 5323 => 3           
      | 5333 => 3
      | 5347 => 7
      | 5351 => 1
      | 5381 => 1
      | 5387 => 7   
      | 5393 => 3
      | 5399 => 9
      | 5407 => 7
      | 5413 => 3
      | 5417 => 7
      | 5419 => 9
      | 5431 => 1
      | 5437 => 7
      | 5441 => 1
      | 5443 => 3   
      | 5449 => 9
      | 5471 => 1
      | 5477 => 7
      | 5479 => 9
      | 5483 => 3
      | 5501 => 1
      | 5503 => 3
      | 5507 => 7
      | 5519 => 9
      | 5521 => 1   
      | 5527 => 7
      | 5531 => 1
      | 5557 => 7
      | 5563 => 3
      | 5569 => 9
      | 5573 => 3
      | 5581 => 1
      | 5591 => 1
      | 5623 => 3
      | 5639 => 9
      | 5641 => 1
      | 5647 => 7
      | 5651 => 1
      | 5653 => 3
      | 5657 => 7
      | 5659 => 9
      | 5669 => 9
      | 5683 => 3
      | 5689 => 9
      | 5693 => 3   
      | 5701 => 1
      | 5711 => 1
      | 5717 => 7
      | 5737 => 7
      | 5741 => 1
      | 5743 => 3
      | 5749 => 9
      | 5779 => 9
      | 5783 => 3
      | 5791 => 1   
      | 5801 => 1
      | 5807 => 7
      | 5813 => 3
      | 5821 => 1
      | 5827 => 7
      | 5839 => 9
      | 5843 => 3
      | 5849 => 9
      | 5851 => 1
      | 5857 => 7   
      | 5861 => 1
      | 5867 => 7
      | 5869 => 9
      | 5879 => 9
      | 5881 => 1
      | 5897 => 7
      | 5903 => 3
      | 5923 => 3
      | 5927 => 7
      | 5939 => 9   
      | 5953 => 3
      | 5981 => 1
      | 5987 => 7
      | 6007 => 7
      | 6011 => 1
      | 6029 => 9
      | 6037 => 7
      | 6043 => 3
      | 6047 => 7
      | 6053 => 3   
      | 6067 => 7
      | 6073 => 3
      | 6079 => 9
      | 6089 => 9
      | 6091 => 1
      | 6101 => 1
      | 6113 => 3
      | 6121 => 1
      | 6131 => 1
      | 6133 => 3   
      | 6143 => 3
      | 6151 => 1
      | 6163 => 3
      | 6173 => 3
      | 6197 => 7
      | 6199 => 9
      | 6203 => 3
      | 6211 => 1
      | 6217 => 7
      | 6221 => 1   
      | 6229 => 9
      | 6247 => 7
      | 6257 => 7
      | 6263 => 3
      | 6269 => 9
      | 6271 => 1
      | 6277 => 7
      | 6287 => 7
      | 6299 => 9
      | 6301 => 1   
      | 6311 => 1
      | 6317 => 7
      | 6323 => 3
      | 6329 => 9
      | 6337 => 7
      | 6343 => 3
      | 6353 => 3
      | 6359 => 9
      | 6361 => 1
      | 6367 => 7   
      | 6373 => 3
      | 6379 => 9
      | 6389 => 9
      | 6397 => 7
      | 6421 => 1
      | 6427 => 7
      | 6449 => 9
      | 6451 => 1
      | 6469 => 9
      | 6473 => 3   
      | 6481 => 1
      | 6491 => 1
      | 6521 => 1
      | 6529 => 9
      | 6547 => 7
      | 6551 => 1
      | 6553 => 3
      | 6563 => 3
      | 6569 => 9
      | 6571 => 1
      | 6577 => 7
      | 6581 => 1
      | 6599 => 9
      | 6607 => 7
      | 6619 => 9
      | 6637 => 7
      | 6653 => 3
      | 6659 => 9
      | 6661 => 1
      | 6673 => 3   
      | 6679 => 9
      | 6689 => 9
      | 6691 => 1
      | 6701 => 1
      | 6703 => 3
      | 6709 => 9
      | 6719 => 9
      | 6733 => 3
      | 6737 => 7
      | 6761 => 1
      | 6763 => 3
      | 6779 => 9
      | 6781 => 1
      | 6791 => 1
      | 6793 => 3
      | 6803 => 3
      | 6823 => 3
      | 6827 => 7
      | 6829 => 9
      | 6833 => 3   
      | 6841 => 1
      | 6857 => 7
      | 6863 => 3
      | 6869 => 9
      | 6871 => 1
      | 6883 => 3
      | 6899 => 9
      | 6907 => 7
      | 6911 => 1
      | 6917 => 7   
      | 6947 => 7
      | 6949 => 9
      | 6959 => 9
      | 6961 => 1
      | 6967 => 7
      | 6971 => 1
      | 6977 => 7
      | 6983 => 3
      | 6991 => 1
      | 6997 => 7   
      | 7001 => 1
      | 7013 => 3
      | 7019 => 9
      | 7027 => 7
      | 7039 => 9
      | 7043 => 3
      | 7057 => 7
      | 7069 => 9
      | 7079 => 9
      | 7103 => 3   
      | 7109 => 9
      | 7121 => 1
      | 7127 => 7
      | 7129 => 9
      | 7151 => 1
      | 7159 => 9
      | 7177 => 7
      | 7187 => 7
      | 7193 => 3
      | 7207 => 7
      | 7211 => 1
      | 7213 => 3
      | 7219 => 9
      | 7229 => 9
      | 7237 => 7
      | 7243 => 3
      | 7247 => 7
      | 7253 => 3
      | 7283 => 3
      | 7297 => 7   
      | 7307 => 7
      | 7309 => 9
      | 7321 => 1
      | 7331 => 1
      | 7333 => 3
      | 7349 => 9
      | 7351 => 1
      | 7369 => 9
      | 7393 => 3
      | 7411 => 1   
      | 7417 => 7
      | 7433 => 3
      | 7451 => 1
      | 7457 => 7
      | 7459 => 9
      | 7477 => 7
      | 7481 => 1
      | 7487 => 7
      | 7489 => 9
      | 7499 => 9   
      | 7507 => 7
      | 7517 => 7
      | 7523 => 3
      | 7529 => 9
      | 7537 => 7
      | 7541 => 1
      | 7547 => 7
      | 7549 => 9
      | 7559 => 9
      | 7561 => 1   
      | 7573 => 3
      | 7577 => 7
      | 7583 => 3
      | 7589 => 9
      | 7591 => 1
      | 7603 => 3
      | 7607 => 7
      | 7621 => 1
      | 7639 => 9
      | 7643 => 3   
      | 7649 => 9
      | 7669 => 9
      | 7673 => 3
      | 7681 => 1
      | 7687 => 7
      | 7691 => 1
      | 7699 => 9
      | 7703 => 3
      | 7717 => 7
      | 7723 => 3   
      | 7727 => 7
      | 7741 => 1
      | 7753 => 3
      | 7757 => 7
      | 7759 => 9
      | 7789 => 9
      | 7793 => 3
      | 7817 => 7
      | 7823 => 3
      | 7829 => 9   
      | 7841 => 1
      | 7853 => 3
      | 7867 => 7
      | 7873 => 3
      | 7877 => 7
      | 7879 => 9
      | 7883 => 3
      | 7901 => 1
      | 7907 => 7
      | 7919 => 9
      | 0 => 0
      | 1 => 1
      | 2 => 2
      | 3 => 3
      | 4 => 4
      | 5 => 5
      | 6 => 6
      | 7 => 7
      | 8 => 8
      | 9 => 9
      | 10 => 0
      | 11 => 1
      | 12 => 2
      | 7813 => 3
      | 14 => 4
      | 15 => 5
      | 24216 => 6
      | 17 => 7
      | 18 => 8
      | 4219 => 9
      | 120 => 0
      | 21 => 1
      | 22 => 2
      | 2423443 => 3
      | 24 => 4
      | 25 => 5
      | 26 => 6
      | 427 => 7
      | 28 => 8
      | 29 => 9
      | 30 => 0
      | 32131 => 1
      | 32 => 2
      | 33 => 3
      | 4234 => 4
      | 35 => 5
      | 316 => 6
      | 37 => 7
      | 1238 => 8
      | 39 => 9
      | 43240 => 0
      | 41 => 1
      | 42 => 2
      | 43 => 3
      | 244 => 4
      | 45 => 5
      | 92346 => 6
      | 47 => 7
      | 48 => 8
      | 2349 => 9
      | 50 => 0
      | 93451 => 1
      | 52 => 2
      | 89453 => 3
      | 54 => 4
      | 55 => 5
      | 56 => 6
      | 557 => 7
      | 58 => 8
      | 24259 => 9
      | 60 => 0
      | 461 => 1
      | 62 => 2
      | 643 => 3
      | 234264 => 4
      | 65 => 5
      | 44266 => 6
      | 67 => 7
      | 68 => 8
      | 243869 => 9
      | 70 => 0
      | 9271 => 1
      | 72 => 2
      | 673 => 3
      | 74 => 4
      | 75 => 5
      | 9276 => 6
      | 77 => 7
      | 924378 => 8
      | 79 => 9
      | 80 => 0
      | 481 => 1
      | 82 => 2
      | 93483 => 3
      | 84 => 4
      | 85 => 5
      | 786 => 6
      | 87 => 7
      | 88 => 8
      | 42389 => 9
      | 90 => 0
      | 4291 => 1
      | 92 => 2
      | 932393 => 3
      | 94 => 4
      | 32495 => 5
      | 96 => 6
      | 9297 => 7
      | 898 => 8
      | 99 => 9
      | _ => parm % 10
    }
  }

  run_method_a (counter : int) : void {
    when (counter > 0) {
      def x = method_a (counter % 10000);
      if (x != counter % 10)
        System.Console.WriteLine ("failed on {0} (had {1}, expected {2})", counter, x, counter % 10)
      else
        run_method_a (counter - 1)
    }  
  }

  /* test case for pattern overriding */
  method_b (parm : int, phaser : int) : int {
    match (parm) {
      | 42 when phaser % 4 == 0 => 0
      | 42 when phaser % 4 == 1 => 1
      | 42 => 2 // W: this pattern overrides pattern:
      | 42 => 3 // W: pattern is redundant
      | 42 when phaser % 4 == 2 => 4 // W: pattern is redundant
      | 42 => 5 // W: pattern is redundant
      | _ when parm == 123 => 13
      | 42 => 6 // W: pattern is redundant
      | 42 => 7 // W: pattern is redundant
      | 42 when parm == 44 => 8 // W: pattern is redundant
      | 42 => 9 // W: pattern is redundant
      | 69 => 10
      | 123 => 11
      | x when x > 300 && x < 310 => 12
      | _ => -1
    }
  }

  /* test case for no literal patterns */
  method_c (parm : int, _phaser : int) : int {
    match (parm) {
      | x when x == 42 => 0
      | _ => 1
    }
  }

  /* test case for non-value result types */
  method_d (parm : int) : option <int> {
    match (parm) {
      | 42 => Some (42)
      | _ => None ()
    }
  }

  /* test case for the switch instruction generator */
  method_e (parm : int) : option <int> {
    match (parm) {
      | 40 => None ()
      | 41 => None ()
      | 42 => Some (42)
      | 43 => None ()
      | 44 => None ()
      | _ => None ()
    }
  }



  Main () : void 
  {
    run_method_a (2000);

    def run_method (method : int * int -> int) : void {

      printf ("%d\n", method ( 42, 0));
      printf ("%d\n", method ( 42, 1));
      printf ("%d\n", method ( 42, 2));
      printf ("%d\n", method ( 42, 3));
      printf ("%d\n", method ( 69, 0));
      printf ("%d\n", method (123, 0));
      printf ("%d\n", method (303, 0));
      printf ("%d\n", method (321, 0));
      printf ("---\n")
    };

    def methods = [method_b, method_c];

    Nemerle.Collections.List.Iter (methods, run_method);

    if (Option.IsSome (method_d (42))) printf ("method_d OK\n")
    else printf ("method_d FAILED\n");

    if (Option.IsSome (method_e (42))) printf ("method_e OK\n")
    else printf ("method_e FAILED\n");

    printf ("---\n")
  }
}

/*
BEGIN-OUTPUT
0
1
2
2
10
13
12
-1
---
0
0
0
0
1
1
1
1
---
method_d OK
method_e OK
---
END-OUTPUT
*/
