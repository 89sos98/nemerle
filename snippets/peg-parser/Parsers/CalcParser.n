using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using LRPEGCC;

namespace Parsers
{
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {  
    any                    = ['\u0000'..'\uFFFF'];
    digit                  = ['0'..'9']+;
    spaces                 = ' '*;
    
    mulOp                  = '*';
    divOp                  = '/';
    sumOp                  = '+';
    subOp                  = '-';    
    leftBrace              = '(';  
    rightBrace             = ')';    
    
    num             : int = digit + spaces;
    unaryMinus      : int = subOp spaces simplExpr;
    parenthesesExpr : int = leftBrace spaces sumOrSub rightBrace spaces;
    simplExpr       : int = num / parenthesesExpr / unaryMinus;
    mulOrDiv        : int = simplExpr ((mulOp / divOp) spaces simplExpr)*;
    sumOrSub        : int = mulOrDiv  ((sumOp / subOp) spaces mulOrDiv )*;
    start           : int = spaces sumOrSub !any;
  })]
  public class CalcParser : ParserBase[int]
  {  
    public this(text : string)
    {
        base(text);
    }
           
    private DoOperation(nonTerminalSymbols : list[int], terminalSymbols : list[string]) : int
    { 
      def doOp(x : int, y : int, op : string) : int
      {
        match(op)
        {
          | ("*") => x * y
          | ("/") => x / y
          | ("+") => x + y
          | ("-") => x - y
        }
      }
           
      mutable r = nonTerminalSymbols.Nth(0);
      for(mutable i = 0 ; i < terminalSymbols.Length; i+=2)
        r = doOp(r, nonTerminalSymbols.Nth(i/2 + 1), terminalSymbols.Nth(i));
    
      r   
    }
    
    protected override DoGenerateResult(ruleName : string, nonTerminalSymbols : list[int], terminalSymbols : list[string]) : int
    {
    // TODO: autogenerate this block (probably)
    | ("start", [nts], [])         
    | ("parenthesesExpr", [nts], [_,_,_,_])         
    | ("simplExpr", [nts], [])  => 
          nts
    // TODO: end todo
         
    | ("num", [], tss :: _)        =>
         int.Parse(tss)  
         
    | ("unaryMinus", _, _)      =>
         nonTerminalSymbols.Nth(0) * -1
         
    | ("mulOrDiv", [nts], [])        =>        
         nts
         
    | ("mulOrDiv", _, _)        =>        
         DoOperation(nonTerminalSymbols, terminalSymbols)
                  
    | ("sumOrSub", [nts], [])        =>  
         nts
         
    | ("sumOrSub", _, _)        =>  
         DoOperation(nonTerminalSymbols, terminalSymbols)                  
         
    |  _                        =>
         throw Exception("sds");
    }
  }
}
