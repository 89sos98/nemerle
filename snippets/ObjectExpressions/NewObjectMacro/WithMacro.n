using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;

// register @with operator
[assembly: Nemerle.Internal.OperatorAttribute ("Nemerle.Imperative", "with", false, 143, 142)]

namespace Nemerle.Imperative
{

  /// syntax is <[ obj with { Foo = bar; ... } ]>
  /// or <[ obj with ( Foo = bar, ... ) ]>
  /// or <[ obj with [ foo, bar, ... ] ]>
  public macro @with(obj, initializer)
  {
    WithMacroImpl.Run(obj, initializer);
  }
    
  internal module WithMacroImpl
  {
        
    public Run(obj : PExpr, initializer : PExpr) : PExpr
    {            
      def name = <[ $(Macros.NewSymbol("initializedObject") : name) ]>;
            
      def statements = MakeStatements(initializer, name);
            
      <[
        def $name = $obj;
        $(statements);
        $name
      ]>;
    }
         
    private MakeStatements(initializer : PExpr, name : PExpr) : PExpr.Sequence
    {
      def exprs = 
        match (initializer)
        {
          | <[ ( ..$xs ) ]>
          | <[ { ..$xs } ]> => MakePropertyInitializers(xs, name)
          | <[ [ ..$xs ] ]> => MakeCollectionInitializers(xs, name)
          | other => MakePropertyInitializers([other], name)           
        };
  
        <[ { ..$exprs } ]>
    }
        
    private MakePropertyInitializers(elements : list[PExpr], name : PExpr) : list[PExpr]
    {
      def createAssignment(elem)
      {
        // completion support
        | PExpr.ToComplete(n)
        | <[ $_op($(PExpr.ToComplete(n)), $_val) ]>
        | <[ $(PExpr.ToComplete(n)) =  $_val ]> => <[ $name.$(Splicable.HalfId(n.Location, n)) ]>
        | <[ $(prop : name) =    $val ]> => <[ $name.$(prop : name) =  $val ]>
        | <[ $(prop : name) +=   $val ]> => <[ $name.$(prop : name) += $val ]>
        | <[ $(prop : name) -=   $val ]> => <[ $name.$(prop : name) -= $val ]>
        | <[ $(prop : name) =>   $val ]> => <[ $name.$(prop : name) += (_) => $val ]>
        | <[ $(prop : name) ::=  $val ]> => <[ _ = $name.$(prop : name).AddRange($val) ]>
        | <[ $(prop : name) with $val ]> => MakeStatements(val, <[ $name.$(prop : name) ]>);
        | <[ _ = $(met : name) (..$parms) ]>    //todo allow return
        | <[     $(met : name) (..$parms) ]> => <[ _ = $name.$(met : name) (..$parms) ]>
        | _ =>
              //Diagnostics.Debugger.Break();
            Message.Error($"Unrecognized syntax $(elem.ToString()) for a property initializer."); 
            PExpr.Error()
      }
            
      def createLocatedAssignment(elem)
      {
        Util.locate(elem.Location, createAssignment(elem));
      }
            
      elements.Map(createLocatedAssignment)
    }
        
    private MakeCollectionInitializers(elements : list[PExpr], name : PExpr) : list[PExpr]
    {
      def createAssignment(elem)
      {
        | <[ $prop = $val ]> => <[ _ = $name.Add($prop, $val) ]> // works for some lists and most dictionaries
        | val => <[ _ = $name.Add($val) ]> // works on both lists and dictionaries (through tuples)
      }
            
      def createLocatedAssignment(elem)
      {
        Util.locate(elem.Location, createAssignment(elem));
      }
            
      elements.Map(createLocatedAssignment)
    }
  }
}
