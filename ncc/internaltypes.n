/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.IO;
using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;

namespace SR = System.Reflection;

namespace Nemerle.Compiler {

public module SystemType 
{
  public mutable Boolean : System.Type;
  public mutable Byte : System.Type;
  public mutable Char : System.Type;
  public mutable Decimal : System.Type;
  public mutable Double : System.Type;
  public mutable Enum : System.Type;
  public mutable FlagsAttribute : System.Type;
  public mutable Int16 : System.Type;
  public mutable Int32 : System.Type;
  public mutable Int64 : System.Type;
  public mutable IntPtr : System.Type;
  public mutable MulticastDelegate : System.Type;
  public mutable Object : System.Type;
  public mutable Reflection_AssemblyConfigurationAttribute : System.Type;
  public mutable Reflection_FieldInfo : System.Type;
  public mutable Reflection_PropertyInfo : System.Type;
  public mutable Runtime_CompilerServices_IsVolatile : System.Type;
  public mutable SByte : System.Type;
  public mutable Single : System.Type;
  public mutable String : System.Type;
  public mutable Type : System.Type;
  public mutable UInt16 : System.Type;
  public mutable UInt32 : System.Type;
  public mutable UInt64 : System.Type;
  public mutable Void : System.Type;

  public mutable Decimal_ctor : System.Reflection.ConstructorInfo;
  public mutable Type_GetTypeFromHandle : System.Reflection.MethodInfo;
  
  public NullMatchException : System.Type
  {
    get { InternalType.NullMatchException_tc.GetSystemType () }
  }
  
  public ContainsMacroAttribute : System.Type
  {
    get { InternalType.ContainsMacroAttribute_tc.GetSystemType () }
  }
  
  public TypeAttribute : System.Type
  {
    get { InternalType.TypeAttribute_tc.GetSystemType () }
  }
  
  public VariantAttribute : System.Type
  {
    get { InternalType.VariantAttribute_tc.GetSystemType () }
  }
  
  public VariantOptionAttribute : System.Type
  {
    get { InternalType.VariantOptionAttribute_tc.GetSystemType () }
  }

  public VolatileModifier : System.Type
  {
    get { InternalType.VolatileModifier_tc.GetSystemType () }
  }
  
  public ConstantVariantOptionAttribute : System.Type
  {
    get { InternalType.ConstantVariantOptionAttribute_tc.GetSystemType () }
  }
  
  public TypeAliasAttribute : System.Type
  {
    get { InternalType.TypeAliasAttribute_tc.GetSystemType () }
  }

  /**
   * Reflects a type using GlobalEnv
   */
  public Reflect (type_name : string) : System.Type
  {
    match (GlobalEnv.LookupSystemType (type_name)) {
      | Some (t) => t
      | _ =>
        Util.ice ("cannot reflect `" + type_name + "'")
    }
  }

  internal Init () : void
  {
    Boolean = Reflect ("System.Boolean");
    Byte = Reflect ("System.Byte");
    Char = Reflect ("System.Char");
    Decimal = Reflect ("System.Decimal");
    Double = Reflect ("System.Double");
    Enum = Reflect ("System.Enum");
    FlagsAttribute = Reflect ("System.FlagsAttribute");
    Int16 = Reflect ("System.Int16");
    Int32 = Reflect ("System.Int32");
    Int64 = Reflect ("System.Int64");
    IntPtr = Reflect ("System.IntPtr");
    MulticastDelegate = Reflect ("System.MulticastDelegate");
    Object = Reflect ("System.Object");
    Reflection_FieldInfo = Reflect ("System.Reflection.FieldInfo");
    Reflection_PropertyInfo = Reflect ("System.Reflection.PropertyInfo");
    Reflection_AssemblyConfigurationAttribute = Reflect ("System.Reflection.AssemblyConfigurationAttribute");
    Runtime_CompilerServices_IsVolatile = Reflect ("System.Runtime.CompilerServices.IsVolatile");
    SByte = Reflect ("System.SByte");
    Single = Reflect ("System.Single");
    String = Reflect ("System.String");
    SystemType.Type = Reflect ("System.Type");
    UInt16 = Reflect ("System.UInt16");
    UInt32 = Reflect ("System.UInt32");
    UInt64 = Reflect ("System.UInt64");
    Void = Reflect ("System.Void");

    {
      def decimal_ctors =
        SystemType.Decimal.GetConstructors ();

      foreach (decimal_ctor in decimal_ctors) {
        def parameters = (decimal_ctor :> System.Reflection.ConstructorInfo).GetParameters ();

        when (parameters.Length == 1) {
          def parameter_ty = parameters [0].ParameterType;

          when (parameter_ty.FullName == "System.Int32[]" &&
                parameter_ty.IsArray)
          {
            Decimal_ctor = (decimal_ctor :> System.Reflection.ConstructorInfo)
          }
        }
      }

      assert (Decimal_ctor != null)
    }
    
    Type_GetTypeFromHandle = SystemType.Type.GetMethod ("GetTypeFromHandle")
  }
}

public class TupleType 
{
  internal tycon : Tycon;
  internal fields : array <IField>;
  internal ctor : IMethod;

  public SystemType : System.Type
  {
    get { tycon.GetSystemType () }
  }

  public GetField (pos : int) : IField
  {
    fields [pos]
  }

  public Ctor : IMethod
  {
    get { ctor }
  }

  get_field (pos : int) : IField
  {
    match (tycon.LookupMember (sprintf ("field%d", pos))) {
      | [x] =>
        match (x.GetKind ()) {
          | MK_field (f) => f
          | _ => assert (false)
        }
      | _ => assert (false)
    }
  }

  internal this (size : int)
  {
    def name = ["Nemerle", "Internal", sprintf ("Tuple%d", size)];
    tycon = GlobalEnv.LookupInternalType (name);
    fields = array (size + 1);
    for (mutable i = 1; i <= size; ++i)
      fields [i] = get_field (i);
    match (tycon.LookupMember (".ctor")) {
      | [x] =>
        match (x.GetKind ()) {
          | MK_method (m) => ctor = m
          | _ => assert (false)
        }
      | _ => assert (false)
    }
  }
}

public class FunctionType {
  internal tycon : Tycon;
  internal apply : IMethod;

  public ApplyMethod : IMethod
  {
    get { apply }
  }

  public SystemType : System.Type
  {
    get { tycon.GetSystemType () }
  }

  internal this (size : int)
  {
     def name = ["Nemerle", "Internal", sprintf ("Func%d", size)];
     tycon = GlobalEnv.LookupInternalType (name);
     List.Iter (tycon.LookupMember ("apply"), fun (mem : IMember) {
       match (mem.GetKind ()) {
         | MK_method (meth) =>
           when (List.Length (meth.GetHeader ().parms) == size) {
             assert (apply == null);
             apply = meth
           }
         | _ => assert (false)
       }
     });
     assert (apply != null);
  }
}
  

public module InternalType
{
  public mutable Array_tc : Tycon;
  public mutable Attribute_tc : Tycon;
  public mutable Boolean_tc : Tycon;
  public mutable Byte_tc : Tycon;
  public mutable Char_tc : Tycon;
  public mutable Decimal_tc : Tycon;
  public mutable Delegate_tc : Tycon;
  public mutable Double_tc : Tycon;
  public mutable Enum_tc : Tycon;
  public mutable Exception_tc : Tycon;
  public mutable Int16_tc : Tycon;
  public mutable Int32_tc : Tycon;
  public mutable Int64_tc : Tycon;
  public mutable Object_tc : Tycon;
  public mutable SByte_tc : Tycon;
  public mutable Single_tc : Tycon;
  public mutable String_tc : Tycon;
  public mutable Type_tc : Tycon;
  public mutable UInt16_tc : Tycon;
  public mutable UInt32_tc : Tycon;
  public mutable UInt64_tc : Tycon;
  public mutable MatchFailureException_tc : Tycon;
  public mutable NullMatchException_tc : Tycon;
  public mutable ContainsMacroAttribute_tc : Tycon;
  public mutable TypeAttribute_tc : Tycon;
  public mutable VariantAttribute_tc : Tycon;
  public mutable TypeAliasAttribute_tc : Tycon;
  public mutable VariantOptionAttribute_tc : Tycon;
  public mutable VolatileModifier_tc : Tycon;
  public mutable ConstantVariantOptionAttribute_tc : Tycon;

  mutable function_types : array <FunctionType>;
  mutable tuple_types : array <TupleType>;

  public mutable Array : Type;
  public mutable Attribute : Type;
  public mutable Boolean : Type;
  public mutable Byte : Type;
  public mutable Char : Type;
  public mutable Decimal : Type;
  public mutable Delegate : Type;
  public mutable Double : Type;
  public mutable Enum : Type;
  public mutable Exception : Type;
  public mutable Int16 : Type;
  public mutable Int32 : Type;
  public mutable Int64 : Type;
  public mutable Object : Type;
  public mutable SByte : Type;
  public mutable Single : Type;
  public mutable String : Type;
  public mutable Type : Type;
  public mutable UInt16 : Type;
  public mutable UInt32 : Type;
  public mutable UInt64 : Type;
  public mutable MatchFailureException : Type;

  mutable f_MatchFailureException_ctor : SR.ConstructorInfo;
  public MatchFailureException_ctor : SR.ConstructorInfo
  {
    get {
      when (f_MatchFailureException_ctor == null)
        f_MatchFailureException_ctor = get_default_ctor (MatchFailureException_tc);
      f_MatchFailureException_ctor
    }
  }

  get_default_ctor (tc : Tycon) : SR.ConstructorInfo
  {
    match (tc.LookupMember (".ctor")) {
      | [x] =>
        match (x.GetKind ()) {
          | MK_method (m) => m.GetConstructorInfo ()
          | _ => assert (false)
        }
      | _ => assert (false)
    }
  }

  public GetFunctionType (len : int) : FunctionType
  {
    when (function_types [len] == null)
      function_types [len] = FunctionType (len);

    function_types [len]
  }

  public GetTupleType (len : int) : TupleType
  {
    when (tuple_types [len] == null)
      tuple_types [len] = TupleType (len);

    tuple_types [len]
  }


  lookup (type_name : string) : Tycon
  {
    match (GlobalEnv.LookupExactType (type_name)) {
      | Some (t) => t
      | None =>
        Util.ice ("internal type " + type_name + " not found")
    }
  }
    
  internal InitSystemTypes () : void
  {
    Array_tc = lookup ("System.Array"); Array = T_app (Array_tc, []);
    Attribute_tc = lookup ("System.Attribute"); Attribute = T_app (Attribute_tc, []);
    Boolean_tc = lookup ("System.Boolean"); Boolean = T_app (Boolean_tc, []);
    Byte_tc = lookup ("System.Byte"); Byte = T_app (Byte_tc, []);
    Char_tc = lookup ("System.Char"); Char = T_app (Char_tc, []);
    Decimal_tc = lookup ("System.Decimal"); Decimal = T_app (Decimal_tc, []);
    Delegate_tc = lookup ("System.Delegate"); Delegate = T_app (Delegate_tc, []);
    Double_tc = lookup ("System.Double"); Double = T_app (Double_tc, []);
    Enum_tc = lookup ("System.Enum"); Enum = T_app (Enum_tc, []);
    Exception_tc = lookup ("System.Exception"); Exception = T_app (Exception_tc, []);
    Int16_tc = lookup ("System.Int16"); Int16 = T_app (Int16_tc, []);
    Int32_tc = lookup ("System.Int32"); Int32 = T_app (Int32_tc, []);
    Int64_tc = lookup ("System.Int64"); Int64 = T_app (Int64_tc, []);
    Object_tc = lookup ("System.Object"); Object = T_app (Object_tc, []);
    SByte_tc = lookup ("System.SByte"); SByte = T_app (SByte_tc, []);
    Single_tc = lookup ("System.Single"); Single = T_app (Single_tc, []);
    String_tc = lookup ("System.String"); String = T_app (String_tc, []);
    Type_tc = lookup ("System.Type"); InternalType.Type = T_app (Type_tc, []);
    UInt16_tc = lookup ("System.UInt16"); UInt16 = T_app (UInt16_tc, []);
    UInt32_tc = lookup ("System.UInt32"); UInt32 = T_app (UInt32_tc, []);
    UInt64_tc = lookup ("System.UInt64"); UInt64 = T_app (UInt64_tc, []);
    
    function_types = array (20);
    tuple_types = array (20);
  }

  // to be called after scan_globals (think about compiling nemerle.dll)
  internal InitNemerleTypes () : void
  {
    InternalType.MatchFailureException_tc = lookup ("Nemerle.Core.MatchFailureException"); 
    InternalType.MatchFailureException = T_app (InternalType.MatchFailureException_tc, []);
    
    InternalType.NullMatchException_tc = lookup ("Nemerle.Core.NullMatchException"); 
    InternalType.ContainsMacroAttribute_tc = lookup ("Nemerle.Internal.ContainsMacroAttribute"); 
    InternalType.TypeAttribute_tc = lookup ("Nemerle.Internal.TypeAttribute"); 
    InternalType.VariantAttribute_tc = lookup ("Nemerle.Internal.VariantAttribute"); 
    InternalType.TypeAliasAttribute_tc = lookup ("Nemerle.Internal.TypeAliasAttribute"); 
    InternalType.VariantOptionAttribute_tc = lookup ("Nemerle.Internal.VariantOptionAttribute");
    InternalType.VolatileModifier_tc = lookup ("Nemerle.Internal.VolatileModifier");
    InternalType.ConstantVariantOptionAttribute_tc = lookup ("Nemerle.Internal.ConstantVariantOptionAttribute"); 
  }
}

} // end ns
