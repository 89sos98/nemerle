using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Macros;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using System.IO;
using System.Text;

namespace CSharpToNemerle
{
  public class CompilerHost : ManagerClass
  {
    public this()
    {
      base(CompilationOptions());
      InitCompiler();
      LoadExternalLibraries();
      Hierarchy = TypesManager(this)
    }
  }

  public class CSharpToNemerleConvert 
  {
    [Nemerle.InternalMacros.StaticInitializer(CompilerHost())]
    mutable compiler : ManagerClass;

    mutable idx : int;

    public this()
    {
    }

    public Convert(file : string, out_dir : string) : void 
    {
      def writer = LocatableTextWriter(StringBuilder());
      def parser = CSharpParser(compiler);
      def str = File.ReadAllText(file);
      def src = StringSource(idx, str);
      def res = parser.Parse(src);
      def file = Path.ChangeExtension(file, "n");
      def file = Path.Combine(TExpr.Delayed(delayed macro), file);
      DeclPrettyPrint.Print(res, writer, compiler);
      File.WriteAllText(file, writer.ToString());
      
      {
        [[Cache:idx]]
        ;
        [[CacheRef:idx]] = _N_op_Increment([[CacheRef:idx]])
      }
    }

    public PrintNFile(file : string, out_file : string) : void 
    {
      def writer = LocatableTextWriter(StringBuilder());
      def source = DefaultParser.ReadFile(file, true, false);
      def parser = DefaultParser(compiler);
      def res = parser.Parse(source);
      DeclPrettyPrint.Print(res, writer, compiler);
      File.WriteAllText(out_file, writer.ToString())
    }
  }


}