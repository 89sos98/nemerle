using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using Nemerle.Completion2;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    public BeginAddRelocation(
      project    : Project,
      fileIndex  : int,
      newEndChar : int, newEndLine : int,
      oldEndChar : int, oldEndLine : int
    ) : AsyncRequest
    {
      def topNs   = project.CompileUnits.GetTopNamespace(fileIndex);
      def request = AsyncRequest(AsyncRequestType.UpdateCompileUnit, this, null, //source
        AddRelocation(_, fileIndex, topNs, newEndChar, newEndLine, oldEndChar, oldEndLine));

      AsyncWorker.AddWork(request);
      
      request
    }

    public AddRelocation(
      request    : AsyncRequest, 
      fileIndex  : int,
      topNs      : Decl.Namespace,
      newEndChar : int, newEndLine : int,
      oldEndChar : int, oldEndLine : int) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        topNs.Relocate(fileIndex, oldEndLine, oldEndChar, 
          newEndLine - oldEndLine, newEndChar - oldEndChar);
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The CheckMethod operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace

