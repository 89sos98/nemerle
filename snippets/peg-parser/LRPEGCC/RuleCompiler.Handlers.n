using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;

namespace LRPEGCC
{
  internal variant TokenBlock
  {
  | SuperBlock { blocks : list[TokenBlock]; }
  | TokenList { }
  | SingleToken { isTerminalToken : bool; }
  | None { }
  
    public GetLinearBlockList(): list[TokenBlock]
    {
      match(this)
      {
      | SuperBlock(bs)          =>
         mutable l = [];
          foreach(b in bs)
            l = l + b.GetLinearBlockList();
          l
      | _                       => 
          [this]
      }
    }
  }
  
  partial internal class RuleCompiler
  {
    private GetHandlerMethod( rule : Rule.Capture) : PExpr
    {     
      mutable parList = [];
      
      def blocks = GetTokenBlock(rule).GetLinearBlockList();
      
      mutable stop = false;
      for(mutable i = 0; i < blocks.Length; i++)
      {
        when(stop)
          break;
          
        def newPar = match(blocks.Nth(i))
        {
        | SingleToken (true) =>          
          <[_capturedTokens.Nth($( i : int)) :> Token[int].TerminalToken]>;   
            
        | SingleToken (false) =>          
          <[_capturedTokens.Nth($( i : int)) :> Token[int].NonTerminalToken]>;     
          
        | TokenList       =>
          stop = true;            
          <[_capturedTokens.LastN(_capturedTokens.Length - $( i : int))]>;     
          
        | _ => null
        }
        // TODO: optimize list  
        when(newPar != null)
          parList =  parList + [newPar];
      }
      
      def name = Name(rule.name);        
      def methodName = PExpr.Ref(name);
      
      PExpr.Call(methodName , parList)
    }
    
    private static GetTokenBlock(rule : Rule.Capture ) : TokenBlock
    {
      def getTokenBlock(rule : Rule ) : TokenBlock
      {
      | Capture()   
      | Call                          => 
          TokenBlock.SingleToken(false)
           
      | CaptureNamedTerminalSymbol    => 
          TokenBlock.SingleToken(true)  
                             
      | RepeatMin                   
      | RepeatMinMax                  =>
          TokenBlock.TokenList()
                      
      | Not                           =>
          TokenBlock.None()
         
      | And(r)                        => 
          getTokenBlock(r)       
    
      | Sequence(rules)               => 
        mutable bList = [];
        foreach(r in rules)
        {
          // TODO: optimize list  
          bList = bList + [getTokenBlock(r)];
        }
        TokenBlock.SuperBlock(bList)
      
      | Choice(rules)                 =>    
        mutable block = null;
        foreach(r in  rules)
        {
          def old = block;
          block = getTokenBlock(r);
          
          when(old == null)
          {
            continue;
          } 
          when(old.GetType().Equals(block.GetType()) == false )          
            throw InvalidOperationException($"Error in the rule \"$(rule.ToString())\": variants have different numbers of tokens.");        
        }
        block
                             
      | Chars                       => throw InvalidOperationException();
      | ExtensionPoint              => throw NotImplementedException();
      }
      
      getTokenBlock(rule.rule);        
    }
  }
}