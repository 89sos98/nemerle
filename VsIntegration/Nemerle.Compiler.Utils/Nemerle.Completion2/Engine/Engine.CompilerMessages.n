using System;

using Nemerle.Compiler;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    mutable _currentMessages : SCG.List[CompilerMessage];
    mutable _currentMethod   : MethodBuilder;

    private Check_currentMessages() : void
    {
      when (_currentMessages == null)
      {
        System.Diagnostics.Debug.WriteLine("_currentMessages is null???");
        _currentMessages = SCG.List();
      }
    }

    public AddCompilerMessage(message : string, location : Location, kind : MessageKind) : void
    {
      Check_currentMessages();
      _currentMessages.Add(
        if (_currentMethod == null) CompilerMessage  (location, message, kind)
        else CompilerMessageForMethod(location, message, kind, _currentMethod));
    }
    
    public CurrentMessages : array[CompilerMessage]
    {
      get 
      { 
          Check_currentMessages();
          _currentMessages.ToArray()
      }
    }

    ProcessTopLevelCompilerMessage(location : Location, message : string) : void
    {
      def check(text, add)
      {
        if (message.IndexOf(text) >= 0)
        {
          add(message.Substring(message.IndexOf(text) + text.Length), location);
          true
        }
        else
          false
      }

      _= check("error: ",   AddCompilerMessage(_, _, MessageKind.Error))
      || check("warning: ", AddCompilerMessage(_, _, MessageKind.Warning))
      || check("hint: ",    AddCompilerMessage(_, _, MessageKind.Hint));
    }

    /// Send errors taken when parse and type top level constracts (like class). 
    /// This method should set messag into 'Error List' window of IDE, for example.
    public ReportTopLevelErrors() : void
    {
      Check_currentMessages();
      _callback.SetTopLevelCompilerMessages(_currentMessages);
    }

    /// Send errors taken when parse and type the 'member'. 
    /// This method should set messag into 'Error List' window of IDE, for example.
    public ReportMemberErrors(member : MemberBuilder) : void
    {
      System.Diagnostics.Debug.Assert(member != null, "'member' prametr is null!");
      Check_currentMessages();
      _callback.SetMethodCompilerMessages(member, _currentMessages);
    }
  } // end class Engine
} // end namespace

