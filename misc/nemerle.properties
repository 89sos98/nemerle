# Define SciTE settings for nemerle files.

# sma files are Small script (C-like)
filter.nemerle=Nemerle code |*.n|
file.patterns.nemerle=*.n
lexer.$(file.patterns.nemerle)=cpp
#lexer.*.n=nemerle
#file.patterns.n=*.n
#file.patterns.n.like=$(file.patterns.n)

#filter.n =Nemerle (n)|\
#$(file.patterns.n)|

file.patterns.braces=$(file.patterns.nemerle)

#lexer.$(file.patterns.n)= NEMERLE


keywords.$(file.patterns.nemerle)= abstract and array as base catch class def delegate do \
else enum event extern false finally for foreach fun if implements in interface internal lock \
macro match module mutable namespace new null out override params private protected public \
ref sealed static struct syntax this throw true try type typeof unless using \
variant virtual void when where while assert ignore _

word.chars.nemerle=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.nemerle)=$(word.chars.nemerle)
#comment.block.nemerle=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.nemerle=/*
comment.stream.end.nemerle=*/
comment.box.start.nemerle=/*
comment.box.middle.nemerle= *
comment.box.end.nemerle= */
fold.comment=1
fold.preprocessor=1
#fold.at.else=1

statement.indent.$(file.patterns.nemerle.like)=5 case catch class default do else finally \
for if private protected public struct try union while match module
statement.end.$(file.patterns.nemerle.like)=10 ;
statement.lookback.$(file.patterns.nemerle.like)=20
block.start.$(file.patterns.nemerle.like)=10 {
block.end.$(file.patterns.nemerle.like)=10 }

#autocomplete.cpp.fillups=(

#styling.within.preprocessor=1
#preprocessor.symbol.$(file.patterns.nemerle)=#
#preprocessor.start.$(file.patterns.nemerle)=if ifdef ifndef
#preprocessor.middle.$(file.patterns.nemerle)=else elif
#preprocessor.end.$(file.patterns.nemerle)=endif



# Nemerle styles

# Default
style.NEMERLE.32=$(font.base)
# White space
style.NEMERLE.0=fore:#808080
# Comment
style.NEMERLE.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment
style.NEMERLE.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment
style.NEMERLE.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.NEMERLE.4=$(colour.number)
# Keyword
style.NEMERLE.5=$(colour.keyword),bold
# Double quoted string
style.NEMERLE.6=$(colour.string)
# Single quoted string
style.NEMERLE.7=$(colour.char)
# UUIDs (only in IDL)
style.NEMERLE.8=fore:#804080
# Preprocessor
style.NEMERLE.9=$(colour.preproc)
# Operators
style.NEMERLE.10=$(colour.operator),bold
# Identifiers
style.NEMERLE.11=
# End of line where string is not closed
style.NEMERLE.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.NEMERLE.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.NEMERLE.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line
style.NEMERLE.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.NEMERLE.16=fore:#B00040
# Comment keyword
style.NEMERLE.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.NEMERLE.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.NEMERLE.style=10
