class A[T] {
    public CreateFunction() : T->void {
        fun (a) { System.Console.WriteLine (a) }
    }
}

def cache[A,R](func : A -> R) : A -> R
   {
      def map = System.Collections.Generic.Dictionary.[A,R]();
      args =>
           if (map.ContainsKey(args))
             map[args]
          else
         {
             def result = func(args);
             map[args] = result;
             result
          }
   }

def a = A.[int*int]();

def f = a.CreateFunction();

f(1, 2);


       mutable ack;
      ack = (a, b) =>
            if (b == 0)
               ack(a - 1, 1)
            else if (a == 0)
               b + 1
            else
               ack(a - 1, ack(a, b - 1));
      ack = cache(ack);

      System.Console.WriteLine(ack(3,12));

/*
BEGIN-OUTPUT
(1, 2)
32765
END-OUTPUT
*/
