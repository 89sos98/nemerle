using System;
using System.Reflection;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public interface ICompilerBackend
  {
    MetadataReader : IMetadataReader { get; }

    CodeEmitter : ICodeEmitter { get; }

    CreateMethodBuilder(owner : TypeBuilder, ast : PT.ClassMember.Function, isProperty : bool) : MethodBuilder;

    CreateFieldBuilder(owner : TypeBuilder, ast : PT.ClassMember.Field) : FieldBuilder;

    CreatePropertyBuilder(owner : TypeBuilder, ast : PT.ClassMember.Property) : PropertyBuilder;

    CreateEventBuilder(owner : TypeBuilder, ast : PT.ClassMember.Event) : EventBuilder;
  }

  public interface IMetadataReader
  {
    AddLibrary(name : string) : void;

    AddExtensionMethod(method : IMethod) : void;
    LoadLibrariesContents() : void;
    LoadExtensions() : void;
    RemoveInternalExtensionMethods() : void;
    GetExtensionMethods (name : string, env : GlobalEnv, for_completion : bool) : SCG.IEnumerable [IMethod];

    add_buildins : bool { get; set; }
    AddBuildins(tc : TypeInfo) : void
  }

  public interface ICodeEmitter
  {
    EmitMethodBody(methodBuilder : MethodBuilder) : void;
    GetMethodInfo(fromType : FixedType, meth : IMethod) : MethodInfo;
    EncodeType(t : FixedType) : string;
  }
}