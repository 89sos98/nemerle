using System;
using System.Console;
using SCG = System.Collections.Generic;
using Nemerle.Utility;
using Nemerle.Collections;
using LRPEGCC;

namespace Test
{
  public variant Expr
  {
    | Num { value : int; }
    | Add { left : Expr; right : Expr }
    public override ToString() : string
    {
      match (this)
      {
      | Num(value) => $"$value";
      | Add(left, right) => $"Add($left, $right)";
      }
    }
  }
  
  [PegGrammar(start, 
  grammar
  {
    any       = ['\u0000' .. '\uFFFF'];
    letter    = ['a' .. 'z'] / ['A' .. 'Z'] / '_';
    digit     = ['0' .. '9'];
    findFirst = start / any findFirst;
    findLast  = any findLast / start;
    spaces    = ' '*;
    item      = (digit / letter)+ spaces;
    items     = spaces item (',' spaces item)* !any;
    start     = letter (digit / letter)*;
  })]
  class TestGrammar
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
    private _Num(num : string) : Expr.Num
    {
      Expr.Num(int.Parse(num));
    }
    private _Add(l : Expr, r : Expr) : Expr.Add
    {
      Expr.Add(l, r);
    }
  }

  [PegGrammar(start,
  {
    any       = Range('\u0000', '\uFFFF');
    digit     = Range('0', '9');
    spaces    = ZeroOrMany(' ');
    num       = Seq(number(OneOrMany(digit)), spaces);
    expr      = Or(operator(Seq(num, Or(operator_name('+'), operator_name('-')), spaces, expr)), num);
    start     = Seq(spaces, expr, Not(any));
  })]
  class CalcGrammar
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  module Program
  {
    Main() : void
    {
      try
      {
        //def (start, end) = FSM.Template.Parse("*a?b*");
        WriteLine(CalcGrammar(""));
        //WriteLine(TestGrammar(""));
        {
          mutable text = " - 123+ 123 -123541+124 ";
          for (mutable i = 0; i < 1; ++i)
            text = text + text;
          text = "123" + text + "+ 2";
          WriteLine(text.Length);
          def timer = Diagnostics.Stopwatch.StartNew();
          repeat (50) _ = CalcGrammar(text).Start();
          def calc = CalcGrammar(text);
          def pos = calc.Start();
          WriteLine($"$pos Parse took $(timer.Elapsed)");
          WriteLine();
          foreach (capture in calc.Captures)
          {
            WriteLine($"$(capture.Name) $(capture.StartPos) $(capture.EndPos) ||| $(text.Substring(capture.StartPos, capture.EndPos - capture.StartPos))");
          }
        }

        {
          mutable text = " , 123, 123s , 1s2s24,3 ";
          for (mutable i = 0; i < 1; ++i)
            text = text + text;
          text = "asd" + text + ", a";
          WriteLine(text.Length);
          def timer = Diagnostics.Stopwatch.StartNew();
          repeat (50) _ = TestGrammar(text).Start();
          def pos = TestGrammar(text).Start();
          WriteLine($"$pos Parse took $(timer.Elapsed)");
        }
      }
      catch
      {
      | ex is Exception => WriteLine(ex);
      }
      _ = ReadKey();
    }
  }
}
