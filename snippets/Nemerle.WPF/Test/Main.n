using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Utility;
using Nemerle.Text;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Windows.Controls;

using System.Windows;
using System.Console;

class SampleGrid : DependencyObject
{
  [DependencyProperty(Validate = value => value >= 0,
    Metadata = FrameworkPropertyMetadata(1, ColumnsRowsChangedCallback))]
  public Columns : int { get { } set { } }

  [DependencyProperty(Validate = value => value >= 0,
    Metadata = FrameworkPropertyMetadata(1, ColumnsRowsChangedCallback))]
  public Rows : int { get { } set { } }

  [DependencyProperty(IsReadOnly, Metadata = FrameworkPropertyMetadata(null, IsEmptyCoerceValueCallback))]
  public IsEmpty : bool { get { } set { } }

  [DependencyProperty(Metadata = FrameworkPropertyMetadata(0))]
  [AttachedPropertyBrowsableForTypeAttribute(typeof(Control))]
  public static GetColumn(item : Control) : int;

  [DependencyProperty(Metadata = FrameworkPropertyMetadata(0))]
  [AttachedPropertyBrowsableForTypeAttribute(typeof(Control))]
  public static GetRow(item : Control) : int;

  private static ColumnsRowsChangedCallback([NotNull] d : DependencyObject, _ : DependencyPropertyChangedEventArgs) : void {
    def control = d :> SampleGrid;
    control.CoerceValue(IsEmptyProperty)
  }

  private static IsEmptyCoerceValueCallback([NotNull] d : DependencyObject, _ : object) : object {
    def control = d :> SampleGrid;
    control.Columns == 0 || control.Rows == 0
  }
}

module Program
{
  [STAThread]
  Main() : void
  {
    def control = SampleGrid() <- {
      Columns = 0;
      Rows = 0;
    };
    WriteLine($"Control: $(control.Columns) column(s), $(control.Rows) row(s), IsEmpty = $(control.IsEmpty)");

    control.Columns = 2;
    control.Rows = 1;
    WriteLine($"Control: $(control.Columns) column(s), $(control.Rows) row(s), IsEmpty = $(control.IsEmpty)");

    def left = Button();
    WriteLine($"Left: Column=$(SampleGrid.GetColumn(left)), Row=$(SampleGrid.GetRow(left))");
    
    def right = Button();
    WriteLine($"Right: Column=$(SampleGrid.GetColumn(left)), Row=$(SampleGrid.GetRow(left))");

    SampleGrid.SetColumn(right, 1);
    WriteLine($"Right: Column=$(SampleGrid.GetColumn(right)), Row=$(SampleGrid.GetRow(right))");

    try {
      control.Rows = -1;
    } catch {
      | ex is Exception => WriteLine(ex)
    }
  }
}