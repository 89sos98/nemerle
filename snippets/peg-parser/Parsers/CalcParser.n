using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using LRPEGCC;

namespace Parsers
{
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {
    any       = ['\u0000'..'\uFFFF'];
    digit     = ['0'..'9'];
    spaces    = ' '*;
    num       = digit+ spaces;

    expr0     = opAdd / opSub / expr1;
    opAdd     = expr1 '+' spaces expr0;
    opSub     = expr1 '-' spaces expr0;

    expr1     = opDiv / opMul / expr2;
    opDiv     = expr2 '/' spaces expr1;
    opMul     = expr2 '*' spaces expr1;

    expr2     = num / ('(' spaces expr0 ')' spaces);

    start     = spaces (expr0 ";" spaces)+ !any;
  })]
  public class CalcParser : ParserBase[Expr]
  {  
    public this(text : string)
    {
        base(text);
    }
  }
  
  /*
  [PegGrammar(sum, 
  grammar
  {
    any           = ['\u0000' .. '\uFFFF'];
    letter        = ['a' .. 'z'] / ['A' .. 'Z'] / '_';
    digit         = ['0' .. '9'];
    spaces        = ' '*;
    id     : Expr = (letter (digit / letter)*) spaces;
    num    : Expr = digit+ spaces;
    expr'  : Expr = '(' spaces sum ')' spaces;
    expr   : Expr = num / id / expr';
    sum    : Expr = expr ('+' spaces expr)* spaces;
    start  : Expr = spaces sum spaces !any;
  })]
  class TestSum
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  [PegGrammar(test,
  grammar
  {
    test      = start / findFirst / findLast / items;
    any       = ['\u0000' .. '\uFFFF'];
    letter    = ['a' .. 'z'] / ['A' .. 'Z'] / '_';
    digit     = ['0' .. '9'];
    findFirst = start / any findFirst;
    findLast  = any findLast / start;
    spaces    = ' '*;
    item      = (digit / letter)+ spaces;
    items     = spaces item (',' spaces item)* !any;
    start     = letter (digit / letter)*;
  })]
  class TestGrammar1
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }
  
  [PegGrammar(start,
  grammar
  {
    any       = ['\u0000'..'\uFFFF'];
    start     = !['1'..'8'] any;
  })]
  class Test
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }
  */
}
