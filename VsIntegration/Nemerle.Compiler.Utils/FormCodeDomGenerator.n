using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Drawing;
using SR = System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections; 
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Utility;

namespace Nemerle.Compiler.Utils
{
  // now FormCodeDomGenerator only parses files from Project.CompileUnits
  // it is not thread-safe at the moment!

  // TODO : generation of new files
  public class FormCodeDomGenerator : NemerleCodeGenerator
  {
    protected enum ChangeStatus { | Equal | NonEqual | Renamed };

    mutable _project : Project;

    mutable _mainFileIndex : int;
    mutable _designerFileIndex : int;

    mutable _mainFileMerger     : IFileTextMerger;
    mutable _designerFileMerger : IFileTextMerger;

    mutable _formCodeInfo : FormCodeInfo;

    mutable _codeDomMethods : list[CodeMemberMethod];
    mutable _codeDomFields : list[CodeMemberField];

    mutable _oldFields: list[FieldBuilder];
    mutable _oldMethods: list[MethodBuilder];

    /*
    mutable _output : TextWriter; // changed before immediate processing

    protected new Output : TextWriter
    {
      get { _output }
      set { _output = value; }
    }

    mutable _currentFileIndex : int;

    protected SetMainOutput() : void
    {
      _currentFileIndex = _mainFileIndex;
      Output = _mainFile;
    }

    protected SetDesignerOutput() : void
    {
      _currentFileIndex = _designerFileIndex;
      Output = _designerFile;
    }
    */

    public MergeFormCodeFromCompileUnit([NotNull] project: Project,
      mainFilePath: string, designerFilePath: string, e: CodeCompileUnit,
      mainFileMerger : IFileTextMerger, designerFileMerger : IFileTextMerger,
      o: CodeGeneratorOptions) : void
    {
      _project = project;
      
      _mainFileMerger = mainFileMerger;
      _designerFileMerger = designerFileMerger;

      _mainFileIndex = Location.GetFileIndex(mainFilePath);
      _designerFileIndex = Location.GetFileIndex(designerFilePath);

      _formCodeInfo = e.UserData[typeof(FormCodeInfo)] :> FormCodeInfo;
      Debug.Print($"Before merging: _formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine)\n"
                   "_formCodeInfo.newMethodInsertionLine = $(_formCodeInfo.newMethodInsertionLine)\n");

      Options = if (o != null) o else CodeGeneratorOptions();

      Debug.Assert(e.Namespaces.Count == 1,"CodeCompileUnit for a form should contain only one namespace!");

      // TODO : do we need to bother about namespace Imports?

      Debug.Assert(e.Namespaces[0].Types.Count == 1,
        "CodeCompileUnit for a form should contain only one form class!");

      def nsDecls = project.CompileUnits.GetTopNamespace(_mainFileIndex).Decls.MapFilterByType.[Decl.Namespace]();

      Debug.Assert(nsDecls.Length == 1,
        "Root Decl for a form CompileUnit should contain only one form class!" );
      def nsDecl = nsDecls.Head;

      // TODO : Check for form class
      MergeClassDecl(e.Namespaces[0].Types[0],
                     match(nsDecl.Decls.Find(_ is Decl.Type))
                     { | Some(Decl.Type(ast)) => ast
                       | _ => throw ApplicationException(
                                "Can't find typeBuilder for the Form class in CodeDom")
                     }.TypeBuilder);

      _mainFileMerger.Flush();
      _designerFileMerger.Flush();

      Debug.Print($"After merging: _formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine)\n"
                   "_formCodeInfo.newMethodInsertionLine = $(_formCodeInfo.newMethodInsertionLine)\n");

      e.UserData[typeof(FormCodeInfo)] = _formCodeInfo;
    }

    private allDeclaredFlags : SR.BindingFlags = BindingFlags.DeclaredOnly |
                                                 BindingFlags.Instance | 
                                                 BindingFlags.Static | 
                                                 BindingFlags.Public |
                                                 BindingFlags.NonPublic;

    protected MergeClassDecl(classDecl: CodeTypeDeclaration, typeBuilder: TypeBuilder) : void
    {
      _oldMethods = typeBuilder.GetMembers(allDeclaredFlags).Filter(
        m => match(m.MemberKind) { | MemberKinds.Method | Constructor => true | _ => false }
             && !m.Name.OrdinalStartsWith("_N_field_initialiser"))
        .MapFilterByType.[MethodBuilder]();

      _codeDomMethods = classDecl.Members.MapFilterByType.[CodeMemberMethod]();

      _oldFields = typeBuilder.GetFields(allDeclaredFlags).MapFilterByType.[FieldBuilder]();
      _codeDomFields = classDecl.Members.MapFilterByType.[CodeMemberField]();

      MergeMethods(classDecl);
      MergeFields();
    }

    protected MergeFields() : void
    {
      //classDecl.Members.Filter(_ is CodeMemberField).Map(_ : CodeMemberField);

      // DEBUG
      Debug.Print("oldFields:\n");
      _oldFields.Iter(f => Debug.Print($"  field $(f.Name)") );

      //Debug.Print("allFields:\n");
      //typeBuilder.GetFields().Iter(f => Debug.Print($"  field $(f.Name)\n") );

      Debug.Print("codedomFields:\n");
      _codeDomFields.Iter(f => Debug.Print($"  field $(f.Name)") );

      def isAddLine = Options.BlankLinesBetweenMembers;

      def AddField(cdf) // to designer
      {
        using(def sw = StringWriter())
        {
          Output = sw; 
          Indent = 2; // TODO: maybe we should change it dynamically?

          if (isAddLine)
            Output.WriteLine();
          else
            GenerateIndent();
          GenerateField(cdf);

          def linesList = CodeDomHelper.StringToListOfLines(sw.ToString() );
          _designerFileMerger.AddLines(_formCodeInfo.newFieldInsertionLine, 
                                       linesList);

          _formCodeInfo.newFieldInsertionLine += linesList.Count; // TODO : maybe we have to add additional lines
          Debug.Print($"_formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine) "
                      "after adding $(cdf.Name)\n");
        }
      }

      def RemoveField(of)
      {
        def loc = of.Location;
        def line = if (Options.BlankLinesBetweenMembers) loc.Line-1 else loc.Line;
        _designerFileMerger.RemoveLines(line, loc.EndLine );

        def lineOffset = line - loc.EndLine - 1;
        Relocate(_designerFileIndex,line,lineOffset);

        _formCodeInfo.newFieldInsertionLine += lineOffset;
        Debug.Print($"_formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine) "
                    "after removing $(of.Name)\n");
      }

      def RenameField(of,cdf)
      {
        using(def sw = StringWriter())
        {
          Output = sw; 
          Indent = 2; // TODO: maybe we should change it dynamically?

          GenerateIndent();
          GenerateField(cdf);

          def linesList = CodeDomHelper.StringToListOfLines(sw.ToString() );

          def oldLoc = of.Location;
          _designerFileMerger.ReplaceLines(oldLoc.Line, oldLoc.EndLine,
                                           linesList);
          def lineOffset = linesList.Count - (oldLoc.EndLine - oldLoc.Line + 1);
          Relocate(_designerFileIndex, oldLoc.Line, lineOffset);

          _formCodeInfo.newFieldInsertionLine += lineOffset; 
          Debug.Print($"_formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine) "
                       "after renaming $(of.Name)->$(cdf.Name)\n");
        }
      }

      def sortedCodedomFields = _codeDomFields.Sort(
        fun(f1,f2) {
          mutable res : int;
          
          res = if(f1.UserData.Contains(typeof(Location)))
          {
            if(f2.UserData.Contains(typeof(Location)))
            {
              (f1.UserData[typeof(Location)] :> Location).CompareTo(
                (f2.UserData[typeof(Location)] :> Location))
            }
            else
              -1
          }
          else if(f2.UserData.Contains(typeof(Location)))
            1
          else 
            -1;

          /*
          when(f1.UserData.Contains(typeof(Location)))
            Debug.Print($"$(f1.Name) has Location = $(f1.UserData[typeof(Location)] :> Location)\n");
          when(f2.UserData.Contains(typeof(Location)))
            Debug.Print($"$(f2.Name) has Location = $(f2.UserData[typeof(Location)] :> Location)\n");

          Debug.Print($"Comparing1 $(f1.Name) and $(f2.Name) res = $res\n");
          */
          res
        }
      );

      Debug.Print("codedomFields (after Sort):\n");
      sortedCodedomFields.Iter(f => Debug.Print($"  field $(f.Name)\n") );

      AddRemoveRenameDispatcher(_oldFields, sortedCodedomFields,
                                 GetChangeStatus,
                                 AddField, RemoveField, RenameField );
    }

    protected MergeMethods(classDecl: CodeTypeDeclaration) : void
    {
      // DEBUG
      Debug.Print("oldMethods:\n");
      _oldMethods.Iter(m => Debug.Print($"  method $(m.Name)") );

      //Debug.Print("allMethods:\n");
      //typeBuilder.GetMethods().Iter(m => Debug.Print($"  method $(m.Name)\n") );

      Debug.Print("codedomMethods:\n");
      _codeDomMethods.Iter(m => Debug.Print($"  method $(m.Name)") );

      // Process InitializeComponent

      match((_oldMethods.Find(m => m.Name == "InitializeComponent" ),
              _codeDomMethods.Find(m => m.Name == "InitializeComponent" )) )
      {
        | (om, Some(cdm)) =>
          using(def sw = StringWriter())
          {
            Output = sw; 
            Indent = 2; // TODO: maybe we should change it dynamically?

            GenerateIndent();
            GenerateMethod(cdm, classDecl);

            def linesList = CodeDomHelper.StringToListOfLines(sw.ToString());

            match(om)
            {
              | Some(om) =>
                def oldLoc = om.Location;
                _designerFileMerger.ReplaceLines(oldLoc.Line, oldLoc.EndLine,
                                                 linesList);
                def lineOffset = linesList.Count - (oldLoc.EndLine - oldLoc.Line + 1);
                Relocate(_designerFileIndex, oldLoc.Line, lineOffset);

                _formCodeInfo.newFieldInsertionLine += lineOffset; 
                Debug.Print($"_formCodeInfo.newFieldInsertionLine = $(_formCodeInfo.newFieldInsertionLine) "
                             "after renewing InitializeComponent\n");

              | None =>  // just give up for now
                throw ApplicationException("InitializeComponent not found in old designer file");
            }
          }
        
        | _ =>
          throw ApplicationException("InitializeComponent not found in CodeDom tree");
      }

      def AddMethod(cdm)
      {
        using(def sw = StringWriter())
        {
          Output = sw; 
          Indent = 2; // TODO: maybe we should change it dynamically?


          // KLiss: alter event handler parameter names
          foreach(param is CodeParameterDeclarationExpression in cdm.Parameters)
          {
            when(param.Name == "sender" && param.Type.BaseType == "System.Object")
              param.Name = "_sender";
            when(param.Name == "e" && param.Type.BaseType.EndsWith("EventArgs"))
              param.Name = "_e";
          }
          
          // TODO: correct way to insert empty method
          
          def statements = cdm.Statements;
          def isMethodBodyEmpty = (statements.Count == 0);
          when (isMethodBodyEmpty)
            // insert ';' for generation reverse this change later
            _ = statements.Add(CodeMethodReturnStatement() );

          // if(Options.BlankLinesBetweenMembers )
          Output.WriteLine(); // TODO : blank lines should be regulated?

          GenerateMethod(cdm,classDecl);

          // clear body again
          when (isMethodBodyEmpty)
            statements.Clear();

          def linesList = CodeDomHelper.StringToListOfLines(sw.ToString() );

          _mainFileMerger.AddLines(_formCodeInfo.newMethodInsertionLine, 
                                   linesList);

          // Add cursor position to codedom: (TODO: do it the right way)
          cdm.UserData[typeof(Point)] =
            Point(1 + Options.IndentString.Length*3, 
                  1 + _formCodeInfo.newMethodInsertionLine +
                  match (BracingStyle) { | Block | Indent => 2 | _ => 3 } );

          _formCodeInfo.newMethodInsertionLine += linesList.Count; // TODO : maybe we have to add additional lines
          Debug.Print($"_formCodeInfo.newMethodInsertionLine = $(_formCodeInfo.newMethodInsertionLine) "
                      "after adding $(cdm.Name)\n");
        }
      }

      def RemoveMethod(om)
      {
        // TODO : blank lines should be regulated?
        def (line,endLine) = (om.Location.Line-1,om.Location.EndLine); 
        def removedLines = endLine - line + 1;
        _mainFileMerger.RemoveLines(line, endLine); // TODO

        // adjust all other methods
        Relocate(_mainFileIndex,line, -removedLines);

        _formCodeInfo.newMethodInsertionLine -= removedLines;
        Debug.Print($"_formCodeInfo.newMethodInsertionLine = $(_formCodeInfo.newMethodInsertionLine) "
                    "after removing $(om.Name)\n");
      }
           
      def RenameMethod(om,cdm)
      {
        using(def sw = StringWriter())
        {
          Output = sw; 
          Indent = 2; // TODO: maybe we should change it dynamically?

          GenerateIndent();
          GenerateMethod(cdm,classDecl);

          def linesList = CodeDomHelper.StringToListOfLines(sw.ToString() );

          def oldLoc = om.Location;
          _designerFileMerger.ReplaceLines(oldLoc.Line, oldLoc.EndLine,
                                           linesList);
          def lineOffset = linesList.Count - (oldLoc.EndLine - oldLoc.Line + 1);
          Relocate(_mainFileIndex, oldLoc.Line, lineOffset);

          _formCodeInfo.newMethodInsertionLine += lineOffset; 
          Debug.Print($"_formCodeInfo.newMethodInsertionLine = $(_formCodeInfo.newMethodInsertionLine)"
                       "after renaming $(om.Name)->$(cdm.Name)\n");
        }
      }

      AddRemoveRenameDispatcher(_oldMethods, _codeDomMethods,
                                 GetChangeStatus,
                                 AddMethod, RemoveMethod, RenameMethod );
    }

    protected GenerateIndent() : void
    {
      def output = Output;
      def indentString = Options.IndentString;
      repeat(Indent)
        output.Write(indentString);
    }

    protected Relocate(fileIndex: int,
                       line: int, lineOffset: int) : void
    {
      if (fileIndex == _mainFileIndex)
      {
        foreach (_m in _oldMethods)
        {
          assert2(false);
          //def loc = m.Location;
          //when (loc.FileIndex == _mainFileIndex)
          //  m.Location = Completion.Relocate(loc, line, 0, lineOffset, 0)
        }

        foreach (m in _codeDomMethods)
        { 
          def locRef = m.UserData[typeof(Location)];

          when (locRef != null)
          {
            def loc = locRef :> Location;
            when (loc.FileIndex == fileIndex)
            {
              def pt = m.UserData[typeof(Point)] :> Point;
              when (pt.Y > line)
              {
                pt.Y += lineOffset;
                m.UserData[typeof(Point)] = pt;
              }
            }
          }
        }
      } 
      else // fileIndex == _designerFileIndex
      {
        foreach (_f in _oldFields)
        {
          assert2(false);
          //def loc = f.Location;
          //when (loc.FileIndex == fileIndex)
          //  f.Location = Completion.Relocate(loc, line, 0, lineOffset, 0)
        }
      }
    }

    // Removes can be everywhere, Adds only at the end
    static protected AddRemoveRenameDispatcher[T1,T2](old_list: list[T1], new_list: list[T2],
      status: T1*T2->ChangeStatus,
      addFunc : T2->void, removeFunc : T1->void, renameFunc : T1*T2->void ) : void
    {
      def dispatcher(old_l, new_l )
      {
        | (h1 :: t1, h2 :: t2) => 
          match (status(h1,h2)) {
            | Equal    => dispatcher(t1,t2)
            | NonEqual => { removeFunc(h1); dispatcher(t1,new_l) }
            | Renamed  => { renameFunc(h1,h2); dispatcher(t1,t2) }
          }
        | (_, []) =>
          foreach (x in old_l)
              removeFunc(x);

        | ([], _) =>
          foreach (x in new_l)
            addFunc(x);
      }

      dispatcher(old_list, new_list)
    }

    static protected GetChangeStatus[T1,T2](oldMember: T1, codeDomMember: T2 ) : ChangeStatus
      where T1 : MemberBuilder where T2 : CodeTypeMember
    {
      //Debug.Print($"Comparing $(oldMember.Name) and $(codeDomMember.Name)\n");
      def oldName = codeDomMember.UserData["Name"];
      if (oldName != null && ((oldName :> string) == oldMember.Name))
        if (oldMember.Name != codeDomMember.Name)
          ChangeStatus.Renamed
        else
          ChangeStatus.Equal
      else
        ChangeStatus.NonEqual
    }
  }
}
