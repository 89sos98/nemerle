using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    ConvertExpr(stmt : CS.Statement) : PT.PExpr
    {
      def loc = stmt.NLocation();
      match(stmt) {
        | Empty =>
          PT.PExpr.Void(loc)

        | Block(stmts) =>
          PT.PExpr.Sequence(loc, stmts.Map(ConvertExpr))

        | Expression(expr) =>
          ConvertExpr(expr)

        | Label(label, stmt) =>
          Message.Warning(label.NLocation(), "label is ignored");
          ConvertExpr(stmt)

        | VariableDecl
        | ConstantDecl =>
          Message.FatalError("not implemented")

        | If(expr, trueStmt, null) =>
          Util.locate(loc, <[ Nemerle.Core.whenmacro($(ConvertExpr(expr)), $(ConvertExpr(trueStmt))) ]>)

        | If(expr, trueStmt, falseStmt) =>
          Util.locate(loc, <[ Nemerle.Core.@if($(ConvertExpr(expr)), $(ConvertExpr(trueStmt)), $(ConvertExpr(falseStmt))) ]>)

        | Switch(expr, entries) =>
          Message.FatalError("not implemented")

        | While(cond, stmt) =>
          Util.locate(loc, <[ Nemerle.Core.@while($(ConvertExpr(cond)), $(ConvertExpr(stmt))) ]>)

        | DoWhile(cond, stmt) =>
          Util.locate(loc, <[ Nemerle.Core.dowhile($(ConvertExpr(stmt)), $(ConvertExpr(cond))) ]>)

        | ForVar
        | ForExpr =>
          Message.FatalError("not implemented")

        | Foreach(var, null, expr, body) =>
          Util.locate(loc, <[ foreach($(ConvertExpr(var)) in $(ConvertExpr(expr))) $(ConvertExpr(body)) ]>)

        | Foreach(var, varType, expr, body) =>
          Util.locate(loc, <[ foreach($(ConvertExpr(var)) : $(ConvertExpr(varType)) in $(ConvertExpr(expr))) $(ConvertExpr(body)) ]>)

        | Break =>
          Util.locate(loc, <[ Nemerle.Imperative.Break() ]>)

        | Continue =>
          Util.locate(loc, <[ Nemerle.Imperative.Continue() ]>)

        | Goto | GotoCase | GotoDefault =>
          Message.Error(loc, "`goto' is not supported");
          PT.PExpr.Error(loc)

        | Return(null) =>
          Util.locate(loc, <[ Nemerle.Imperative.Return() ]>)

        | Return(expr) =>
          Util.locate(loc, <[ Nemerle.Imperative.Return($(ConvertExpr(expr))) ]>)

        | Throw(null) =>
          PT.PExpr.Throw(loc, null)

        | Throw(expr) =>
          PT.PExpr.Throw(loc, ConvertExpr(expr))

        | Try =>
          Message.FatalError("not implemented")

        | Checked(body, true) =>
          Util.locate(loc, <[ checked { $(ConvertExpr(body)) } ]>)

        | Checked(body, false) =>
          Util.locate(loc, <[ unchecked { $(ConvertExpr(body)) } ]>)

        | Lock(expr, body) =>
          Util.locate(loc, <[ lock($(ConvertExpr(expr))) $(ConvertExpr(body)) ]>)

        | UsingVar
        | UsingExpr =>
          Message.FatalError("not implemented")

        | YieldReturn(expr) =>
          Util.locate(loc, <[ yield $(ConvertExpr(expr)) ]>)

        | YieldBreak =>
          Util.locate(loc, <[ yield break ]>)

        | Unsafe =>
          Message.Error(loc, "unsafe code is not supported");
          PT.PExpr.Error(loc)

        | Fixed =>
          Message.Error(loc, "`fixed' statement is not supported");
          PT.PExpr.Error(loc)
      }
    }
  }
}