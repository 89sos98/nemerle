using System;

using Nemerle.Compiler;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    mutable _currentMessages : SCG.List[CompilerMessage];

    private Check_currentMessages() : void
    {
      when (_currentMessages == null)
      {
        System.Diagnostics.Trace.WriteLine("_currentMessages is null???");
        _currentMessages = SCG.List();
      }
    }

    public AddCompilerMessage(message : string, location : Location, kind : MessageKind, ) : void
    {
      Check_currentMessages();
      _currentMessages.Add(CompilerMessage(message, location, kind));
    }
    
    public CurrentMessages : array[CompilerMessage]
    {
      get 
      { 
          Check_currentMessages();
          _currentMessages.ToArray()
      }
    }

    ProcessTopLevelCompilerMessage(location : Location, message : string) : void
    {
      def check(text, add)
      {
        if (message.IndexOf(text) >= 0)
        {
          add(message.Substring(message.IndexOf(text) + text.Length), location);
          true
        }
        else
          false
      }

      _= check("error: ",   AddCompilerMessage(_, _, MessageKind.Error))
      || check("warning: ", AddCompilerMessage(_, _, MessageKind.Warning))
      || check("hint: ",    AddCompilerMessage(_, _, MessageKind.Hint));
    }
  } // end class Engine
} // end namespace

