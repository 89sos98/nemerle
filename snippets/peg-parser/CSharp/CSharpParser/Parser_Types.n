using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Type parameters
  
    //varianceAnnotation  : TypeParameterVariance = ("in" / "out")S;
    varianceAnnotation(variance : NToken, _ : NToken) : TypeParameterVariance
    {
      def loc = GetLocation(_);
      match(variance.GetText()) {
        | "in"  => TypeParameterVariance.In(loc)
        | "out" => TypeParameterVariance.Out(loc)
        | _     => throw ArgumentOutOfRangeException("variance")
      }
    }

    //typeParameter       : TypeParameter         = attributes? varianceAnnotation? identifier;
    typeParameter(attributes          : option[VToken[list[CustomAttribute]]],
                  varianceAnnotation  : option[VToken[TypeParameterVariance]],
                  identifier          : VToken[Identifier]) : TypeParameter
    {
      def loc = GetLocation(_);
      TypeParameter(
        loc,
        attributes.WithDefault([]),
        identifier.Value,
        varianceAnnotation.WithDefault(TypeParameterVariance.Normal(loc)))
    }

    //typeParameterList   : TypeParameterList     = "<"s typeParameter (","s typeParameter)* ">"s;
    typeParameterList(_lparen : NToken, _ : NToken,
                      head   : VToken[TypeParameter],
                      tail    : SCG.List[NToken * NToken * VToken[TypeParameter]],
                      _rparen : NToken, _ : NToken) : list[TypeParameter]
    {
      head.Cons(tail)
    }

    //typeParameterConstraint_ctor : TypeParameterConstraint  = "new"S "("s ")"s;
    typeParameterConstraint_ctor( _new    : NToken, _ : NToken,
                                  _lparen : NToken, _ : NToken,
                                  _rparen : NToken, _ : NToken) : TypeParameterConstraint
    {
      TypeParameterConstraint.DefaultCtor(GetLocation(_))
    }

    //typeParameterConstraint_type : TypeParameterConstraint  = ("class" / "struct")S;
    typeParameterConstraint_type(typeConstraint : NToken, _ : NToken) : TypeParameterConstraint
    {
      match(typeConstraint.GetText()) {
        | "class"   => TypeParameterConstraint.Class(GetLocation(_))
        | "struct"  => TypeParameterConstraint.Struct(GetLocation(_))
        | _         => throw ArgumentOutOfRangeException("typeConstraint")
      }
    }

    //typeParameterConstraint_base : TypeParameterConstraint  = anyType;
    typeParameterConstraint_base(baseType : VToken[TypeRef]) : TypeParameterConstraint
    {
      TypeParameterConstraint.Base(GetLocation(_), baseType.Value)
    }

    //typeParameterConstraint      : TypeParameterConstraint  = typeParameterConstraint_ctor
    //                                                        / typeParameterConstraint_type
    //                                                        / typeParameterConstraint_base;
    typeParameterConstraint(opt : VToken[TypeParameterConstraint]) : TypeParameterConstraint
    {
      opt.Value
    }

    //typeParameterConstraints        : TypeParameterConstraintList       = typeParameterConstraint (","s typeParameterConstraint)*;
    typeParameterConstraints( head : VToken[TypeParameterConstraint],
                              tail  : SCG.List[NToken * NToken * VToken[TypeParameterConstraint]]) : list[TypeParameterConstraint]
    {
      head.Cons(tail)
    }

    //typeParameterConstraintsClause  : TypeParameterConstraintClause     = "where"S identifier ":"s typeParameterConstraints;
    typeParameterConstraintsClause( _where                    : NToken, _ : NToken,
                                    identifier                : VToken[Identifier],
                                    _colon                    : NToken, _ : NToken,
                                    typeParameterConstraints  : VToken[list[TypeParameterConstraint]]) : TypeParameterConstraintClause
    {
      TypeParameterConstraintClause(GetLocation(_), identifier.Value, typeParameterConstraints.Value)
    }

    //typeParameterConstraintsClauses : TypeParameterConstraintClauseList = typeParameterConstraintsClause+;
    typeParameterConstraintsClauses(clauses : SCG.List[VToken[TypeParameterConstraintClause]]) : list[TypeParameterConstraintClause]
    {
      clauses.Values()
    }

    #endregion

    #region Function parameters

    //parameterModifier   : FormalParameterModifier = ("ref" / "out" / "this" / "params")S;
    parameterModifier(mod : NToken, _ : NToken) : FormalParameterModifier
    {
      def loc = GetLocation(_);
      match(mod.GetText()) {
        | "ref"     => FormalParameterModifier.Ref(loc)
        | "out"     => FormalParameterModifier.Out(loc)
        | "this"    => FormalParameterModifier.This(loc)
        | "params"  => FormalParameterModifier.Params(loc)
        | _         => throw ArgumentOutOfRangeException("mod")
      }
    }

    //defaultArgument     : Expr                    = "="s expression;
    defaultArgument(_eq : NToken, _ : NToken, expr : VToken[Expr]) : Expr
    {
      expr.Value
    }

    //formalParameter     : FormalParameter         = attributes? parameterModifier? anyType identifier defaultArgument?;
    formalParameter(attributes        : option[VToken[list[CustomAttribute]]],
                    parameterModifier : option[VToken[FormalParameterModifier]],
                    paramType         : VToken[TypeRef],
                    identifier        : VToken[Identifier],
                    defaultArgument   : option[VToken[Expr]]) : FormalParameter
    {
      def loc = GetLocation(_);
      FormalParameter(
        loc,
        attributes.WithDefault([]),
        identifier.Value,
        parameterModifier.WithDefault(FormalParameterModifier.Normal(loc)),
        paramType.Value,
        defaultArgument.WithDefault(null))
    }

    //formalParameterList : FormalParameterList     = formalParameter (","s formalParameter)*;
    formalParameterList(head : VToken[FormalParameter],
                        tail  : SCG.List[NToken * NToken * VToken[FormalParameter]]) : list[FormalParameter]
    {
      head.Cons(tail)
    }

    #endregion

    #region Class, Struct, Interface

    //typeBase                        : TypeRefList     = ":"s anyType (","s anyType)*;
    typeBase( _colon  : NToken, _ : NToken,
              head   : VToken[TypeRef],
              tail    : SCG.List[NToken * NToken * VToken[TypeRef]]) : list[TypeRef]
    {
      head.Cons(tail)
    }

    //typeBody                        : TypeMemberList  = "{"s typeMemberDeclarations "}"s;
    typeBody( _lparen                 : NToken, _ : NToken,
              typeMemberDeclarations  : VToken[list[TypeMember]],
              _rparen                 : NToken, _ : NToken) : list[TypeMember]
    {
      typeMemberDeclarations.Value
    }

    //classStructInterfaceDeclaration : TypeDeclaration = attributes? modifiers? ("class" / "struct" / "interface")S identifier typeParameterList? typeBase? typeParameterConstraintsClauses? typeBody (";"s)?;
    classStructInterfaceDeclaration(attributes                      : option[VToken[list[CustomAttribute]]],
                                    modifiers                       : option[VToken[list[Modifier]]],
                                    keyword                         : NToken, _ : NToken,
                                    identifier                      : VToken[Identifier],
                                    typeParameterList               : option[VToken[list[TypeParameter]]],
                                    typeBase                        : option[VToken[list[TypeRef]]],
                                    typeParameterConstraintsClauses : option[VToken[list[TypeParameterConstraintClause]]],
                                    typeBody                        : VToken[list[TypeMember]],
                                    _                               : option[NToken * NToken]) : TypeDeclaration
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "class"     =>
          TypeDeclaration.Class(
            loc,
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier.Value, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            GetLocation(typeBody),
            typeBase.WithDefault([]),
            typeBody.Value)

        | "struct"    =>
          TypeDeclaration.Struct(
            loc,
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier.Value, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            GetLocation(typeBody),
            typeBase.WithDefault([]),
            typeBody.Value)

        | "interface" =>
          TypeDeclaration.Interface(
            loc,
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier.Value, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            GetLocation(typeBody),
            typeBase.WithDefault([]),
            typeBody.Value)

        | _           => throw ArgumentOutOfRangeException("keyword")
      }
    }

    #endregion

    #region Enum

    //enumBase                : TypeRef         = ":"s anyType;
    enumBase(_colon : NToken, _ : NToken, baseType : VToken[TypeRef]) : TypeRef
    {
      baseType.Value
    }

    //enumMemberDeclaration   : TypeMember      = attributes? identifier ("="s constantExpression)?;
    enumMemberDeclaration(attributes  : option[VToken[list[CustomAttribute]]],
                          identifier  : VToken[Identifier],
                          value       : option[NToken * NToken * VToken[Expr]]) : TypeMember
    {
      def loc = GetLocation(_);
      match(value) {
        | Some( (_, _, v) ) => TypeMember.EnumOption(loc, attributes.WithDefault([]), [], identifier.Value, v.Value)
        | _                 => TypeMember.EnumOption(loc, attributes.WithDefault([]), [], identifier.Value, null)
      }
    }

    //enumMemberDeclarations  : TypeMemberList  = enumMemberDeclaration (","s enumMemberDeclaration)* (","s)?;
    enumMemberDeclarations( head : VToken[TypeMember],
                            tail  : SCG.List[NToken * NToken * VToken[TypeMember]],
                            _     : option[NToken * NToken]) : list[TypeMember]
    {
      head.Cons(tail)
    }

    //enumBody                : TypeMemberList  = "{"s enumMemberDeclarations? "}"s;
    enumBody( _lparen                 : NToken, _ : NToken,
              enumMemberDeclarations  : option[VToken[list[TypeMember]]],
              _rparent                : NToken, _ : NToken) : list[TypeMember]
    {
      enumMemberDeclarations.WithDefault([])
    }

    //enumDeclaration         : TypeDeclaration = attributes? modifiers? "enum"S identifier enumBase? enumBody (";"s)?;
    enumDeclaration(attributes  : option[VToken[list[CustomAttribute]]],
                    modifiers   : option[VToken[list[Modifier]]],
                    _enum       : NToken, _ : NToken,
                    identifier  : VToken[Identifier],
                    enumBase    : option[VToken[TypeRef]],
                    enumBody    : VToken[list[TypeMember]],
                    _           : option[NToken * NToken]) : TypeDeclaration
    {
      TypeDeclaration.Enum(
        GetLocation(_),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        identifier.Value,
        [],
        [],
        GetLocation(enumBody),
        enumBase.WithDefault(null),
        enumBody.Value)
    }

    #endregion

    #region Delegate

    //delegateDeclaration = attributes? modifiers? "delegate"S anyType identifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? ";"s;
    delegateDeclaration(attributes                      : option[VToken[list[CustomAttribute]]],
                        modifiers                       : option[VToken[list[Modifier]]],
                        _delegate                       : NToken, _ : NToken,
                        returnType                      : VToken[TypeRef],
                        identifier                      : VToken[Identifier],
                        typeParameterList               : option[VToken[list[TypeParameter]]],
                        _lparen                         : NToken, _ : NToken,
                        formalParameterList             : option[VToken[list[FormalParameter]]],
                        _rparen                         : NToken, _ : NToken,
                        typeParameterConstraintsClauses : option[VToken[list[TypeParameterConstraintClause]]],
                        _comma                          : NToken, _ : NToken) : TypeDeclaration
    {
      TypeDeclaration.Delegate(
        GetLocation(_),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        identifier.Value, 
        typeParameterList.WithDefault([]),
        typeParameterConstraintsClauses.WithDefault([]),
        GetLocation(_),
        returnType.Value,
        formalParameterList.WithDefault([]))
    }

    #endregion

    //typeDeclaration : TypeDeclaration = classStructInterfaceDeclaration
    //                                  / enumDeclaration
    //                                  / delegateDeclaration;
    typeDeclaration(opt : VToken[TypeDeclaration]) : TypeDeclaration
    {
      opt.Value
    }
  }
}