/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.Globalization;
using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler {

  public module Location 
  {
    /** the bit number (from least important as 0) where line info begins */
    mutable line_bits : int;
    mutable col_bits : int;

    /** bits reserved for index of file */
    mutable file_mask : int;

    /** mapping from index to file name */
    mutable file_names : array <string>;
    mutable file_names_amount : int;
    
    /** encountered file names with mapping to their indices */
    file_indices : Hashtable <string, int> = Hashtable ();

    public AddFiles (names : list <string>) : void
    {
      def log2 (x, acc) {
        if (x == 0) acc
        else log2 (x >> 1, acc + 1);
      }

      // we add two bits for the case of dynamic new file names in #line 22 "bla"
      col_bits = log2 (names.Length () + 1, 0) + 2;
      file_mask = (1 << col_bits) - 1;

      // 8 bits for coulmn info
      line_bits = col_bits + 8;
      
      file_names = array (1 << col_bits);
      file_indices.Add ("", 0);
      file_names_amount = 1;
      foreach (x in names) {
        file_indices.Add (x, file_names_amount);
        file_names [file_names_amount] = x;
        ++file_names_amount;
      }
    }

    public AddFile (name : string) : int
    {
      match (file_indices.Get (name)) {
        | Some (x) => x
        | None =>
          if (file_names_amount == file_names.Length) {
            Message.warning ("too many filenames... Location cache overflow");
            0
          }
          else {
            file_indices.Add (name, file_names_amount);
            file_names [file_names_amount] = name;
            ++file_names_amount;
            file_names_amount
          }
      }
    }
    
    public ComputeToken (file_idx : int, line : int, col : int) : int
    {
      def col = if (col > 255) 255 else col;
      (file_idx %& file_mask) %| (line << line_bits) %| (col << col_bits)
    }
    
    public GetFileIndex (name : string) : int
    {
      match (file_indices.Get (name)) {
        | Some (idx) => idx
        | None => Util.ice ("unknown file name supplied")
      }
    }
    
    public GetFile (token : int) : string
    {
      file_names [token %& file_mask]
    }

    public GetLine (token : int) : int
    {
      token >> line_bits
    }

    /** we allow only columns in range 0-255 */
    public GetColumn (token : int) : int
    {
      (token >> col_bits) %& 255
    }
  }
  
  public class Located
  {
    internal static Default : int = 0;

    public mutable loc : int;
    public this () { loc = Location_stack.top (); }
    public this (loc : int) { this.loc = loc }
  }

  [System.Flags]
  public enum NemerleAttributes
  {
    | None        = 0x0000
    | Public      = 0x0001
    | Private     = 0x0002
    | New         = 0x0004 
    | Protected   = 0x0008
    | Abstract    = 0x0010
    | Virtual     = 0x0020
    | Sealed      = 0x0040
    | Static      = 0x0080
    | Mutable     = 0x0100      
    | Internal    = 0x0200
    | Override    = 0x0400
    | Module      = 0x0800
    | Struct      = 0x1000
    | Macro       = 0x2000
    | Volatile    = 0x4000
    | SpecialName = 0x8000

    | AccessModifiers = Public %| Private %| Protected %| Internal
  }                 

  
  public class Modifiers 
  {
    public mutable mods : NemerleAttributes;
    public mutable custom_attrs : list <Parsetree.Expr>;
    public mutable macro_attrs : list <string * Parsetree.Expr>;

    public static Empty : Modifiers;

    public IsEmpty : bool
    {
      get {
        custom_attrs.IsEmpty () && macro_attrs.IsEmpty ()
      }
    }

    public this (mods : NemerleAttributes, attrs : list <Parsetree.Expr>)
    {
      this.mods = mods;
      this.custom_attrs = attrs;
      this.macro_attrs = [];
    }

    public static this ()
    {
      Empty = Modifiers (NemerleAttributes.None, []);
    }

    public AddCustomAttribute (target : System.AttributeTargets, 
                               expr : Parsetree.Expr) : void
    {
      ignore (target);
      custom_attrs = expr :: custom_attrs;
    }

    internal SaveCustomAttributes (ti : TypeBuilder,
                                   adder : System.AttributeTargets * 
                                           System.Reflection.Emit.CustomAttributeBuilder -> void) 
                                  : void
    {
      def target = System.AttributeTargets.All;
      List.Iter (custom_attrs, fun (expr) {
        try {
          adder (target, AttributeCompiler.CompileAttribute (ti.env, ti, expr))
        } catch {
          | _ : Recovery => ()
        }
      });
      List.Iter (macro_attrs, fun (suff, expr) {
        try {
          def (m, parms) = 
            match (MacroRegistry.lookup_macro (ti.env, expr, suff)) {
              | Some ((_, m, parms)) => (m, parms)
              | _ => Util.ice ("macro is not a macro?" +
                               PrettyPrint.SprintExpr (None (), expr))
            };
          def sparms = List.Map (parms, fun (x) { PrettyPrint.SprintExpr (None (), x) });
          def concatenated = NString.Concat ("@", sparms);
//          def _x = ti.env.GetMacroContext ();
          def serialized = <[ 
            Nemerle.Internal.MacroAttribute ($(m.GetNamespace () + m.GetName () : string),
          //                                   $(ti.env.GetMacroContext () : int),
                                             0,
                                             $(concatenated : string)) 
          ]>;
          adder (target, AttributeCompiler.CompileAttribute (ti.env, ti, serialized))
        } catch {
          | _ : Recovery => ()
        }
      });
    }


  }

  public variant Literal
  {
    | L_void
    | L_null
    | L_string { val : string; }
    | L_float { val : float; }
    | L_double { val : double; }
    | L_decimal { val : decimal; }
    | L_char { val : char; }
    | L_bool { val : bool; }
    | L_sbyte { val : sbyte; }
    | L_byte { val : byte; }
    | L_short { val : short; }
    | L_ushort { val : ushort; }
    | L_int { val : int; }
    | L_uint { val : uint; }
    | L_long { val : long; }
    | L_ulong { val : ulong; }

    | L_enum { val : Literal; ty : Tycon; }


    /**
     * Converts 'this' literal to an equivalent (lexable) string
     */
    public override ToString () : string
    {
      match (this) {
        | L_void           => "()"
        | L_null           => "null"

        | L_string   (val) => "\"" + val + "\""
        | L_float    (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "f"
        | L_double   (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "d"
        | L_decimal  (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "m"
        | L_char     (val) => "'" + val.ToString () + "'"
        | L_bool     (val) => if (val) "true" else "false"
        | L_sbyte    (val) => val.ToString () + "sb"
        | L_byte     (val) => val.ToString () + "b"
        | L_short    (val) => val.ToString () + "s"
        | L_ushort   (val) => val.ToString () + "us"
        | L_int      (val) => val.ToString ()
        | L_uint     (val) => val.ToString () + "u"
        | L_long     (val) => val.ToString () + "l"
        | L_ulong    (val) => val.ToString () + "ul"
          
        | L_enum (val, ty) => "(" + val.ToString () + " :> " + ty.FullName + ")"
      }
    }
  }

  public variant Fun_body
  {
    | FB_parsed_expr { expr : Parsetree.Expr; }
    | FB_typed_expr { expr : Typedtree.Expr; }
    | FB_compiled_expr
    | FB_extern { name : string; }
    | FB_abstract  // for interface method
  }

  public variant Fun_kind
  {
    | FK_method { f_implements : list <Parsetree.Splicable_string>; }
    | FK_bound_method { f_implements : list <IMethod>; }
    | FK_ctor
    | FK_static_ctor
    | FK_function
    | FK_iface_method
  }


} // Nemerle.Compiler
