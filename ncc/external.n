(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

(*
 * NOTE: this is bootstrap code that will be eventually removed
 *)

namespace Nemerle.Compiler 
{
  open Nemerle.Collections;
  open Nemerle.Compiler.Parsetree;
  open Nemerle.Compiler;


  (**
   * External declarations for Framework classes.
   *)
  class ExternalDeclarationsRegistry
  {
    public static mutable SystemDll : System.Reflection.Assembly;
        

    (**
     * The static constructor initializes the delarations store
     *)
    public static this ()
    {
      try
        ExternalDeclarationsRegistry.SystemDll <- System.Reflection.Assembly.Load ("mscorlib.dll")
      with e : System.IO.FileNotFoundException =>
        ExternalDeclarationsRegistry.SystemDll <- System.Reflection.Assembly.Load ("corlib.dll")
    }


    (**
     * Creates a public constructor declaration
     *)
    public static make_ctor (env : Env, location : Location, class_name : string, 
                             param_list : list (Fun_parm)) : Class_member
    {
      def header = Fun_header (location, ".ctor", Type.T_void (), param_list);
      def member = Class_member.M_function (header, FK_ctor (), FB_extern (class_name + "..ctor"));
      member.name <- ".ctor";
      member.modifiers <- [Modifier.Mod_public ()];
      member
    }
  

    (**
     * Creates a public static method declaration
     *)
    public static make_static_method (env : Env, location : Location, class_name : string, method_name : string, 
                                      return_type : Type, param_list : list (Fun_parm)) : Class_member
    {
      def location = Location("[MsCoreLib:" + class_name + "]", 0, 0);
      def header = Fun_header (location, method_name, return_type, param_list);
      def member = Class_member.M_function (header, FK_function (), FB_extern (class_name + "." + method_name));
      member.name <- method_name;
      member.modifiers <- [Modifier.Mod_public ()];
      member  
    }

  
    (**
     * Creates a public method declaration
     *)
    public static make_method (env : Env, location : Location, class_name : string, method_name : string, 
                               return_type : Type, param_list : list (Fun_parm)) : Class_member
    {
      def header = Fun_header (location, method_name, return_type, param_list);
      def member = Class_member.M_function (header, FK_method ([]), FB_extern (class_name + "." + method_name));
      member.name <- method_name;
      member.modifiers <- [Modifier.Mod_public ()];
      member  
    }


    (**
     * Creates a public property declaration
     *)
    public static make_property (env : Env, location : Location, class_name : string, property_name : string, 
                                 property_type : Type, is_readable : bool, is_writeable : bool,
                                 indexer_parameters : list (Fun_parm)) : Class_member
    {
      def reader = if (is_readable) Some (FB_extern (class_name + ".get_" + property_name)) else None ();
      def writer = if (is_writeable) Some (FB_extern (class_name + ".set_" + property_name)) else None ();      
      def member = Class_member.M_property (property_type, reader, writer, indexer_parameters);
      member.name <- property_name;
      member.modifiers <- [Modifier.Mod_public ()];
      member  
    }
  }
} (* namespace *)
