using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Project;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public sealed class EngineContext : IIdeProject, IDisposable {

        internal this(project : IProject) {
            this.project = project;
            this.engine = EngineFactory.Create(this, System.Console.Out, false);
        }

        protected override Finalize() : void {
            Dispose();
        }

        [Accessor]
        private engine : IEngine;

        [Accessor]
        private project : IProject;

        #region Disposable
        [Accessor]
        mutable disposed : bool = false;

        public Dispose() : void {
            unless(disposed) {

            }
            disposed = true;
        }
        #endregion

        #region IIdeProject

        public GetAssemblyReferences() : SCG.IEnumerable[string] {
            ["mscorlib",
             "System",
             "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
             "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
             "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]
        }

        public GetMacroAssemblyReferences() : SCG.IEnumerable[string] {
            []
        }

        public GetOptions() : CompilationOptions {
            CompilationOptions()
        }

        public GetSource(fileIndex : int) : ISource {
            null
        }

        public GetSources() : SCG.IEnumerable[ISource] {
            []
        }

        public ClearAllCompilerMessages() : void {
        }

        public SetCompilerMessageForCompileUnit(compileUnit : CompileUnit) : void {
        }

        public SetMethodCompilerMessages(member : MemberBuilder, messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public SetStatusText(text : string) : void {
        }

        public SetTopLevelCompilerMessages(messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public ShowMessage(message : string, messageType : MessageType) : void {
        }

        public LookupLocationsFromDebugInformation(info : GotoInfo) : array[GotoInfo] {
            array(0)
        }

        public SetHighlights(source : ISource, highlights : SCG.IEnumerable[GotoInfo]) : void {
        }

        public AddUnimplementedMembers(source : ISource, ty : TypeBuilder, unimplementedMembers : SCG.IEnumerable[IMember]) : void {
        }

        public AddOverrideMembers(source : ISource, ty : TypeBuilder, notOverriden : SCG.IEnumerable[IMember]) : void {
        }

        public TypesTreeCreated() : void {
        }

        #endregion

    }


}