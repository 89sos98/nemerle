using Nemerle.IO;

class A {}
class B : A {}

class M {
  static g (b : B) : A { (b : A) }        // OK
  static f () : int { ("foo" : int) }    // E: expected int.*, got string in type-enforced expression
}

module M1 {
  f () : void {
    def f1 (x) { printf ("%s\n", x) };
    printf ("%d", f1 ("foo")); // E: expected int.*, got void in type-enforced expression
    f1 (3); // E: in argument #1 \(x\), needed a string.*, got int

    _ = null : System.Int32; // E: expected int.*, got .* in type-enforced expression.*null

    _ = $ "$(foo"; // E: runaway .* in format string
    _ = $ "$(foo +)"; // E: parse error near operator
    _ = $ ""; // OK
    _ = $ "$()"; // OK
  }
}
