using main;

interface I_Comparable_To ('a) 
  {
    compare (e : 'a) : int;
  }

class KV ('a) implements I_Comparable_To (KV ('a))
  {
    key : string;
    public val : 'a;

    private compare (x : KV ('a)) : int
      implements I_Comparable_To.compare 
        {
          System.String.CompareOrdinal (this.key, x.key)
        }

    public this (key : string, val : 'a)
      {
        this.key <- key;
        this.val <- val;
      }
  }

class main {
  variant tree ('b)
    where 'b :> I_Comparable_To ('b)
      { 
        | Node { 
            left : tree ('b); 
            data : 'b; 
            right : tree ('b); 
          }
        | Tip {}
      }

  static 'a where 'a :> I_Comparable_To('a) insert (t : tree ('a), e : 'a) : tree ('a) {
    match (t) {
      | (Node) as t =>
        def res = t.data.compare(e);
        if (res < 0) {
          def l = insert (t.left, e);
          Node (l, t.data, t.right)
        } else if (res > 0)
          Node (t.left, t.data, insert (t.right, e))
        else
          raise Invalid_argument("Tree.insert")
      | Tip => Node (Tip (), e, Tip ())
    }
  }
    
  static 'a where 'a :> I_Comparable_To('a) find (t : tree ('a), e : 'a) : 'a {
    match (t) {
      | (Node) as t =>
        def res = t.data.compare(e);
        if (res < 0)
          find (t.left, e)
        else
          if (res > 0)
            find (t.right, e)
          else
            t.data
      | Tip =>
        raise Not_found ()
    }
  }

    static Main () : void 
      {
        def t = Tip ();
        def t = insert (t, KV (key = "foo", val = 1));
        def t = insert (t, KV (key = "bar", val = 2));
        def t = insert (t, KV ("baz", val = 3));
        def t = insert (t, KV ("quxx", 4));
          try
            if ((find (t, KV ("bar", 0))) . val == 2)
              if ((find (t, KV ("quxx", 0))) . val == 4)
                printf ("ok!\n")
              else
                printf ("oops1\n")
            else
              printf ("oops2\n")
          with { _ : Not_found =>
            printf ("not found\n")
          };
          try {
            def _ = insert (t, KV ("bar", 12));
            ()
          } with { _ : Invalid_argument =>
            printf ("inval (ok)\n")
          }
      }
}

/*
BEGIN-OUTPUT
ok!
inval (ok)
END-OUTPUT
*/
