namespace NestedNames {
  using System;
  using System.Collections;
  
	class X {
		public static Main() :  void {
			mutable  a =  X();
			_ = a.x();
                        _ = a.Y;
		}

		public Y : Y {
			get {
				  Y();
			}
		}

		public x() :  IPooledEnumerable {
                  // note that Y must mean NestedNames.Y not X.Y, because
                  // Y.NullEnumerable is only allowed as static reference to nested type
                  // and not element of Y() instance
			def a = Y.NullEnumerable.Instance;
                        _ = a.GetEnumerator ();
                        a
		}
	}

	public interface IPooledEnumerable : IEnumerable {
		 Free() : void;
	}

	public sealed class Y {
          public this () {
            Console.WriteLine ("constructing Y()");
          }
          
		public class NullEnumerable : IPooledEnumerable {
			private  mutable  m_Enumerator : InternalEnumerator;

			public static  Instance : NullEnumerable =  NullEnumerable();

			private this() {
                          Console.WriteLine ("constructing NullEnumerable()");
			}

			public GetEnumerator() :  IEnumerator {
                          Console.WriteLine ("in NullEnumerable");
				 m_Enumerator;
			}

			public Free() :  void {
			}

			private class InternalEnumerator : IEnumerator
			{
				public Reset() :  void {
				}

				public Current : object
				{
					get {
						 null;
					}
				}

				public MoveNext() :  bool {
					 false;
				}
			}
		}
	}
}

/*
BEGIN-OUTPUT
constructing NullEnumerable()
in NullEnumerable
constructing Y()
END-OUTPUT
*/
