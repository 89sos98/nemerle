#pragma indent

using NemerleUnit
using Nemerle.Aop.Helper.ParserCombinators
using Nemerle.Compiler
using Nemerle.Aop.Helper
using Nemerle.Aop.DevMacros

test "token equal"
    assert token_equal(Token.Identifier("ident"), Token.Identifier("ident"))
    assert !token_equal(Token.Identifier("ident1"),Token.Identifier("ident2"))

test "some"
    def tokens = Helper.TokenList(["*","id2"])
    def parse = some(operator("*"))
    assert parse(tokens) != null

test "alternative"
    def tokens = Helper.TokenList(["*","id2"])
    def parse = some(operator("*") <*> parse_id)
    assert parse(tokens)[1] equals "id2"

test "repete"
    def tokens = Helper.TokenList(["id1","id2"])
    def parse = some(repetition(parse_id))
    assert parse(tokens) equals ["id1","id2"]

test "operator parsing"
    def tokens = Helper.TokenList(["*"])
    def parse = some(operator("*"))
    assert parse(tokens) equals "*"

test "option"
    def tokens = Helper.TokenList(["*"])
    def parse = some(optional(operator("*")))
    match(parse(tokens))
        | None => assert false
        | _ => ()
