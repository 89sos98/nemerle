
interface Moogie [T]  { }

interface IBuggy [+P, -M] {
  Get (i : int) : M; // E: return type of method `Get' must behave covariantly
  IsEmpty : Moogie [M] { get; }; // E: return type of method `get_IsEmpty' must behave covariantly
  
  Set (x : P) : void; // E: type of `Set' method's parameter `x' must behave contravariantly
  
  MeGene ['a] (x : int) : void where 'a : P; // E: constraints of generic parameters of method `MeGene' must behave contravariantly
}

()
