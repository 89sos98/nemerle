using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    public this(manager : ManagerClass)
    {
      this.manager          = manager;
      this.isLastStatement  = true;
      this.isIntoExpression = false;
      this.labelScope       = LabelScope(manager);
      this.switchScope      = SwitchScope(this.labelScope);
      this.isBreakFromLoop  = true;
    }

    private this( manager           : ManagerClass,
                  currentEnv        : GlobalEnv,
                  typeDecls         : SCG.List[PT.TopDeclaration], 
                  isLastStatement   : bool,
                  isIntoExpression  : bool,
                  labelScope        : LabelScope,
                  switchScope       : SwitchScope,
                  isBreakFromLoop   : bool)
    {
      this.manager          = manager;
      this.currentEnv       = currentEnv;
      this.typeDecls        = typeDecls;
      this.isLastStatement  = isLastStatement;
      this.isIntoExpression = isIntoExpression;
      this.labelScope       = labelScope;
      this.switchScope      = switchScope;
      this.isBreakFromLoop  = isBreakFromLoop;
    }

    private WithLastStatement(value : bool) : AstConverter
    {
      if(isLastStatement == value)
        this
      else
        AstConverter(
          manager           = this.manager,
          currentEnv        = this.currentEnv,
          typeDecls         = this.typeDecls,
          isLastStatement   = value,
          isIntoExpression  = this.isIntoExpression,
          labelScope        = this.labelScope,
          switchScope       = this.switchScope,
          isBreakFromLoop   = this.isBreakFromLoop)
    }

    private WithIntoExpression(value : bool) : AstConverter
    {
      if(isIntoExpression == value)
        this
      else
        AstConverter(
          manager           = this.manager,
          currentEnv        = this.currentEnv,
          typeDecls         = this.typeDecls,
          isLastStatement   = this.isLastStatement,
          isIntoExpression  = value,
          labelScope        = this.labelScope,
          switchScope       = this.switchScope,
          isBreakFromLoop   = this.isBreakFromLoop)
    }

    private WithNewLabelScope(newLabelScope : LabelScope) : AstConverter
    {
      AstConverter(
        manager             = this.manager,
        currentEnv          = this.currentEnv,
        typeDecls           = this.typeDecls,
        isLastStatement     = this.isLastStatement,
        isIntoExpression    = this.isIntoExpression,
        labelScope          = newLabelScope,
        switchScope         = SwitchScope(newLabelScope),
        isBreakFromLoop     = this.isBreakFromLoop)
    }

    private WithNewSwitchScope() : AstConverter
    {
      AstConverter(
        manager             = this.manager,
        currentEnv          = this.currentEnv,
        typeDecls           = this.typeDecls,
        isLastStatement     = this.isLastStatement,
        isIntoExpression    = this.isIntoExpression,
        labelScope          = this.labelScope,
        switchScope         = SwitchScope(this.labelScope),
        isBreakFromLoop     = false)
    }

    private WithBreakFromLoop(value : bool) : AstConverter
    {
      if(isBreakFromLoop == value)
        this
      else
        AstConverter(
          manager           = this.manager,
          currentEnv        = this.currentEnv,
          typeDecls         = this.typeDecls,
          isLastStatement   = this.isLastStatement,
          isIntoExpression  = this.isIntoExpression,
          labelScope        = this.labelScope,
          switchScope       = this.switchScope,
          isBreakFromLoop   = value)
    }

    manager : ManagerClass;

    [RecordIgnore] mutable currentEnv : GlobalEnv;

    [RecordIgnore] mutable typeDecls : SCG.List[PT.TopDeclaration];

    isLastStatement : bool;

    isIntoExpression : bool;

    labelScope : LabelScope;

    switchScope : SwitchScope;

    isBreakFromLoop : bool;

    public Convert(compilationUnit : CS.CompilationUnit) : list[PT.TopDeclaration]
    {
      manager.MacroColors.PushUseSiteColor();
      try {
        typeDecls = SCG.List();
        currentEnv = manager.CoreEnv;
        ConvertExternAliases(compilationUnit.ExternAliases);
        ConvertUsingDirectives(compilationUnit.UsingDirectives);
        ConvertGlobalAttributes(compilationUnit.GlobalAttributes);
        ConvertNamespaceNodes(compilationUnit.Members);
        NList.ToList(typeDecls)
      } finally {
        manager.MacroColors.PopColor();
      }
    }
  }
}