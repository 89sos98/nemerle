/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.Globalization;
using Nemerle.Collections;
using Nemerle.Utility;
using System.Math;
using SCG = System.Collections.Generic;
using System.Diagnostics;

namespace Nemerle.Compiler {

  public struct Location : System.IComparable [Location]
  {
    static this ()
    {
      def index = AddFile(""); // fake file with index 0
      assert(index == 0);
    }

    internal static _isFileInIndentationSyntax : SCG.List[bool]         = SCG.List();
    private  static _files                     : SCG.List[string]       = SCG.List();
    private  static _filesMap                  : Hashtable[string, int] = Hashtable();

    public this (fileIndex : int, line : int, col : int)
    {
      this (fileIndex, line, col, line, col);
    }    

    public this (fileName : string, line : int, col : int, endLine : int, endCol : int)
    {
      this (GetFileIndex (fileName), line, col, endLine, endCol);
    }

    public this (fileIndex : int, line : int, col : int, endLine : int, endCol : int)
    {
      assert(fileIndex >= 0);

      _fileIndex = fileIndex;
      _line      = line;
      _column    = col :> short;
      _endLine   = endLine;
      _endColumn = endCol :> short;
    }    
    
    public static Default : Location = Location (0, 0, 0, 0, 0);

    public static @== (x : Location, y : Location) : bool { x.Equals (y) }
    public static @!= (x : Location, y : Location) : bool { !x.Equals (y) }
   
    /// This operator is not commutative!
    public static @+ (x : Location, y : Location) : Location
    {
      if (x.FileIndex == y.FileIndex)
        Location(x._fileIndex, x.Line, x.Column, y.EndLine, y.EndColumn)
      else
      {
        //throw System.ArgumentException ($"Combinig locations of different files ($x and $y)");
        //System.Console.WriteLine($">>>> Combinig locations of different files ($x and $y)\n $(System.Diagnostics.StackTrace())");

        if (x == Default)
          y
        else
          x
      }
    }    
    
    public AsGenerated () : Location
    {
      Location (_fileIndex | 0x40000000, _line, _column, _endLine, _endColumn)
    }
    
    public IsGenerated : bool
    { get { _fileIndex %&& 0x40000000 } }
    
    public static GetFileName(index : int) : string
    {
      _files[index];
    }

    /** Adds new filename to locations index. If filename in already in
        store, an error message is outputted.
     */
    public static AddFile (name : string) : int
    {
      when (_filesMap.Contains (name))
        Message.Error ($"file $name occured twice on the list to compile");

      GetFileIndex (name)
    }
    
    /** Removes a filename from the location index */
    public static RemoveFile (name : string) : void
    {
      unless ((_filesMap : SCG.Dictionary[string, int]).Remove (name))
          throw System.ArgumentException ($"file $name do not exist");
    }

    public static IsFileInIndentationSyntax(fileIndex : int) : bool
    {
      _isFileInIndentationSyntax[fileIndex]
    }

    /** Gets index of given filename in locations store. If one doesn't exist
        it is being added and new index is returned.
     */
    public static GetFileIndex (name : string) : int
    {
      mutable index;

      if (_filesMap.TryGetValue(name, out index))
        index
      else
      {
        index = _files.Count;
        _files.Add(name);
        _isFileInIndentationSyntax.Add(false);
        _filesMap[name] = index;
        index
      }
    }

    public FileIndex : int {
      get {
        _fileIndex & 0x3FFFFFFF
      }
    }
    _fileIndex : int;
    [Accessor] _line : int;
    _column : short;
    public Column : int { get { _column } }

    [Accessor] _endLine : int;
    _endColumn : short;
    public EndColumn : int { get { _endColumn } }

    public File : string
    {
      [Nemerle.Assertions.Ensures (value != null)]
      get { _files [FileIndex]; }
    }

    public CompareTo (x : Location) : int
    {
      if (FileIndex == x.FileIndex) // here we ignore generated / parsed bit
        if (Line == x.Line)
          Column - x.Column
        else
          Line - x.Line
      else
        File.CompareTo (x.File)
    }

    public override ToString () : string {
      if (this == Default)
        ""
      else
        if (EndLine != 0)
          $"$File:$Line:$Column:$EndLine:$EndColumn: "
        else if (Line != 0)
          $"$File:$Line:$Column: "
        else
          File + ": "
    }

    [Nemerle.OverrideObjectEquals]
    public Equals (other : Location) : bool
    {
      FileIndex == other.FileIndex // ignore generated / parsed bit
      && _line == other._line       && _column == other._column
      && _endLine == other._endLine && _endColumn == other._endColumn
    }

    public FromEnd () : Location
    {
      Location(FileIndex, EndLine, EndColumn, EndLine, EndColumn)
    }
  }

  public class Located
  {
    public mutable loc : Location;
    public this () { loc = Location_stack.top (); }
    public this (loc : Location) { this.loc = loc }

    public Location : Location { get { loc } }
  }

  [System.Flags]
  public enum NemerleAttributes
  {
    | None            = 0x00000
    | Public          = 0x00001
    | Private         = 0x00002
    | New             = 0x00004 
    | Protected       = 0x00008
    | Abstract        = 0x00010
    | Virtual         = 0x00020
    | Sealed          = 0x00040
    | Static          = 0x00080
    | Mutable         = 0x00100
    | Internal        = 0x00200
    | Override        = 0x00400
    | Struct          = 0x01000
    | Macro           = 0x02000
    | Volatile        = 0x04000
    | SpecialName     = 0x08000
    | Partial         = 0x10000
    | Extern          = 0x20000
    /// field is immutable, but compiler overrides it and can assign something
    | CompilerMutable = 0x40000 

    | VirtualityModifiers = New %| Abstract %| Virtual %| Override
    | AccessModifiers = Public %| Private %| Protected %| Internal
  }
 
  public partial class Modifiers 
  {
    public mutable mods : NemerleAttributes;
    public mutable custom_attrs : list [Parsetree.PExpr];
    internal mutable macro_attrs : list [string * Parsetree.PExpr];

    public static Empty : Modifiers;

    public IsEmpty : bool
    {
      get {
        custom_attrs.IsEmpty && macro_attrs.IsEmpty
      }
    }

    public this (mods : NemerleAttributes, custom_attrs : list [Parsetree.PExpr])
    {
      this.mods = mods;
      this.custom_attrs = custom_attrs;
      this.macro_attrs = [];
    }

    public static this ()
    {
      Empty = Modifiers (NemerleAttributes.None, []);
    }

    public Attributes : NemerleAttributes {
      get { mods }
    }

    public GetCustomAttributes () : list [Parsetree.PExpr]
    {
      custom_attrs
    }
    
    public GetMacroAttributes () : list [Parsetree.PExpr]
    {
      macro_attrs.Map (Pair.Second)
    }
    
    public AddCustomAttribute (expr : Parsetree.PExpr) : void
    {
      custom_attrs = expr :: custom_attrs;
    }

    override public ToString() : string
    {
      $"$custom_attrs $mods"
    }
  }

  public variant Literal
  {
    | Void
    | Null
    | String { val : string; }
    | Float { val : float; }
    | Double { val : double; }
    | Decimal { val : decimal; }
    | Char { val : char; }
    | Bool { val : bool; }
    | Integer {
        val : ulong; 
        is_negative : bool; 
        mutable treat_as : MType.Class;
      } 

    | Enum { val : Literal.Integer; ty : TypeInfo; field : IField; }


    [OverrideObjectEquals]
    public Equals (lit : Literal) : bool
    {
      match ((this, lit)) {
        | (Void, Void)
        | (Null, Null) => true
        | (String (x1), String (x2)) => x1 == x2
        | (Float (x1), Float (x2)) => x1 == x2
        | (Double (x1), Double (x2)) => x1 == x2
        | (Decimal (x1), Decimal (x2)) => x1 == x2
        | (Char (x1), Char (x2)) => x1 == x2
        | (Bool (x1), Bool (x2)) => x1 == x2
        | (Integer (val, is_neg, _), Integer (val', is_neg', _)) =>
          val == val' && is_neg == is_neg'
        | (Enum (v1, t1, f1), Enum (v2, t2, f2)) => 
          v1.Equals (v2) && t1.Equals (t2) && (if (f1 == null) f2 == null else f1.Equals (f2))
        | _ => false
      }
    }

      
    /**
     * Converts 'this' literal to an equivalent (lexable) string
     */
    public override ToString () : string
    {
      match (this) {
        | Literal.Void           => "()"
        | Literal.Null           => "null"

        | Literal.String   (val) => "\"" + val.Replace ("\n", "\\n") + "\""
        | Literal.Float    (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "f"
        | Literal.Double   (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "d"
        | Literal.Decimal  (val) => val.ToString (NumberFormatInfo.InvariantInfo) + "m"
        | Literal.Char     (val) => "'" + val.ToString () + "'"
        | Literal.Bool     (val) => if (val) "true" else "false"
        | Literal.Integer  (val, is_negative, _treat_as) =>
          def s =
            if (is_negative) "-" + val.ToString ()
            else val.ToString ();
          s
          /*
          if (treat_as == null) s
          else $ "($s : $treat_as)";
          */
          
        | Literal.Enum (val, ty, _) => "(" + val.ToString () + " :> " + ty.FullName + ")"
      }
    }
    
    public SystemType (InternalType : InternalTypeClass) : System.Type
    {
      GetInternalType (InternalType).SystemType
    }

    public GetInternalType (InternalType : InternalTypeClass) : MType
    {
      match (this) {
        | Literal.Void => InternalType.Void
        | Literal.Null => InternalType.Object
        | Literal.Char => InternalType.Char
        | Literal.String => InternalType.String
        | Literal.Float => InternalType.Single
        | Literal.Double => InternalType.Double
        | Literal.Decimal => InternalType.Decimal
        | Literal.Bool => InternalType.Boolean
        // for enums we want to stay with original type
        // because e.g. ToString is called on enum not int
        | Literal.Enum (_, ty, _) => ty.GetMemType ()
        | Literal.Integer (_, _, t) => t
      }
    }

    public WithType (t : MType) : option [Literal]
    {
      def InternalType = t.Manager.InternalType;
      match (this) {
        | Literal.Void => None ()
        | Literal.Null when t.CanBeNull
        | Literal.Char when t.Equals (InternalType.Char)
        | Literal.String when t.Equals (InternalType.String)
        | Literal.Float when t.Equals (InternalType.Single)
        | Literal.Double when t.Equals (InternalType.Double)
        | Literal.Decimal when t.Equals (InternalType.Decimal)
        | Literal.Bool when t.Equals (InternalType.Boolean) 
        | Literal.Enum (_, tc, _) when MType.Class (tc, []).Equals (t)
          => Some (this)
          
        | Literal.Integer (val, is_neg, cur) =>
          if (cur.Equals (t)) Some (this)
          else
            if (Typer.LiteralConversionPossible (this, t))
              Some (Literal.Integer (val, is_neg, t :> MType.Class))
            else
              None ()

        | _ => None ()
      }
    }
    
    public WithProperType () : Literal
    {
      def InternalType = ManagerClass.Instance.InternalType;
      match (this) {
        | Literal.Integer (0, true, _) => Literal.Integer (0, false, InternalType.Int32)
        | Literal.Integer (val, is_neg, _) =>
          def t =
            if (is_neg)
              if (val - 1 <= int.MaxValue)
                InternalType.Int32
              else
                InternalType.Int64
            else
              if (val <= int.MaxValue)
                InternalType.Int32
              else if (val <= uint.MaxValue)
                InternalType.UInt32
              else if (val <= System.Convert.ToUInt64 (long.MaxValue))
                InternalType.Int64
              else
                InternalType.UInt64;
          Literal.Integer (val, is_neg, t)
        | _ => this
      }
    }

    public AsObject (InternalType : InternalTypeClass) : object
    {
      match (this) {
        | Literal.Void => assert (false)
        | Literal.Null => null
        | Literal.Char (c) => c : object
        | Literal.String (s) => s
        | Literal.Float (f) => f
        | Literal.Double (d) => d
        | Literal.Decimal (d) => d
        | Literal.Bool (b) => b
        | Literal.Enum (l, t, _) =>
          def t = t.SystemType;
          if (t is System.Reflection.Emit.EnumBuilder || t is System.Reflection.Emit.TypeBuilder)
            l.AsObject (InternalType)
          else
            System.Enum.ToObject (t, l.AsObject (InternalType))
        | Literal.Integer (val, is_neg, t) =>
          def t = if (t == null) InternalType.Int32 else t;
          
          if (t.Equals (InternalType.UInt64)) {
            assert (!is_neg);
            val : object
          } else if (val == 0x8000000000000000UL) {
            assert (is_neg);
            assert (t.Equals (InternalType.Int64));
            long.MinValue : object
          } else {
            def val = 
              if (is_neg) 
                -System.Convert.ToInt64 (val)
              else
                System.Convert.ToInt64 (val);
            match (t.tycon.FullName) {
              | "System.UInt32" => (val :> uint) : object
              | "System.Int32" => val :> int
              | "System.Int16" => val :> short
              | "System.UInt16" => val :> ushort
              | "System.SByte" => val :> System.SByte
              | "System.Byte" => val :> System.Byte
              | "System.Int64" => val
              | _ => assert (false, t.tycon.FullName)
            }
          }
      }
    }

    public AsInt : option [int]
    {
      get {
        match (this) {
          | Literal.Integer (0x80000000ul, true, _) => Some (int.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7FFFFFFFul == x =>
            Some (if (neg) -(x :> int) else x :> int)
          | _ => None ()
        }
      }
    }

    public AsSByte : option [sbyte]
    {
      get {
        match (this) {
          | Literal.Integer (0x80ul, true, _) => Some (sbyte.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7Ful == x =>
            Some (if (neg) -(x :> int) :> sbyte else x :> sbyte)
          | _ => None ()
        }
      }
    }

    public AsByte : option [byte]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= byte.MaxValue => Some (x :> byte)
          | _ => None ()
        }
      }
    }

    public AsShort : option [short]
    {
      get {
        match (this) {
          | Literal.Integer (0x8000ul, true, _) => Some (short.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7FFFul == x =>
            Some (if (neg) -(x :> int) :> short else x :> short)
          | _ => None ()
        }
      }
    }

    public AsUShort : option [ushort]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= ushort.MaxValue => Some (x :> ushort)
          | _ => None ()
        }
      }
    }

    public AsUInt : option [uint]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= uint.MaxValue => Some (x :> uint)
          | _ => None ()
        }
      }
    }

    public AsLong : option [long]
    {
      get {
        match (this) {
          | Literal.Integer (0x8000000000000000ul, true, _) => Some (long.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x8000000000000000ul != 0ul =>
            Some (if (neg) -(x :> long) else x :> long)
          | _ => None ()
        }
      }
    }

    public AsULong : option [ulong]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) => Some (x)
          | _ => None ()
        }
      }
    }

    public static FromInt (x : int) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == int.MinValue)
        Literal.Integer (0x80000000UL, true, InternalType.Int32)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int32)
    }

    public static FromSByte (x : sbyte) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == sbyte.MinValue)
        Literal.Integer (0x80UL, true, InternalType.SByte)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.SByte)
    }

    public static FromByte (x : byte) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.Byte)
    }

    public static FromShort (x : short) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == short.MinValue)
        Literal.Integer (0x8000UL, true, InternalType.Int16)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int16)
    }

    public static FromUShort (x : ushort) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt16)
    }

    public static FromUInt (x : uint) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt32)
    }

    public static FromLong (x : long) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == long.MinValue)
        Literal.Integer (0x8000000000000000UL, true, InternalType.Int64)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int64)
    }

    public static FromULong (x : ulong) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt64)
    }

    public static FromObject (o : object) : Literal
    {
      if (o == null) Null ()
      else
        match (o) {
          | o is bool => Bool (o)
          | o is string => String (o)
          | o is float => Float (o)
          | o is double => Double (o)
          | o is decimal => Decimal (o)
          | o is char => Char (o)
          
          | o is int => FromInt (o)
          | o is sbyte => FromSByte (o)
          | o is byte => FromByte (o)
          | o is short => FromShort (o)
          | o is ushort => FromUShort (o)
          | o is uint => FromUInt (o)
          | o is long => FromLong (o)
          | o is ulong => FromULong (o)

          | o is System.Enum =>
            def s = o.ToString ("d");
            def tyname = NString.Split (o.GetType ().FullName, '+', '.');
            def tc = match (ManagerClass.Instance.NameTree.LookupExactType (tyname)) {
              | Some (tc) => tc
              | None => Message.FatalError ($"type `$(tyname.ToString (\".\"))' is not available - it is either not public or not referenced properly");
            }
            def t = tc.GetMemType ();
            def int_lit =
              if (s [0] == '-')
                Integer (ulong.Parse (s.Substring (1)), true, t)
              else
                Integer (ulong.Parse (s), false, t);
            // IT : Need IField
            Enum (int_lit, tc, null)

          | _ =>
            Util.ice ($ "cannot create literal from $o")
        }
    }
  }

  public variant FunBody
  {
    | Parsed { expr : Parsetree.PExpr; }
    | Typed { expr : Typedtree.TExpr; }
    | ILed
    | Abstract  // for interface method
  }

  public variant FunKind
  {
    | Method { f_implements : list [Parsetree.PExpr]; }
    | BoundMethod { f_implements : list [IMethod]; }
    | Constructor
    | StaticConstructor
    | Function
  }
} // Nemerle.Compiler
