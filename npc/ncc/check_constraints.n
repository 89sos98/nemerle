open Nemerle.Collections;

open Nemerle.Compiler;
open Nemerle.Compiler.Tyops;

namespace Nemerle.Compiler {
  class Check_constraints
    {
      // Check if typing constraints in all user-supplied types are satisfied.
      fun run(decls : list (Type_decl)) : void =
        letfun check_type(t : Type) : void =
          match t with [
            | T_ref (?t) => check_type (t)
            | T_out (?t) => check_type (t)
            | T_fun (?ts, ?t) => { List.iter(check_type, ts); check_type (t) }
            | T_void => ()
            | T_prod (?ts) => List.iter(check_type, ts)
            | T_var => ()
            | T_app ?a => 
              let (?sub, _) = Tyutil.subst_of_app (a) in
              letfun check_constraints (varid : int, t : Type) : void =
                letfun check_constraint (c : Type) : void =
                  if t >> (c /- sub) then ()
                  else {
                    Message.error ("typing constraint '" + Tyvars.name (varid) + 
                                   " :> " + c#as_string () + " is not satisfied");
                    Message.error ("by " + t#as_string () + " :> " + (c /- sub)#as_string ());
                    Message.error ((Tyinfo.lookup_td (a#ref_to))#loc, 
                                   "upon instantiation of " + (Tyinfo.lookup (a#ref_to))#fullname())
                  }
                in List.iter (check_constraint, Tyvars.constraints (varid)) 
              in List.iter2 (check_constraints, Tyvars.get_parms (a#ref_to), a#args)
          ]

        in Treeutil.walk_all_types (check_type, decls);
    }
  
} // end ns
