using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public partial abstract class Async[A]
  {
    public static FromBeginEnd(begin : AsyncCallback -> IAsyncResult, end : IAsyncResult -> A) : Async[A]
    {
      AsyncFromBeginEnd(begin, end);
    }
  }

  [Record]
  internal class AsyncFromBeginEnd[A] : Async[A]
  {
    private begin : AsyncCallback -> IAsyncResult;
    private end : IAsyncResult -> A;

    [RecordIgnore]
    private mutable _executed : bool = false;

    [RecordIgnore]
    private mutable _result : A;

    [RecordIgnore]
    private mutable _job : AsyncJobBase;

    private Callback(asyncResult : IAsyncResult) : void
    {
      _executed = true;
      _result = end(asyncResult);
      _job.Start();
    }

    public override Exec(job : AsyncJobBase, res : ref A) : Async[A]
    {
      if (_executed)
      {
        res = _result;
        null;
      }
      else
      {
        _job = job;
        _job.State = JobState.Wait;
        _ = begin(Callback);
        this;
      }
    }
  }
}
