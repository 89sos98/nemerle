/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Typedtree
{
  [Record]
  public class Constraint
  {
    public tyvar : string;
    public ty : TType;
  }

  public variant TypeDeclaration
  {
    | Class
    | Alias         { ty : TType; }
    | Interface
    | Variant       { members : list <TypeInfo>; }
    | VariantOption
    | Enum
  }

  public variant TType
  {
    | Class    { tycon : TypeInfo; args : list <TType>; }
    | Variable { tyvar : Tyvar.T; }
    | ByRef    { t : TType; }
    | Out      { t : TType; }
    | Function { from : TType; to : TType; }
    | Void
    | Product  { args : list <TType>; }    
    | Array    { t : TType; rank : int; }

    public override ToString () : string
    {
      Tyutil.string_of_type (this)
    }
  }

  [Record]
  public class Fun_parm : Located
  {
    public name : string;
    public color : int;
    public mutable ty : TType;
    public mutable decl : LocalValue;
    public modifiers : Modifiers;
  }

  public enum FunctionUsage 
  {
    | NotUsed
    | UsedJustOnce
    | Used
    | UsedAsFirstClass
  }
  
  public class Fun_header : Located
  {
    public mutable name : string;
    public id : int;
    public mutable ret_type : TType;
    public mutable parms : list <Fun_parm>;
    public mutable typarms : list <Tyvar.T>;
    public tenv : Tyvar.TEnv;

    public mutable usage : FunctionUsage;
    // used for loop generation
    public mutable body : TExpr;

    public mutable closure_vars : list <LocalValue>;
    public mutable decl : LocalValue;
    public mutable all_locals : list <LocalValue>;

    public mutable cg_method : CG_method;

    public this (loc : Location, 
                 name : string, 
                 ret_type : TType, 
                 parms : list <Fun_parm>, 
                 typarms : list <Tyvar.T>, 
                 tenv : Tyvar.TEnv)
    {
      base (loc);
      this.name = name;
      this.ret_type = ret_type;
      this.parms = parms;
      this.typarms = typarms;
      this.tenv = tenv;

      id = Util.next_id ();
      closure_vars = [];
      all_locals = [];
      decl = null;
      cg_method = null;
      usage = FunctionUsage.NotUsed;
    }
  }

  [Record]
  public class Function_decl
  {
    public header : Fun_header;
    public body : TExpr;
  }

  
  [Record]
  public variant Pattern : Located
  {
    | Wildcard
    | As          { pat : Pattern; decl : LocalValue; }
    | HasType     { tycon : TypeInfo; }
    | Tuple       { args : list <Pattern>; }
    | Record      { args : list <IField * Pattern>; }
    | Application { name : TypeInfo; arg : Pattern; }
    | Enum        { fld : IField; val : Nemerle.Compiler.Literal; }
    | Literal     { lit : Nemerle.Compiler.Literal; }

    public mutable ty : TType;      
  }

  [Record]
  public class Match_case
  {
    public mutable patterns : list <Pattern * TExpr>;
    public body : TExpr;
  }
  
  [Record]
  public variant TExpr : Located
  { 
    | E_local_ref { decl : LocalValue; }
    | E_static_ref { mem : IMember; }
    | E_implicit_value_type_ctor { tc : TypeInfo; }
    | E_field_ref { obj : TExpr; fld : IField; }
    | E_constant_object_ref { mem : IField; }
    | E_property_ref { obj : TExpr; prop : IProperty; }
    | E_static_property_ref { prop : IProperty; }
    // XXX: notvirtual here is not used anywhere yet, consider removing it
    | E_method_ref { obj : TExpr; meth : IMethod; notvirtual : bool; }
    | E_call { func : TExpr; parms : list <Parm>; }
    | E_tail_call { func : TExpr; parms : list <Parm>; }
    | E_self_tail_call { parms : list <Parm>; }
    | E_assign { target : TExpr; source : TExpr; }
    | E_let { name : LocalValue; val : TExpr; body : TExpr; }
    | E_letfun { funs : list <Function_decl>; body : TExpr; }
    | E_match { expr : TExpr; cases : list <Match_case>; }
    | E_raise { exn : TExpr; }
    | E_try_with { body : TExpr; exn : LocalValue; handler : TExpr; }
    | E_try_finally { body : TExpr; handler : TExpr; }
    | E_literal { val : Literal; }
    | E_this
    | E_base { base_ctor : IMethod; }
    | E_type_conversion { expr : TExpr; target_type : TType; is_checked : bool; }  // (expr :> ty)
    | E_type_enforcement { expr : TExpr; target_type : TType; } // (expr : ty)
    | E_sequence { e1 : TExpr; e2 : TExpr; }
    | E_tuple { args : list <TExpr>; }
    | E_mkarray { args : list <TExpr>; dimensions : list <TExpr>; }
    | E_typeof { target_type : TType; }
    | E_array_indexer { over_type : TType; obj : TExpr; args : list <TExpr>; }
    | E_opcode { name : string; }

    public mutable ty : TType;
  }

  public enum ParmKind {
    | Normal
    | Ref
    | Out
  }

  [Record]
  public class Parm
  {
    public kind : ParmKind;
    public expr : TExpr;
    public name : string;  // "" if no name given

    public this (expr : TExpr)
    {
      kind = ParmKind.Normal;
      this.expr = expr;
      name = "";
    }
  }
} // Nemerle.Compiler.Typedtree
