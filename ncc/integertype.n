/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

namespace Nemerle.Compiler {

public interface IIntegerType {
  Zero : object { get; }
  One : object { get; }
  SystemType : System.Type { get; }
  Binary (op : string, x : object, y : object) : object;
  Unary (op : string, x : object) : object;
  //ConvertToSelf (from : object) : option <object>;
  FromLiteral (_ : Literal) : object;
}

module IntegerType {
  types : Hashtable <string, IIntegerType>;
  
  public ByName (name : string) : option <IIntegerType>
  {
    types.Get (name)
  }

  int_to_long (x : object) : option <long>
  {
    match (x.GetType ().FullName) {
      | "System.Int16" => Some (((x :> System.Int16) :> long))
      | "System.Int32" => Some (((x :> System.Int32) :> long))
      | "System.Int64" => Some (((x :> System.Int64) :> long))
      | "System.UInt16" => Some (((x :> System.UInt16) :> long))
      | "System.UInt32" => Some (((x :> System.UInt32) :> long))
      | "System.UInt64" => Some (((x :> System.UInt64) :> long))
      | "System.Byte" => Some (((x :> System.Byte) :> long))
      | "System.SByte" => Some (((x :> System.SByte) :> long))
      | "System.Char" => Some (((x :> System.Char) :> long))
      | _ => None ()
    }
  }

  int_to_ulong (x : object) : option <ulong>
  {
    if (x.GetType ().FullName == "System.UInt64")
      Some ((x :> ulong))
    else
      match (int_to_long (x)) {
        | Some (x) => Some ((x :> ulong))
        | None => None ()
      }
  }

  this ()
  {
    def type_list = [
      ("System.Int16", (Int16 () : IIntegerType)),
      ("System.UInt16", (UInt16 () : IIntegerType)),
      ("System.Int32", (Int32 () : IIntegerType)),
      ("System.UInt32", (UInt32 () : IIntegerType)),
      ("System.Int32", (Int64 () : IIntegerType)),
      ("System.UInt32", (UInt64 () : IIntegerType)),
      ("System.Byte", (Byte () : IIntegerType)),
      ("System.SByte", (SByte () : IIntegerType))
    ];
    types <- Hashtable ();
    List.Iter (type_list, fun (name, ty) { types.Set (name, ty) })
  }

// Begin generated code
  class SByte : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.SByte) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.SByte);
      def y = (y :> System.SByte);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid sbyte operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.SByte);
      match (name) {
        | "+" => +x
        | "-" => -x
        //| "~" => ~x
        | _ => Util.ice ("invalid sbyte operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_sbyte (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class Byte : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.Byte) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.Byte);
      def y = (y :> System.Byte);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid byte operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.Byte);
      match (name) {
        | "+" => +x
        //| "~" => ~x
        | _ => Util.ice ("invalid byte operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_byte (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class Int16 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.Int16) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.Int16);
      def y = (y :> System.Int16);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid short operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.Int16);
      match (name) {
        | "+" => +x
        | "-" => -x
        //| "~" => ~x
        | _ => Util.ice ("invalid short operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_short (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class UInt16 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.UInt16) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.UInt16);
      def y = (y :> System.UInt16);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid ushort operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.UInt16);
      match (name) {
        | "+" => +x
        //| "~" => ~x
        | _ => Util.ice ("invalid ushort operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_ushort (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class Int32 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.Int32) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.Int32);
      def y = (y :> System.Int32);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid int operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.Int32);
      match (name) {
        | "+" => +x
        | "-" => -x
        //| "~" => ~x
        | _ => Util.ice ("invalid int operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_int (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class UInt32 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.UInt32) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.UInt32);
      def y = (y :> System.UInt32);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid uint operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.UInt32);
      match (name) {
        | "+" => +x
        //| "~" => ~x
        | _ => Util.ice ("invalid uint operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_uint (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class Int64 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.Int64) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.Int64);
      def y = (y :> System.Int64);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid long operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.Int64);
      match (name) {
        | "+" => +x
        | "-" => -x
        //| "~" => ~x
        | _ => Util.ice ("invalid long operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_long (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


  class UInt64 : IIntegerType {
    public Zero : object
    {
      get { 0 } 
    }
    
    public One : object
    {
      get { 1 }
    }
    
    public SystemType : System.Type {
      get { typeof (System.UInt64) }
    }
    
    public Binary (name : string, x : object, y : object) : object
    {
      def x = (x :> System.UInt64);
      def y = (y :> System.UInt64);
      match (name) {
        | "+" => x + y
        | "-" => x - y
        | "*" => x * y
        | "/" => x / y
        | "%" => x % y
        | "%&" => x %& y
        | "%|" => x %| y
        | _ => Util.ice ("invalid ulong operator `" + name + "'")
      }
    }

    public Unary (name : string, x : object) : object
    {
      def x = (x :> System.UInt64);
      match (name) {
        | "+" => +x
        //| "~" => ~x
        | _ => Util.ice ("invalid ulong operator `" + name + "'")
      }
    }

    public FromLiteral (lit : Literal) : object
    {
      | L_ulong (x) => (x : object)
      | _ => null
    }

    public this () {}
  }


// End generated code

}
} // end namespace
