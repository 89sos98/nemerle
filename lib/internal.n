/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  /**
   * System.Type.FullName is null if it contains free generic parameters.
   * Here is replacement which doesn't return null and should be suitable.
  */
  public module SystemTypeExtensions
  {
    public TypeFullName (this t : System.Type) : string
    {
      if (t.FullName != null)
      {
        if(!t.ContainsGenericParameters)
          t.FullName
        else // K-Liss: more detailed look for generic type names
        {
          def genericArgs = t.GetGenericArguments();
          def ns = if(t.Namespace == "") "" else t.Namespace + ".";
          $"$ns$(t.Name)[..$(genericArgs.Map(_.Name))]";
        }
      }
      else {
        //internal System.Type.SigToString () : string, reflected from MS mscorlib.dll
        def SigToString (t : System.Type) {
          mutable e = t;
          while (e.HasElementType)
            e = e.GetElementType ();
          if (e.IsNested)
            t.Name
          else {
            def str = t.ToString ();
            if (!e.IsPrimitive && !e.Equals (typeof (System.Void)) && !e.Equals (typeof (System.TypedReference)))
              str
            else
              str //.Substring ("System.".Length) //I think we don't need to drop System prefix
          }
        }
        SigToString (t);
      }
    }
  }
}

namespace Nemerle.Internal
{
  public abstract class NemerleAttribute : System.Attribute { }
  
  [Record]
  [System.AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
  public class MacroInfoAttribute : System.Attribute
  {
    public this(name : string, syntactical : bool, usage : string) { _ = name; _ = syntactical; _ = usage; }
    public Name                   : string        { get; private set; }
    public Syntactical            : bool          { get; private set; }
    public ParameterNames         : array[string] { get; private set; }
    public ParameterTypes         : array[string] { get; private set; }
    public ParameterDefaultValues : array[string] { get; private set; }
    public IsParamArrays          : array[bool]   { get; private set; }
    public Usage                  : string        { get; private set; }
  }

  [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple=false)]
  public sealed class IgnoreFieldAttribute : System.Attribute { }

  [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
  public sealed class IgnoreConstructorAttribute : System.Attribute { }

  /**
   * Marks a volatile field
   */
  [AttributeUsage (AttributeTargets.Field)]
  public sealed class VolatileModifier : NemerleAttribute
  {  }

  /**
   * Marks an immutable field
   */
  [AttributeUsage (AttributeTargets.Field)]
  public sealed class ImmutableAttribute : NemerleAttribute
  {  }

  [AttributeUsage (AttributeTargets.Class | AttributeTargets.Method)]
  public sealed class ExtensionAttribute : NemerleAttribute
  { }

  /**
   * Used to store the custom operator priorities loaded as syntax extensions
   */
  [Record]
  public sealed class OperatorAttribute : NemerleAttribute
  {
    [Accessor] env      : string;
    [Accessor] name     : string;
    [Accessor] isUnary  : bool;
    [Accessor] left     : int;
    [Accessor] right    : int;

    public override ToString() : string
    {
      $"OperatorAttribute: $name (Env=$env, IsUnary=$isUnary, Left=$left, Right=$right)"
    }
  }

  /**
   * Marks a Nemerle variant type
   */
  [Record]
  public sealed class VariantAttribute : NemerleAttribute
  {
    [Accessor] variantOptions : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $variantOptions"
    }
  }

  /**
   * Marks a Nemerle variant option
   */
  public sealed class VariantOptionAttribute : NemerleAttribute
  {  }

  /**
   * Marks a constant Nemerle variant option
   */
  public sealed class ConstantVariantOptionAttribute : NemerleAttribute
  {  }

  /**
   * Container for type aliases.
   */
  [Record]
  public sealed class TypeAliasAttribute : NemerleAttribute
  {
    [Accessor] aliasedType : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $aliasedType"
    }
  }

  /**
   * Used on assembly to list contained macros.
   */
  [Record, AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
  public sealed class ContainsMacroAttribute : NemerleAttribute
  {
    [Accessor] name : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $name"
    }
  }

  [Record, AttributeUsage (AttributeTargets.All)]
  public sealed class MacroAttribute : NemerleAttribute
  {
    public name : string;
    public global_ctx : int;
    public parameters : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $name ($parameters)"
    }
  }

  [Record, AttributeUsage (AttributeTargets.Class, AllowMultiple = true)]
  public sealed class ExtensionPatternEncodingAttribute : NemerleAttribute
  {
    [Accessor] name : string;
    [Accessor] identifiers : string;
    [Accessor] pattern : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $name, Pattern:($pattern), Identifiers:($identifiers)"
    }
  }

  [Record, AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
  public sealed class RegisterParserAttribute : NemerleAttribute
  {
    [Accessor] name       : string;
    [Accessor] extension  : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $name, Extension:($extension)"
    }
  }

  [Record, AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
  public sealed class CompilerBackendAttribute : NemerleAttribute
  {
    [Accessor] name : string;

    public override ToString() : string
    {
      $"$(GetType().Name): $name"
    }
  }
}

namespace Nemerle.Utility
{
  public class Identity ['a, 'b] : Builtins.Function ['a, 'b] where 'a : 'b
  {
    public static Instance : Identity ['a, 'b] = Identity ();

    public override apply (x : 'a) : 'b { x }
  }
}
