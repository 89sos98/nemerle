using System;
using System.IO;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace CSharpToNemerle
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  macro Include(files : string)
  {
    //assert2(false);
    def manager = Macros.Manager();
    def converter = CSharpToNemerle.AstConverter(manager);
    def preParser = CSharpParser.PreParser();
    def parser = CSharpParser.Parser();
    def projectDir = Path.GetDirectoryName(manager.Options.ProjectPath);
    foreach(fileName in Directory.GetFiles(projectDir, files))
    {
      def fileIndex = Location.GetFileIndex(fileName);
      def source = Nemerle.Peg.SourceSnapshot(File.ReadAllText(fileName), fileIndex, fileName);

      match(preParser.Parse(source))
      {
        | Some(preAst) =>
          def definedSymbols = manager.Options.CommandDefines.Fold([],
            (symbol, isDefined, acc) => if(isDefined) symbol :: acc else acc);

          def preResult = CSharpParser.Preprocessor.Run(preAst, definedSymbols);
          def locationConverter =
            if(preResult.LineHints.Count > 0)
              DirectiveLocationConverter(preResult.LineHints)
            else
              LocationConverter.Default;
          when(preResult.HasErrors)
          {
            foreach(error in preResult.Errors)
              Message.Error(locationConverter.Convert(error.Location), $"C# preprocessor: $error");
          }

          foreach(directive in preResult.CompilationMessages)
          {
            | CompilationError(msg) =>
              Message.Error(locationConverter.Convert(directive.Location), msg);

            | CompilationWarning(msg) =>
              Message.Warning(locationConverter.Convert(directive.Location), msg);

            | _ => ()
          }

          match(parser.Parse(preResult.Source))
          {
            | Some(compilationUnit) =>
              def decls = converter.Convert(compilationUnit, locationConverter);
              decls.Iter(manager.ScanningPipeline)

            | _ =>
              def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
              def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
              Message.Error(locationConverter.Convert(loc), $"failed to parse file `$fileName'.")
          }

        | _ =>
          def (errorPos, _) = preParser.GetMaxRollbackPosAndIds();
          def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
          Message.Error(LocationConverter.Default.Convert(loc), $"failed to pre-parse file `$fileName'.")
      }
    }
  }
}