using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  public partial class Parser
  {
    //expressionInitializer   : VariableInitializer     = expression;
    expressionInitializer(expr : VToken[Expr]) : VariableInitializer
    {
      VariableInitializer.Expr(expr.Value)
    }

    //stackallocInitializer   : VariableInitializer     = "stackalloc"S anyType "["s expression "]"s;
    stackallocInitializer(_stackalloc : NToken, _ : NToken,
                          allocType   : VToken[TypeRef],
                          _lparen     : NToken, _ : NToken,
                          expr        : VToken[Expr],
                          _rparen     : NToken, _ : NToken) : VariableInitializer
    {
      VariableInitializer.StackAlloc(allocType.Value, expr.Value)
    }

    //variableInitializerList : VariableInitializerList = variableInitializer (","s variableInitializer)*;
    variableInitializerList(head : VToken[VariableInitializer],
                            tail  : SCG.List[NToken * NToken * VToken[VariableInitializer]]) : list[VariableInitializer]
    {
      head.Cons(tail)
    }

    //complexInitializer      : VariableInitializer     = "{"s (variableInitializerList (","s)?)? "}"s;
    complexInitializer( _lparen : NToken, _ : NToken,
                        init    : option[VToken[list[VariableInitializer]] * option[NToken * NToken]],
                        _rparen : NToken, _ : NToken) : VariableInitializer
    {
      match(init) {
        | Some( (init, _) ) => VariableInitializer.Complex(init.Value)
        | _                 => VariableInitializer.Complex([])
      }
    }

    //variableInitializer     : VariableInitializer     = complexInitializer
    //                                                  / stackallocInitializer
    //                                                  / expressionInitializer;
    variableInitializer(opt : VToken[VariableInitializer]) : VariableInitializer
    {
      opt.Value
    }

    //constantDeclarator  : ConstantDeclarator      = identifier "="s constantExpression;
    constantDeclarator( identifier          : VToken[Identifier],
                        _eq                 : NToken, _ : NToken,
                        constantExpression  : VToken[Expr]) : Identifier * Expr
    {
      (identifier.Value, constantExpression.Value)
    }

    //constantDeclarators : ConstantDeclaratorList  = constantDeclarator (","s constantDeclarator)*;
    constantDeclarators(head : VToken[Identifier * Expr],
                        tail  : SCG.List[NToken * NToken * VToken[Identifier * Expr]]) : list[Identifier * Expr]
    {
      head.Cons(tail)
    }

    //variableDeclarator  : VariableDeclarator      = identifier ("="s variableInitializer)?;
    variableDeclarator(identifier           : VToken[Identifier],
                       variableInitializer  : option[NToken * NToken * VToken[VariableInitializer]]) : Identifier * VariableInitializer
    {
      match(variableInitializer) {
        | Some( (_, _, init) ) => (identifier.Value, init.Value)
        | _                    => (identifier.Value, null)
      }
    }

    //variableDeclarators : VariableDeclaratorList  = variableDeclarator (","s variableDeclarator)*;
    variableDeclarators(head : VToken[Identifier * VariableInitializer],
                        tail  : SCG.List[NToken * NToken * VToken[Identifier * VariableInitializer]]) : list[Identifier * VariableInitializer]
    {
      head.Cons(tail)
    }
  }
}