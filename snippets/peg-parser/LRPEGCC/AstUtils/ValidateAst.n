using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Macros;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace LRPEGCC.AstUtils
{
  // Ensures that AST object contains node that inherits from `nodeTypeName' class
  // and satisfies pattern `nodePattern'.
  // Code returns boolean value.
  macro ValidateAst(ast : expr, nodeTypeName : expr, nodePattern : expr)
  {
    def typer = ImplicitCTX();

    def makeResult(x : TT.TExpr)
    {
      def nodeType = typer.BindType(nodeTypeName);
      def typeHandler(ty : FixedType, var : PT.PExpr) : option[PT.PExpr]
      {
        match(ty)
        {
          | Class when ty.TryProvide(nodeType)  =>
            Some(<[ match($var) { | $nodePattern => result = true | _ => () } ]>);
          | _ =>
            None()
        }
      }
      def typeWalker = TypeWalker(typeHandler);
      typeWalker.Run(x.Type);
      <[
        mutable result = false;
        $(typeWalker.Compile(x));
        result
      ]>
    }

    def getDefaultResult()
    {
      <[ false ]>
    }

    AstUtilsHelper.InferAstTypeAndMakeResult(typer, ast, getDefaultResult, makeResult)
  }
}