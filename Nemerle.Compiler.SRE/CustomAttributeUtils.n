using System;
using System.Reflection;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Imperative;

namespace Nemerle.Compiler.Sre
{
  internal module CustomAttributeUtils
  {
    public IsAttributeDefined(member : ICustomAttributeProvider, attrName : string, inherited : bool) : bool
    {
      foreach(attr when attr.GetType().FullName == attrName in member.GetCustomAttributes(inherited))
        return true;
      false
    }

    public IsAttributeDefined(member : ICustomAttributeProvider, attrNames : Set[string], inherited : bool) : bool
    {
      foreach(attr when attrNames.Contains(attr.GetType().FullName) in member.GetCustomAttributes(inherited))
        return true;
      false
    }

    public GetAttribute(member : ICustomAttributeProvider, attrName : string, inherited : bool) : SCG.IEnumerable[object]
    {
      foreach(attr when attrName == attr.GetType().FullName in member.GetCustomAttributes(inherited))
        yield attr
    }

    public IsNemerleAttributeDefined(member : ICustomAttributeProvider) : bool
    {
      IsAttributeDefined(member, _nemerleAttributes, false)
    }

    private _nemerleAttributes : Set[string] = Set(
    [
      "Nemerle.Internal.NemerleAttribute",
      "Nemerle.Internal.VolatileModifier",
      "Nemerle.Internal.ImmutableAttribute",
      "Nemerle.Internal.ExtensionAttribute",
      "Nemerle.Internal.OperatorAttribute",
      "Nemerle.Internal.VariantAttribute",
      "Nemerle.Internal.VariantOptionAttribute",
      "Nemerle.Internal.ConstantVariantOptionAttribute",
      "Nemerle.Internal.TypeAliasAttribute",
      "Nemerle.Internal.ContainsMacroAttribute",
      "Nemerle.Internal.MacroAttribute",
      "Nemerle.Internal.ExtensionPatternEncodingAttribute",
      "Nemerle.Internal.RegisterParserAttribute",
      "Nemerle.Internal.CompilerBackendAttribute",
    ]);

    public IsExtensionAttributeDefined(member : ICustomAttributeProvider) : bool
    {
      IsAttributeDefined(member, _extensionAttributes, false)
    }

    _extensionAttributes : Set[string] = Set(
    [
      "Nemerle.Internal.ExtensionAttribute",
      "System.Runtime.CompilerServices.ExtensionAttribute",
    ]);
  }
}