using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public enum JobState
  {
    | Ready
    | SwitchContext
    | Wait
    | Canceled
  }

  [Record]
  public class AsyncJob
  {
    public ExecutionContext : ExecutionContext { get; set; }
    public State : JobState { get; set; }

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (State == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }
  }

  public abstract class Async
  {
    public static SwitchTo(executionContext : ExecutionContext) : Async[FakeVoid]
    {
      AsyncSwitchExecutionContext(executionContext);
    }
  }

  [Record]
  public class AsyncSwitchExecutionContext : Async[FakeVoid]
  {
    private executionContext : ExecutionContext;
    public override Exec(job : AsyncJob, _res : ref FakeVoid) : Async[FakeVoid]
    {
      job.ExecutionContext = executionContext;
      job.State = JobState.SwitchContext;
      null;
    }
  }

  public abstract class Async[A] : Async
  {
    public abstract Exec(job : AsyncJob, res : ref A) : Async[A];

    public static ExecAll(job : AsyncJob, mutable async : Async[A]) : A
    {
      mutable res;
      while (async != null)
      {
        async = async.Exec(job, ref res);
        match (job.State)
        {
          | Ready         => (); // Do nothing
          | SwitchContext => Console.Error.WriteLine("Context switched");
          | Wait          => throw NotImplementedException();
          | Canceled      => throw NotImplementedException();
        }
        job.State = JobState.Ready;
      }
      res;
    }
  }
}
