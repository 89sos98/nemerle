namespace Sioux
{

using Nemerle.Collections;
using Nemerle.Xml;
using System.Net.Sockets;

public class DieException extends System.Exception
{
  public this () {}
}

public class Application
{
  protected virtual Run () : void
  {
  }

  protected GetVars : Hashtable (string, string);
  protected PostVars : Hashtable (string, string);
  protected mutable PageName : string;
  protected mutable Client : TcpClient;
  protected mutable SockStream : NetworkStream;
  protected mutable FormTemplate : XmlTemplate;

  public this ()
  {
    GetVars <- Hashtable (10);
    PostVars <- Hashtable (10);
    PageName <- "";
  }

  parse_into (h : Hashtable (string, string), qs : string) : void
  {
    def ql = List.FromArray (qs.Split (array ['&']));
    List.Iter (fun (s : string) {
      def pos = s.IndexOf ('=');
      def (n, v) = 
        if (pos != -1)
          (s.Substring (0, pos), s.Substring (pos + 1))
        else
          (s, "");
      def decode (s : string) { 
        System.Web.HttpUtility.UrlDecode (s, System.Text.Encoding.UTF8)
      };
      h.Set (decode (n), decode (v))
    }, ql)
  }

  set_get_vars (fname : string) : void
  {
    def idx = fname.IndexOf ('?');
    if (idx != -1) {
      PageName <- fname.Substring (0, idx);
      parse_into (GetVars, fname.Substring (idx + 1));
    } else
      PageName <- fname;
  }

  set_post_vars () : void
  {
    def sb = System.Text.StringBuilder ();
    def loop () {
      def ch = SockStream.ReadByte ();
      if (ch == -1) ()
      else {
        ignore (sb.Append ((ch :> char)));
        loop ()
      }
    };
    loop ();
    parse_into (PostVars, sb.ToString ())
  }

  public HandleRequest (fname : string, client : TcpClient, was_post : bool) : void
  {
    try {
      Client <- client;
      SockStream <- client.GetStream ();
      set_get_vars (fname);
      when (was_post)
        set_post_vars ();
      Run ();
      maybe_send_response ();
    } catch {
      | _ : DieException => ()
      | exn : System.Exception =>
        try {
          ReportInternalError ("got fatal exception " + exn.ToString () + 
                               "\n\n" + exn.StackTrace)
        } catch {
          | _ : DieException => ()
        }
    }
  }

  protected virtual Write (s : string) : void
  {
    def buf = System.Text.Encoding.UTF8.GetBytes (s);
    SockStream.Write (buf, 0, buf.Length)
  }

  protected virtual 'a ReportInternalError (msg : string) : 'a
  {
    Write (
      "HTTP/1.0 500 Server Error\r\n" +
      "Content-type: text/plain\r\n" +
      "\r\n" +
      msg);
    throw DieException ();
  }

  maybe_send_response () : void
  {
    when (FormTemplate != null) {
      Write (
        "HTTP/1.0 200 OK\r\n" +
        "Content-type: text/html; charset=utf-8\r\n" +
        "\r\n");
      
      FormTemplate.GetDocument ().Save (SockStream);
    }
  }
}


} // end Sioux
