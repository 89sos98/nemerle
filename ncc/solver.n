/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Compiler 
{
  /** A constraint solver. */
  public class Solver
  {
    /** Store current constraint state. */
    public PushState () : void
    {
    }


    /** Go one constraint state back. */
    public PopState () : void
    {
    }
  }



  /** Represent top-level type constructor for a given type. */
  public variant ConcreteType
  {
    | T_app {
        tycon : TypeInfo;
        args : list <TyVar>;
      }
    | T_var { tyvar : StaticTyVar; }
    | T_ref { t : TyVar; }
    | T_out { t : TyVar; }
    | T_fun { from : TyVar; to : TyVar; }
    | T_void
    | T_prod { args : list <TyVar>; }    
    | T_array { t : TyVar; rank : int; }
  }



  /** Represents an explicitly bound type variable, like the one from
      polymorphic type or method definition. It is also used in
      generalizations of inferred types. */
  public class StaticTyVar
  {
  }


  
  /** Represents a node in constraint graph. Used during type
      inference. */
  public class TyVar
  {
    /** Get the constraint solver associated with [this]. */
    public Solver : Nemerle.Compiler.Solver
    {
      get {
      }
    }
    

    /** Require [this] to be at least [t].
    
        To be called when we require some lower constraint on type
        variable. */
    public Require (t : TyVar) : void
    {
    }
    

    /** Provide type [t] as the maximal type for [this].
        
        To be called when value of type [t] is assigned to cell of type
        [this]. Symmetric to [Require]. */
    public Provide (t : TyVar) : void
    {
    }
    

    /** Return type associated with [this] in current solution.
    
        Warning: this type may change later! */
    public CurrentValue : TyVar
    {
      get {
      }
    }
    

    /** Make sure [CurrentValue] won't change anymore. Return [CurrentValue].
    
        Don't use this function unless absolutely necessary. */
    public Fixate () : TyVar
    {
    }


    /** Check if [this] is an array. If it is so, make sure it will remain
        an array type and return element type along with the rank. */
    public GetArrayType () : option <int * TyVar>
    {
    }


    /** Check if [this] is a function type. If it is so, make sure it
        will remain a function type and return the argument's types and
        the return type. */
    public GetFunctionType () : option <list <TyVar> * TyVar>
    {
    }
    

    /** Check if [this] is a product type. If it is so, make sure it
        will remain a product type and return the argument's types. */
    public GetProductType () : option <list <TyVar>>
    {
    }
  }

}
