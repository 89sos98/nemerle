(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Compiler;
open Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Parsetree {

record Function_decl
  {
    fun_header : Fun_header;
    body : Expr;
  }

record Named_pattern
  {
    name : string;
    pat : Pattern;
  }
  
variant Pattern extends Located =
  [
    | P_underscore
    | P_variable { name : string; }
    | P_tuple { args : list (Pattern); }
    | P_record { args : list (Named_pattern); }
    | P_cons { name : long_id; arg : Pattern; }
  ]
  
record Match_case
  {
    loc : Location;
    pattern : Pattern;
    body : Expr;
  }
  
variant Expr extends Located = 
  [ 
    | E_ref { name : long_id; }
    | E_member { obj : Expr; member : long_id; }
    | E_call { func : Expr; parms : list (Parm); }
    | E_assign { target : Expr; source : Expr; }
    | E_let { is_ref : bool; name : id; val : Expr; }
    | E_letpat { pattern : Pattern; val : Expr; }
    | E_letfun { funs : list (Function_decl); }
    | E_lambda { decl : Function_decl; }
    | E_match { expr : Expr; cases : list (Match_case); }
    | E_raise { exn : Expr; }
    | E_if { cond : Expr; e_then : Expr; e_else : Expr; }
    | E_try_with { body : Expr; exn : id; exn_ty : Type; handler : Expr; }
    | E_try_finally { body : Expr; handler : Expr; }
    | E_literal { val : Literal; }
    | E_this
    | E_type_conversion { expr : Expr; ty : Type; }  // (expr :> ty)
    | E_type_enforcement { expr : Expr; ty : Type; } // (expr : ty)
    | E_sequence { body : list (Expr); }
    | E_tuple { args : list (Expr); }
  ]

record Parm
  {
    is_ref : bool;
    expr : Expr;
    name : id;  // "" if no name given
  }

 
} // Nemerle.Compiler

