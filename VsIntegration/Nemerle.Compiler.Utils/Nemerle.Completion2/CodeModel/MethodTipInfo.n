using System;
using System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public class MethodTipInfo
  {
    public this([NotNull] overloads : List[OverloadPossibility], tokens : list[Token])
    {
      _overloads = overloads;

      _overloads.Sort((x, y) =>
      {
        def xparms = (x.Member :> IMethod).GetParameters();
        def yparms = (y.Member :> IMethod).GetParameters();

        xparms.Length - yparms.Length;
      });

      Init(tokens);
    }

    mutable _overloads : List[OverloadPossibility];

    [Accessor] mutable _startName       : Location;
    [Accessor] mutable _startParameters : Location;
    [Accessor] mutable _nextParameters  : List[Location] = List();
    [Accessor] mutable _endParameters   : Location;
    [Accessor] mutable _defaultMethod   : int;

    Init(tokens : list[Token]) : void
    {
      def findRoundGroup(toks) 
      {
      | h :: t => if (h is Token.RoundGroup) toks else findRoundGroup(t)
      | _      => []
      }

      def findIdentifier(group, token : Token)
      {
        match(token)
        {
        | Identifier when token.Next == null || group.Equals(token.Next) => token
        | LooseGroup(child) => findIdentifier(group, child)
        | null              => null;
        | _                 => findIdentifier(group, token.Next);
        }
      }

      def findComma(token : Token) 
      {
      | LooseGroup as lg =>

        _nextParameters.Add(Location(
          lg.Location.FileIndex,
          lg.Location.EndLine, lg.Location.EndColumn,
          lg.Location.EndLine, lg.Location.EndColumn + 1));

        when (lg.Next != null)
          findComma(lg.Next);

        ()
      | _ => ()
      }

      match (findRoundGroup(tokens))
      {
      | group :: prev :: _ => 

        def token = findIdentifier(group, prev);

        when (token is Token.Identifier)
        {
          def name = (token :> Token.Identifier).name;

          _overloads = _overloads.FindAll(fun(o)
          {
            if (o.Member.Name == ".ctor")
              o.From.tycon.Name == name
            else
              o.Member.Name == name
          });

          _startName       = token.Location;
          _startParameters = group.Location;

          findComma((group :> Token.RoundGroup).Child);

          _endParameters   = Location(
            group.Location.FileIndex,
            group.Location.EndLine,
            if (group.Location.EndColumn > 1) group.Location.EndColumn - 1 else group.Location.EndColumn);
        }
      | _ => ()
      }

      when (HasTip)
      {
        // TODO: This works incorrectly and should be redone.
        //
        _defaultMethod = _overloads.FindIndex(o => (o.Member :> IMethod).GetParameters().Length == _nextParameters.Count);

        when (_defaultMethod < 0)
          _defaultMethod = 0;
      }
    }

    public HasTip : bool
    {
      get { _startName.EndLine > 0 }
    }

    public GetCount() : int
    {
      _overloads.Count
    }

    public GetDescription(index : int) : string
    {
      def member = _overloads[index].Member;
      def xml    = XmlDocReader.GetInfo(member, member.Location);

      if (xml != null) xml.Summary else "";
    }

    public GetType(index : int) : string
    {
      (_overloads[index].Member :> IMethod).ReturnType.ToString()
    }

    public GetParameterCount(index : int) : int
    {
      def overload = _overloads[index];
      def method   = overload.Member :> IMethod;
      def len      = method.GetParameters().Length;

      if (len > 0 && IsExtension(overload)) len - 1 else len;
    }

    public GetParameterInfo(index : int, mutable parameter : int) : string * string * string
    {
      def method = _overloads[index].Member :> IMethod;

      when (IsExtension(_overloads[index])) parameter++;

      def parm        = method.GetParameters().Nth(parameter);
      def xml         = XmlDocReader.GetInfo(method, method.Location);
      def description = if (xml != null)
      {
        match (xml.Params.Find((name, _) => name == parm.name))
        {
        | Some((_, text)) => text
        | _               => ""
        }
      }
      else
        "";

      (parm.Name, $"$(parm.name) : $(parm.ty)", description)
    }

    public GetName(index : int) : string
    {
      def method = _overloads[index].Member :> IMethod;

      match (method.MemberKind)
      {
      | Constructor => method.DeclaringType.Name;
      | _           => method.Name;
      }
    }

    IsExtension(overload : OverloadPossibility) : bool
    {
      match (overload.ExtensionMethodObject)
      {
      | Error
      | null => false
      | _    => 

        match (overload.Member)
        {
        | m is IMethod => m.IsExtension
        | _            => false
        }

      }
    }
  }
}
