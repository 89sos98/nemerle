using System;

using Nemerle.Assertions;

namespace Nemerle.Extensions {

    ///<summary>
    ///Base class for any anonymous class, explicitly implements IAnonymous.
    ///</summary>
    [Serializable, System.Diagnostics.DebuggerDisplay("\\{ \\}")]
    public class Anonymous[T] : IAnonymous, IEquatable[Anonymous[T]] {

        Item[field : string] : object implements IAnonymous.Item {
            get { ___GetFieldValue(field) }
        }

        Fields : array[string] implements IAnonymous.Fields {
            get { ___GetFields() }
        }

        ///<summary>
        ///Backend of Fields property.
        ///</summary>
        ///<returns>
        ///List of field names.
        ///</returns>
        protected virtual ___GetFields() : array[string] {  array(0) }

        ///<summary>
        ///Backend of default indexer (Item).
        ///</summary>
        ///<param name="field">Field name.</param>
        ///<returns>Value of specified field, otherwise null if field is not found.</returns>
        protected virtual ___GetFieldValue(field : string) : object { ignore(field); null }

        ///<summary>
        ///This method is used by GetHashCode and Equals to retrieve internal values.
        ///</summary>
        ///<returns>
        ///Tuple or single value.
        ///</returns>
        protected virtual ___GetValues() : T { Nemerle.Extensions.DefaultValue(T); }

        public override ToString() : string {
            "{ }"
        }

        public override GetHashCode() : int {
            unchecked(___GetFields().GetHashCode() ^ ___GetValues().GetHashCode())
        }

        public override Equals(other : object) : bool {
            ReferenceEquals(this, other)
            ||  match(other) {
                    | other is Anonymous[T] => InternalEquals(other)
                    | other is T => ___GetValues().Equals(other)
                    | _ => false
                }
        }

        public Equals(other : Anonymous[T]) : bool implements IEquatable[Anonymous[T]].Equals {
            ReferenceEquals(this, other) || InternalEquals(other)
        }

        private FieldsAreEqual(a : array[string], b : array[string]) : bool {
            when(ReferenceEquals(a, b))
                Nemerle.Imperative.Return(true);
            when(a.Length != b.Length)
                Nemerle.Imperative.Return(false);
            for(mutable i = 0; i < a.Length; i++) 
                when(a[i] != b[i])
                    Nemerle.Imperative.Return(false);
            true
        }

        private InternalEquals(other : Anonymous[T]) : bool {
            !ReferenceEquals(null, other)
                && ___GetValues().Equals(other.___GetValues())
                && FieldsAreEqual(___GetFields(), other.___GetFields())
        }

        public static @== (a : Anonymous[T], b : Anonymous[T]) : bool {
            if(!ReferenceEquals(null, a))
                a.Equals(b)
            else
                ReferenceEquals(a, b);
        }

        public static @!= (a : Anonymous[T], b : Anonymous[T]) : bool {
            !(a == b)
        }

        public static @== (a : Anonymous[T], b : object) : bool {
            if(!ReferenceEquals(null, a))
                a.Equals(b)
            else
                ReferenceEquals(a, b);
        }

        public static @!= (a : Anonymous[T], b : object) : bool {
            !(a == b)
        }

        public static @== (a : object, b : Anonymous[T]) : bool {
            if(!ReferenceEquals(null, b))
                b.Equals(a)
            else
                ReferenceEquals(a, b);
        }

        public static @!= (a : object, b : Anonymous[T]) : bool {
            !(a == b)
        }

        public static @:> ([NotNull] obj : Anonymous[T]) : T {
            obj.___GetValues()
        }

    }

}
