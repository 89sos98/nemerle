using System;
using System.Threading;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public module EngineService {

        private context_table : SCG.Dictionary[IProject, EngineContext] = SCG.Dictionary();

        public CreateEngineContext([NotNull]project : IProject) : EngineContext {
            lock(context_table) {
                mutable context;
                unless(context_table.TryGetValue(project, out context) && !context.Disposed) {
                    context = EngineContext(project);
                    context_table[project] = context;
                }
                LoggingService.Debug($"Engine context created for project $project.");
                context
            }
        }

        public GetEngineContext([NotNull]project : IProject) : EngineContext {
            lock(context_table) {
                mutable context;
                if(context_table.TryGetValue(project, out context) && !context.Disposed) 
                    context
                else
                    null
            }
        }

        public DisposeEngineContext([NotNull]project : IProject) : void {
            lock(context_table) {
                mutable context;
                when(context_table.TryGetValue(project, out context) && context_table.Remove(project)) {
                    context.Dispose();
                    LoggingService.Debug($"Engine context disposed for project $project.");
                }
            }
        }

        public NotifyFileOpened(fileName : string, document : IDocument) : void {
            _ = ThreadPool.QueueUserWorkItem(fun(_) {
                lock(context_table) {
                    foreach(context in context_table.Values) {
                        context.NotifyFileOpened(fileName, document)
                    }
                }
            });
        }

        public NotifyFileClosed(document : IDocument) : void {
            _ = ThreadPool.QueueUserWorkItem(fun(_) {
                lock(context_table) {
                    foreach(context in context_table.Values) {
                        context.NotifyFileClosed(document)
                    }
                }
            });
        }

    }

}