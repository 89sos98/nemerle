using Nemerle.Compiler;
using Nemerle.Completion;
using Nemerle.Collections;
using System.IO;
using System.Console;

def engine = Engine ();
def files = Hashtable ();
def rawArgs = List.FromArray (System.Environment.GetCommandLineArgs ());
def (progName, args) = rawArgs.Head::rawArgs.Tail;
when (args.Length == 0) {
	WriteLine($"usage: $progName <filename>\n"+
		       "       <filename> is the Nemerle source code you want "+
	           "to pass to the \n"+
	           "       code completion engine");
	System.Environment.Exit(1);
}
foreach (arg in args) {
  using (sr = StreamReader (arg)) {
    def str = sr.ReadToEnd ();
    engine.Sources.Add (arg, str);
    files [arg] = str;
  }
}

def type_tree = engine.GetTypeTree ();
def _second_tree = engine.GetTypeTree ();
// mutable the_method = null;

def loop (x) : void
{
    foreach ( node in x.Children.Values )
    {
        match (node.Value) {
          | NamespaceReference => loop(node);
          | Cached as c =>
              match (c.tycon) {
                | tb is TypeBuilder => System.Console.WriteLine (tb.FrameworkTypeName);
                | _ => ();
              }
          | _ => ()
        }
    }
}

System.Console.WriteLine ("FOUND TYPES\n===========");
loop (type_tree);

/*def try_completion (body) {
  System.Console.WriteLine ("\nTrying to complete:");
  System.Console.WriteLine (body);
  def info = engine.RunCompletionEngine (the_method, body);
  if (info == null) {
    System.Console.WriteLine ("NO MEMBER FOUND");
  }
  else {
    if (info.CompletionKind == CompletionKind.Members) {
      System.Console.WriteLine ("FOUND MEMBERS\n=============");
      def members = info :> CompletionMembers;
      foreach (member in members.Members)
        System.Console.WriteLine (member.Name);
    }
    else {
      System.Console.WriteLine ("FOUND TYPES\n===========");
      def types = info :> CompletionTypes;
      foreach (t in types.Types) {
        if (t.TypeKind == NemerleTypeKind.DeclaredType)
          System.Console.WriteLine ((t :> DeclaredTypeInfo).Name);
        else
          System.Console.WriteLine ((t :> ReferencedTypeInfo).Type.Name);
      } 
    }
  }
  System.Console.WriteLine ("Finished");
}

try_completion ("this.Fo");
try_completion ("def a = \"a\"; a.L");
try_completion ("string.For");
try_completion ("string.");
try_completion ("Q");
try_completion ("System.");
try_completion ("System.Reflection.");
try_completion ("def s = System.Collections.Generic.List (); s.");*/
