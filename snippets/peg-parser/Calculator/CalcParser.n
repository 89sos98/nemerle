using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using LRPEGCC;

namespace Calculator
{
  type LoopTokens = NToken * NToken * VToken[int];
  
  [Record] public class ParserFatalError : Exception
  {
    public Pos     : int;
  }
  
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {  
    any                   = ['\u0000'..'\uFFFF'];
    digit                 = ['0'..'9']+;
    spaces                = ' '*;
    
    num                   : int = digit spaces;
    unaryMinus            : int = '-' spaces simplExpr;
    parenthesesExpr       : int = '(' spaces sumOrSub ')' spaces;
    parenthesesExprError  : int = '(' spaces sumOrSub (any / !any);
    simplExpr             : int = num / parenthesesExpr / unaryMinus / parenthesesExprError / simplExprError;
    simplExprError        : int = any;
    inputError            : int = any;
    mulOrDiv              : int = simplExpr (('*' / '/') spaces simplExpr)*;
    sumOrSub              : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    mainRule              : int = sumOrSub inputError?;
    start                 : int = spaces mainRule !any;
  })]
  public class CalcParser
  {    
//Requred for parser --------------------------------------------------------------------------------------------    
    
    //TODO: beter readability of tokens
    private num(digit : NToken, _ : NToken) : int
    {
      int.Parse(digit.GetText())
    }
    
    private unaryMinus(_ : NToken, _ : NToken, se : VToken[int]) : int
    {
      -se.Value
    }
    
    private parenthesesExpr(_ : NToken, _ : NToken, se : VToken[int], _ : NToken, _ : NToken) : int
    {
      se.Value
    }
    
    private parenthesesExprError(_ : NToken, _ : NToken, last : VToken[int], _ : NToken) : int
    {
      throw ParserFatalError("Ожидается закрывающая скобка или '+', '-', '*', '/' за которым следует число или выражение", last.EndPos);
    }
    
    private inputError(tok : NToken) : int
    {
      throw ParserFatalError("Ожидается '+', '-', '*', '/' за которым следует число или выражение", tok.StartPos);
    }
    
    private simplExprError(tok : NToken) : int
    {
      throw ParserFatalError("Ожидается число или выражение в скобках", tok.StartPos);
    }
    
    private mainRule(se : VToken[int], _ : option[VToken[int]]) : int
    {
      se.Value
    }

    // TODO: autogenerate this block
    private simplExpr(se : VToken[int]) : int
    {
      se.Value
    }
    // TODO: end todo
    
    private start(_ : NToken, se : VToken[int], _ : NToken) : int
    {
      se.Value
    }
    
    private mulOrDiv(se : VToken[int], lst : List[LoopTokens]) : int
    {
      DoOpHelper(se, lst)
    }
    
    private sumOrSub(se : VToken[int], lst : List[LoopTokens]) : int
    { 
      DoOpHelper(se, lst)
    }
     
//End requred for parser --------------------------------------------------------------------------------------------    

    private DoOpHelper(se : VToken[int], lst : List[LoopTokens]) : int
    {
      def doOp(x : int, y : int, op : string) : int
      {
        match (op)
        {
          | "*" => x * y
          | "/" => x / y
          | "+" => x + y
          | "-" => x - y
          | _     => assert(false);
        }
      }
           
      mutable r = se.Value;
      
      foreach ((opTok, _, secondTok) in lst)
        r = doOp(r, secondTok.Value, opTok.GetText());
    
      r  
    }
  }
}
