/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.IO;

using Nemerle.Compiler.CGexpr;
using Nemerle.Compiler.Tyops;
using Nemerle.Compiler.Typedtree;

using System.Reflection;
//using System.Reflection.Emit;

namespace SR = System.Reflection;

namespace Nemerle.Compiler {

module CGexpr {
  internal cg_type (ctx : CTX, t : Type) : System.Type
  {
    cg_type (ctx.current_type.GetSystemType (), t)
  }

  internal tuple_type (len : int) : System.Type
  {
    InternalType.GetTupleType (len).SystemType
  }
  
  function_type (len : int) : System.Type
  {
    InternalType.GetFunctionType (len).SystemType
  }

  get_apply_method (parm_cnt : int) : IMethod
  {
    InternalType.GetFunctionType (parm_cnt).ApplyMethod
  }

  internal tuple_ref (val : CG_expr, pos : int, len : int) : CG_expr
  {
    def fld = InternalType.GetTupleType (len).GetField (pos);
    CE_field_ref (val, fld.GetFieldInfo ())
  }

  tuple_ctor (vals : list <CG_expr>) : CG_expr
  {
    def len = List.Length (vals);
    def ctor = InternalType.GetTupleType (len).Ctor.GetConstructorInfo ();
    CE_call (CE_ctor_ref (ctor), vals)
  }
  
  public cg_type (tybuilder : System.Type, t : Type) : System.Type
  {
    match (Tyutil.top_expand (t)) {
      | T_void => SystemType.Void
      | T_prod (l) =>
        tuple_type (List.Length (l))
      | T_fun (args, _) => 
        function_type (List.Length (Tyutil.fun_args (args)))
      | T_var (tv) =>
        match (Tyvar.constraints (tv)) {
          | [] => SystemType.Object
          | t :: _ => cg_type (tybuilder, t)
        }
      | T_app (ti, _) => 
        def ret = ti.GetSystemType ();
        assert (ret != null);
        ret
      | T_ref => Util.ice ("FIXME: cg ref")
      | T_out => Util.ice ("FIXME: cg out")
      | T_array (et) =>
        def et = cg_type (tybuilder, et);
        def ty = tybuilder.Module.GetType (et.FullName + "[]");
        if (ty == null) {
          def arr = System.Array.CreateInstance (et, 0);
          when (arr == null)
            Util.ice ("unbound array type " + et.FullName + "[]");
          arr.GetType ()
        } else {
          ty
        }
    }
  }

  [Record]
  internal class CTX
  {
    public mutable current_fun : Fun_header;
    public mutable current_fun_or_loop : Fun_header;
    public mutable current_closure : option <CG_val>;
    public mutable closure_fields : SystemMap <int, FieldInfo>;
    public mutable closure_ptrs : SystemMap <int, FieldInfo>;
    public mutable locals : SystemMap <int, CG_val>;
    public mutable current_type : TypeBuilder;
    public mutable current_loop : option <CE_loop>;
  }

  copy_ctx (c : CTX) : CTX 
  {
    CTX (current_fun = c.current_fun,
         current_closure = c.current_closure,
         closure_fields = c.closure_fields,
         closure_ptrs = c.closure_ptrs,
         locals = c.locals,
         current_type = c.current_type,
         current_loop = c.current_loop,
         current_fun_or_loop = c.current_fun_or_loop)
  }

  empty_ctx (ti : TypeBuilder) : CTX
  {
    CTX (current_fun = null,
         current_fun_or_loop = null,
         current_closure = None (),
         closure_fields = SystemMap (),
         closure_ptrs = SystemMap (),
         locals = SystemMap (),
         current_type = ti,
         current_loop = None ())
  }

  store_in_closure (ctx : CTX, d : LocalValue, val : CG_expr) : CG_expr
  {
    match (ctx.current_closure) {
      | Some (clo) =>
        def rf = CE_field_ref (CE_ref (clo), ctx.closure_fields.Get (d.id));
        CE_assign (rf, val)
      | None =>
        Message.warning ("no local closure for " + d.name);
        Util.ice ()
    }
  }

  internal store_local (ctx : CTX, d : LocalValue, val : CG_expr) : CTX * CG_val
  {
    def var_ty = cg_type (ctx, d.ty);
    def val =
      match (val) {
        | CE_none => val
        | _ when type_of (val).IsValueType && !var_ty.IsValueType => 
          CE_cast (val, var_ty)
        | _ => val
      };
    if (d.in_closure) {
      def assign = store_in_closure (ctx, d, val);
      def cgv = CG_val (loc = d.loc, 
                        name = Util.tmpname ("dummy"),
                        ty = SystemType.Void, 
                        val = assign);
      (copy_ctx (ctx), cgv)
    } else {
      def cgv = CG_val (loc = d.loc, 
                        name = decl_uniq_name(d), 
                        ty = var_ty,
                        val = val);
      def ctx' = copy_ctx (ctx);
      ctx'.locals = ctx.locals.Add (d.id, cgv);
      (ctx', cgv)
    }
  }

  closure_ref (ctx : CTX, fn : Fun_header) : CG_expr
  {
    if (ctx.current_fun.id == fn.id)
      CE_ref (Option.UnSome (ctx.current_closure))
    else
      CE_field_ref (CE_this (), ctx.closure_ptrs.Get (fn.id))
  }

  public is_dummy_type (t : System.Type) : bool
  {
    t.FullName == "System.Void"
  }

  public type_of (ex : CG_expr) : System.Type
  {
    if (ex.ty != null) ex.ty
    else {
      def ty =
        match (ex) {
          | CE_ref (d) => d.ty
          | CE_global_ref (obj) =>
            if (obj.MemberType %&& MemberTypes.Field)
              (obj :> FieldInfo).FieldType
            else if (obj.MemberType %&& MemberTypes.Property)
              (obj :> PropertyInfo).PropertyType
            else
              Util.ice ("strange global ref")
              
          | CE_field_ref (_, f) => f.FieldType

          | CE_method_addr => SystemType.IntPtr
          
          | CE_tail_call (CE_global_ref (m), _)
          | CE_call (CE_global_ref (m), _) => (m :> MethodInfo).ReturnType
          
          | CE_tail_call (CE_method_ref (_, m), _)
          | CE_call (CE_method_ref (_, m), _) => m.ReturnType
          
          | CE_tail_call (CE_ctor_ref (c), _)
          | CE_call (CE_ctor_ref (c), _) => c.DeclaringType
          
          | CE_tail_call (CE_base_ctor_ref, _)
          | CE_call (CE_base_ctor_ref, _) => SystemType.Void

          | CE_typeof => SystemType.Type

          | CE_loop (expr, _) => type_of (expr)
          
          | CE_self_tail_call
          | CE_tail_call
          | CE_call => Util.ice ("strange call")
          
          | CE_multiple_assign
          | CE_assign => SystemType.Void
          | CE_let (_, b) => type_of (b)
          | CE_has_type => SystemType.Boolean
          | CE_not_null => SystemType.Void
          | CE_continue_loop
          | CE_raise => SystemType.Void
          | CE_if (_, _, _) => Util.ice ("ought to be cached")
          | CE_try_with (e, _, _) => type_of (e)
          | CE_try_finally (e, _) => type_of (e)
          | CE_literal (l) => 
            match (l) {
              | L_void => SystemType.Void
              | L_null => SystemType.Object
              | L_byte => SystemType.Byte
              | L_sbyte => SystemType.SByte
              | L_short => SystemType.Int16
              | L_ushort => SystemType.UInt16                
              | L_int => SystemType.Int32
              | L_uint => SystemType.UInt32                
              | L_long => SystemType.Int64
              | L_ulong => SystemType.UInt64                
              | L_char => SystemType.Char
              | L_string => SystemType.String
              | L_float => SystemType.Single
              | L_double => SystemType.Double
              | L_decimal => SystemType.Decimal                
              | L_bool => SystemType.Boolean
              | L_enum (l, _) => type_of (CE_literal (l))
            }
          | CE_this => SystemType.Object // cheat a bit 
          | CE_cast (_, t) => t
          | CE_sequence (b) => type_of (List.Last (b))
          | CE_switch (_, default_expr, switch_cases) =>
            match (default_expr) {
              | Some (expr) => type_of (expr)
              | _ =>
                def (_, expr) = List.Last (switch_cases);
                type_of (expr)
            }
          | CE_mkarray 
          | CE_array_indexer (_, _) => Util.ice ("should be cached")
          | CE_opcode => Util.ice ("opcode")
          | CE_ignore | CE_skip => SystemType.Void

          // can't tell
          | CE_none => Util.ice ("none")

          // these are supported only as part of call
          | CE_ctor_ref => Util.ice ("ctorref")
          | CE_method_ref => Util.ice ("methodref")
          | CE_base_ctor_ref => Util.ice ("basectorref")
        };
      ex.ty = ty;
      ty
    }
  }

  box_value (body : CG_expr) : CG_expr 
  {
    if (type_of (body).IsValueType || is_dummy_type (type_of (body)))
      CE_cast (body, SystemType.Object)
    else
      body
  }

  unbox_value (body : CG_expr, ty : System.Type) : CG_expr 
  {
    if (is_dummy_type (ty))
      CE_ignore (body)
    else
      CE_cast (body, ty)
  }


  /**
   * Matching -- wrapper for the CGmatch module functionality.
   */
  cg_match (t : System.Type, ctx : CTX, val : CG_expr, mcs : list <Match_case>) : CG_expr
  {
    CGmatch.cg_match (t, ctx, val, mcs)
  }
    

  internal get_default_ctor (_ctx : CTX, tc : Tycon) : ConstructorInfo
  {
    match (tc.LookupMember (".ctor")) {
      | [x] =>
        match (x.GetKind ()) {
          | MK_method (m) => m.GetConstructorInfo ()
          | _ => Util.ice ()
        }
      | _ => Util.ice ()
    }
  }
 
  // always return a new copy
  build_cg_method (tybuilder : System.Type, header : Fun_header) : CG_method
  {
    def mkparm (p : Fun_parm) : CG_val {
      match (p.ty) {
        | T_void =>
          // FIXME: do something about it
          Message.fatal_error (header.loc, "method `" + header.name + "' has void argument")
        | _ => ()
      };
      CG_val (loc = header.loc,
              name = p.name, 
              ty = cg_type (tybuilder, p.ty),
              val = CE_none ())
    };
    def m = CG_method ();
    m.name = header.name;
    m.ret_type = cg_type (tybuilder, header.ret_type);
    m.parms = List.Map (header.parms, mkparm);
    m.implemented_methods = [];
    m
  }
  
  build_cg_method (ctx : CTX, header : Fun_header) : CG_method
  {
    build_cg_method (ctx.current_type.GetSystemType (), header)
  }

  fixup_cg_method (meth : IMethod) : void
  {
    def cgm = GetCgMethod (meth);
    cgm.modifiers = meth.Attributes;
  }

  public GetCgMethod (meth : IMethod) : CG_method
  {
    def header = meth.GetHeader ();
    when (header.cg_method == null) {
      def tb = meth.DeclaringType.GetSystemType ();
      header.cg_method = build_cg_method (tb, header);
      fixup_cg_method (meth);
    };
    header.cg_method
  }
  
  build_cg_method (ctx : CTX, meth : IMethod) : CG_method
  {
    build_cg_method (ctx, meth.GetHeader ())
  }

  // return cached copy for given method
  get_cg_method (ctx : CTX, header : Fun_header) : CG_method
  {
    when (header.cg_method == null) {
      header.cg_method = build_cg_method (ctx, header);
    };
    header.cg_method;
  }
  
  get_cg_method (ctx : CTX, meth : IMethod) : CG_method
  {
    get_cg_method (ctx, meth.GetHeader ())
  }

  make_untupled_parms (tuple_expr : CG_expr, parm_cnt : int) : list <CG_expr>
  {
    if (parm_cnt == 0)
      []
    else {
      def tup = CE_cast (tuple_expr, tuple_type (parm_cnt));
      def mkparm (acc, i) {
        if (i == 0) acc
        else mkparm (tuple_ref (tup, i, parm_cnt) :: acc, i - 1)
      };
      mkparm ([], parm_cnt)
    }
  }

  make_tupled_method (ctx : CTX, parm_cnt : int) : CG_method
  {
    def cgm = build_cg_method (ctx, get_apply_method (1));
    def parms = make_untupled_parms (CE_ref (List.Head (cgm.parms)), parm_cnt);
    def meth = get_apply_method (parm_cnt);
    def multi_apply = CE_method_ref (CE_this (), meth.GetMethodInfo ());
    cgm.body = CE_call (multi_apply, parms);
    cgm.implemented_methods = [get_apply_method (1)];
    cgm.modifiers = NemerleAttributes.Internal;
    cgm
  }

  make_untupled_method (ctx : CTX, parm_cnt : int) : CG_method
  {
    def cgm = build_cg_method (ctx, get_apply_method (parm_cnt));
    
    def mkparm (v) { CE_ref (v) };
    def parm = 
      match (cgm.parms) {
        | [] => CE_literal (L_null ())
        | _ => tuple_ctor (List.Map (cgm.parms, mkparm))
      };

    def meth = get_apply_method (1);
    def single_apply = CE_method_ref (CE_this (), meth.GetMethodInfo ());
    
    cgm.body = CE_call (single_apply, [parm]);
    cgm.implemented_methods = [get_apply_method (parm_cnt)];
    cgm.modifiers =  NemerleAttributes.Internal;
    cgm
  }

  get_lambda_proxy (ctx : CTX, meth : IMethod) : ConstructorInfo
  {
    def cg_method = GetCgMethod (meth);
    when (cg_method.lambda_ctor == null) {
      // FIXME: we should generate proxies in module *or* in the class depending
      // on permissions
      //def mod = (ctx.current_type.GetSystemType ().Module :> ModuleBuilder);
      def parm_cnt = List.Length (cg_method.parms);
      def impl =
        if (parm_cnt == 1)
          array [function_type (1)]
        else
          array [function_type (parm_cnt), function_type (1)];
      //def tb = mod.DefineType ("Nemerle.Proxies." + fun_uniq_name (meth.GetHeader ()), 
      //                         TypeAttributes.Class, SystemType.Object, impl);
      def tb = ctx.current_type.GetTypeBuilder ().
                DefineNestedType (fun_uniq_name (meth.GetHeader ()), 
                                  TypeAttributes.NestedAssembly, SystemType.Object, impl);
      Passes.cgil.RegisterAuxType (tb);
      cg_method.lambda_ctor = Passes.cgil.AddImplicitCtor (tb);
      
      // get separate copy
      def cgm = build_cg_method (ctx, meth);
      cgm.name = "apply";
      cgm.implemented_methods = [get_apply_method (parm_cnt)];
      cgm.modifiers =  NemerleAttributes.Internal;
      
      def mkparm (v : CG_val) {
        def t = v.ty;
        v.ty = SystemType.Object;
        CE_cast (CE_ref (v), t)
      };
      cgm.ret_type = SystemType.Object;
      cgm.body = box_value (CE_call (CE_global_ref (meth.GetMethodInfo ()), 
                                      List.Map (cgm.parms, mkparm)));

      Passes.cgil.AddMethod (cgm, tb);
      when (parm_cnt != 1)
        Passes.cgil.AddMethod (make_tupled_method (ctx, parm_cnt), tb);
    };
    
    cg_method.lambda_ctor
  }

  global_ref (ctx : CTX, m : IMember) : CG_expr {
    match (m.GetKind ()) {
      | MK_type => assert (false)
      | MK_event => assert (false)

      | MK_field (f) =>
        if (f.IsLiteral) {
          match (ConstantFolder.FieldValueAsLiteral (f)) {
            | Some (lit) =>
              // this is kinda last resort, we should have converted it during
              // constant folding, but if we have missed it, do it here, as cgil
              // will fail to generate proper code for this.
              //Message.debug ("converting literal field `" + f.Name + "' to literal");
              CE_literal (lit)
            | None =>
              CE_global_ref (f.GetFieldInfo ())
          }
        } else
          CE_global_ref (f.GetFieldInfo ())

      | MK_property (f) =>
        CE_global_ref (f.GetPropertyInfo ())
        
      | MK_method (f) =>
        CE_call (CE_ctor_ref (get_lambda_proxy (ctx, f)), [])
    }
  }

  internal local_ref (ctx : CTX, d : LocalValue) : CG_expr
  {
    if (d.in_closure) {
      def defined_in = d.parent_fun;
      CE_field_ref (closure_ref (ctx, defined_in), 
                    ctx.closure_fields.Get (d.id))
    } else if (ctx.locals.Member (d.id)) {
      CE_ref (ctx.locals.Get (d.id))
    } else {
      match (d.kind) {
        | D_closurised_this_ptr => CE_this ()
        | _ =>
          Message.debug ("undef " + d.name + " = " + d.id.ToString ());
          Util.ice ("ref to undef val " + d.name)
      }
    }
  }

  internal maybe_cast (_ctx : CTX, needed_type : System.Type, ex : CG_expr) : CG_expr
  {
    assert (needed_type != null);
    def current_type = type_of (ex);
    assert (current_type != null);
    if (needed_type.FullName == "System.Void")
      if (current_type.FullName == "System.Void")
        ex
      else
        CE_ignore (ex)
    else if (needed_type.FullName == current_type.FullName || 
             (needed_type.IsAssignableFrom (current_type) && !current_type.IsValueType))
      ex
    else 
     CE_cast (ex, needed_type)
  }

  get_fn_header (fn : LocalValue) : Fun_header
  {
    match (fn.kind) {
      | D_local_fun (h, _) => h
      | _ => Util.ice ()
    }
  }

  casted_parms (ctx : CTX, formals : list <CG_val>, parms : list <CG_expr>) : list <CG_expr>
  {
    def parms =
      match ((formals, parms)) {
        | (_ :: _ :: _, [parm]) =>
          make_untupled_parms (parm, List.Length (formals))
        | _ => parms
      };
      
    List.Map2 (formals, parms, 
      fun (v : CG_val, e) { 
        maybe_cast (ctx, v.ty, e) 
      })
  }

  emit_delegate_proxy (ctx : CTX, ctor : IMethod) : ConstructorInfo * CG_method
  {
    def fh = ctor.GetHeader ();
    match (fh.parms) {
      | [{ty = (T_fun (parms, ret_type)) as fun_type}] =>
        def loc = fh.loc; // FIXME
        def parms = Tyutil.fun_args (parms);
        def tb = ctx.current_type.GetTypeBuilder ().
                  DefineNestedType (Util.tmpname ("delegate_proxy"),
                                    TypeAttributes.NestedAssembly, 
                                    SystemType.Object, array []);
                                    
        Passes.cgil.RegisterAuxType (tb);

        def fptr = tb.DefineField ("funptr", cg_type (ctx, fun_type), 
                                   FieldAttributes.Assembly);
        def mkparm (ty) { 
          CG_val (loc = loc,
                  name = Util.tmpname ("dp"),
                  ty = cg_type (ctx, ty),
                  val = CE_none ())
        };
        
        def m = CG_method ();
        m.name = "InvokeDelegate";
        m.ret_type = cg_type (ctx, ret_type);
        m.parms = List.Map (parms, mkparm);
        m.modifiers = NemerleAttributes.Internal;
        m.implemented_methods = [];

        def apply = get_apply_method (List.Length (parms)).GetMethodInfo ();
        def meth = CE_method_ref (CE_field_ref (CE_this (), fptr), apply);
        def mkparmref (v) { CE_cast (CE_ref (v), SystemType.Object) };
        def parms' = List.Map (m.parms, mkparmref);
        m.body = unbox_value (CE_call (meth, parms'), m.ret_type);
      
        Passes.cgil.AddMethod (m, tb);

        def invoke_cgm = m;

        def m = CG_method ();
        m.name = ".ctor";
        m.ret_type = SystemType.Void;
        def ctor_parm =
          CG_val (loc = loc,
                  name = Util.tmpname ("dp"),
                  ty = fptr.FieldType,
                  val = CE_none ());
        m.parms = [ctor_parm];
        m.modifiers = NemerleAttributes.Internal;
        m.implemented_methods = [];
        m.body = CE_assign (CE_field_ref (CE_this (), fptr), CE_ref (ctor_parm));
        
        Passes.cgil.AddConstructorBuilder (m, tb);
        Passes.cgil.EmitConstructor (m);

        ((m.constructor_builder : ConstructorInfo), invoke_cgm)
        
      | _ => assert (false)
    }
  }

  emit_delegate_ctor (ctx : CTX, m : IMethod, ps : list <Parm>) : CG_expr
  {
    def the_problem () {
      Message.fatal_error ("delegate construction not supported for this expression")
    };
    def (this_ptr, cgm) = 
      match (ps) {
        | [{expr = E_static_ref (mem)}] =>
          match (mem.GetKind ()) { 
            | MK_method (meth) =>
              (CE_literal (L_null ()), GetCgMethod (meth))
            | _ => 
              the_problem ()
          }
          
        | [{expr = E_method_ref (obj, mem)}] =>
          (CE_cast (cg_expr (ctx, obj), SystemType.Object), GetCgMethod (mem))
          
        | [parm] =>
          def (ctor, invoke_cgm) = emit_delegate_proxy (ctx, m);
          (CE_call (CE_ctor_ref (ctor), [cg_expr (ctx, parm.expr)]), invoke_cgm)
          
        | _ => the_problem ()
      };
    assert (cgm.method_builder != null);
    
    CE_call (CE_ctor_ref (m.GetConstructorInfo ()), 
             [this_ptr, CE_method_addr (cgm.method_builder)])
  }

  emit_loop (ctx : CTX, h : Fun_header, parms : list <Parm>) : CG_expr
  {
    def ctx' = copy_ctx (ctx);
    def parm_vals = List.Map2 (h.parms, parms, fun (fp : Fun_parm, ap : Parm) {
      def val = CG_val (loc = fp.decl.loc, 
                        name = fp.name,
                        ty = cg_type (ctx, fp.ty),
                        val = cg_expr (ctx, ap.expr));
      ctx'.locals = ctx'.locals.Add (fp.decl.id, val);
      val
    });
    ctx'.current_fun_or_loop = h;
    def loop = (CE_loop (null, None ()) :> CE_loop);
    ctx'.current_loop = Some (loop);
    loop.body = cg_expr (ctx', h.body);
    h.body = null;
    List.FoldLeft (List.Rev (parm_vals), (loop : CG_expr), 
                   fun (v, expr) { CE_let (v, expr) })
  }

  with_cached (expr : CG_expr, f : CG_expr -> CG_expr) : CG_expr
  {
    match (expr) {
      | CE_ref
      | CE_global_ref
      | CE_ctor_ref
      | CE_method_addr
      | CE_opcode
      | CE_literal
      | CE_this
      | CE_typeof =>
        f (expr)

      | _ =>
        def v = CG_val (loc = Location_stack.top (),
                        name = Util.tmpname ("cached"),
                        ty = type_of (expr),
                        val = expr);
        CE_let (v, f (CE_ref (v)))
    }
  }

  raw_cg_expr (ctx : CTX, inex : Expr) : CG_expr
  {
    //Message.debug ("emit");
    def self (e : Expr) : CG_expr { cg_expr (ctx, e) };
    match (inex) {
      | E_local_ref (d) => 
        local_ref (ctx, d)

      | E_static_ref (d) => 
        global_ref (ctx, d)

      | E_field_ref (o, f) =>
        maybe_cast (ctx, cg_type (ctx, inex.expr_ty), CE_field_ref (self (o), f.GetFieldInfo ()))

      | E_method_ref => Util.ice ()
      | E_property_ref => Util.ice ()
      | E_static_property_ref => Util.ice ()
      | E_constant_object_ref => Util.ice ()
      
      | E_typeof (t) =>
        CE_typeof (cg_type (ctx, t))

      | E_self_tail_call (parms) =>
        def fn = ctx.current_fun_or_loop;
        match (fn.usage) {
          | FU_used_just_once =>
            def assigns = 
              List.Map2 (parms, fn.parms, fun (p : Parm, fp : Fun_parm) {
                (ctx.locals.Get (fp.decl.id), self (p.expr))
              });
            CE_sequence ([CE_multiple_assign (assigns), 
                          CE_continue_loop (Option.UnSome (ctx.current_loop))])
          | _ =>
            def parms = List.Map (parms, fun (p : Parm) { self (p.expr) });
            def parms = casted_parms (ctx, fn.cg_method.parms, parms);
            def t = cg_type (ctx, inex.expr_ty);
            CE_self_tail_call (t, parms)
        }

      | E_call (f, ps) 
      | E_tail_call (f, ps) =>
        def is_tail = match (inex) { E_tail_call => true | _ => false };
        def compile_parm (p : Parm) { self (p.expr) };
        def emit_call (cgm : CG_method, callable) {
          def parms = List.Map (ps, compile_parm);
          def callable =
            match (callable) {
              | CE_method_ref (e, meth) when type_of (e).IsValueType && 
                                             !meth.DeclaringType.IsValueType =>
                CE_method_ref (CE_cast (e, meth.DeclaringType), meth)
              | x => x
            };
          if (cgm == null) {
            def t = cg_type (ctx, inex.expr_ty);
            if (is_tail)
              CE_tail_call (t, callable, parms)
            else
              CE_call (t, callable, parms)
          } else {
            def generate_call (parms) {
              if (is_tail)
                CE_tail_call (callable, casted_parms (ctx, cgm.parms, parms))
              else
                CE_call (callable, casted_parms (ctx, cgm.parms, parms))
            };
            
            def call =
              match ((parms, cgm.parms)) {
                | ([parm], _ :: _ :: _) =>
                  // need to cache it, so casted_parms can untuple it
                  with_cached (parm, fun (parm) { generate_call ([parm]) })
                | _ =>
                  generate_call (parms)
              };
            maybe_cast (ctx, cg_type (ctx, inex.expr_ty), call)
          }
        };
        def plain_call () {
          def len = List.Length (ps);
          def imeth = get_apply_method (len);
          emit_call (GetCgMethod (imeth), CE_method_ref (self (f), imeth.GetMethodInfo ()))
        };
        
        match (f) {
          | E_static_ref (m) =>
            match (m.GetKind ()) {
              | MK_method (m) =>
                match (m.GetFunKind ()) {
                  | _ when m.GetExternName () != null =>
                    def opname = m.GetExternName ();
                    assert (opname.StartsWith ("%op"));
                    emit_call (null, CE_opcode (opname.Substring (3)))
                  | FK_ctor =>
                    if (m.DeclaringType.IsDelegate ())
                      Util.locate (f.loc, emit_delegate_ctor (ctx, m, ps))
                    else
                      emit_call (GetCgMethod (m), CE_ctor_ref (m.GetConstructorInfo ()))
                      
                  | _ =>
                    emit_call (GetCgMethod (m), CE_global_ref (m.GetMethodInfo ()))
                }
              | _ => plain_call ()
            }
          | E_opcode (name) =>
            emit_call (null, CE_opcode (name))
          | E_method_ref (o, m) => 
            emit_call (GetCgMethod (m), CE_method_ref (self (o), m.GetMethodInfo ()))
          | E_base (m) =>
            emit_call (GetCgMethod (m), CE_base_ctor_ref (m.GetConstructorInfo ()))
          | E_local_ref (d) =>
            match (d.kind) {
              | D_local_fun (({usage = FU_used_just_once}) as h, _) =>
                emit_loop (ctx, h, ps)
              | D_local_fun (h, _) when h.id == ctx.current_fun.id =>
                assert (h.cg_method.method_builder != null);
                emit_call (get_cg_method (ctx, h),
                           CE_method_ref (CE_this (), h.cg_method.method_builder))
              | _ => plain_call ()
            }
          | _ => plain_call ()
        }

      | E_assign (e1, e2) =>
        def e1 = self (e1);
        def e2 = self (e2);
        def e2 =
          if (type_of (e2).IsValueType && !type_of (e1).IsValueType)
            CE_cast (e2, type_of (e1))
          else
            e2;
        CE_assign (e1, e2)
        
      | E_mkarray (initializers) =>
        def element_type =
          match (initializers) {
            | [] => SystemType.Object
            | element :: _ =>
              cg_type (ctx, element.expr_ty)
          };
        def elt_is_value = element_type.IsValueType;
        def make_initializer (e) {
          def e = self (e);
          if (!elt_is_value && type_of (e).IsValueType)
            CE_cast (e, element_type)
          else
            e
        };
        CE_mkarray (ty = cg_type (ctx, inex.expr_ty), 
                    element_type = element_type, 
                    initializers = List.Map (initializers, make_initializer))

      | E_array_indexer (ty, obj, args) =>
        // FIXME: this won't work for multidimensional arrays which have to
        // be treated as System.Array objects and use respective access props.
        match (obj.expr_ty) {
          | T_array => CE_array_indexer (cg_type (ctx, ty), self (obj), List.Map (args, self))
          | _ => Util.ice ()
        }

      | E_let (d, v, b) =>
        def (ctx', cgv) = store_local (ctx, d, self (v));
        CE_let (cgv, cg_expr (ctx', b))

      | E_letfun (fs, body) =>
        mutable vals = [];
        def store (f : Function_decl, ctx : CTX) : CTX {
          def fh = get_fn_header (f.decl);
          match (fh.usage) {
            | FU_used_just_once =>
              ctx
            | _ =>
              def ct = make_lambda_ctor_call (ctx, fh);
              def (ctx, val) = store_local (ctx, f.decl, ct);
              vals = val :: vals;
              ctx
          }
        };
        def emit (f : Function_decl) {
          def fh = get_fn_header (f.decl);
          match (fh.usage) {
            | FU_used_just_once => 
              // used later in emit_loop
              fh.body = f.body
            | _ => emit_lambda_code (ctx, fh, f.body)
          }
        };
        def mklet (val, acc) { CE_let (val, acc) };

        def ctx = List.FoldLeft (fs, ctx, store);
        List.Iter (fs, emit);
        List.FoldLeft (vals, cg_expr (ctx, body), mklet)

      | E_match (e, mcs) =>
        with_cached (cg_expr (ctx, e), 
          fun (e) { 
            cg_match (cg_type (ctx, inex.expr_ty), ctx, e, mcs)
          });

      | E_raise (e) =>
        CE_raise (cg_expr (ctx, e))

      | E_try_with (body, exn, handler) =>
        def body = cg_expr (ctx, body);
        // FIXME: this is broken for exn values to go into closure
        def (ctx', v) = store_local (ctx, exn, CE_none ());
        def handler = cg_expr (ctx', handler);
        def res = CE_try_with (body, v, handler);
        res.ty = cg_type (ctx, inex.expr_ty);
        res

      | E_try_finally (e1, e2) =>
        CE_try_finally (cg_expr (ctx, e1), cg_expr (ctx, e2))

      | E_literal (l) => 
        CE_literal (l)

      | E_this => 
        CE_this ()

      | E_type_conversion (e, t) => 
        CE_cast (cg_expr (ctx, e), cg_type (ctx, t))

      | E_type_enforcement (e, t) =>
        def e' = cg_expr (ctx, e);
        def t' = cg_type (ctx, t);
        if (type_of (e').IsValueType != t'.IsValueType)
          CE_cast (e', t')
        else
          e'

      | E_sequence (e1, e2) =>
        CE_sequence ([cg_expr (ctx, e1), cg_expr (ctx, e2)])

      | E_tuple (l) =>
        tuple_ctor (List.Map (l, fun (e) { box_value (self (e)) }))

      | E_base =>
        Util.ice ("stray base")
        
      | E_opcode =>
        Util.ice ("stray opcode")
    }
  }

  /** 
   * Flatten given [Typedtree.Expr] object into [CG_expr].
   *
   * <remarks>
   *   As a side-effect few classes for closures and local functions
   *   can be generated and stored in current type builder.
   * </remarks>
   */
  internal cg_expr (ctx : CTX, ex : Expr) : CG_expr
  {
    Util.locate (ex.loc, {
        def e = raw_cg_expr (ctx, ex);
        e.loc = ex.loc;
        e
      })
  }

  mangle (s : string) : string
  {
    def p = s.ToCharArray ();
    
    for (mutable i = 0; i < (p : System.Array).Length; ++i)
      unless ((p[i] >= 'a' && p[i] <= 'z') ||
              (p[i] >= 'A' && p[i] <= 'Z') ||
              (p[i] >= '0' && p[i] <= '9'))
        p[i] = '_';

    System.String (p)
  }

  fun_uniq_name (h : Fun_header) : string
  {
    mangle (h.name) + "_" + h.id.ToString ()
  }

  decl_uniq_name (d : LocalValue) : string
  {
    mangle (d.name) + "_" + d.id.ToString ()
  }

  make_closure_class (ctx : CTX, h : Fun_header) : CTX
  {
    def name = fun_uniq_name (h);
    def tb = ctx.current_type.GetTypeBuilder ().DefineNestedType 
                ("_N_cl_" + name, TypeAttributes.NestedAssembly, SystemType.Object,
                 System.Type.EmptyTypes);
    Passes.cgil.RegisterAuxType (tb);
    def ctor = Passes.cgil.AddImplicitCtor (tb);
    
    def mk_clo_fld (d : LocalValue, acc : SystemMap <int, FieldInfo>) {
      def fi = tb.DefineField (decl_uniq_name (d), cg_type (ctx, d.ty), FieldAttributes.FamORAssem);
      //Message.debug ("add " + d.name + " / " + d.parent_fun.name);
      acc.Add (d.id, fi)
    };
    def closure_fields = List.FoldLeft (h.closure_vars, ctx.closure_fields, mk_clo_fld);
    def cloexpr = CE_call (CE_ctor_ref (ctor), []);
    def cloval = CG_val (h.loc, "_N_closure", tb, cloexpr);
    def cgm = get_cg_method (ctx, h);
    cgm.closure_type = tb;
    def ctx = copy_ctx (ctx);
    ctx.closure_fields = closure_fields;
    ctx.current_closure = Some (cloval);
    ctx
  }

  prepare_ctx_for_fun (ctx : CTX, h : Fun_header) : CTX
  {
    def ctx =
      match (h.closure_vars) {
        | [] => 
          def ctx = copy_ctx (ctx);
          ctx.current_closure = None ();
          ctx

        | _ =>
          make_closure_class (ctx, h)
      };
   
    def cgm = get_cg_method (ctx, h);
    ctx.closure_ptrs = cgm.closure_pointers;
    ctx.locals = SystemMap ();
    ctx.current_fun = h;
    ctx.current_fun_or_loop = h;
    ctx
  }

  get_parents_with_closures (_ctx : CTX, h : Fun_header) : list <Fun_header>
  {
    def parents =
      match (h.decl.kind) {
        | D_local_fun (_, pars) => pars
        | _ => Util.ice ()
      };
    def loop (fh : Fun_header, acc) {
      match (fh.closure_vars) {
        | _ :: _ => fh :: acc
        | [] => acc
      }
    };
    List.FoldLeft (parents, [], loop)
  }

  get_lambda_ctor (ctx : CTX, h : Fun_header) : ConstructorInfo
  {
    def cg_method = get_cg_method (ctx, h);
    when (cg_method.lambda_ctor == null) {
      def name = fun_uniq_name (h);
      def real_parm_cnt = List.Length (cg_method.parms);
      def virtual_parm_cnt =
        match (Tyutil.fun_type (h)) {
          | T_fun (args, _) => 
            List.Length (Tyutil.fun_args (args))
          | _ => Util.ice ()
        };
      
      // first create type builder
      def impl =
        if (virtual_parm_cnt == 1)
          array [function_type (1)]
        else
          array [function_type (virtual_parm_cnt), function_type (1)];
      def tb = ctx.current_type.GetTypeBuilder ().DefineNestedType 
                  ("_N_lm_" + name, TypeAttributes.NestedAssembly, SystemType.Object,
                   impl);
      Passes.cgil.RegisterAuxType (tb);
      cg_method.lambda_type_builder = tb;

      when (virtual_parm_cnt != real_parm_cnt) {
        assert (real_parm_cnt == 1);
        Passes.cgil.AddMethod (make_untupled_method (ctx, virtual_parm_cnt), tb);
      };
      
      // and then constructor
      def mkparm (fh : Fun_header, acc) {
        def (assigns, vals, ptrs) = acc;
        def cgm = get_cg_method (ctx, fh);
        assert (cgm.closure_type != null);
        def name = fun_uniq_name (fh);
        
        def fld = 
          tb.DefineField (name, cgm.closure_type, FieldAttributes.Private);
          
        def val =
          CG_val (loc = fh.loc, name = name, ty = cgm.closure_type,
                  val = CE_none ());
        
        def assign =
          CE_assign (CE_field_ref (CE_this (), fld), CE_ref (val));

        (assign :: assigns, val :: vals, (ptrs : SystemMap <int, FieldInfo>).Add (fh.id, fld))
      };

      def (assigns, vals, ptrs) = 
        List.FoldLeft (get_parents_with_closures (ctx, h), ([], [], SystemMap ()), 
                       mkparm);

      def ctor_cgm = CG_method ();
      ctor_cgm.parms = List.Rev (vals);
      ctor_cgm.modifiers = NemerleAttributes.Internal;
      ctor_cgm.body = CE_sequence (assigns);

      cg_method.closure_pointers = ptrs;
      Passes.cgil.AddConstructorBuilder (ctor_cgm, tb);
      Passes.cgil.EmitConstructor (ctor_cgm);
      cg_method.lambda_ctor = ctor_cgm.constructor_builder;
    };
    cg_method.lambda_ctor
  }

  emit_lambda_code (ctx : CTX, fh : Fun_header, body : Expr) : void
  {
    ignore (get_lambda_ctor (ctx, fh));
    def ctx = prepare_ctx_for_fun (ctx, fh);
    def cgm = get_cg_method (ctx, fh);
    List.Iter (cgm.parms, fun (parm : CG_val) { 
      parm.ty = SystemType.Object 
    });
    cgm.ret_type = SystemType.Object;
    
    def parm_cnt = List.Length (cgm.parms);
    cgm.implemented_methods = [get_apply_method (parm_cnt)];
    cgm.modifiers = NemerleAttributes.Internal;
    
    Passes.cgil.AddMethodBuilder (cgm, cgm.lambda_type_builder);

    cg_fun_body (ctx, fh, body);
    
    Passes.cgil.EmitMethod (cgm);
    
    when (parm_cnt != 1)
      Passes.cgil.AddMethod (make_tupled_method (ctx, parm_cnt), cgm.lambda_type_builder);
  }

  make_lambda_ctor_call (ctx : CTX, fh : Fun_header) : CG_expr
  {
    def ctor = get_lambda_ctor (ctx, fh);
    def parms = get_parents_with_closures (ctx, fh);
    def parms' = List.Map (parms, fun (x) { closure_ref (ctx, x) });
    CE_call (CE_ctor_ref (ctor), parms')
  }

  cg_fun_body (ctx : CTX, hd : Fun_header, body : Expr) : void
  {
    def ctx' = copy_ctx (ctx);
    mutable assigns = [];
    mutable vals = [];
    
    def loadparm (parm_val : CG_val, fp : Fun_parm) {
      def parm = fp.decl;
      def needed_type = cg_type (ctx, parm.ty);

      if (parm.in_closure) {
        def a =
          CE_assign (local_ref (ctx, parm), 
                     maybe_cast (ctx, needed_type, CE_ref (parm_val)));
        assigns = a :: assigns
      } else {
        def v =
          if (needed_type.FullName == parm_val.ty.FullName)
            parm_val
          else {
            def v = CG_val (loc = fp.decl.loc, 
                            name = Util.tmpname (parm_val.name),
                            ty = needed_type, 
                            val = CE_cast (CE_ref (parm_val), needed_type));
            vals = v :: vals;
            v
          };
        ctx'.locals = ctx'.locals.Add (parm.id, v)
      }
    };

    def store_this (d : LocalValue) : void {
      match (d.kind) {
        | D_closurised_this_ptr =>
          when (d.in_closure) {
            assigns = CE_assign (local_ref (ctx, d), CE_this ()) :: assigns
          }
        | _ => ()
      }
    };

    def cgm = get_cg_method (ctx, hd);

    List.Iter2 (cgm.parms, hd.parms, loadparm);
    List.Iter (ctx.current_fun.closure_vars, store_this);
    
    def body = cg_expr (ctx', body);
    def buildlet (v : CG_val, e : CG_expr) : CG_expr { CE_let (v, e) };
    def body =
      List.FoldLeft (vals, 
                     CE_sequence (List.Rev (body :: assigns)),
                     buildlet);

    def body =
      match (ctx.current_closure) {
        | Some (v) => CE_let (v, body)
        | None => body
      };

    def body =
      if (cgm.ret_type.FullName == "System.Object")
        box_value (body)
      else
        body;

    cgm.body = body;
  }

  cg_global_fun (ctx : CTX, m : IMethod, body : Expr) : void
  {
    fixup_cg_method (m);
    def hd = m.GetHeader ();
    def ctx = prepare_ctx_for_fun (ctx, hd);
    cg_fun_body (ctx, hd, body)
  }
    
  internal CompileMethod (meth : NemerleMethod) : void
  {
    match (meth.fun_body) {
      | FB_parsed_expr => Tyexpr.TypeMethod (meth)
      | _ => ()
    };
    
    Util.locate (meth.GetLocation (), {
      match (meth.fun_body) {
        | FB_extern => ()
        | FB_compiled_expr => Util.ice ()
        | FB_parsed_expr => Util.ice ()

        | FB_typed_expr when Message.seen_error () =>
          // just skip it
          meth.fun_body = FB_compiled_expr ()
          
        | FB_typed_expr (body) =>
          def ctx = empty_ctx ((meth.DeclaringType :> TypeBuilder));
          cg_global_fun (ctx, meth, body);
          // release memory for GC
          meth.fun_body = FB_compiled_expr ();
          match (meth.GetFunKind ()) {
            | FK_bound_method (impl_list) =>
              def cgm = GetCgMethod (meth);

              Passes.cgil.EmitMethod (cgm);

              def tb = (meth.DeclaringType :> TypeBuilder).GetTypeBuilder ();

              def mkparm (ifp : CG_val, methp : CG_val) : CG_expr {
                CE_cast (CE_ref (ifp), methp.ty)
              };
              def make_impl_wrapper (impl_meth : IMethod) {
                def cgm' = build_cg_method (ctx, impl_meth);
                cgm'.body = CE_call (CE_method_ref (CE_this (), meth.GetMethodBuilder ()),
                                      List.Map2 (cgm'.parms, cgm.parms, mkparm));
                cgm'.name = impl_meth.DeclaringType.GetFullName () + "." + cgm.name;
                cgm'.implemented_methods = [impl_meth];
                cgm'.modifiers = NemerleAttributes.Private;
                Passes.cgil.AddMethod (cgm', tb)
              };
              List.Iter (impl_list, make_impl_wrapper)
              
            | FK_ctor =>
              Passes.cgil.EmitConstructor (GetCgMethod (meth))
              
            | _ => 
              Passes.cgil.EmitMethod (GetCgMethod (meth));
          }
        | FB_abstract => ()
      }
    })
  }

} // end module
} // end ns
