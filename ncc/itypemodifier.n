/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

namespace PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  interface ITypeModifier : Tycon
  {
    /** Add nested type. */
    DefineNestedClass (attrs : list <Modifier>,
                       name : string,
                       typarms : PT.Typarms,
                       extendeds_list : list <PT.Type>) : ITypeModifier;

    /** Add new field to given type. */
    DefineField (attrs : list <Modifier>, name : string, field_type : PT.Type) : void;

    /** Add new method to given type.

        If [header.name == ".ctor"] then added method is constructor.
      */
    DefineMethod (attrs : list <Modifier>,
                  header : PT.Fun_header,
                  body : PT.Expr,
                  implemented_methods : list <string>) : void;
    
    /** A simplified version of [DefineMethod] where one can use
        qutation to construct function header.
        
        Example usage:
        <code>
          t.DefineMethod ([], <[ def foo (x : int) : int { 2 * x } ]>)
        </code>

        If method name is [@this] then defined method is constructor. Return
        type should be [void] in this case.
      */
    DefineMethod (attrs : list <Modifier>, expr : PT.Expr) : void;
  }
}
