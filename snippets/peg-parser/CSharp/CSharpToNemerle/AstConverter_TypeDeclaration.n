using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MergeTypeDeclaration(decl : CS.TypeDeclaration) : void
    {
      manager.ScanningPipeline(ConvertTypeDeclaration(decl))
    }

    ConvertModifiers(attributes : list[CS.CustomAttribute], modifiers : list[CS.Modifier]) : Modifiers
    {
      def flags = modifiers.FoldLeft(NemerleAttributes.None, fun(flag : CS.Modifier, flags : NemerleAttributes) {
        def setFlag(value) {
          when(flags %&& value)
            Message.Error(flag.NLocation(), $"duplicated modifier `$flag'");
          flags %| value
        }
        match(flag) {
          | New         => setFlag(NemerleAttributes.New)
          | Public      => setFlag(NemerleAttributes.Public)
          | Protected   => setFlag(NemerleAttributes.Protected)
          | Internal    => setFlag(NemerleAttributes.Internal)
          | Private     => setFlag(NemerleAttributes.Private)
          | Partial     => setFlag(NemerleAttributes.Partial)
          | Virtual     => setFlag(NemerleAttributes.Virtual)
          | Volatile    => setFlag(NemerleAttributes.Volatile)
          | Static      => setFlag(NemerleAttributes.Static)
          | Sealed      => setFlag(NemerleAttributes.Sealed)
          | Override    => setFlag(NemerleAttributes.Override)
          | Abstract    => setFlag(NemerleAttributes.Abstract)
          | Extern      => setFlag(NemerleAttributes.Extern)
          | Unsafe      =>
            Message.Error(flag.NLocation(), "unsafe code is not supported");
            flags
          | Readonly =>
            flags //TODO: deal with Readonly
        }
      });
      // it is strange, but Nemerle does not save target of attribute
      def attrs = attributes.Map(
        atb => PT.PExpr.Call(atb.NLocation(), ConvertExpr(atb.Name), atb.Args.Map(ConvertExpr)));

      Modifiers(flags, attrs)
    }

    ConvertTyparms(tyvars : list[CS.TypeParameter], constClauses : list[CS.TypeParameterConstraintClause]) : PT.Typarms
    {
      | ([], []) => PT.Typarms.Empty
      | _ =>
        def varianceInfo = Hashtable();

        def tyvars = tyvars.Map(fun(tp){
          match(tp.Attributes) {
            | [] => ()
            | _ :: _ =>
              Message.Warning(tp.Name.NLocation(), "type parameter attributes are ignored");
          }
          match(tp.Variance) {
            | CS.TypeParameterVariance.Normal => ()
            | variance =>
              varianceInfo[tp.Name.Id] = variance;
          }
          MakeSplicableName(tp.Name)
        });

        def constraints = constClauses.Map(fun(constrClause) {
          def tyVar = MakeSplicableName(constrClause.ParameterName);
          def otherConstraints = constrClause.Constraints.Map(fun(c) {
            def loc = c.NLocation();
            def expr = match(c : CS.TypeParameterConstraint) {
              | DefaultCtor   => PT.PExpr.Ref(loc, MakeName("new", loc))
              | Struct        => PT.PExpr.Ref(loc, MakeName("struct", loc))
              | Class         => PT.PExpr.Ref(loc, MakeName("class", loc))
              | Base(typeRef) => ConvertExpr(typeRef)
            }
            PT.Constraint(tyVar, expr)
          });
          match(varianceInfo.Get(constrClause.ParameterName.Id)) {
            | Some(CS.TypeParameterVariance.In as variance) with varianceId = "-"
            | Some(CS.TypeParameterVariance.Out as variance) with varianceId = "+" =>
              def loc = variance.NLocation();
              def varianceConstraint = PT.Constraint(tyVar, PT.PExpr.Ref(loc, MakeName(varianceId, loc)));
              varianceConstraint :: otherConstraints
            | _ => otherConstraints
          }
        });

        PT.Typarms(tyvars, constraints.Flatten())
    }

    ConvertTypeDeclaration(decl : CS.TypeDeclaration) : PT.TopDeclaration
    {
      def loc = decl.NLocation();
      def mods = ConvertModifiers(TakeOutAndCheckAttributes.[CS.CustomAttributeTarget.Type](decl.Attributes), decl.Modifiers);
      def name = MakeSplicableName(decl.Name);
      def typarms = ConvertTyparms(decl.TypeParameters, decl.Constraints);

      match(decl) {
        | Class(baseTypes, members) =>
          PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember(_, decl.Name)))

        | Struct(baseTypes, members) =>
          mods.mods |= NemerleAttributes.Struct;
          PT.TopDeclaration.Class(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember(_, decl.Name)))

        | Interface(baseTypes, members) =>
          PT.TopDeclaration.Interface(loc, name, mods, typarms, baseTypes.Map(ConvertExpr), members.Map(ConvertTypeMember(_, decl.Name)))

        | Delegate(returnType, formalParameters) =>
          def header = PT.PFunHeader(loc, typarms, name, ConvertExpr(returnType), formalParameters.Map(ConvertParam));
          PT.TopDeclaration.Delegate(loc, name, mods, typarms, header)

        | Enum(null, members) =>
          PT.TopDeclaration.Enum(loc, name, mods, typarms, [], members.Map(ConvertTypeMember(_, decl.Name)))

        | Enum(baseType, members) =>
          PT.TopDeclaration.Enum(loc, name, mods, typarms, [ConvertExpr(baseType)], members.Map(ConvertTypeMember(_, decl.Name)))
      }
    }

    ConvertTypeMember(member : CS.TypeMember, typeName : CS.Identifier) : PT.ClassMember
    {
      def loc = member.NLocation();
      mutable pool = PrepareAttributes(member.Attributes);
      def member = match(member) {
        | Constant(name, memberType, value) =>
          def value = ConvertExpr(value);
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          mods.AddCustomAttribute(Util.locate(loc, <[ Nemerle.InternalMacros.StaticInitializer($value) ]>));
          mods.mods |= NemerleAttributes.Static;
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType), value)

        | Field(name, memberType, null) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          unless(member.Modifiers.Exists(_ is CS.Modifier.Readonly))
            mods.mods |= NemerleAttributes.Mutable;
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType))

        | Field(name, memberType, CS.VariableInitializer.Expr(value)) =>
          def value = ConvertExpr(value);
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          mods.AddCustomAttribute(Util.locate(loc, <[ Nemerle.InternalMacros.StaticInitializer($value) ]>));
          unless(member.Modifiers.Exists(_ is CS.Modifier.Readonly))
            mods.mods |= NemerleAttributes.Mutable;
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType), value)

        | Field(name, memberType, _) =>
          Message.Error(loc, "bad field initializer");
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(memberType))

        | FixedSizeBuffer(name, elementType, _) =>
          Message.Error(loc, "fixed size buffers are not supported");
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          PT.ClassMember.Field(loc, MakeSplicableName(name), mods, ConvertExpr(elementType))

        | Method(CS.Expr.Ref(id),                         returnType, formalParameters, typeParameters, constraints, body) with iface = null
        | Method(CS.Expr.Member(iface, CS.Expr.Ref(id)),  returnType, formalParameters, typeParameters, constraints, body)
        | Method(_,                                       returnType, formalParameters, typeParameters, constraints, body) with (id = null, iface = null) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Method, CS.CustomAttributeTarget.Return](ref pool), member.Modifiers);
          def name = match(id) {
            | null => Message.FatalError(loc, "bad method name")
            | _ => MakeSplicableName(id)
          }
          def header = PT.PFunHeader(loc, ConvertTyparms(typeParameters, constraints), name, ConvertExpr(returnType), formalParameters.Map(ConvertParam));
          def iface = match(iface) {
            | null => []
            | _ => [ConvertExpr(iface)]
          }
          def body = match(body) {
            | Empty => FunBody.Abstract()
            | _ => FunBody.Parsed(ConvertExpr(body))
          }
          def method = PT.ClassMember.Function(loc, name, mods, header, iface, body);
          method.IsExtension = formalParameters.Exists(HasThisModifier);
          method

        | Property(CS.Expr.Ref(id),                           memberType,                   getter, setter) with (iface = null,             formalParameters = [])
        | Property(CS.Expr.Member(iface, CS.Expr.Ref(id)),    memberType,                   getter, setter) with (                          formalParameters = [])
        | Property(_,                                         memberType,                   getter, setter) with (iface = null, id = null,  formalParameters = [])
        | Indexer(CS.Expr.This as th,                         memberType, formalParameters, getter, setter) with (iface = null, id = CS.Identifier(th.Location, "Item"))
        | Indexer(CS.Expr.Member(iface, CS.Expr.This as th),  memberType, formalParameters, getter, setter) with (              id = CS.Identifier(th.Location, "Item"))
        | Indexer(_,                                          memberType, formalParameters, getter, setter) with (iface = null, id = null) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Property](ref pool), member.Modifiers);
          def name = match(id) {
            | null => Message.FatalError(loc, "bad property name")
            | _ => MakeSplicableName(id)
          }
          def memberType = ConvertExpr(memberType);
          def iface = match(iface) {
            | null => []
            | _ => [ConvertExpr(iface)]
          }
          def parms = formalParameters.Map(ConvertParam);

          mutable accessorPool = []; // we cant pass ref-values to local functions

          def convertAccessor(accessor, prefix, returnType, parms) {
            def loc = accessor.NLocation();
            def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Method, CS.CustomAttributeTarget.Return](ref pool)
                      + TakeOutAttributes.[CS.CustomAttributeTarget.Method, CS.CustomAttributeTarget.Return](ref accessorPool);
            def mods = ConvertModifiers(attrs, accessor.Modifiers);
            def name = MakeSplicableName(prefix + id.Id, id.NLocation());
            def header = PT.PFunHeader(loc, name, returnType, parms);
            def body= match(accessor.Body : CS.Statement) {
              | Empty => FunBody.Abstract()
              | _     => FunBody.Parsed(ConvertExpr(accessor.Body))
            }
            CheckAttributes(accessorPool);
            PT.ClassMember.Function(loc, name, mods, header, iface, body)  |> WithCurrentEnv
          }

          def getter = match(getter) {
            | null => None()
            | _ =>
              accessorPool = PrepareAttributes(getter.Attributes);
              convertAccessor(getter, "get_", memberType, parms) |> Some
          }

          def setter = match(setter) {
            | null => None()
            | _  =>
              accessorPool = PrepareAttributes(setter.Attributes);
              def setterLoc = setter.NLocation();
              convertAccessor(setter, "set_", PT.PExpr.Void(setterLoc),
                parms + [ PT.PParameter(
                    loc   = setterLoc,
                    name  = MakeSplicableName("value", setterLoc),
                    ty    = memberType,
                    modifiers = {
                      def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Param](ref accessorPool);
                      def mods = ConvertModifiers(attrs, []);
                      mods.mods |= NemerleAttributes.Mutable;
                      mods }) ]) |> Some
          }

          PT.ClassMember.Property(loc, name, mods, memberType, parms, getter, setter, iface)

        | Event(CS.Expr.Ref(id),                        memberType, adder, remover, init) with iface = null
        | Event(CS.Expr.Member(iface, CS.Expr.Ref(id)), memberType, adder, remover, init)
        | Event(_,                                      memberType, adder, remover, init) with (id = null, iface = null) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Event](ref pool), member.Modifiers);
          def name = match(id) {
            | null => Message.FatalError(loc, "bad event name")
            | _ => MakeSplicableName(id)
          }
          def memberType = ConvertExpr(memberType);
          def iface = match(iface) {
            | null => []
            | _ => [ConvertExpr(iface)]
          }
          when(null != init)
            Message.Error(init.NLocation(), "event cannot have initial value");

          def createEventField() {
            def name =
              if(manager.IsIntelliSenseMode)
                MakeSplicableName("_N_event_field_of_" + id.Id, id.NLocation());
              else
                MakeSplicableName(Util.tmpname("event_field_of_" + id.Id), id.NLocation());
            def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Field](ref pool);
            def mods = ConvertModifiers(attrs, []);
            mods.mods = NemerleAttributes.Private %| NemerleAttributes.Mutable;
            PT.ClassMember.Field(loc, name, mods, memberType) |> WithCurrentEnv
          }
          def createEventAccessor(prefix) {
            def name = MakeSplicableName(prefix + id.Id, id.NLocation());
            def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Method](ref pool);
            def mods = ConvertModifiers(attrs, []);
            def header = PT.PFunHeader(
              loc         = loc,
              name        = name,
              returnType  = PT.PExpr.Void(loc),
              parameters  = [ PT.PParameter(
                  loc   = loc,
                  name  = MakeSplicableName("value", loc),
                  ty    = memberType,
                  modifiers = {
                    def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Param](ref pool);
                    def mods = ConvertModifiers(attrs, []);
                    mods.mods |= NemerleAttributes.Mutable;
                    mods }) ]);
            PT.ClassMember.Function(loc, name, mods, header, iface, null) |> WithCurrentEnv
          }
          def convertEventAccessor(accessor, prefix) {
            def loc = accessor.NLocation();
            unless(accessor.Modifiers.IsEmpty)
              Message.Error(loc, "event accessor cannot have any modifiers");
            mutable accessorPool = PrepareAttributes(accessor.Attributes);
            def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Method](ref pool)
                      + TakeOutAttributes.[CS.CustomAttributeTarget.Method](ref accessorPool);
            def mods = ConvertModifiers(attrs, []);
            def name = MakeSplicableName(prefix + id.Id, id.NLocation());
            def header = PT.PFunHeader(
              loc         = loc,
              name        = name,
              returnType  = PT.PExpr.Void(loc),
              parameters  = [ PT.PParameter(
                  loc   = loc,
                  name  = MakeSplicableName("value", loc),
                  ty    = memberType,
                  modifiers = {
                    def attrs = TakeOutParentAttributes.[CS.CustomAttributeTarget.Param](ref accessorPool);
                    def mods = ConvertModifiers(attrs, []);
                    mods.mods |= NemerleAttributes.Mutable;
                    mods }) ]);
            def body = match(accessor.Body : CS.Statement) {
              | Empty => FunBody.Abstract()
              | _     => FunBody.Parsed(ConvertExpr(accessor.Body))
            }
            CheckAttributes(accessorPool);
            PT.ClassMember.Function(loc, name, mods, header, iface, body) |> WithCurrentEnv
          }

          def (field, adder, remover) = match(adder, remover) {
            | (null, null) =>
              (createEventField(), createEventAccessor("add_"), createEventAccessor("remove_"))

            | (null, _)
            | (_, null) =>
              Message.Error(loc, "both of event accessors `add' and `remove' must be specified");
              (createEventField(), createEventAccessor("add_"), createEventAccessor("remove_"))

            | _ =>
              (null, convertEventAccessor(adder, "add_"), convertEventAccessor(remover, "remove_"))
          }
          PT.ClassMember.Event(loc, name, mods, memberType, field, adder, remover)

        | Operator(id, returnType, formalParameters, body) =>
          //TODO: check overloadable operator name and args
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Method, CS.CustomAttributeTarget.Return](ref pool), member.Modifiers);
          def name = MakeSplicableName(id);
          def header = PT.PFunHeader(loc, PT.Typarms.Empty, name, ConvertExpr(returnType), formalParameters.Map(ConvertParam));
          def body = match(body) {
            | Empty => FunBody.Abstract()
            | _ => FunBody.Parsed(ConvertExpr(body))
          }
          PT.ClassMember.Function(loc, name, mods, header, [], body)

        | Constructor(CS.Expr.Ref(id),  formalParameters, init, body)
        | Constructor(_,                formalParameters, init, body) with id = null =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Method](ref pool), member.Modifiers);
          def name = match(id) {
            | null => Message.FatalError(loc, "bad constructor name")
            | _ =>
              def idLoc = id.NLocation();
              when(id.Id != typeName.Id)
                Message.Error(idLoc, "constructor name must be equal to type name");
              MakeSplicableName(".ctor", idLoc)
          }
          def header = PT.PFunHeader(loc, PT.Typarms.Empty, name, PT.PExpr.Void(loc), formalParameters.Map(ConvertParam));
          def body = match(body, init) {
            | (Empty, Default) => FunBody.Abstract()
            | _ =>
              def initLoc = init.NLocation();
              match(init) {
                | Default =>
                  FunBody.Parsed(ConvertExpr(body))
                | This(args)
                  with otherCtor = PT.PExpr.Call(initLoc, PT.PExpr.This(initLoc), args.Map(ConvertExpr))
                | Base(args)
                  with otherCtor = PT.PExpr.Call(initLoc, PT.PExpr.Base(initLoc), args.Map(ConvertExpr)) =>
                  FunBody.Parsed(PT.PExpr.Sequence(body.NLocation(), [otherCtor, ConvertExpr(body)]))
              }
          }
          PT.ClassMember.Function(loc, name, mods, header, [], body)

        | Destructor(CS.Expr.Ref(id), formalParameters, body)
        | Destructor(_,               formalParameters, body) with id = null =>
          //TODO: check dtor modifiers
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Method](ref pool), member.Modifiers);
          mods.mods |= NemerleAttributes.Override %| NemerleAttributes.Protected;
          def name = match(id) {
            | null => Message.FatalError(loc, "bad destructor name")
            | _ =>
              def idLoc = id.NLocation();
              when(id.Id != typeName.Id)
                Message.Error(idLoc, "destructor name must be equal to type name");
              MakeSplicableName("Finalize", idLoc)
          }
          def header = PT.PFunHeader(loc, PT.Typarms.Empty, name, PT.PExpr.Void(loc), formalParameters.Map(ConvertParam));
          def body = match(body) {
            | Empty => FunBody.Abstract()
            | _ => FunBody.Parsed(ConvertExpr(body))
          }
          PT.ClassMember.Function(loc, name, mods, header, [], body)

        | EnumOption(name, null) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          PT.ClassMember.EnumOption(loc, MakeSplicableName(name), mods, None())

        | EnumOption(name, value) =>
          def mods = ConvertModifiers(TakeOutAttributes.[CS.CustomAttributeTarget.Field](ref pool), member.Modifiers);
          PT.ClassMember.EnumOption(loc, MakeSplicableName(name), mods, Some(ConvertExpr(value)))

        | TypeDeclaration(decl) =>
          pool = []; // prevent attribute checking
          def ndecl = ConvertTypeDeclaration(decl);
          PT.ClassMember.TypeDeclaration(ndecl.loc, ndecl.name, ndecl.modifiers, ndecl)
      }
      CheckAttributes(pool);
      member |> WithCurrentEnv
    }

    ConvertParam(parm : CS.FormalParameter) : PT.PParameter
    {
      def loc = parm.NLocation();
      def parmName = MakeSplicableName(parm.Name);
      def parmMods = ConvertModifiers(TakeOutAndCheckAttributes.[CS.CustomAttributeTarget.Param](parm.Attributes), []);
      parmMods.mods |= NemerleAttributes.Mutable;
      mutable parmTy =
        match(parm.ParameterType) {
          | null  => PT.PExpr.Wildcard(loc)
          | ty    => ConvertExpr(ty)
        }
      match(parm.Modifier) {
        | Normal  => ()
        | This    => ()
        | Ref     => parmTy = PT.PExpr.ParmByRef(loc, parmTy);
        | Out     => parmTy = PT.PExpr.ParmOut(loc, parmTy);
        | Params  => parmMods.custom_attrs ::= Util.locate(loc, <[ System.ParamArrayAttribute ]>);
      }
      match(parm.DefaultValue) {
        | null  => ()
        | val   =>
          def val = ConvertExpr(val);
          parmMods.custom_attrs ::= Util.locate(loc, <[ System.ComponentModel.DefaultValueAttribute($val) ]>);
      }
      PT.PParameter(loc, parmName, parmTy, parmMods)
    }

    HasThisModifier(parm : CS.FormalParameter) : bool
    {
      match(parm.Modifier) {
        | This => true
        | _ => false
      }
    }
  }
}