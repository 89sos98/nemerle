using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using ComputationExpressions;

public module AttemptBuilder
{
  public type Attempt[A] = void -> option[A];

  //Bind : Attempt<'a> * ('a -> Attempt<'b>) -> Attempt<'b>
  public Bind[A, B](val : Attempt[A], cont : A -> Attempt[B]) : Attempt[B]
  {
    match (val())
    {
      | None       => () => None();
      | Some (val) => cont(val);
    }
  }

  public Bind[A, B](val : option[A], cont : A -> Attempt[B]) : Attempt[B]
  {
    match (val)
    {
      | None       => () => None();
      | Some (val) => cont(val);
    }
  }

  //Delay : (unit -> Attempt<'a>) -> Attempt<'a>
  public Delay[A](cont : void -> Attempt[A]) : Attempt[A]
  {
    () => cont()()
  }

  //Let : a * ('a -> Attempt<'a>) -> Attempt<'a>
  public Let[A](val : A, cont : A -> Attempt[A]) : Attempt[A]
  {
    () => cont(val)();
  }

  //Return : 'a -> Attempt<'a>
  public Return[A] (val : A) : Attempt[A]
  {
    () => Some(val)
  }
}

module Program
{
  Main() : void
  {
    def f(inp)
    {
      if (inp < 10)
        Some(inp)
      else
        None();
    }

    def fn(inp1, inp2)
    {
      computation AttemptBuilder
      {
        bind n1 = f(inp1);
        bind n2 = f(inp2);
        def sum = n1 + n2;
        return sum;
      }
    }
    WriteLine(fn(1, 2)());
    WriteLine(fn(1, 22)());
    WriteLine(fn(12, 2)());
  }
}