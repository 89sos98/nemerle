using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;

namespace CSharpParser.TestMacros {

  /*
    macro checks only acceptance of input string by parser
  */
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro Accepts(tb : TypeBuilder, testName : string, testString : string) {
    tb.Define(<[ decl:
      [NUnit.Framework.Test(Description = $(testString : string))]
      public $("ACCEPT: " + testName : usesite)() : void
      {
        def parser = CSharpParser.Parser();
        def (pos, unit) = parser.TryParse($(testString : string));
        NUnit.Framework.Assert.LessOrEqual(0, pos);
        NUnit.Framework.Assert.AreEqual(0, unit.GetParseErrors().Count);
      }
    ]>);
  }


  /*
    macro checks if input string is rejected by parser
  */
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro Rejects(tb : TypeBuilder, testName : string, testString : string) {
    tb.Define(<[ decl:
      [NUnit.Framework.Test(Description = $(testString : string))]
      public $("REJECT: " + testName : usesite)() : void
      {
        def parser = CSharpParser.Parser();
        def (pos, _) = parser.TryParse($(testString : string));
        NUnit.Framework.Assert.AreEqual(-1, pos);
      }
    ]>);
  }



}