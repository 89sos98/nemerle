open Nemerle.Compiler;

namespace Nemerle.Compiler {

type long_id = string;
type id = string;

record Location 
  {
    file : string;
    line : int;
    column : int;
  }
  
class Located
  {
    field ref loc : Location;
  }

class Expr_base extends Located
  {
    field ref env : Env;
  }

class Named extends Located
  {
    field ref name : long_id;
  }

class Decl_base extends Named
  {
    field ref modifiers : list (Modifier);
    field ref env : Env;
    field ref id : int;

    method this () { this#id <- Util.next_id(); }
  }

variant Modifier = 
  [
    | Mod_public
    | Mod_private
    | Mod_new
    | Mod_protected
    | Mod_internal
    | Mod_abstract
    | Mod_sealed
  ]
  
variant Top_decl extends Located =
  [
    | TD_namespace { 
        name : long_id; 
        decls : list (Top_decl);
      }
    | TD_open {
        what : long_id;
      }
    | TD_namespace_alias {
        alias : id;
        expanded : long_id;
      }
    | TD_type {
        decl : Type_decl;
      }
  ]

class Type_decl_base extends Decl_base
  {
    field typarms : Typarms;
    field t_extends : option (Type);
    field t_implements : list (Type);
  }

record Constraint
  {
    tyvar : id;
    ty : Type;
  }

record Typarms
  {
    tyvars : list (id);
    constraints : list (Constraint);
  }
  
variant Type_decl extends Type_decl_base =
  [
    | TD_class { decls : list (Class_member); }
    | TD_alias { ty : Type; }
    | TD_external { extern_name : string; }
    | TD_interface { methods : list (Class_member); }   // only iface_member
    | TD_variant { decls : list (Type_decl); }       // only variant_option
    | TD_variant_option { decls : list (Class_member); }
  ]

variant Fun_kind =
  [
    | FK_method { f_implements : list (long_id); }
    | FK_ctor
    | FK_static_ctor
    | FK_function
  ]

variant Fun_body =
  [
    | FB_expr { expr : Expr; }
    | FB_extern { name : string; }
  ]

variant Class_member extends Decl_base =
  [
    | M_type { td : Type_decl; }
    | M_value { ty : Type; is_ref : bool; }
    | M_field { ty : Type; is_ref : bool; }
    | M_function { 
        fun_header : Fun_header;
        fun_kind : Fun_kind;
        body : Fun_body;
      }
    | M_iface_method { new_flag : bool; fun_header : Fun_header; }
  ]

variant Type =
  [
    | T_app {
        tycon : long_id;
        args : list (Type);
        ref ref_to : int;
      }
    | T_var { 
        name : id; 
        ref ref_to : int; 
      }
    | T_ref { t : Type; }
    | T_out { t : Type; }
    | T_fun { from : list (Type); to : Type; }
    | T_void
    | T_prod { args : list (Type); }
  ]

class Fun_parm extends Named
  {
    field ty : Type;
  }
  
class Fun_header extends Named
  {
    field ret_type : Type;
    field parms : list (Fun_parm);
    field typarms : Typarms;
  }

record Parm
  {
    is_ref : bool;
    expr : Expr;
    name : id;  // "" if no name given
  }

record Function_decl
  {
    fun_header : Fun_header;
    body : Expr;
  }

variant Literal =
  [
    | L_void
    | L_null
    | L_int { val : int; }
    | L_string { val : string; }
    | L_float { val : float; }
  ]

variant Pattern extends Located =
  [
    | P_underscore
    | P_variable { name : string; }
    | P_tuple { args : list (Pattern); }
    | P_record { args : list (id * Pattern); }
    | P_cons { name : long_id; arg : Pattern; }
  ]
  
record Match_case
  {
    pattern : Pattern;
    body : Expr;
  }
  
variant Expr extends Expr_base = 
  [ 
    | E_ref { name : long_id; }
    | E_member { obj : Expr; member : long_id; }
    | E_call { func : Expr; parms : list (Parm); }
    | E_assign { target : Expr; source : Expr; }
    | E_let { ref_flag : bool; name : id; val : Expr; body : Expr; }
    | E_letfun { funs : list (Function_decl); body : Expr; }
    | E_lambda { decl : Function_decl; }
    | E_match { expr : Expr; cases : list (Match_case); }
    | E_raise { exn : Expr; }
    | E_if { cond : Expr; e_then : Expr; e_else : Expr; }
    | E_try_with { body : Expr; exn : id; exn_ty : Type; handler : Expr; }
    | E_try_finally { body : Expr; handler : Expr; }
    | E_literal { val : Literal; }
    | E_this
    | E_type_conversion { expr : Expr; ty : Type; }  // (expr :> ty)
    | E_type_enforcement { expr : Expr; ty : Type; } // (expr : ty)
    | E_sequence { body : list (Expr); }
    | E_tuple { args : list (Expr); }
  ]

 
} // Nemerle.Compiler
