using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Macros;
using Nemerle.Collections;

macro antsparser (exps)
syntax ("ants", exps) {
  def stmts (e) {
    | <[ { ..$lst } ]> => Macros.Lift (lst, stmt)
    | _ => <[ [ $(stmt (e)) ] ]>
  }
  and stmt (e) {
    | <[ label ($(name : dyn)) ]> => <[ S_label ($(name : string)) ]>

    | <[ goto ($(label : dyn)) ]> => <[ S_goto ($(label : string)) ]>

    | <[ mark ($i) ]> => <[ S_mark ($i) ]>

    | <[ unmark ($i) ]> => <[ S_unmark ($i) ]>

    | <[ if (pickup) $then else $nofood ]> =>
      <[ S_pickup ($(stmts (then)), $(stmts (nofood))) ]> 

    | <[ drop ]> => <[ S_drop () ]>

    | <[ turn (left) ]> => <[ S_turn (true) ]>

    | <[ turn (right) ]> => <[ S_turn (false) ]>

    | <[ if (move) $then else $blocked ]> =>
      <[ S_move ($(stmts (then)), $(stmts (blocked))) ]>       

    | <[ if (rand ($i)) $then else $els ]> =>
      <[ S_ifrand ($i, $(stmts (then)), $(stmts (els))) ]>

    | <[ if ($c) $then else  $els ]> =>
      <[ S_if ($(cond (c)), $(stmts (then)), $(stmts (els))) ]>

    | _ => Message.fatal_error ("bad ant statemnt: " + Macros.SprintExpr (None (), e))
  }
  and cond (e) {
    | <[ $wh ($whe) ]> => <[ ($(what (wh)), $(wher (whe))) ]>
      
    | _ => Message.fatal_error ("bad ant condition: " + Macros.SprintExpr (None (), e))
  }
  and what (e) {
    | <[ friend ]> => <[ C_friend () ]>
      
    | <[ foe ]> => <[ C_foe () ]>
      
    | <[ friend (food) ]> => <[ C_friend_with_food () ]>
      
    | <[ foe (food) ]> => <[ C_foe_with_food () ]>
      
    | <[ food ]> => <[ C_food () ]>
      
    | <[ rock ]> => <[ C_rock () ]>
      
    | <[ marker ($col) ]> => <[ C_marker ($col) ]>
      
    | <[ foe (marker) ]> => <[ C_foe_marker () ]>
      
    | <[ home ]> => <[ C_home () ]>
      
    | <[ foe (home) ]> => <[ C_foe_home () ]>
      
    | _ => Message.fatal_error ("bad ant what: " + Macros.SprintExpr (None (), e))      
  }
  and wher (e) {
    | <[ here ]> => <[ D_here () ]>
      
    | <[ ahead ]> => <[ D_ahead () ]>
      
    | <[ left ]> => <[ D_left () ]>
      
    | <[ right ]> => <[ D_right () ]>
      
    | _ => Message.fatal_error ("bad ant where: " + Macros.SprintExpr (None (), e))
  };  
  stmts (exps)
}
