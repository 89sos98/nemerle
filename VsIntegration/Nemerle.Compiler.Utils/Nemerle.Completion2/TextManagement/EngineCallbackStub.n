using System;
using System.Reflection;
using Nemerle.Compiler;
using System.Collections.Generic;

namespace Nemerle.Completion2
{
  public class EngineCallbackStub : IEngineCallback
  {
    public static Default : EngineCallbackStub = EngineCallbackStub("mscorlib", "System");

    _assemblyReferences : IEnumerable[string];

    public this(params assemblyReferences : array[string])
    {
      // Copy assembly refs. If it is not a path try load 
      // assembly by name and get it path.
      
      def asmRefs = array(assemblyReferences.Length);
      _assemblyReferences = asmRefs;
      
      for (mutable i = 0; i < asmRefs.Length; i++)
      {
        def asm = assemblyReferences[i];
        if (IO.File.Exists(asm))
          asmRefs[i] = asm;
        else
        {
#pragma warning disable 618 // Obsolete
          def asm = Assembly.LoadWithPartialName(asm);
#pragma warning restore 618
          asmRefs[i] = Uri(asm.CodeBase).LocalPath;
        }
      }
    }

    public ProjectName : string { get { "UnitTestFakeProject" } }

    public GetAssemblyReferences() : IEnumerable[string]
    {
      _assemblyReferences
    }

    public ShowMessage(message : string, messageType : MessageType) : void
    {
      Diagnostics.Trace.WriteLine($"$messageType: $message")
    }

    public SetTopLevelCompilerMessages(_messages : IEnumerable[CompilerMessage]) : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }
    
    public SetMethodCompilerMessages(_member : MemberBuilder, _messages : IEnumerable[CompilerMessage]) : void
    {
      //TODO: VladD2: We should implement testing of error reporting.
    }
  }
}