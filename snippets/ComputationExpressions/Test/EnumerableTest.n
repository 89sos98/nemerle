using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.ComputationExpressions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Test
{
  /// <summary>
  /// Description of EnumerableTest.
  /// </summary>
  public class EnumerableTest
  {
    [TestCaseAttribute(<#
1
777 must follow.
777
The final part.
#>)]
    public static Test1(stream : IO.TextWriter) : void
    {
      def g (x)
      {
        comp enumerable
        {
          mutable i = 0;
          while (i < x)
          {
            yield i;
            i ++;
          }
        }
      }
      
      def upTo (n : int)
      {
        comp enumerable
        {
          mutable i = 0;
          while (i < n)
          {
            i ++;
            yield i
          }
        }
      }

      def manyTimes : IEnumerable [int] =
        comp enumerable
        {
          yieldcomp upTo(2);   // 1 2
          yield 100;           // 100
          yieldcomp upTo(3);   // 1 2 3
          yield 100;           // 100
          yieldcomp upTo(10);  // 1 2 3 .. 10
        }
      
      def _testIf (n)
      {
        comp enumerable
        {
          if (n > 5) (); else ();
          if (n > 5) { yield 10; } else ();
          
          when (n > 5) ();
          when (n > 5) yield 10;
          
          unless (n > 5) ();
          unless (n > 5) yield 10;
        }
      }
      
      def _testWhile (n)
      {
        comp enumerable
        {
          mutable i1 = 0;
          mutable i2 = 0;
          
          while (i1 < n) i1 ++;
          while (i2 < n)
          { 
            yield i2; 
            i2 ++; 
            yieldcomp manyTimes 
          }
        }
      }
      
      def _testMatching (n)
      {
        comp enumerable
        {
          match (n)
          {
            | x when x > 5 => ();
            | _ => ();
          }
          match (n)
          {
            | x when x > 5 => yield 10;
            | _ => yield 5;
          }
        }
      }
      
      def _testForeach (coll : IEnumerable[_])
      {
        comp enumerable
        {
          foreach (x in coll)  ignore (x);
          foreach (x in coll)  yield (x + 5)
        }
      }
      
      def _testFor (n)
      {
        comp enumerable
        {
          for (mutable x = 0; x < n; x ++) ignore (x);
          for (mutable x = 0; x < n; x ++) yield (2 * x);
          
          mutable x = 0;
          
          for (; false;) ignore (x);
          for (; false;) yield (2 * x);
        }
      }
      
      def _testRepeat (n)
      {
        comp enumerable
        {
          repeat (n) ();
          repeat (n) yield n;
        }
      }
      
      def _testDo (n)
      {
        comp enumerable
        {
          do { stream.WriteLine ("do-while") } while (false || false);
          do { yield n } while (false);
        }
      }
      
      def _stream (n)
      {
        comp enumerable
        {
          yield n;
          yieldcomp (_stream (n + 1));
        }
      }
      
      def _filesUnderFolder (rootFolder : string)
      {
        comp enumerable
        {
          foreach (file in System.IO.Directory.GetFiles (rootFolder))
            yield file;
          foreach (dir in System.IO.Directory.GetDirectories (rootFolder))
            yieldcomp (_filesUnderFolder (dir))
        }
      }
      
      def _testForeachMatch (coll : IEnumerable [_])
      {
        comp enumerable
        {
          foreach (x in coll)
          {
            | x when x > 0 => yield 1
            | x when x < 0 => yield (-1)
            | _ => yield 0
          }
        }
      }
      
      def _testTryFinally () : IEnumerable[_]
      {
        comp enumerable
        {
          try
          {
            yield 1;
            stream.WriteLine ("write 1");
            throw InvalidOperationException ("Test exception");
            //yield 2;
            //stream.WriteLine ("write 2");
          }
          finally
          {
            stream.WriteLine ("try-finally")
          }
        }
      }
      
      def _testTryCatch () : IEnumerable[_]
      {
        comp enumerable
        {
          try
          {
            yield 1;
            throw Exception ();
          }
          catch
          {
            | _ is InvalidOperationException =>
              stream.WriteLine ("InvalidOperationException")
            | _ is Exception =>
              stream.WriteLine ("777 must follow.");
              yield 777;
          }
          finally
          {
            stream.WriteLine ("The final part.");
          }
        }
      }
      
      def _testUsing ()
      {
        comp list
        {
          using (_file = IO.FileStream ("test", IO.FileMode.Create))
          {
            yield 1;
          }
          
          using (_file1 = IO.FileStream ("test1", IO.FileMode.Create), _file2 = IO.FileStream ("test2", IO.FileMode.Create))
          {
            ()
          }
          
          using (_file1 = IO.FileStream ("test1", IO.FileMode.Create), _file2 = IO.FileStream ("test2", IO.FileMode.Create))
          {
            yield 3;
          } 
          catch
          {
            | _e is InvalidOperationException => () //yield 10;
            | _e is Exception => stream.WriteLine ("error");
          }
        }
      }
      
      //def _temp1 = fn (1, 2);
      def _temp2 = g (5);
        
      //~ stream.WriteLine(fn(1, 2)());
      //~ stream.WriteLine(fn(3, 2)());
      //~ stream.WriteLine(fn(1, 22)());
      //~ stream.WriteLine(fn(12, 2)());
      
      // _testFor (10).Iter (stream.WriteLine);
        
      _testTryCatch ().Iter (stream.WriteLine);
    }
  }
}
