/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Tyops;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Tyvar;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler {

public module Tyvar {

  mutable tyvars : SystemMap <int, T>;

  store_tv (t : T) : void
  {
    tyvars = tyvars.Add (t.id, t)
  }
  
  public class T
  {
    public name : string;
    public mutable constraints : list <TType>;
    public id : int;
    public mutable value : TvValue;
    public mutable is_fixed : bool;

    public this (n : string)
    {
      this.name = n;
      this.constraints = [];
      this.is_fixed = false;
      this.id = Util.next_id ();
      this.value = TvValue.TV_unspecified ();
      store_tv (this);
    }

    public this (t : T)
    {
      this.name = t.name;
      this.constraints = t.constraints;        // to be is_fixed
      this.value = TvValue.TV_free ();
      this.is_fixed = true;
      this.id = Util.next_id ();
      store_tv (this);
    }

    public this ()
    {
      this.id = Util.next_id ();
      this.name = "_N_fv" + this.id.ToString ();
      this.constraints = [];
      this.value = TvValue.TV_free ();
      this.is_fixed = true;
      store_tv (this);
    }

    public add_constraint (ty : TType) : void
    {
      if (this.is_fixed)
        Message.error ("this type variable cannot get any new constraints here")
      else ();
      this.constraints = ty :: this.constraints
    }
  }

  public class TEnv
  {
    tyvars : NemerleMap <Name, T>;
    
    private this (tv : NemerleMap <Name, T>)
    {
      this.tyvars = tv;
    }

    public this ()
    {
      this.tyvars = NemerleMap ();
    }

    /** Perform typing of Parsetree type to Typedtree type, looking up type constructors 
        in given global environment (with accessibility information implied by given current
        TypeInfo) and type variables in current instance.
        If [check_parms] is true, then we check if type substituted for a given type
        variable conforms to all of its constraints. It should be true in general, but
        is false when we don't know the subtyping relations yet (during scanning of
        global types).
     */
    public bind (env : GlobalEnv, curtc : TypeInfo, t : PType, check_parms : bool) : TType
    {
      def f (allow_ref, t : PType) : TType {
        match (t) {
          | PType.ByRef when !allow_ref
          | PType.Out when !allow_ref =>
            Message.fatal_error ("nested ref/out type found")
            
          | PType.ByRef (t) => TType.ByRef (f (false, t))
          | PType.Out (t) => TType.Out (f (false, t))
            
          | PType.Array (t, Splicable.Int (rank)) =>
            TType.Array (f (false, t), rank)
            
          | PType.Function (x, y) => TType.Function (f (true, x), f (false, y))
          | PType.Void => TType.Void ()
            
          | PType.Product (a) =>
            TType.Product (List.Map (a, fun (t) { f (allow_ref, t) }))
            
          | PType.Class (Splicable.Name (nm), args) =>
            match (this.tyvars.Find (nm)) {
              | Some (tv) =>
                match (args) {
                  | [] => ()
                  | _ => Message.error ("type variable `" + Util.qid_of_list (nm.idl) + 
                                        "' supplied with arguments")
                };
                TType.Variable (tv)
              | None =>
                def env = nm.GetEnv (env);
                def ti = env.GetType (nm.idl, curtc);
                def args = List.Map (args, fun (t) { f (false, t) });

                when (check_parms) {
                  ignore (ti.MakeSubst (args))
                };
                
                TType.Class (ti, args)
            }

          | PType.Typed (body) => body
            
          | PType.Infer =>
            // this is our entire type inference... 
            free_variable ()

          | PType.Class (_, _) =>
            Util.ice ("Spliced string survived to typing")
          | PType.Spliced =>
            Util.ice ("Spliced type survived to typying.")
          | PType.Array => Message.fatal_error ("$ splice outside of <[ .. quotation ]>")
          | PType.Ellipsis =>
            Util.ice ("Type arguments list survived to typying.")
        }
      }

      f (true, t)
    }
    
    public add_typarms (env : GlobalEnv, tp : Typarms,
                        curtc : TypeInfo, check_parms : bool) : TEnv * list <T>
    {
      def name_of_tv (tv) {
        def (name, color) = tv;
        Name ([name], color, null)
      }
      def loop (tv : string * int, acc) {
        def (map, the_list) = acc;
        def tv_obj = T (Pair.First (tv));
        ((map : NemerleMap <Name, T>).Replace (name_of_tv (tv), tv_obj),
         tv_obj :: the_list)
      }
      def (m, l) = List.FoldLeft (tp.tyvars, (this.tyvars, []), loop);
      def tenv = TEnv (m);
      def add_constraint (c : Parsetree.Constraint) {
        match (m.Find (name_of_tv (c.tyvar))) {
          | Some (tv) =>
            tv.add_constraint (tenv.bind (env, curtc, c.ty, check_parms))
          | None =>
            Message.error ("unbound type variable `" + Pair.First (c.tyvar) + "' in constraint")
        }
      };
      List.Iter (tp.constraints, add_constraint);
      def fixate (tv : T) : void { tv.is_fixed = true };
      List.Iter (l, fixate);
      (tenv, List.Rev (l))
    }
  }

  private lookup (id : int) : T 
  {
    match (tyvars.Find (id)) {
      | Some (x) => x
      | None => Util.ice ()
    }
  }

  public global_store (s : Subst) : void 
  {
    s.Iter (fun (id, t) { lookup (id).value = t })
  }

  public fresh_subst (parms : list <T>) : Subst
  {
    def loop (proto : T, ctx : Subst * list <T>) {
      def (sub, vars) = ctx;
      def tv = Tyvar.T (proto);
      (sub.Add (proto.id, TvValue.TV_exactly (TType.Variable (tv))), tv :: vars)
    };
    def (sub, vars) = List.FoldLeft (parms, (SystemMap (), []), loop);
    def sub_constraints (tv : T) {
      tv.constraints = List.Map (tv.constraints, fun (t : TType) : TType { t /- sub })
    };
    List.Iter (vars, sub_constraints);
    sub
  }

  public free_variable () : TType { TType.Variable (T ()) }

  public constraints (tv : T) : list <TType> { tv.constraints }

  public Init () : void
  {
    tyvars = SystemMap ();
  }


} // module Tyvar
} // end ns
