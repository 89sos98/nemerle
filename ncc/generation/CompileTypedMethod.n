/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.CompileTypedTree;

using System.Reflection;

namespace Nemerle.Compiler {

module CompileTypedMethod
{
  internal tuple_type (len : int) : System.Type
  {
    InternalType.GetTupleType (len).SystemType
  }
  
  internal function_type (len : int) : System.Type
  {
    InternalType.GetFunctionType (len).SystemType
  }

  internal get_apply_method (parm_cnt : int) : IMethod
  {
    InternalType.GetFunctionType (parm_cnt).ApplyMethod
  }

  internal tuple_ref (val : CExpr, pos : int, len : int) : CExpr
  {
    def fld = InternalType.GetTupleType (len).GetField (pos);
    CExpr.FieldRef (val, fld.GetFieldInfo ())
  }

  internal tuple_ctor (vals : list [CExpr]) : CExpr
  {
    def len = List.Length (vals);
    def ctor = InternalType.GetTupleType (len).Ctor.GetConstructorInfo ();
    CExpr.Call (CExpr.ConstructorRef (ctor), vals)
  }

  prepare_ctx_for_fun (ctx : CTX, meth : IMethod) : CTX
  {
    def ctx = CTX (ctx);
    def h = meth.GetHeader ();
    ctx.locals = SystemMap ();
    ctx.current_fun = h;
    ctx.current_fun_or_loop = h;
    ctx
  }

  internal compile_parms (hd : Fun_header) : void
  {
    foreach (p in hd.parms)
      when (p.cg_val == null) {
        def ty = p.ty.Fix ();
        when (ty.Equals (InternalType.Void))
          Message.FatalError (hd.loc, $ "method `$(hd.name)' has void argument");
        p.cg_val =
            CG_val (loc = hd.loc,
                    name = p.name, 
                    ty = p.SystemType,
                    val = CExpr.Nop ());

        when (p.decl != null)
          p.decl.InClosure = false;
      }
  }

  /** Generates compiled body of a typed function */
  cg_fun_body (ctx : CTX, meth : IMethod, mutable body : TExpr, _in_ctor : bool) : void
  {
    def ctx' = CTX (ctx);
    
    // assigments of parameters and 'this' to closure fields
    // interleaved with base (..) call in constructor
    mutable initializers = [];
    // local variables which have to be created from parameters' casted values
    // in case their type in not fully specific (lack of generics?)
    mutable vals = [];

    def hd = meth.GetHeader ();

    compile_parms (hd);

    foreach (p in hd.parms)
      ctx'.locals = ctx'.locals.Add (p.decl.Id, p.cg_val);
    
    // compile raw body of method
    mutable cbody = cg_expr (ctx', body);

    // now put the closure initialization stuff before the raw contents
    def buildlet (v : CG_val, e : CExpr) : CExpr { CExpr.Define (v, e) };
    cbody = List.FoldLeft (vals, 
                           CExpr.Sequence (List.Rev (cbody :: initializers)),
                           buildlet);

    def ret_type = meth.ReturnType.Fix ().GetSystemType ();

#if _GENERICS
    when (!ret_type.IsGenericParameter && ret_type.Equals (SystemType.Object))
#else
    when (ret_type.Equals (SystemType.Object))
#endif    
      cbody = box_value (cbody);
  
    hd.body = FunBody.Compiled (cbody);
  }

  cg_global_fun (ctx : CTX, m : IMethod, body : TExpr) : void
  {
    // fixup_cg_method (m);
    def ctx = prepare_ctx_for_fun (ctx, m);
    cg_fun_body (ctx, m, body, m.GetFunKind () is FunKind.Constructor);
  }

  do_compile_method (meth : NemerleMethod) : void
  {
    match (meth.GetHeader ().body) {
      | FunBody.Parsed => 
        _ = Typer (meth)
      | _ => ()
    };
    def current_type = meth.DeclaringType :> TypeBuilder;
    def ctx = CTX (current_type);

    def im = ImplementsWrapperMaker (meth);
    im.Run ();

    // Message.Debug (meth.Location, $ "compile: $meth");
    
    Util.locate (meth.Location, {
      match (meth.GetHeader ().body) {
        | FunBody.ILed => Util.ice ()
        | FunBody.Compiled => Util.ice ()
        | FunBody.Parsed => Util.ice ()

        | FunBody.Typed when Message.SeenError =>
          // just skip it
          meth.GetHeader ().body = FunBody.ILed ()
          
        | FunBody.Typed (body) =>
          cg_global_fun (ctx, meth, body);

          if (meth.GetFunKind () is FunKind.Constructor)
            Passes.Emitter.EmitConstructor (current_type, meth)
          else
            Passes.Emitter.EmitMethod (current_type, meth);

        | FunBody.Abstract => ()
      }
    });
    
    when (Options.EarlyExit)
      Message.MaybeBailout ();
  }

  internal CompileMethodImmediately (meth : NemerleMethod) : void
  {
    match (meth.GetHeader ().body) {
      | FunBody.Compiled
      | FunBody.ILed => {}
      | _ =>
        do_compile_method (meth);
    }
  }
} // end module
} // end ns
