using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public enum JobState
  {
    | Ready
    | SwitchContext
    | Wait
    | Canceled
  }

  [Record]
  public class AsyncJobBase
  {
    public ExecutionContext : ExecutionContext { get; set; }
    public State : JobState { get; set; }

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (State == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }
  }

  [Record]
  internal class AsyncJob[A] : AsyncJobBase
  {
    private mutable async : Async[A];
    private result : AsyncJobResult[A];

    [RecordIgnore]
    public RunCache : void -> void = () => Run();

    private Run() : void
    {
      mutable res;
      State = JobState.Ready;
      try
      {
        async = ExecWhileReady(async, ref res);
      }
      catch
      {
        | ex is Exception =>
          result.SetResult(AsyncResult.Exeption(ex));
          return;
      }
      match (State)
      {
        | Ready         =>
          result.SetResult(AsyncResult.Value(res));

        | SwitchContext =>
          ExecutionContext.Execute(RunCache);
          Console.Error.WriteLine($"Context switched thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

        | Wait          =>
          throw NotImplementedException();

        | Canceled      =>
          throw NotImplementedException();
      }
    }
  }
}
