using System;
using System.Xml.Linq;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

public variant Tag
{
  | Text { style : string; bold : bool; italic : bool; text : string; }
  | P    { style : string; content : list[Tag]; }
  
  mutable _attrs : Hashtable[string, string];
  
  public Attrs[key : string] : string
  {
    get { if (_attrs == null) null else _attrs[key] }
    
    set
    {
      when (_attrs == null)
        _attrs = Hashtable();

      _attrs[key] = value;
    }
  }
  
  public HasAttrs : bool { get { _attrs != null && _attrs.Count > 0 } }
  public HasAttr(key : string) : bool { _attrs != null && _attrs.ContainsKey(key) }
  
  public ToXml() : XObject
  {
    def attrs = if (HasAttrs) _attrs.KeyValuePairs.MapToArray((k, v) => XAttribute(XName.Get(k), v)) 
                else array(0);
    
    def tag = match (this)
    {
      | Text("",   false, false, text) => XText(text)
      | Text("",   true,  false, text) => XElement(XName.Get("B"),  text)
      | Text("",   false, true,  text) => XElement(XName.Get("I"),  text)
      | Text("",   true,  true,  text) => XElement(XName.Get("B"),  XElement(XName.Get("I"), text))
      | Text(name, false, false, text) => XElement(XName.Get(name.ToUpper()), text)
      | Text(name, true,  false, text) => XElement(XName.Get(name.ToUpper()), XElement(XName.Get("B"), text))
      | Text(name, false, true,  text) => XElement(XName.Get(name.ToUpper()), XElement(XName.Get("I"), text))
      | Text(name, true,  true,  text) => XElement(XName.Get(name.ToUpper()), XElement(XName.Get("B"), XElement(XName.Get("I"), text)))
      | P(name, content) => XElement(XName.Get(name.ToUpper()), content.MapToArray(x => x.ToXml())) 
      //TODO: доделать генерацию атрибутов для P
    };
    
    match (tag)
    {
      | tag is XElement when HasAttrs => tag.Add(attrs);
      | _ => ()
    }
    
    tag
  }
  
  #region object  Members
  
  public override ToString() : string
  {
    def cnv(text : string)
    {
      text.Replace("&", "&amp;").Replace(">", "&gt;").Replace("<", "&lt;")
    }
    //def isContinue(style)
    //{
    //  | "Note" | "Tip" | "Warning" => true
    //  | _ => false
    //}
    def attrs = if (HasAttrs) $<# ..$(_attrs.KeyValuePairs; " "; (k, v) => $"$k='$v'")#> else "";
  
    match (this)
    {
      | Text("",   false, false, text) => cnv(text)
      | Text("",   true,  false, text) => $"<b>$(cnv(text))</b>"
      | Text("",   false, true,  text) => $"<i>$(cnv(text))</i>"
      | Text("",   true,  true,  text) => $"<b><i>$(cnv(text))</i></b>"
      | Text(name, false, false, text) => $"<$(name.ToUpper())$attrs>$(cnv(text))</$(name.ToUpper())>"
      | Text(name, true,  false, text) => $"<$(name.ToUpper())$attrs><b>$(cnv(text))</b></$(name.ToUpper())>"
      | Text(name, false, true,  text) => $"<$(name.ToUpper())$attrs><i>$(cnv(text))</i></$(name.ToUpper())>"
      | Text(name, true,  true,  text) => $"<$(name.ToUpper())$attrs><b><i>$(cnv(text))</i></b></$(name.ToUpper())>"
      //| P(name, (_ :: _ :: _) as content) when isContinue(name) => 
      //  def content = content.Map(c => $"<P>$c</P>\r\n");
      //  $<#<$(name.ToUpper())>..$(content; "")</$(name.ToUpper())>#> + "\r\n"

      | P(name, content) => $<#<$(name.ToUpper())$attrs>..$(content; "")</$(name.ToUpper())>#> + "\r\n"
    }
  }
  
  #endregion object  Members
}
