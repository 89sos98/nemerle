using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace Nemerle.Peg
{
  macro Grammar (_rules : Token)
  syntax ("grammar", _rules)
  {
    <[ () ]>
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, startRule, rules)
  {
    try
    {
      def startRuleName = NameRef(startRule.Location, startRule.ToString());
      tb.UserData[typeof(Grammar)] = Grammar(startRuleName);

      def parsedGrammar = Parsing.ParseRules(Macros.ImplicitCTX(), startRuleName, rules);
      GrammarTyper.Check(parsedGrammar);
      tb.UserData[typeof(Grammar)] = parsedGrammar;
    }
    catch
    {
      | e is GrammarException =>
        def loc = if (e.Location != Location.Default) e.Location else tb.Location;
        Message.Error(loc,  e.Message);
      | _ is CriticalUnexpectedException => ()
      | e is Exception =>
        assert2(false, e.ToString());
        Message.Error(tb.Location,  $"Exception $e");
    }
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, _startRule, _rules)
  {
    try
    {
      GrammarImpl.MakeParser(Macros.ImplicitCTX(), tb);
    }
    catch
    {
      | e is GrammarException =>
        def loc = if (e.Location != Location.Default) e.Location else tb.Location;
        Message.Error(loc,  e.Message);
      | _ is CriticalUnexpectedException => ()
      | e is Exception =>
        assert2(false, e.ToString());
        Message.Error(tb.Location,  $"Exception $e");
    }
  }

  internal module GrammarImpl
  {
    public MakeParser(typer : Typer, tb : TypeBuilder) : void
    {
      def parsedGrammar = tb.UserData[typeof(Grammar)] :> Grammar;
      when (parsedGrammar == null)
        Message.FatalError(tb.Location, "PEG Grammar not parsed.");

      def typedGrammar = GrammarTyper.AddArgumentCaptures(parsedGrammar, typer);
      def compiler = GrammarCompiler(typedGrammar, typer, tb);
      try
      {
        if (typer.Manager.IsIntelliSenseMode)
          IntelliSenseSupport.AddIntelliSenseSupport(compiler, parsedGrammar, typer, tb);
        else
          compiler.CompileGrammar();
      }
      finally
      {
        compiler.DefineAllMethods();
      }
    }
  }
}
