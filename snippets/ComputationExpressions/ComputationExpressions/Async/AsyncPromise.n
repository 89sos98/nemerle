using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  /// <summary>
  /// Description of AsyncResult.
  /// </summary>
  public class AsyncPromise[A] : Async[A]
  {
    private _syncRoot : object = object();
    private mutable _result : AsyncResult[A] = null;

    public SetValue(value : A) : void
    {
      SetResult(AsyncResult.Value(value));
    }

    public SetException(ex : Exception) : void
    {
      SetResult(AsyncResult.Exeption(ex));
    }

    public WrapFunction(action : void -> A) : void -> void
    {
      fun()
      {
        try
        {
          SetValue(action());
        }
        catch
        {
          | ex is Exception =>
            SetException(ex);
        }
      }
    }

    public SetResult(result : AsyncResult[A]) : void
    {
      lock (_syncRoot)
      {
        when (_result != null)
          throw ArgumentException("Result already set.");

        _result = result;
        Threading.Monitor.PulseAll(_syncRoot);
      }
    }

    public override GetResult() : AsyncResult[A]
    {
      lock (_syncRoot)
      {
        when (_result == null)
          _ = Threading.Monitor.Wait(_syncRoot);
        _result;
      }
    }

    public override Exec(_job : AsyncJobBase, _res : ref A) : Async[A]
    {
      throw NotSupportedException();
    }

    public override Start(_executionContext : ExecutionContext) : Async[A]
    {
      throw NotSupportedException();
    }
  }
}
