using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System.Collections.Generic;
using System.Xml.Linq;
using L = System.Xml.Linq;
using X = Nemerle.Xml;

namespace Nemerle.Xml
{
  class XmlAstToXLinq
  {
    _typer    : Typer;
    _location : Location;
    _text     : string;
    _lineOffsetMap : array[int];
    
    public this(typer : Typer, location : Location, text : string)
    {
      _typer          = typer;
      _location       = location;
      _text           = text;
      
      def fillLineOffsetMap()
      {
        def map = List(text.Length / 10);
        
        for (mutable i = 0; i < text.Length; i++)
          if (text[i] == '\n')
            map.Add(i + 1);
          else when (text[i] == '\r')
          {
            def next = i + 1;
            
            when (next < text.Length && text[next] != '\n')
              map.Add(i + 1);
          }
          
        map.ToArray()
      }
      
      _lineOffsetMap  = fillLineOffsetMap();
    }
          
    public ToLocation(node : PegLocated) : Location
    {
      def getTextPoint(pos : int) : TextPoint
      {
        def start1 = _lineOffsetMap.BinarySearch(e => e - pos);
        def start2 = if (start1 < 0) ~start1 else start1;
        def ch     = pos - start2;
        
        TextPoint(start2, ch)
      }
      
      Location(_location.FileIndex,
        _location.Begin.Offcet(getTextPoint(node.StartPos)),
        _location.Begin.Offcet(getTextPoint(node.EndPos)))
    }
    
    Parse(loc : Location, code : string) : PExpr
    {
      _typer.Manager.MacroColors.PushUseSiteColor();
      def pExpr = try     { MainParser.ParseExpr(_typer.Env, code, loc, false); }
                  finally { _typer.Manager.MacroColors.PopColor(); };
      pExpr
    }

    SplicablePExprName(value : X.Splicable) : PExpr
    {
      | Splicable.Value(value)  => <[ L.XName.Get($(value : string)) ]>
      | Splicable.Expr(expr)    => Parse(ToLocation(value), expr)
      | Splicable.ListExpr      => Message.FatalError(<#The "..$" not supportend in name context.#>);
    }
    
    SplicablePExprStr(value : X.Splicable) : PExpr
    {
      | Splicable.Value(value)    => <[ $(value : string) ]>
      | Splicable.Expr(expr)      => Parse(ToLocation(value), expr)          
      | Splicable.ListExpr(_expr)  => Message.FatalError(<#The "..$" not supportend in name context.#>);
    }

    public Transform(xmlAst : XmlAst) : PExpr
    {
      | Attr(name, value)             => 
        def name1   = SplicablePExprName(name);
        def value1  = SplicablePExprStr(value);
        
        <[ L.XAttribute($name1, $value1) ]>
        
      | Text(Splicable.Value(value))  => <[ L.XText($(value : string)) ]>
      | Text(_)  => assert(false);
      | Tag(name, content)            => 
        def name  = SplicablePExprName(name);
        def elems = content.Map(Transform(_));
          
        <[ L.XElement($name, array[..$elems]) ]>
        
      | Splice(expr, true)            => Parse(ToLocation(xmlAst), expr)
      | Splice(expr, false)           => Parse(ToLocation(xmlAst), expr)
    }
  }
}
