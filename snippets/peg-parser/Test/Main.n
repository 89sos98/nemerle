using System;
using System.Console;
using SCG = System.Collections.Generic;
using Nemerle.Utility;
using Nemerle.Collections;
using LRPEGCC;

namespace Test
{
  public variant Expr
  {
    | Num { value : int; }
    | Add { left : Expr; right : Expr }
    | Sub { left : Expr; right : Expr }
    | Div { left : Expr; right : Expr }
    | Mul { left : Expr; right : Expr }
    public override ToString() : string
    {
      match (this)
      {
      | Num(value) => $"$value";
      | Add(left, right) => $"Add($left, $right)";
      | Sub(left, right) => $"Sub($left, $right)";
      | Div(left, right) => $"Div($left, $right)";
      | Mul(left, right) => $"Mul($left, $right)";
      }
    }
  }

  [PegGrammar(sum, 
  grammar
  {
    any           = ['\u0000' .. '\uFFFF'];
    letter        = ['a' .. 'z'] / ['A' .. 'Z'] / '_';
    digit         = ['0' .. '9'];
    spaces        = ' '*;
    id     : Expr = (letter (digit / letter)*) spaces;
    num    : Expr = digit+ spaces;
    expr'  : Expr = '(' spaces sum ')' spaces;
    expr   : Expr = num / id / expr';
    sum    : Expr = expr ('+' spaces expr)* spaces;
    start  : Expr = spaces sum spaces !any;
  })]
  class TestSum
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  [PegGrammar(test,
  grammar
  {
    test      = start / findFirst / findLast / items;
    any       = ['\u0000' .. '\uFFFF'];
    letter    = ['a' .. 'z'] / ['A' .. 'Z'] / '_';
    digit     = ['0' .. '9'];
    findFirst = start / any findFirst;
    findLast  = any findLast / start;
    spaces    = ' '*;
    item      = (digit / letter)+ spaces;
    items     = spaces item (',' spaces item)* !any;
    start     = letter (digit / letter)*;
  })]
  class TestGrammar1
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  [PegGrammar(test,
  {
    test      = Or(start, findFirst, findLast, items);
    any       = Range('\u0000', '\uFFFF');
    letter    = Or(Range('a', 'z'), Range('A', 'Z'), '_');
    digit     = Range('0', '9');
    findFirst = Or(start, Seq(any, findFirst));
    findLast  = Or(Seq(any, findLast), start);
    spaces    = ZeroOrMany(' ');
    item      = Seq(OneOrMany(Or(digit, letter)), spaces);
    items     = Seq(spaces, item, ZeroOrMany(Seq(',', spaces, item)), Not(any));
    start     = Seq(letter, ZeroOrMany(Or(digit, letter)));
  })]
  class TestGrammar2
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  [PegGrammar(start,
  {
    any       = Range('\u0000', '\uFFFF');
    digit     = Range('0', '9');
    spaces    = ZeroOrMany(' ');
    num       = Seq(Number(OneOrMany(digit)), spaces);

    expr0     = Or(opAdd, opSub, expr1);
    opAdd     = OpAdd(Seq(expr1, '+', spaces, expr0));
    opSub     = OpSub(Seq(expr1, '-', spaces, expr0));

    expr1     = Or(opDiv, opMul, expr2);
    opDiv     = OpDiv(Seq(expr2, '/', spaces, expr1));
    opMul     = OpMul(Seq(expr2, '*', spaces, expr1));

    expr2     = Or(num, Seq('(', spaces, expr0, ')', spaces));

    start     = Seq(spaces, OneOrMany(Seq(expr0, ";", spaces)), Not(any));
  })]
  class CalcGrammar
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }

    private Number(begin : int, end : int) : Expr { Expr.Num(int.Parse(_text.Substring(begin, end - begin))) }

    private OpAdd(_begin : int, _end : int, l : Expr, r : Expr) : Expr { Expr.Add(l, r) }
    private OpSub(_begin : int, _end : int, l : Expr, r : Expr) : Expr { Expr.Sub(l, r) }
    private OpDiv(_begin : int, _end : int, l : Expr, r : Expr) : Expr { Expr.Div(l, r) }
    private OpMul(_begin : int, _end : int, l : Expr, r : Expr) : Expr { Expr.Mul(l, r) }
  }

  [PegGrammar(start,
  grammar
  {
    any       = ['\u0000'..'\uFFFF'];
    start     = !['1'..'8'] any;
  })]
  class Test
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  module Program
  {
    Main() : void
    {
      try
      {
        Console.OutputEncoding = Text.Encoding.UTF8;
        def r = RangeSet().AddRange('\u0000', '\uffff'); WriteLine(r);
        def r = r.RemoveRange('Q', 'Y'); WriteLine(r);
        def r = r.RemoveRange('B', 'P'); WriteLine(r);
        def r = r.RemoveRange('b', 'y'); WriteLine(r);
        def r = r.RemoveRange('1', '8'); WriteLine(r);

        assert(TestGrammar1("").ToString() == TestGrammar2("").ToString());
        //def (start, end) = FSM.Template.Parse("*a?b*");
        WriteLine(Test(""));
        //WriteLine(Test("xxxxx").Start());
        //WriteLine(CalcGrammar(""));
        {
          mutable text = "1 - 2* 3 -4+5/(6- 7) ; ";
          for (mutable i = 0; i < 14; ++i)
            text = text + text;
          WriteLine(text.Length);
          _ = CalcGrammar(text);
          def timer = Diagnostics.Stopwatch.StartNew();
          def calc = CalcGrammar(text);
          def pos = calc.Start();
          timer.Stop();
          WriteLine($"$pos Parse took $(timer.Elapsed)");
          WriteLine();
          //WriteLine($"memo = $(calc.MemoCount)");
          //foreach (capture in calc.Captures)
          //{
            //WriteLine($"$(capture.Name) $(capture.StartPos) $(capture.EndPos) ||| $(text.Substring(capture.StartPos, capture.EndPos - capture.StartPos))");
          //}
        }
      }
      catch
      {
      | ex is Exception => WriteLine(ex);
      }
      _ = ReadKey();
    }

    CharEscTest() : void
    {
      for (mutable i = 0; i <= 0xffff; ++i)
      {
        def c = i :> char;
        def val = match (c)
        {
        | ' '  => " "
        | '\t' => "\\t"
        | '\n' => "\\r"
        | '\r' => "\\n"
        | '\\' => "\\\\"
        | c when char.IsLetter(c)      => c.ToString()
        | c when char.IsDigit(c)       => c.ToString()
        | c when char.IsPunctuation(c) => c.ToString()
        | c when char.IsSeparator(c)   => c.ToString()
        | c when char.IsSymbol(c)      => c.ToString()
        | c =>
          def c = c : uint;
          string.Format("\\u{0,4:X}", c).Replace(' ', '0');
        }
        WriteLine($"'$val'\t'$c'");
      }
    }
  }
}
