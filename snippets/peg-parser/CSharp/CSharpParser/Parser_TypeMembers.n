using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Constant

    //constantDeclaration : TypeMemberList = attributes? modifiers? "const"S anyType constantDeclarators ";"s;
    constantDeclaration(attributes  : option[list[CustomAttribute]],
                        modifiers   : option[list[Modifier]],
                        _const      : NToken, _ : NToken,
                        memberType  : TypeRef,
                        decls       : list[Location * Identifier * Expr],
                        _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Map((loc, id, expr) =>
        TypeMember.Constant(
          loc,
          attributes.WithDefault([]),
          modifiers.WithDefault([]),
          Expr.Ref(id),
          memberType,
          expr))
    }

    #endregion

    #region Field

    //fieldDeclaration    : TypeMemberList = attributes? modifiers? anyType variableDeclarators ";"s;
    fieldDeclaration( attributes  : option[list[CustomAttribute]],
                      modifiers   : option[list[Modifier]],
                      memberType  : TypeRef,
                      decls       : list[Location * Identifier * VariableInitializer],
                      _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Map((loc, id, init) =>
        TypeMember.Field(
          loc,
          attributes.WithDefault([]),
          modifiers.WithDefault([]),
          Expr.Ref(id),
          memberType,
          init))
    }

    #endregion

    #region Fixed size buffer

    //fixedSizeBufferDeclarator   : FixedSizeBufferDeclarator     = identifier "["s constantExpression "]"s;
    fixedSizeBufferDeclarator(identifier          : Identifier,
                              _lparen             : NToken, _ : NToken,
                              constantExpression  : Expr,
                              _rparen             : NToken, _ : NToken) : Location * Identifier * Expr
    {
      (GetLocation(_), identifier, constantExpression)
    }

    //fixedSizeBufferDeclarators  : FixedSizeBufferDeclaratorList = fixedSizeBufferDeclarator (","s fixedSizeBufferDeclarator)*;
    fixedSizeBufferDeclarators( head : Location * Identifier * Expr,
                                tail : SCG.List[NToken * NToken * (Location * Identifier * Expr)]) : list[Location * Identifier * Expr]
    {
      head.Cons(tail)
    }

    //fixedSizeBufferDeclaration  : TypeMemberList                = attributes? modifiers? "fixed"S anyType fixedSizeBufferDeclarators ";"s;
    fixedSizeBufferDeclaration( attributes  : option[list[CustomAttribute]],
                                modifiers   : option[list[Modifier]],
                                _fixed      : NToken, _ : NToken,
                                elementType : TypeRef,
                                decls       : list[Location * Identifier * Expr],
                                _semicolon  : NToken, _ : NToken) : list[TypeMember]
    {
      decls.Map((loc, id, size) =>
        TypeMember.FixedSizeBuffer(
          loc,
          attributes.WithDefault([]),
          modifiers.WithDefault([]),
          Expr.Ref(id),
          elementType,
          size))
    }

    #endregion

    #region Method

    //methodBody  : Statement = emptyStatement / block;
    methodBody(opt : Statement)  : Statement
    {
      opt
    }

    //methodDeclaration : TypeMemberList = attributes? modifiers? anyType qualifiedIdentifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? methodBody;
    methodDeclaration(attributes          : option[list[CustomAttribute]],
                      modifiers           : option[list[Modifier]],
                      returnType          : TypeRef,
                      name                : Expr,
                      typeParameterList   : option[list[TypeParameter]],
                      _lparen             : NToken, _ : NToken,
                      formalParameterList : option[list[FormalParameter]],
                      _rparen             : NToken, _ : NToken,
                      constraints         : option[list[TypeParameterConstraintClause]],
                      body                : Statement) : list[TypeMember]
    {
      [TypeMember.Method(
        GetLocation(returnType, body),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        name,
        returnType,
        formalParameterList.WithDefault([]),
        typeParameterList.WithDefault([]),
        constraints.WithDefault([]),
        body)]
    }

    #endregion

    #region Property

    //getAccessorDeclaration  : PropertyAccessor  = attributes? modifiers? "get"S methodBody;
    getAccessorDeclaration( attributes  : option[list[CustomAttribute]],
                            modifiers   : option[list[Modifier]],
                            _get        : NToken, _ : NToken,
                            body        : Statement) : PropertyAccessor
    {
      PropertyAccessor(
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        body)
    }

    //setAccessorDeclaration  : PropertyAccessor  = attributes? modifiers? "set"S methodBody;
    setAccessorDeclaration( attributes  : option[list[CustomAttribute]],
                            modifiers   : option[list[Modifier]],
                            _set        : NToken, _ : NToken,
                            body        : Statement) : PropertyAccessor
    {
      PropertyAccessor(
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        body)
    }

    //accessorDeclarations_1  : PropertyAccessors = getAccessorDeclaration setAccessorDeclaration?;
    accessorDeclarations_1( getter : PropertyAccessor,
                            setter : option[PropertyAccessor]) : PropertyAccessor * PropertyAccessor
    {
      (getter, setter.WithDefault(null))
    }

    //accessorDeclarations_2  : PropertyAccessors = setAccessorDeclaration getAccessorDeclaration?;
    accessorDeclarations_2( setter : PropertyAccessor,
                            getter : option[PropertyAccessor]) : PropertyAccessor * PropertyAccessor
    {
      (getter.WithDefault(null), setter)
    }

    //accessorDeclarations    : PropertyAccessors = accessorDeclarations_1 / accessorDeclarations_2;
    accessorDeclarations(opt : PropertyAccessor * PropertyAccessor) : PropertyAccessor * PropertyAccessor
    {
      opt
    }

    //propertyDeclaration     : TypeMemberList    = attributes? modifiers? anyType qualifiedIdentifier "{"s accessorDeclarations "}"s;
    propertyDeclaration(attributes  : option[list[CustomAttribute]],
                        modifiers   : option[list[Modifier]],
                        memberType  : TypeRef,
                        name        : Expr,
                        _lparen     : NToken, _ : NToken,
                        accessors   : PropertyAccessor * PropertyAccessor,
                        _rparen     : NToken, _ : NToken) : list[TypeMember]
    {
      def (getter, setter) = accessors;
      [TypeMember.Property(
        GetLocation(memberType, _),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        name,
        memberType,
        getter,
        setter)]
    }

    #endregion

    #region Event

    //addAccessorDeclaration      : PropertyAccessor   = attributes? "add"S block;
    addAccessorDeclaration( attributes  : option[list[CustomAttribute]],
                            _add        : NToken, _ : NToken,
                            body        : Statement) : PropertyAccessor
    {
      PropertyAccessor(
        attributes.WithDefault([]),
        [],
        body)
    }

    //removeAccessorDeclaration   : PropertyAccessor   = attributes? "remove"S block;
    removeAccessorDeclaration(attributes  : option[list[CustomAttribute]],
                              _remove     : NToken, _ : NToken,
                              body        : Statement) : PropertyAccessor
    {
      PropertyAccessor(
        attributes.WithDefault([]),
        [],
        body)
    }

    //eventAccessorDeclarations_1 : EventAccessors  = addAccessorDeclaration removeAccessorDeclaration;
    eventAccessorDeclarations_1(adder   : PropertyAccessor,
                                remover : PropertyAccessor) : PropertyAccessor * PropertyAccessor
    {
      (adder, remover)
    }

    //eventAccessorDeclarations_2 : EventAccessors  = removeAccessorDeclaration addAccessorDeclaration;
    eventAccessorDeclarations_2(remover : PropertyAccessor,
                                adder   : PropertyAccessor) : PropertyAccessor * PropertyAccessor
    {
      (adder, remover)
    }

    //eventAccessorDeclarations   : EventAccessors  = eventAccessorDeclarations_1 / eventAccessorDeclarations_2;
    eventAccessorDeclarations(opt : PropertyAccessor * PropertyAccessor) : PropertyAccessor * PropertyAccessor
    {
      opt
    }

    //eventDeclaration_1  : TypeMemberList = attributes? modifiers? "event"S anyType qualifiedIdentifier "{"s eventAccessorDeclarations "}"s;
    eventDeclaration_1( attributes  : option[list[CustomAttribute]],
                        modifiers   : option[list[Modifier]],
                        _event      : NToken, _ : NToken,
                        memberType  : TypeRef,
                        name        : Expr,
                        _lparen     : NToken, _ : NToken,
                        accessors   : PropertyAccessor * PropertyAccessor,
                        _rparen     : NToken, _ : NToken) : list[TypeMember]
    {
      def (adder, remover) = accessors;
      [TypeMember.Event(
        GetLocation(_event, _),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        name,
        memberType,
        adder,
        remover,
        null)]
    }

    //eventDeclaration_2  : TypeMemberList = attributes? modifiers? "event"S anyType variableDeclarators ";"s;
    eventDeclaration_2( attributes  : option[list[CustomAttribute]],
                        modifiers   : option[list[Modifier]],
                        _event      : NToken, _ : NToken,
                        memberType  : TypeRef,
                        decls       : list[Location * Identifier * VariableInitializer],
                        _semicolon : NToken, _ : NToken)  : list[TypeMember]
    {
      decls.Map((loc, id, init) =>
        TypeMember.Event(
          loc,
          attributes.WithDefault([]),
          modifiers.WithDefault([]),
          Expr.Ref(id),
          memberType,
          null,
          null,
          init))
    }

    //eventDeclaration    : TypeMemberList = eventDeclaration_1 / eventDeclaration_2;
    eventDeclaration(opt : list[TypeMember]): list[TypeMember]
    {
      opt
    }

    #endregion

    #region Indexer

    //indexerDeclaration  : TypeMemberList = attributes? modifiers? anyType (qualifiedIdentifier "."s)? "this"S "["s formalParameterList? "]"s "{"s accessorDeclarations "}"s;
    indexerDeclaration( attributes        : option[list[CustomAttribute]],
                        modifiers         : option[list[Modifier]],
                        returnType        : TypeRef,
                        ifaceType         : option[Expr *  NToken * NToken],
                        _this             : NToken, _ : NToken,
                        _lparen1          : NToken, _ : NToken,
                        formalParameters  : option[list[FormalParameter]],
                        _rparen1          : NToken, _ : NToken,
                        _lparen2          : NToken, _ : NToken,
                        accessors         : PropertyAccessor * PropertyAccessor,
                        _rparen2          : NToken, _ : NToken,) : list[TypeMember]
    {
      def name = match(ifaceType) {
        | Some( (iface, _, _) ) =>
          def member = Expr.This(GetLocation(_this));
          Expr.Member(iface, member)
        | _ => Expr.This(GetLocation(_this))
      }
      def (getter, setter) = accessors;
      [TypeMember.Indexer(
        GetLocation(returnType, _),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        name,
        returnType,
        formalParameters.WithDefault([]),
        getter,
        setter)]
    }

    #endregion

    #region Operator

    //overloadableOperator : Identifier  = ("++" / "--" / "!" / "~" / "+" / "-" / "*" / "/" / "%" / "&" / "|"
    //                                     / "^" / "<<" / ">>" / "==" / "!=" / ">" / "<" / ">=" / "<=" / "true" / "false")S;
    overloadableOperator(op : NToken, _ : NToken) : Identifier
    {
      Identifier(GetText(op))
    }

    //overloadableOperatorDeclarator  : OperatorDeclarator = anyType "operator"S overloadableOperator;
    overloadableOperatorDeclarator( returnType  : TypeRef,
                                    _operator   : NToken, _ : NToken,
                                    op          : Identifier) : Identifier * TypeRef
    {
      (op, returnType)
    }

    //conversionOperatorDeclarator    : OperatorDeclarator = ("implicit" / "explicit")S "operator"S anyType;
    conversionOperatorDeclarator( op          : NToken, _ : NToken,
                                  _operator   : NToken, _ : NToken,
                                  returnType  : TypeRef) : Identifier * TypeRef
    {
      (Identifier(GetLocation(op), GetText(op)), returnType)
    }

    //operatorDeclarator : OperatorDeclarator = conversionOperatorDeclarator
    //                                        / overloadableOperatorDeclarator;
    operatorDeclarator(decl : Identifier * TypeRef) : Identifier * TypeRef
    {
      decl
    }

    //operatorDeclaration : TypeMemberList = attributes? modifiers? operatorDeclarator "("s formalParameterList? ")"s methodBody;
    operatorDeclaration(attributes        : option[list[CustomAttribute]],
                        modifiers         : option[list[Modifier]],
                        decl              : Identifier * TypeRef,
                        _lparen           : NToken, _ : NToken,
                        formalParameters  : option[list[FormalParameter]],
                        _rparen           : NToken, _ : NToken,
                        body              : Statement) : list[TypeMember]
    {
      def (op, returnType) = decl;
      [TypeMember.Operator(
        GetLocation(decl, body),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        op,
        returnType,
        formalParameters.WithDefault([]),
        body)]
    }

    #endregion

    #region Constructor

    //constructorInitializer : ConstructorInitializer = ":"s ("this" / "base")S "("s argumentList? ")"s;
    constructorInitializer( _colon  : NToken, _ : NToken,
                            keyword : NToken, _ : NToken,
                            _lparen : NToken, _ : NToken,
                            args    : option[list[FunctionArgument]],
                            _rparen : NToken, _ : NToken) : ConstructorInitializer
    {
      match(GetText(keyword)) {
        | "this" => ConstructorInitializer.This(args.WithDefault([]))
        | "base" => ConstructorInitializer.Base(args.WithDefault([]))
        | _ => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //constructorDeclaration : TypeMemberList = attributes? modifiers? identifier "("s formalParameterList? ")"s constructorInitializer? methodBody;
    constructorDeclaration( attributes        : option[list[CustomAttribute]],
                            modifiers         : option[list[Modifier]],
                            name              : Identifier,
                            _lparen           : NToken, _ : NToken,
                            formalParameters  : option[list[FormalParameter]],
                            _rparen           : NToken, _ : NToken,
                            init              : option[ConstructorInitializer],
                            body              : Statement) : list[TypeMember]
    {
      [TypeMember.Constructor(
        GetLocation(name, body),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        Expr.Ref(name),
        formalParameters.WithDefault([]),
        init.WithDefault(ConstructorInitializer.Default(name.Location)),
        body)]
    }

    #endregion

    #region Destructor

    //destructorDeclaration  : TypeMemberList = attributes? modifiers? "~"s identifier "("s formalParameterList? ")"s methodBody;
    destructorDeclaration(attributes        : option[list[CustomAttribute]],
                          modifiers         : option[list[Modifier]],
                          _tild : NToken, _ : NToken,
                          name              : Identifier,
                          _lparen           : NToken, _ : NToken,
                          formalParameters  : option[list[FormalParameter]],
                          _rparen           : NToken, _ : NToken,
                          body              : Statement) : list[TypeMember]
    {
      [TypeMember.Destructor(
        GetLocation(_tild, body),
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        Expr.Ref(name),
        formalParameters.WithDefault([]),
        body)]
    }

    #endregion

    //nestedTypeDeclaration  : TypeMemberList = typeDeclaration;
    nestedTypeDeclaration(decl : TypeDeclaration) : list[TypeMember]
    {
      [TypeMember.TypeDeclaration(decl.Location, decl.Attributes, decl.Modifiers, decl)]
    }

    //typeMemberDeclaration  : TypeMemberList = constantDeclaration
    //                                        / fixedSizeBufferDeclaration
    //                                        / eventDeclaration
    //                                        / operatorDeclaration
    //                                        / indexerDeclaration 
    //                                        / fieldDeclaration
    //                                        / methodDeclaration
    //                                        / propertyDeclaration 
    //                                        / constructorDeclaration
    //                                        / destructorDeclaration
    //                                        / typeDeclaration;
    typeMemberDeclaration(opt : list[TypeMember]) : list[TypeMember]
    {
      opt
    }

    //typeMemberDeclarations : TypeMemberList = typeMemberDeclaration*;
    typeMemberDeclarations(members : SCG.List[list[TypeMember]]) : list[TypeMember]
    {
      members.Values().Flatten()
    }
  }
}