(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Compiler;
open Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Parsetree {

public class Decl_base extends Located
  {
    public mutable name : string;
    public mutable modifiers : list (Modifier);

    public this (name : string, modifiers : list (Modifier)) {
      this.name <- name;
      this.modifiers <- modifiers;
    }
    public this (loc : Location, name : string, modifiers : list (Modifier)) {
      this.loc <- loc;
      this.name <- name;
      this.modifiers <- modifiers;
    }
  }

public variant Top_decl extends Located
  {
    | TD_namespace { 
        name : string; 
        decls : list (Top_decl);
      }
    | TD_open {
        what : string;
      }
    | TD_namespace_alias {
        alias : string;
        expanded : string;
      }
    | TD_type {
        decl : Type_decl;
      }
  }

public class Type_decl_base extends Decl_base
  {
    public mutable typarms : Typarms;
    public mutable t_extends : option (Type);
    public mutable t_implements : list (Type);
    public this (name : string, modifiers : list (Modifier), 
                 typarms : Typarms, t_extends : option (Type),
                 t_implements : list (Type)) {
      base (name, modifiers);
      this.typarms <- typarms;
      this.t_extends <- t_extends;
      this.t_implements <- t_implements;
    }
    public this () { base ("", []) }
  }

public class Constraint
  {
    public tyvar : string;
    public ty : Type;
  }

public class Typarms
  {
    public tyvars : list (string);
    public constraints : list (Constraint);
  }
  
public variant Type_decl extends Type_decl_base
  {
    | TD_class { decls : list (Class_member); }
    | TD_alias { ty : Type; }
    | TD_external { extern_name : string; }
    | TD_interface { methods : list (Class_member); }   // only iface_member
    | TD_variant { decls : list (Type_decl); }       // only variant_option
    | TD_variant_option { decls : list (Class_member); }
    | TD_macro { body : Class_member; }
  }

public variant Class_member extends Decl_base
  {
    | M_type { td : Type_decl; }
    | M_field { ty : Type; is_ref : bool; kind : Val_kind; }
    | M_function { 
        header : Fun_header;
        mutable kind : Fun_kind;
        mutable body : Fun_body;
      }
    | M_property { 
        ty : Type;
        get_methods : list (Fun_body * list (Fun_parm));
        set_methods : list (Fun_body * list (Fun_parm));
        is_static : bool;
      }
  }

public variant Splicable_string extends Located {
  | SS_string { body : string; }
  | SS_spliced_expr { expr : Expr; }
}

public variant Type
  {
    | T_app {
        tycon : Splicable_string;
        args : list (Type);
      }
    | T_var { name : string; }
    | T_ref { t : Type; }
    | T_out { t : Type; }
    | T_fun { from : Type; to : Type; }
    | T_void
    | T_prod { args : list (Type); }
    | T_array { t : Type; }
    | T_unquoted { expr : Expr; }

    | T_type_list { body: Type; }
    
    | T_infer
  }

public class Fun_parm extends Located
  {
    public name : string;
    public ty : Type;
    public this (loc : Location, name : string, ty : Type) 
      {
        this.loc <- loc;
        this.name <- name;
        this.ty <- ty;
      }
    public this () {}
  }
  
public class Fun_header extends Located
  {
    public mutable name : string;
    public ret_type : Type;
    public parms : list (Fun_parm);
    public typarms : Typarms;
    public this () {}
    public this (loc : Location, name : string, ret_type : Type, parms : list (Fun_parm)) 
      {
        this.typarms <- Typarms ([], []);
        this.loc <- loc;
        this.name <- name;
        this.ret_type <- ret_type;
        this.parms <- parms;
      }
    public this (typarms : Typarms, name : string, ret_type : Type, parms : list (Fun_parm)) 
      {
        this.typarms <- typarms;
        this.name <- name;
        this.ret_type <- ret_type;
        this.parms <- parms;
      }
  }

public class Function_decl
  {
    public header : Fun_header;
    public body : Expr;
  }

public class Named_pattern
  {
    public name : string;
    public pat : Pattern;
  }
  
public variant Pattern extends Located
  {
    | P_underscore
    | P_variable { name : string; }
    | P_as { pat : Pattern; name : Splicable_string; }
    | P_tuple { args : list (Pattern); }
    | P_record { args : list (Named_pattern); }
    | P_cons { name : Splicable_string; arg : Pattern; }
    | P_literal { lit : Literal; }
    | P_list { args : list (Pattern); }
    | P_list_cons { hd : Pattern; tl : Pattern; }

    // macros stuff
    | P_quoted_expr { ex : Expr; }
    | P_quoted_patt { pa : Pattern; }
    | P_quoted_type { ty : Type; }
    | P_unquoted { pat : Expr; }
    | P_patt_list { body : Pattern; }
    | P_spliced_literal { ty : string; val : Expr; }
  }
  
public class Match_case
  {
    public patterns : list (Pattern * option (Expr));
    public body : Expr;
  }
  
public variant Expr extends Located 
  { 
    | E_ref { name : string; }
    | E_member { obj : Expr; member : Splicable_string; }
    | E_call { func : Expr; parms : list (Parm); }
    | E_assign { target : Expr; source : Expr; }
    | E_let { is_ref : bool; name : Splicable_string; val : Expr; }
    | E_letpat { pattern : Pattern; val : Expr; }
    | E_letfun { funs : list (Function_decl); }
    | E_lambda { decl : Function_decl; }
    | E_match { expr : Expr; cases : list (Match_case); }
    | E_raise { exn : Expr; }
    | E_try_with { body : Expr; exn : Splicable_string; exn_ty : Type; handler : Expr; }
    | E_try_finally { body : Expr; handler : Expr; }
    | E_literal { val : Literal; }
    | E_this
    | E_base
    | E_typeof { ty : Type; }
    | E_type_conversion { expr : Expr; ty : Type; }  // (expr :> ty)
    | E_type_enforcement { expr : Expr; ty : Type; } // (expr : ty)
    | E_sequence { body : list (Expr); }
    | E_tuple { args : list (Expr); }
    | E_list { args : list (Expr); }
    | E_list_cons { hd : Expr; tl : Expr; }
    | E_mkarray { args : list (Expr); }
    | E_indexer { obj : Expr; args : list (Expr); }

    // macros stuff    
    | E_quoted_expr { body : Expr; }
    | E_quoted_patt { body : Pattern; }
    | E_quoted_type { body : Type; }
    | E_unquoted { body : Expr; }
    | E_unquoted_patt { body : Pattern; }
    | E_expr_list { body : Expr; }
    | E_spliced_literal { ty : string; val : Expr; }
    | E_typed_expr { body : Nemerle.Compiler.Typedtree.Expr; }
  }

public class Parm
  {
    public is_ref : bool;
    public expr : Expr;
    public name : string;  // "" if no name given
    public this (is_ref : bool, expr : Expr, name : string) {
      this.is_ref <- is_ref;
      this.expr <- expr;
      this.name <- name;
    }
    public this (expr : Expr) {
      this.is_ref <- false;
      this.expr <- expr;
      this.name <- "";
    }
  }

 
} // Nemerle.Compiler

