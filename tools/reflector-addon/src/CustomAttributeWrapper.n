/*
 * Copyright (c) 2003-2007 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


using System.Diagnostics;
using Nemerle.Collections;
using Nemerle.Utility;

using Reflector.CodeModel;

namespace Reflector.NemerleLanguage
{
  internal variant CustomAttributeWrapper
  {
    | Method
    {
      [Accessor] mutable _isExtension        : bool;

      public this(value : IMethodDeclaration)
      {
        Init(value.Attributes, attr =>
          {
            match (attr.Constructor.DeclaringType)
            {
            | t is ITypeReference =>
              match (t.Namespace)
              {
              | "Nemerle.Internal" =>
                match (t.Name)
                {
                | "ExtensionAttribute"            => _isExtension     = true
                | other                           => Debug.Fail($"Attribute named '$other' was ignored")
                }
                true
              | _                  => false
              }
            | _                    => false
            }
          }
        );
      }
    }
    | Type
    {
      [Accessor] mutable _isExtension        : bool;
      [Accessor] mutable _typeAlias          : string;
      [Accessor] mutable _isVariant          : bool;
      [Accessor] mutable _isVariantOption    : bool;
      [Accessor] mutable _isFlagsEnumeration : bool;

      public this(value : ITypeDeclaration)
      {
        Init(value.Attributes, attr =>
          {
            match (attr.Constructor.DeclaringType)
            {
            | t is ITypeReference =>
              match (t.Namespace)
              {
              | "Nemerle.Internal" =>
                match (t.Name)
                {
                | "ExtensionAttribute"            => _isExtension     = true
                | "TypeAliasAttribute"
                	when attr.Arguments.Count > 0 =>
                  match (attr.Arguments[0])
                  {
                  | literal is ILiteralExpression => _typeAlias = literal.Value.ToString()
                  | _                             => Debug.Fail("TypeAliasAttribute first agrument is not a literal expression")
                  }
                | "VariantAttribute"              => _isVariant       = true
                | "ConstantVariantOptionAttribute"
                | "VariantOptionAttribute"        => _isVariantOption = true
                | other                           => Debug.Fail($"Attribute named '$other' was ignored")
                }
                true
              | "System"           =>
                match (t.Name)
                {
                | "FlagsAttribute"          => _isFlagsEnumeration = true;
                | _                         => ()
                }
                false;
              | _                  => false
              }
            | _                    => false
            }
          }
        );
      }
    }

    [Accessor] mutable _attributes      : list[ICustomAttribute];

    private Init
      ( attributes : ICustomAttributeCollection
      , filter     : ICustomAttribute -> bool
      ) : void
    {
      _attributes = [];

      for (mutable i = 0; i < attributes.Count; ++i)
      {
        def attr = attributes[i];
        unless (filter(attr))
          _attributes ::= attr;
      }
    }
  }
}