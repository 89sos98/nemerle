(* ------------------------------------------------------------------------- *)
(*   Knuth-Morris-Pratt exact string matching algorithm                      *)
(*                                                                           *)
(*   See ESMAJ: http://www-igm.univ-mlv.fr/~lecroq/string/node8.html         *)
(* ------------------------------------------------------------------------- *)

open System.Array;

class PrefixFunction
{
  private mutable _prefix_function : array (int);
  private mutable _pattern : array (char);
  private mutable _pattern_length : int;

  public this (pattern : string)
  {
    this._pattern <- pattern.ToCharArray ();
    this._pattern_length <- pattern.Length;

    this._prefix_function <- 
      (CreateInstance (this._pattern_length.GetType (), this._pattern_length + 1) :> array (int));

    this.calculate_prefix_function ()  
  }

  public Get (index : int) : int {
  
    this._prefix_function [index]
  }

  private calculate_prefix_function () : void 
  {
    mutable i <- 0;
    mutable j <- -1;
    
    this._prefix_function [0] <- -1;
    
    def loop () : void {
    
      if (i < this._pattern_length) {
      
        def inner_loop () : void {
                
          if (j > -1 && this._pattern [i] != this._pattern [j]) {
            j <- this._prefix_function [j];
            inner_loop ()
          }
          else ()
        };
        
        inner_loop ();
        
        i <- i + 1;
        j <- j + 1;
        
        if (i < this._pattern_length && this._pattern [i] == this._pattern [j])
          this._prefix_function [i] <- this._prefix_function [j]
        else
          this._prefix_function [i] <- j;
          
        loop ()        
      }
      else ()    
    };
    
    loop ()
  }
}


class KMP
{
  private mutable _pattern : array (char);
  private mutable _pattern_length : int;

  private mutable _prefix_function : PrefixFunction;

  public this (pattern : string) 
  {
    this._pattern <- pattern.ToCharArray ();
    this._pattern_length <- pattern.Length;

    this._prefix_function <- PrefixFunction (pattern)
  }


  public Search (text : string) : option (int) 
  {
    def text_length = text.Length;
    def text = text.ToCharArray ();
    
    mutable i <- 0;
    mutable j <- 0;
    
    def loop () : option (int) {
    
      if (j < text_length) {
      
        def inner_loop () : void {
        
          if (i > -1 && this._pattern [i] != text [j]) {
            i <- this._prefix_function.Get (i);
            inner_loop ()
          }
          else ()
        };
        
        inner_loop ();

        i <- i + 1;
        j <- j + 1;

        if (i >= this._pattern_length)
          Some (j - i)
        else
          loop () 
      }
      else None ()
    };
    
    loop ()    
  }

  
  public static Main () : void {
  
    def r = KMP ("ziemi egipskiej");
    
    match (r.Search ("Jam jest Pan Bóg twój, który Ciê wywiód³ z ziemi egipskiej, z domu niewoli")) {
      | Some (i) => print_endline ("Found at position " + string_of_int (i + 1))
      | None => print_endline ("Not found")
    }
  }
}
