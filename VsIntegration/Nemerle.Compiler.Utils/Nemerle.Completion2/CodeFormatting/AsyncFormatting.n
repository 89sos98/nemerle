using System;
using Nemerle.Collections;
using System.Collections.Generic;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Completion2.Engine;
using Nemerle.Compiler.Utils.Async;
using SCG = System.Collections.Generic;

namespace Nemerle.Completion2.CodeFormatting
{

  public class FormattingAsyncRequest : AsyncRequest
  {
    public this(      
      engine      : IEngine, 
      source      : ISource,
      work        : Action[AsyncRequest],
      loc        : Location)
    {
      base(AsyncRequestType.CodeFormatting, engine, source, work);
      location   = loc;      
      //result=SCG.List();
    }
      
    [Accessor]
    location       : Location;
      
    [Accessor(flags=WantSetter)]
    mutable result : SCG.List[FormatterResult];

  }
  ///// <summary>
  ///// Description of AsyncFormatting.
  ///// </summary>
  //class AsyncFormatting
  //{
  //  public BeginGetMethodTipInfo(source : ISource, line : int, col : int) : MethodTipInfoAsyncRequest
  //  {
  //    //def request = MethodTipInfoAsyncRequest(AsyncRequestType.GetMethodTipInfo, this, source, GetMethodTipInfo, line, col);
  //    //AsyncWorker.AddWork(request);
  //    //request
  //  }

  //  private GetMethodTipInfo(request : AsyncRequest) : void
  //  {
  //    AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
            
  //  }
  
  //}
}
