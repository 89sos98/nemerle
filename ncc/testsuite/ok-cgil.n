// NO-TEST

(*
public class ImplementsTest implements Nemerle.Func1
{
  public this () { }

  public apply (parm1 : object) : object
  {
    System.Console.WriteLine ("Hello world, my name is not Jan B.!");
    null
  }
}
*)

public class CGILTest
{
  public mutable _field_0 : int;
  public static mutable _field_1 : string;
  
  public this () { }

(*  
	public method_a (index : int) : int
	{
		mutable x <- 650;
		def y = false;
		def z = "Alamakota";
		
		this.method_b (index)
  }
  
  public method_b (index : int) : int
  {
		mutable x <- 650;

    x <- 750;
    
    x
  }

  public method_c (index : int) : int
  {
		def x = 255;
		def y = false;

    def z =
      if (true)
  		  x * 2
      else
        x * 3;
    
    def text = "Ala ma kota!";

    def sb = System.Text.StringBuilder (text, x);
  
    def _ = sb.Append (' ');
    def _ = sb.Append ("I psa!");
  
    def text = sb.ToString ();
    
    System.Console.WriteLine (text);
    
    z
	}

  public method_d () : void
  {
    def x = [1; 2; 3];
    
    match (x) {
      | [] => System.Console.WriteLine ("Ojoj 1");
      | [_] => System.Console.WriteLine ("Ojoj 2");
      | _ => System.Console.WriteLine ("Ojoj 3");
    }
  }

  public method_e (x : int) : void
  {
    match (x) {
      | 0 => System.Console.Write ("zero, ")
      | 1 => System.Console.Write ("jeden, ")
      | 2 => System.Console.Write ("dwa, ")
      | 3 => System.Console.Write ("Trzy, ")
      | _ => System.Console.WriteLine ("START!")
    }
  }

  public method_f () : void
  {
    def x = ((10 :> System.Object), (20 :> System.Object));
    def y = ("ala", "ma", (2 :> System.Object), "koty");

    def (a, b) = x;

    System.Console.WriteLine ("Powinno byc 10 20: {0} {1}",
      (a :> System.Object), (b :> System.Object));
    
    ()
  }

  public method_g () : void {
    def loop (x : System.Object, y : System.Object) : void {
      ()
    };
    loop (null, null)
  }
*)

	public static Main () : void
	{
    def x = CGILTest ();

(*
    def y = x.method_c (10);

    when (y != 5) { def _ = x.method_b (7); () };

    System.Console.WriteLine ("{0}", (y :> System.Object));

    x.method_e (3);
    x.method_e (2);
    x.method_e (1);
    x.method_e (0);
    x.method_e (42);
    
    def oa = None ();

    def ob = Some ((10 :> System.Object));
    def oc = Some ("Ala ma psa!");

    
    match (oc) {
      | None => System.Console.WriteLine ("Ojoj!");
      | Some (x) => System.Console.WriteLine ("Nie ma strachu: " + x);
    };
    
    when (Option.is_some (oa)) { System.Console.WriteLine ("Ojoj!"); };
    when (Option.is_none (ob)) { System.Console.WriteLine ("Ojoj!"); };
    when (Option.is_some (ob)) { System.Console.WriteLine ("To jest 10: {0}", ((Option.unsome (ob)) :> System.Object)); };

    def it = ImplementsTest ();
    def _ = it.apply (it);

    def map_test (x : System.Object) : void {
      System.Console.WriteLine ("To jest 10 po raz drugi (Option.map): {0}", x);
    };

    def _ = Option.map (map_test, ob);
    x.method_f ();

    def l0 = [1; 2; 3; 4];

    def lf (i : int) : void {
      System.Console.WriteLine ("List.iter (lf, [1,2,3,4]): {0}", i)
    };
    
    Nemerle.Collections.List.iter (lf, l0);
    
    System.Console.WriteLine ("Powinno byæ 1 i 4: {0} i {1}",
      Nemerle.Collections.List.head (l0), Nemerle.Collections.List.length (l0));

    def a0 = mkarray [1; 2; 3; 4; 5];

    def a1 = a0 [0] + a0 [1] + a0 [2] + a0 [3] + a0 [4];
    
    System.Console.WriteLine ("1 + 2 + 3 + 4 + 5 = {0}", a1);
  
    a0 [0] <- 69;

    def a2 = a0 [0] + a0 [1] + a0 [2] + a0 [3] + a0 [4];

    System.Console.WriteLine ("69 + 2 + 3 + 4 + 5 = {0}", a2);
    
    System.Console.WriteLine ("Powinno byc 5: {0}", (a0 :> System.Array).Length);
*)

(*
    def ind0 = "Ala ma kota!";
    def ind1 = System.Text.StringBuilder (ind0);

    ind1 [0] <- 'E';
    def ind2 = ind1 [0];
    System.Console.WriteLine ("Powinno byc E: {0}", ind2);

    try
      try
        System.Console.WriteLine ("Testujemy wyjatki...")
      finally
        System.Console.WriteLine ("To jest finally...")
    with {
      | e : System.IO.FileNotFoundException =>
        System.Console.WriteLine ("File not found exception!")
      | e : System.Exception =>
        System.Console.WriteLine ("Some other exception!")
    };
*)

    x._field_0 <- 10;
    _field_1 <- "Ala ma ";
    
    System.Console.WriteLine ("{0}{1} kotow...", _field_1, string_of_int (x._field_0));
    
    ()
	}
}
