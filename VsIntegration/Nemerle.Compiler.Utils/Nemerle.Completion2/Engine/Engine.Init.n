using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;


namespace Nemerle.Completion2
{
  public partial class Engine
  {
    public this(callback: IEngineCallback, projectSources : IProjectSources, output : TextWriter)
    {
      this (callback, CompilationOptions (), projectSources, output);
    }
    
    public this (
      callback        : IEngineCallback,
      options         : CompilationOptions,
      projectSources  : IProjectSources,
      output          : TextWriter
    )
    {
      _callback = callback;
      _projectSources = projectSources;
      //TODO: Read all option from project file.
      options.GreedyReferences = false;
      base (options);
      Output = output;
      _isIntelliSenseMode = true;
      syncObject = object();
      _defines = DefineCollection (this);
      _sources = SourceCollection (this);
      MessageOccured += ProcessTopLevelCompilerMessage;

      Options.ColorMessages = false;
      Options.IgnoreConfusion = true;

      // It doesn't help much since comments are processed
      // in a very special way...
      //
      // Options.LexerStoreComments = true;

      _afterUsingDirectiveParse = UsingDirectiveParsed;
      _beforeNamespaceParse = BeforeNamespaceParse;
      _afterNamespaceParse = AfterNamespaceParse;

      Instance = this;
      _isCanBeReset = true;
      Reset();
    }
    
    mutable _isCanBeReset : bool;

    /// Reset Engine state (include: TypeTree, LibRefs and so on).
    /// Call this method if you need reload libs and completely rebuild TypeTree.
    public Reset() : void
    {
      when (_isCanBeReset)
      {
        Options.PersistentLibraries = false; // reload libraries on next parse

        FullResetNamespaceTree ();

        _isCanBeReset = false; // it set to true in BuildNamespaceTreeAndInitProject()
      }
    }

    // Nemerle.Compiler.ManagerClass.Instance is a singletone. Actually, it's a bug.
    // Quick'n'durty solution is 'save and revert when done'
    public RestoreManagerClassInstance() : void
    {
      Instance = this;
    }
  } // end class Engine
} // end namespace

