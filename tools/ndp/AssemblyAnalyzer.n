using System;
using System.Reflection;

// #define Console.WriteLine nic

namespace NemerleDoc
{

module AssemblyAnalyzer
{
  mutable ass : Assembly;
  public analyze (filename : string, tree : DataTree) : void
  {
    ass = Assembly.LoadFile(filename);
    // Console.WriteLine("Codebase={0}\nFullName={1}\nLocation={2}", ass.CodeBase, ass.FullName, ass.Location);
    foreach (t in ass.GetTypes())
    {
      // Console.WriteLine("\n\n--> NameSp: {0}, name: {1}, FullName: {2}", t.Namespace,  t.Name, t.FullName,);
      // Console.WriteLine("--> Attrib {0}, BaseType: {1}, DeclaredType: {2}", t.Attributes, t.BaseType, t.DeclaringType);
      
      /*
      when (t.IsAbstract)  Console.WriteLine("--> abstract");
      when (t.IsArray)     Console.WriteLine("--> array ");
      when (t.IsClass)     Console.WriteLine("--> class ");
      when (t.IsInterface) Console.WriteLine("--> interface ");
      */
      
      tree.AddItem(t.FullName, t.Attributes, ElementType.Type());
      
      foreach (m in t.GetMembers()) {
        // Console.WriteLine("----> DeclType {0}, MemTye {1}, Name {2}, ReflType {3}", m.DeclaringType, m.MemberType, m.Name, m.ReflectedType);
        // Console.WriteLine("----> GetType {0} ", m.GetType());
        def ty =
          match (m.MemberType) {
            | Method => ElementType.Method()
            | Property => ElementType.Property()
            | Constructor => ElementType.Method()
            | Field => ElementType.Field()
            | NestedType => ElementType.Unknown()
            | _ => null
          }
        if (ty != null)
          tree.AddItem(m.DeclaringType.ToString(), m.Name, ty)
        else Console.WriteLine("*** Rejected {0} ***, {1}", m.Name, m.MemberType);
          
      }
    }
  
  }

}
}
