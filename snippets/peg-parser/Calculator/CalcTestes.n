using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using NUnit.Framework;

using System;
using System.Console;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Calculator
{
  /// <summary>Tests for callculator.</summary>
  [TestFixture]
  public class UnitTestes
  {
    _calc : CalcParser = CalcParser();
    
    [Test]
    public Test1() : void
    {
      WriteLine("\n\n" + Environment.CurrentDirectory);
      mutable text = "10    +2 - 3- 4 *4 / 2/   2  + (2+6)/2  +(-1)"; //res =  8 
          
      WriteLine($"expression is:\n$text");
      WriteLine($"text length is:$(text.Length)");
       
      mutable expected = 8;
      
      repeat (3)
      {
        def timer = Stopwatch.StartNew();
        
        def (pos, result) = _calc.TryParse(text);
                
        timer.Stop();
        
        Assert.AreEqual(text.Length, pos);
        Assert.AreEqual(expected, result);
        
        WriteLine($"Text length: $pos Parse took $(timer.Elapsed)");
      }

      repeat (6)
      {
        text = $"($text) + ($text) - ($text) + ($text)";
        expected *= 2;
        
        def timer = Stopwatch.StartNew();        
        
        def (pos, result) = _calc.TryParse(text);
                
        timer.Stop();
        
        Assert.AreEqual(text.Length, pos);
        Assert.AreEqual(expected, result);
        
        WriteLine($"Text length: $pos Parse took $(timer.Elapsed)");
      }
    }
    
    [Test]
    public Test2() : void
    {          
      WriteLine();    
      WriteLine("Testing `_calc.ParseRule_mulOrDiv`");
      Assert.AreEqual(_calc.ParseRule_mulOrDiv("5 *6 "), Some(30));
    }
  }
}
