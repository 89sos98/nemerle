/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

using Nemerle.Compiler;
using Nemerle.Compiler.Tyexpr;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.SolverMacros;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  /** A class responsible for typing a single (global or local) function.  */
  public partial class Typer
  {
    is_instance_ctor : bool;
    is_method : bool;
    env : GlobalEnv;
    tenv : Tyvar.TEnv;
    current_fun : Fun_header;
    current_type : TypeBuilder;
    parent_typer : option [Typer];
    outer_context : OuterContext;
    mutable local_context : LocalContext;
    messenger : Messenger;
    
    static solver : Solver = Solver ();

    /** Represent a context common to a set of functions typed together. */
    class OuterContext
    {
      //public suspended1 : Queue [DelayedTyping];
      //public suspended2 : Queue [DelayedTyping];

      public this ()
      {
        suspended1 = Queue ();
        suspended2 = Queue ();
      }
    }

    [Nemerle.NotImplemented]
    FIXME['a,'b] (x : 'a) : 'b
    {
    }


    #region Toplevel typing
    // FIXME: copy doc from TypeMethod
    /** Walk through method body typing it. */
    public this (m : NemerleMethod)
    {
      current_type = m.DeclaringType :> TypeBuilder;
      parent_typer = None ();
      env = current_type.env;
      current_fun = m.GetHeader ();
      tenv = current_fun.tenv;
      messenger = solver.CurrentMessenger;

      outer_context = OuterContext ();
      local_context = LocalContext.Empty;

      match (m.GetFunKind ()) {
        | FunKind.Constructor =>
          is_instance_ctor = true;
          is_method = true;
        | FunKind.Method | FunKind.BoundMethod =>
          is_method = true;
        | _ => ()
      }

      MaybeAddBaseCall (m);
      
      try {
        RunTyper ();
      } catch {
        | _ : RestartInErrorMode =>
          assert (!messenger.InErrorMode);
          assert (messenger.IsTopLevel);
          messenger.InErrorMode = true;
          outer_context = OuterContext ();
          local_context = LocalContext.Empty;
          try {
            RunTyper ();
          } finally {
            messenger.InErrorMode = false;
          }
      }
      
      MaybeDumpTypedTree ();
    }

    /** Walk through a local function body typing it. */
    public this (parent : Typer, fn : Fun_header)
    {
      parent_typer = Some (parent);

      // copy from parent
      current_type = parent.current_type;
      outer_context = parent.outer_context;
      local_context = parent.local_context;
      is_method = parent.is_method;
      is_instance_ctor = parent.is_instance_ctor;
      env = parent.env;
      messenger = parent.messenger;
      
      current_fun = fn;
      tenv = current_fun.tenv;

      RunTyper ();
    }


    MaybeAddBaseCall (m : NemerleMethod) : void
    {
      when (is_instance_ctor && !m.DeclaringType.IsValueType)
        match (m.fun_body) {
          | FunBody.Parsed (expr) =>
            match (expr) {
              | PT.PExpr.Sequence (<[ base (.. $_) ]> :: _) => ()
              | PT.PExpr.Sequence (<[ this (.. $_) ]> :: _) => ()
              | PT.PExpr.Sequence =>
                Util.locate (expr.loc,
                  m.fun_body = FunBody.Parsed (<[ { base (); $expr } ]>)
                )
              | _ => assert (false)
            }
          | _ => ()
        }
    }


    MaybeDumpTypedTree () : void
    {
      when (Options.DumpTypedTree) {
        match (current_fun.body) {
          | FunBody.Typed (expr) =>
            Message.debug (expr.loc, $ "$current_type.$(current_fun.name) -> "
                                       "$(current_fun.ret_type) : " +
                                     PrettyPrint.SprintTyExpr (None (), expr) + "\n")
          | _ => ()
        }
      }
    }


    RunTyper () : void
    {
      foreach (p : Fun_parm in current_fun.parms) {
        Util.locate (p.loc, {
          when (p.kind != ParmKind.Normal && !IsTopLevel)
            ReportError (messenger, "ref/out parameters are not supported in local methods");
          def is_mutable = p.modifiers.mods %&& NemerleAttributes.Mutable;
          def l = LocalValue (current_fun, p.name, FIXME (p.ty),
                              LocalValue.Kind.FunParm (p.kind),
                              is_mutable = is_mutable);
          AddLocal (PT.Name (p.name, p.color, null), l);
          p.decl = l;
        })
      }

      match (current_fun.body) {
        | FunBody.Parsed (e) =>
          def e' = TypeExpr (e, FIXME (current_fun.ret_type));
          current_fun.body = FunBody.Typed (e');
        | FunBody.Typed => assert (false)
        | FunBody.Compiled => assert (false)
        | FunBody.Extern
        | FunBody.Abstract => ()
      }
    }
    #endregion


    #region Utilities
    IsTopLevel : bool
    {
      get { parent_typer matches Some }
    }

    AddLocal (name : PT.Name, local : LocalValue) : void
    {
      local_context = local_context.WithLocal (name, local);
    }


    TypeOf (expr : TExpr) : TyVar
    {
      if (expr.ty == null) Util.ice ("type of TT.TExpr was not initialized")
      else FIXME (expr.ty);
    }


    DefineLocal (name : PT.Name, ty : TyVar,
                 kind : LocalValue.Kind, is_mutable : bool) : LocalValue
    {
       LocalValue (current_fun, name.Id, ty, kind, is_mutable)
    }


    [Nemerle.NotImplemented]
    Delay (expr : PT.PExpr, reason : string) : TExpr
    {
    }


    [Nemerle.NotImplemented]
    BindType (t : PT.PExpr) : TyVar
    {
    }


    [Nemerle.NotImplemented]
    MonoBindType (t : PT.PExpr) : MType
    {
    }


    /** Filter out wrong nodes, and if more then one left -- make the
        [Overloaded] node, and register it.

        Wrong node is [Error] node, or one type of which cannot unify with
        [expected].
        
        Nodes are registered only if solver stack is empty.
        
        Remove duplicates!  */
    [Nemerle.NotImplemented]
    MakeOverloadedNode (exprs : list [OverloadPossibility], expected : TyVar) : TExpr
    {
    }


    /** Run given typing action, without possiblity of any error messages. */
    TryTyping (fn : void -> TExpr) : TExpr
    {
      TryTyping (IsError, fn)
    }


    /** Run given typing action, without possiblity of any error messages. */
    TryTyping['a] (is_error : 'a -> bool,
                   fn : void -> 'a) : 'a
    {
      solver.PushState ();
      def res = fn ();
      def is_wrong = is_error (res);
      solver.PopState ();
      if (is_wrong) res
      else
        // we cannot reuse the previous result, since it's has been
        // popped off the stack
        fn ()
    }


    IsError (expr : TExpr) : bool
    {
      expr matches TExpr.Error
    }


    /** Check if [e] is an l-value, and if not display an error message
        mentioning [desc]. Additionally is [need_ref] require location of
        the expression to be known (i.e. no properties and indexers).
      */
    CheckLValue (e : TExpr, need_ref : bool, desc : string) : void
    {
      def is_lvalue =
        match (e) {
          | TExpr.LocalRef (d) => d.IsMutable
          | TExpr.StaticRef (m) =>
            match (m.GetKind ()) {
              | MemberKind.Field (f) =>
                f.IsMutable || (current_fun.name == ".cctor" &&
                                f.DeclaringType.Equals (current_type))
              | MemberKind.Property (p) when !need_ref => p.IsMutable
              | _ => false
            }
          | TExpr.StaticPropertyRef (p) when !need_ref => p.IsMutable
          | TExpr.FieldMember (TExpr.This, _) when is_instance_ctor => true
          | TExpr.FieldMember (_, mem) => mem.IsMutable
          | TExpr.PropertyMember (_, p) when !need_ref => p.IsMutable
          | TExpr.Call (TExpr.PropertyMember (_, p), _) when !need_ref => p.IsMutable
          | TExpr.ArrayIndexer => true
          | _ => false
        }
      
      when (!is_lvalue)
        ReportError (messenger, $ "needed an l-value for $desc, "
                                  "got $(DescribeExpression (e))");
    }

    LookupStaticMethod (ti : TypeInfo, name : string) : list [IMethod]
    {
      mutable res = [];
      foreach (mem : IMember in ti.LookupMember (name)) { 
        match (mem) {
          | meth : IMethod when meth.IsStatic =>
            res = meth :: res;
          | _ => {}
        }
      }
      match (ti.SuperClass ()) {
        | Some (ti) =>
          res + LookupStaticMethod (ti, name)
        | None => res
      }
    }

    
    LookupStaticMethod (ty : MType, name : string) : list [IMethod]
    {
      match (ty) {
        | MType.Class (ti, _) =>
          LookupStaticMethod (ti, name)
        | _ => []
      }
    }


    SquashDuplicates['a] (lst : list ['a]) : list ['a]
      where 'a : IMember
    {
      def seen = Hashtable ();
      mutable res = [];
      foreach (elem : IMember in lst) {
        if (seen.Contains (elem.GetId ())) {}
        else {
          seen [elem.GetId ()] = null;
          res = elem :: res;
        }
      }
      res
    }


    IsIndexerProperty (prop : IProperty) : bool
    {
      def getter = prop.GetGetter ();
      def setter = prop.GetSetter ();
      (getter != null && (getter.GetHeader ().parms matches _ :: _)) ||
      (setter != null && !(setter.GetHeader ().parms matches [_]))
    }


    [Nemerle.NotImplemented]
    GetBestOverloads (parms : list [IMethod]) : list [IMethod]
    {
    }


    [Nemerle.NotImplemented]
    GetBestOverloads (parms : list [OverloadPossibility]) : list [OverloadPossibility]
    {
    }
    #endregion


    #region Solver interaction
    MonoType (m : MType) : TyVar
    {
      solver.MonoType (m)
    }


    MonoType (m : MType, src : string) : TyVar
    {
      def tv = solver.MonoType (m);
      tv.AddSource (src);
      tv
    }


    FreshTyVar (src : string) : TyVar
    {
      def tv = solver.FreshTyVar ();
      tv.AddSource (src);
      tv
    }

    
    FreshTyVar () : TyVar
    {
      solver.FreshTyVar ()
    }

    
    ConstructFunctionType (parms : list [TyVar], res : TyVar) : TyVar
    {
      def from =
        match (parms) {
          | [x] => x
          | [] => MonoType (MType.Void (), "")
          | lst => MonoType (MType.Tuple (lst), "")
        }

      MonoType (MType.Fun (from, res), "")
    }


    AtLeast (m : TyVar, src : string) : TyVar
    {
      def tv = solver.FreshTyVar ();
      tv.AddSource (src);
      _ = tv.Require (m);
      tv
    }


    AtLeast (m : TyVar) : TyVar
    {
      def tv = solver.FreshTyVar ();
      _ = tv.Require (m);
      tv
    }


    AtLeast (m : MType, src : string) : TyVar
    {
      def tv = solver.FreshTyVar ();
      tv.AddSource (src);
      _ = tv.Require (m);
      tv
    }


    AtLeast (m : MType) : TyVar
    {
      def tv = solver.FreshTyVar ();
      _ = tv.Require (m);
      tv
    }


    [Nemerle.NotImplemented]
    PushLocals () : void
    {
    }


    [Nemerle.NotImplemented]
    PopLocals () : void
    {
    }
    #endregion


    #region Expressions in general
    TypeExpr (e : PT.PExpr) : TExpr
    {
      TypeExpr (e, FreshTyVar ())
    }

    
    TypeExpr (e : PT.PExpr, expected : TyVar) : TExpr
    {
      Util.locate (e.loc, {
        // FIXME: expand macros here
        def e' = 
          try {
            if (solver.SeenError)
              TExpr.Error ()
            else
              DoType (e, expected);
          } catch {
            | _ : Recovery =>
              messenger.MarkError ();
              TExpr.Error ()
          }

        // FIXME
        // e'.ty = expected;
        e'
      })
    }


    Expect (expected : TyVar, actual : MType, place : string) : bool
    {
      if (expected.Unify (MonoType (actual, place)))
        true
      else {
        ReportError (messenger, $ "expected $expected, got $actual in $place");
        false
      }
    }

   
    Expect (expected : TyVar, actual : TyVar, place : string) : bool
    {
      if (expected.Unify (actual))
        true
      else {
        ReportError (messenger, $ "expected $expected, got $actual in $place");
        false
      }
    }

   
    DoType (expression : PT.PExpr, expected : TyVar) : TExpr
    {
      match (expression) {
        | PT.PExpr.ParmByRef
        | PT.PExpr.ParmOut =>
          ReportFatal (messenger, 
                       "ref and out parameters are only allowed in function calls")

        | PT.PExpr.Define (is_mutable, PT.Splicable.Name (name), val) =>
          if (Expect (expected, MType.Void (), "definition ``result''"))
            TypeLocalDefinition (is_mutable, name, val)
          else
            TExpr.Error ()


        | PT.PExpr.Define =>
          ReportFatal (messenger,
                       "$ operator used outside quotation <[ ... ]> context")
                       

        | PT.PExpr.DefPattern (pat, expr) =>
          if (Expect (expected, MType.Void (), "definition ``result''"))
            TypeDefPattern (pat, expr);
          else
            TExpr.Error ()
          

        | PT.PExpr.DefFunctions (functions) =>
          if (Expect (expected, MType.Void (), "definition ``result''"))
            TypeLocalFunction (functions)
          else
            TExpr.Error ()


        // FIXME: this should be a macro
        | PT.PExpr.Lambda (d) =>
          def newname = Util.tmpname ("l");
          d.header.name = PT.Splicable.Name (PT.Name (newname));
          def sq = PT.PExpr.Sequence ([PT.PExpr.DefFunctions ([d]),
                                       PT.PExpr.Ref (PT.Name (newname))]);
          TypeExpr (sq, expected)


        // array [...]
        | PT.PExpr.Array (<[ $(r : int) ]>, <[ [] ]> ) =>
          def list_of_zeros (r) {
            | 1 => [ <[ 0 ]> ]
            | _ => <[ 0 ]> :: list_of_zeros (r - 1)
          }
          TypeExpr (<[ array (..$(list_of_zeros (r))) ]>, expected)


        | PT.PExpr.Array (<[ $(rank : int) ]>, args) =>
          TypeArray (rank, args, expected)


        | PT.PExpr.Array (PT.PExpr.Spliced, _) =>
          ReportFatal (messenger, "$ splicing outside of <[ quotation ]>")


        | PT.PExpr.Array => Util.ice ("wrongly parsed array initializer")


        | PT.PExpr.EmptyArray (sizes) =>
          mutable size = 0;
          def tsizes = List.Map (sizes, fun (x) {
            ++size;
            // FIXME
            def tv = MonoType (InternalType.Int32 :> MType, "array size initializer");
            TypeExpr (x, tv)
          });
          def arty = MType.Array (FreshTyVar ("empty array object"), size);
          _ = Expect (expected, arty, "empty array initializer");
          TExpr.Array ([], tsizes)


        | PT.PExpr.Indexer (obj, args) =>
          TypeIndexer (obj, args, expected)


        | (PT.PExpr.TryWith) as x =>
          def res1 = FreshTyVar ("try block result");
          def res2 = FreshTyVar ("catch handler result");
          _ = expected.Provide (res1);
          _ = expected.Provide (res2);
          def body = TypeExpr (x.body, res1);
          match (x.exn) {
            | PT.Splicable.Name (exn) =>
              def decl = DefineLocal (exn, BindType (x.exn_ty),
                                      LocalValue.Kind.ExceptionValue (), false);
              PushLocals ();
              def handler = 
                try {
                  AddLocal (exn, decl);
                  TypeExpr (x.handler, res2);
                } finally {
                  PopLocals ();
                }

              TExpr.TryWith (body, decl, handler)
            | _ =>
              ReportFatal (messenger, 
                           "$ operator used outside quotation <[ ... ]> context")
          }


        | PT.PExpr.TryFinally (e1, e2) =>
          expected.AddSource ("try-finally result");
          def body = TypeExpr (e1, expected);
          def tv = FreshTyVar ("finally {...} result");
          def handler = TypeExpr (e2, tv);
          TExpr.TryFinally (body, handler)


        | PT.PExpr.Typeof (t) =>
          // FIXME
          _ = Expect (expected, InternalType.Type :> MType, "typeof result");
          // FIXME
          TExpr.TypeOf (BindType (t) :> TType)


        | PT.PExpr.TypeConversion (e, t) =>
          def t = MonoBindType (t);
          if (Expect (expected, t, "type-converted expression")) {
            def fv = FreshTyVar ("type-cast body");
            def e' = TypeExpr (e, fv);

            if (fv.IsFixed)
              TypeConversion (e', t)
            else
              // FIXME: can we do better?
              // delay
              ReportFatal (messenger, 
                           "the type of type-casted expression cannot be "
                           "deduced")
          } else
            TExpr.Error ()


        | PT.PExpr.TypeEnforcement (e, t) =>
          def t = MonoBindType (t);
          def fv = AtLeast (t, "type-enforcement body");
          if (Expect (expected, t, "type-enforcement body")) {
            def e = TypeExpr (e, fv);
            // FIXME
            TExpr.TypeEnforcement (e, t :> TType)
          } else
            TExpr.Error ()


        | PT.PExpr.Ref (name) =>
          def idl = [name.Id];
          match (TypeLocal (idl, name, expected)) {
            | Some (e) => e
            | None =>
              MakeOverloadedNode (TypeName (idl, name, expected), expected)
          }

          
        | PT.PExpr.Member (obj, PT.Splicable.Name (name)) =>
          def mem_name = name.Id;
          def overloads =
            match (Util.qidl_of_expr (expression)) {
              | Some ((idl, name)) => 

                def res1 = TryTyping (List.IsEmpty, fun () {
                  TypeName (idl, name, expected)
                });
                def res2 = TryTyping (List.IsEmpty, fun () {
                  TypeMember (obj, mem_name, expected) 
                });

                if (res1.IsEmpty && res2.IsEmpty) {
                  // run the typing again, so it will present
                  // the error message if needed
                  TypeName (idl, name, expected);
                } else
                  res1 + res2

              | None =>
                TypeMember (obj, mem_name, expected)
            }
            
          MakeOverloadedNode (overloads, expected)


        | PT.PExpr.Member (_, _) =>
          ReportFatal (messenger,
                       "$ operator outside quotation <[ ... ]> context")


        | PT.PExpr.Call (fnc, parms) =>
          TypeCall (fnc, parms, expected, is_property = false)


        | PT.PExpr.Assign (PT.PExpr.Tuple (vars), e2) =>
          if (Expect (expected, MType.Void (), "assignment ``result''")) {
            def tempnames = List.Map (vars, fun (_) { <[ $(Macros.NewSymbol () : name) ]> });
            def assigns = List.Map2 (vars, tempnames, fun (x, y) { <[ $x = $y ]> });
            def expr = <[
              def (..$tempnames) = $e2;
              {..$assigns }
            ]>;
            TypeExpr (expr, expected)
          } else 
            TExpr.Error ()


        | PT.PExpr.Assign (PT.PExpr.Wildcard, e2) =>
          if (Expect (expected, MType.Void (), "assignment ``result''"))
            TypeExpr (<[ def _ = $e2 ]>, expected)
          else
            TExpr.Error ()


        | PT.PExpr.Assign (e1, e2) =>
          if (Expect (expected, MType.Void (), "assignment ``result''")) {
            def target_type = FreshTyVar ("assignment target");
            def source_type = FreshTyVar ("assignment source");
            if (source_type.Require (target_type)) {
              def e1 = TypeExpr (e1, target_type);
              CheckLValue (e1, need_ref = false, desc = "assignment target");
              def e2 = TypeExpr (e2, source_type);
              TExpr.Assign (e1, e2)
            } else
              ReportFatal (messenger, "type clash in assignment")
          } else
            TExpr.Error ()


        | PT.PExpr.Throw (e) =>
          // FIXME
          def ty = AtLeast (InternalType.Exception :> MType, "thrown value");
          def e = TypeExpr (e, ty);
          TExpr.Throw (e)


        | PT.PExpr.Literal (l) =>
          _ = Expect (expected, TypeOfLiteral (l), "literal");
          TExpr.Literal (l)


        | PT.PExpr.This =>
          if (is_method) {
            // FIXME
            _ = Expect (expected, current_type.GetMemType () :> MType, "`this'");
            TExpr.This ()
          } else
            ReportFatal (messenger, "`this' used outside method");


        | PT.PExpr.Base =>
          if (is_method) {
            def baseti = Option.UnSome (current_type.SuperClass ());
            def parms = Option.UnSome (current_type.SuperType (baseti));
            def parms = List.Map (parms, solver.MonoType);
            def ty = MType.Class (baseti, parms);
            _ = Expect (expected, ty, "`base'");
            TExpr.This ()
          } else
            ReportFatal (messenger, "`base' used outside method");


        | PT.PExpr.Sequence ([]) =>
          _ = Expect (expected, MType.Void (), "empty sequence");
          TExpr.Literal (Literal.Void ())


        | PT.PExpr.Sequence (l) =>
          def loop (res, lst) {
            match (lst) {
              | [e] =>
                def e' = TypeExpr (e, expected);
                FixupSequence (e' :: res)
              | x :: xs =>
                def x' = TypeExpr (x, FreshTyVar (""));
                loop (x' :: res, xs)
              | [] => assert (false)
            }
          }

          PushLocals ();
          def res = loop ([], l);
          PopLocals ();
          res


        | PT.PExpr.Tuple (l) =>
          mutable res_exprs = [];
          mutable res_types = [];
          foreach (e in l) {
            def tv1 = FreshTyVar ("tuple component");
            def tv2 = FreshTyVar ("tuple component");
            _ = tv1.Require (tv2);
            def e = TypeExpr (e, tv1);
            res_exprs = e :: res_exprs;
            res_types = tv2 :: res_types;
          }
          _ = Expect (expected, MType.Tuple (res_types), "tuple constructor");
          TExpr.Tuple (res_exprs)


        | (PT.PExpr.Match) as m =>
          TypeMatch (m, expected)


        | PT.PExpr.Typed (tytree) =>
          _ = Expect (expected, TypeOf (tytree), "typed expression");
          tytree


        | PT.PExpr.Quoted (parse_element) =>
          // FIXME!!!
          def ctx = null;
          def lifted =
            match (parse_element) {
              | PT.SyntaxElement.Expression (e) => Macros.quoted_expr (ctx, e)
              | PT.SyntaxElement.MatchCase (e) => Macros.QuotedMatchCase (ctx, e)
              | PT.SyntaxElement.MatchCaseGuard (a, b) => Macros.QuotedCaseGuard (ctx, (a, b))
              | PT.SyntaxElement.Function (e) => Macros.quoted_fundecl (ctx, e)
              | PT.SyntaxElement.Parameter (e) => Macros.quoted_fparam (ctx, e)
              | PT.SyntaxElement.ClassMember (e) => Macros.quoted_member (ctx, e)
              | PT.SyntaxElement.TType (e) => Macros.quoted_ttype (ctx, e)

              | PT.SyntaxElement.TypeBuilder
              | PT.SyntaxElement.MethodBuilder
              | PT.SyntaxElement.FieldBuilder
              | PT.SyntaxElement.EventBuilder
              | PT.SyntaxElement.PropertyBuilder
              | PT.SyntaxElement.ParameterBuilder =>
                Util.ice ("strange syntax element appeared in quotation")
            };
          TypeExpr (lifted, expected)


        | PT.PExpr.Spliced =>
          ReportFatal (messenger, "$ macro keyword used in regular expression")
          

        | PT.PExpr.TypedType
        | PT.PExpr.Wildcard 
        | PT.PExpr.Application 
        | PT.PExpr.As =>
          ReportFatal (messenger, "found pattern expression inside a raw expression")

          
        | PT.PExpr.Void =>
          ReportFatal (messenger, "found type expression inside a raw expression")


        | PT.PExpr.Error =>
          ReportFatal (messenger, "parse error")
          

        | PT.PExpr.Ellipsis =>
          Util.ice ("List of expression parameters out of any construct")
          

        | PT.PExpr.MacroCall  =>
          Util.ice ("Macrocalls should have been expanded already")


        | PT.PExpr.TypedPattern  =>
          Util.ice ("typed pattern in raw expr")
      }
    }
    #endregion

       
    #region ,,def''
    TypeLocalDefinition (is_mutable : bool, name : PT.Name, val : PT.PExpr) : TExpr
    {
      // check for mutable symbol redefinitions
      match (local_context.FindLocal (name)) {
        | Some (l) =>
          def warn (was_of_kind, is_of_kind) {
              Message.warning ($ "redefinition of a local $was_of_kind "
                                 "value `$(l.Name)' $is_of_kind");
              Message.warning (l.loc, "  <-- previously seen here")
          }

          match ((is_mutable, l.IsMutable)) {
            | (true, true) =>
              warn ("mutable", "")
            | (false, true) =>
              warn ("mutable", " as non-mutable")
            | (true, false) =>
              warn ("non-mutable", " as mutable")
            | _ => {}
          }
        | _ => {}
      }
      
      def tv = FreshTyVar ("");
      def val = TypeExpr (val, tv);
      def decl = DefineLocal (name, tv, 
                              LocalValue.Kind.Plain (), 
                              is_mutable);
      AddLocal (name, decl);
      TExpr.DefValIn (decl, val, null)
    }

   
    TypeDefPattern (pattern : PT.PExpr, value : PT.PExpr) : TExpr
    {
      def res = FreshTyVar ("value doconstructed with def pattern");
      def matched_value = TypeExpr (value, res);
      def pats = TypePatterns (res, [(pattern, None ())]);
      def case = Match_case (pats, null);

      PatternTyping.check_matching ([case]);
      FixupMatchCase (case);
      TExpr.Match (matched_value, [case])
    }


    TypeLocalFunction (functions : list [PT.Function_decl]) : TExpr
    {
      mutable headers = [];

      foreach (fn in functions) {
        def (tenv, typarms) =
          current_type.BindTyparms (tenv, fn.header.typarms);
        def parms = List.Map (fn.header.parms,
          fun (p : PT.Fun_parm) {
            def name = p.name.GetName ();
            Fun_parm (loc = p.loc,
                      name = name.Id,
                      color = name.color,
                      ty = current_type.BindType (tenv, p.ty),
                      decl = null,
                      kind = ParmKind.Normal,
                      modifiers = p.modifiers)
          });
        def name_obj = fn.header.name.GetName ();
        def header = Fun_header (
           ret_type = current_type.BindType (tenv, fn.header.ret_type),
           typarms = typarms,
           name = name_obj.Id,
           parms = parms,
           tenv = tenv,
           loc = fn.header.loc);
        def parm_types = List.Map (parms, fun (p : Fun_parm) { FIXME (p.ty) });
        def fun_type = ConstructFunctionType (parm_types, FIXME (header.ret_type));
        def local = 
          DefineLocal (name_obj, 
                       fun_type, 
                       LocalValue.Kind.Function (header, null),
                       is_mutable = false);
        header.decl = local;
        header.body = FunBody.Parsed (fn.body);
        AddLocal (name_obj, local);
        headers = header :: headers;
      }

      headers = List.Rev (headers);

      foreach (hd in headers) {
        _ = Typer (this, hd);
      }

      TExpr.DefFunctionsIn (headers, null)
    }


    /** Given a sequence of expression in a sequence (in reverse order),
        reverse them and nest properly (def ... => let ... in ...).  */
    [Nemerle.NotImplemented]
    FixupSequence (exprs : list [TExpr]) : TExpr
    {
    }
    #endregion


    #region Arrays, literals, indexers
    // FIXME: make this tail rec
    TypeArray (rank : int, args : PT.PExpr, expected : TyVar) : TExpr
    {
      def expr_list_length (e) {
        | <[ [] ]> => 0
        | <[ $_ :: $rest ]> => 1 + expr_list_length (rest)
        | _ =>
          ReportError (messenger, 
                       "array initializer must be of form "
                       "`array [rank] [ [..], .., [..] ]'");
          0
      }

      def expr_list_flatten_and_count (e, remaining) {
        | (<[ [] ]>, 0) => []
        | (<[ [] ]>, _)
        | (_, 0) =>
          ReportError (messenger, "incorrectly structured array initializer");
          []
        | (<[ $x :: $xs ]>, n) => x :: expr_list_flatten_and_count (xs, n - 1)
        | _ =>
          ReportError (messenger,
                       "array initializer must be of form "
                       "`array [rank] [ [..], .., [..] ]'");
          []
      }

      def dimensions (args, remaining_rank) {
        | (_, 0) => []
        | (<[ $head :: $_ ]>, n) =>
          expr_list_length (args) :: dimensions (head, n - 1)
        | _ =>
          ReportError (messenger, 
                       "array initializer must be of form "
                       "`array [rank] [ [..], .., [..] ]'");
          []
      }
      
      /* Flattens the initializers and checks that there are the correct
         number of them */
      def flatten (args, dims) {
        | (elem, []) => [elem]
        | (l, h::t) => 
          def flat = expr_list_flatten_and_count (l, h);
          List.FoldLeft (flat, [], 
                         fun (i, a) {
                           List.Concat ([a, flatten (i, t)])
                         })
      }

      def dimensions = dimensions (args, rank);
      def lst = flatten (args, dimensions);

      if (messenger.SeenError)
        TExpr.Error ()
      else {
        def dimensions =
          List.Map (dimensions,
                    fun (x) { TExpr.Literal (Literal.Int (x)) });
        def element_type = FreshTyVar ("array element type");

        def initializers =
          List.Map (lst,
                    fun (expr) {
                      def tv = AtLeast (element_type);
                      TypeExpr (expr, tv)
                    });

        _ = Expect (expected, MType.Array (element_type, rank), 
                    "array initializer");

        TExpr.Array (initializers, dimensions)
      }
    }


    TypeOfLiteral (l : Literal) : TyVar
    {
      def mono_type =
        match (l) {
          | Literal.Null => null
          | Literal.Void => MType.Void ()
          // FIXME!!!
          | Literal.Byte => InternalType.Byte :> MType
          | Literal.SByte => InternalType.SByte :> MType
          | Literal.Short => InternalType.Int16 :> MType
          | Literal.UShort => InternalType.UInt16 :> MType
          | Literal.Int => InternalType.Int32 :> MType
          | Literal.UInt => InternalType.UInt32 :> MType
          | Literal.Long => InternalType.Int64 :> MType
          | Literal.ULong => InternalType.UInt64 :> MType
          | Literal.Char => InternalType.Char :> MType
          | Literal.String => InternalType.String :> MType
          | Literal.Float => InternalType.Single :> MType
          | Literal.Double => InternalType.Double :> MType
          | Literal.Decimal => InternalType.Decimal :> MType
          | Literal.Bool => InternalType.Boolean :> MType
          | Literal.Enum (_, tc) => MType.Class (tc, [])
        }

      if (mono_type == null) {
        def tv = FreshTyVar ();
        tv.IsFromNull = true;
        tv
      } else {
        MonoType (mono_type, "literal type")
      }
    }


    TypeIndexer (obj : PT.PExpr, args : list [PT.PExpr], expected : TyVar) : TExpr
    {
      def obj = TypeExpr (obj);
      
      match (obj) {
        | TExpr.PropertyMember
        | TExpr.StaticPropertyRef 
        | TExpr.Overloaded =>
          TypeCall (<[ $(obj : typed) ]>, args, expected, is_property = true)
        
        | _ =>
          match (TypeOf (obj).UpperBound) {
            | Some (MType.Class (ti, _))
              when Option.IsSome (ti.DefaultIndexerName) =>
              def idx = Option.UnSome (ti.DefaultIndexerName);
              TypeIndexer (<[ $(obj : typed) . $(idx : dyn) ]>, args, expected)
              
            | Some (MType.Array (indexer_over_type, rank)) =>
              // indexers over arrays
              def typed_args = List.Map (args, fun (x) { TypeExpr (x) });
              
              mutable args_amount = rank;
              foreach (index in typed_args) {
                // FIXME
                _ = Expect (TypeOf (index), InternalType.Int32 :> MType, "array index");
                --args_amount;
              }

              _ = Expect (expected, indexer_over_type, "array indexer");

              if (args_amount != 0) {
                ReportError (messenger, "wrong number of indexes");
                TExpr.Error ()
              } else {
                // FIXME
                TExpr.ArrayIndexer (indexer_over_type :> TType, obj, typed_args)
              }
            | _ =>
              ReportError (messenger, 
                           $ "cannot find any suitable indexer in "
                             "$(TypeOf (obj))");
              TExpr.Error ()
          }
      }
    }
    #endregion


    #region Member access
    TypeToConstructor (t : TypeInfo) : list [OverloadPossibility]
    {
      match (t.GetTydecl ()) {
        | TypeDeclaration.Alias (TType.Class (t, _)) => TypeToConstructor (t)
        | _ =>
          if (t.Attributes %&& NemerleAttributes.Abstract) {
            ReportError (messenger, 
                         $ "the type `$(t)' is abstract and cannot "
                           "be constructed");
            []
          } else
            match (t.GetConstantObject ()) {
              | None =>
                mutable seen_empty_ctor = false;
                mutable res = [];

                foreach (meth : IMethod in t.LookupMember (".ctor")) {
                  match (meth.GetFunKind ()) {
                    | FunKind.Constructor 
                      when meth.CanAccess (current_type) =>
                      when (meth.GetHeader ().parms.IsEmpty)
                        seen_empty_ctor = true;
                      def from =
                        // FIXME!
                        match ((meth.GetMemType () :> TyVar).LowerBound) {
                          | Some (MType.Fun (from, _)) => from
                          | _ => assert (false)
                        }
                      // XXX if we want variant ctor to be of variant type
                      // here is the place
                      def mt = MType.Fun (from, FIXME (t.GetMemType ()));
                      def ty = t.FreshSubst ().Apply (mt);
                      res = OverloadPossibility (solver, ty, null, meth) :: res;
                    | _ => {}
                  }
                }

                when (t.IsValueType && !seen_empty_ctor) {
                  def res_ty = t.FreshSubst ().Apply (FIXME (t.GetMemType ()));
                  def ty = ConstructFunctionType ([], res_ty);
                  res = OverloadPossibility (solver, ty, null, t) :: res;
                }

                res

              | Some (f) =>
                def res = t.FreshSubst ().Apply (FIXME (f.GetMemType ()));
                def ty = ConstructFunctionType ([], res);
                [OverloadPossibility (solver, ty, null, f)]
            }
       }
    }


    InterpretGlobal (symbol : Symbol) : list [OverloadPossibility]
    {
      def single (ty, mem) {
         [OverloadPossibility (solver, FIXME (ty), null, mem)]
      }
      
      match (symbol) {
        | Symbol.TypeMember (mem) =>
          if (!mem.IsStatic) {
            when (!is_method)
              ReportError (messenger,
                           $ "trying to access an instance member "
                             "$(mem.DeclaringType).$(mem.Name) from a static "
                             "method");
            []
          } else if (!mem.CanAccess (current_type)) {
            ReportError (messenger,
                         $ "cannot access `$(mem.DeclaringType).$(mem.Name)'");
            []
          } else {
            match (mem.GetKind ()) {
              | MemberKind.Type (t) =>
                TypeToConstructor (t)

              | MemberKind.Method (m) =>
                single (m.GetFreshType (), m)

              | MemberKind.Property
              | MemberKind.Field =>
                single (mem.GetMemType (), mem)

              | MemberKind.Event (e) =>
                if (e.DeclaringType.Equals (current_type)) {
                  def field = (e :> NemerleEvent).storage_field;
                  if (field == null)
                    [] // XXX how?
                  else
                    single (field.GetMemType (), field)
                } else []
            }
          }

        | Symbol.Type (t) =>
          if (!t.CanAccess (current_type)) {
            ReportError (messenger, $ "cannot access type `$(t)'");
            []
          } else {
            TypeToConstructor (t)
          }
      }
    }


    InterpretGlobals (symbols : list [Symbol], expected : TyVar) 
                              : list [OverloadPossibility]
    {
      _ = expected; // FIXME
      List.Flatten (List.Map (symbols, InterpretGlobal))
    }


    TypeMember (obj : PT.PExpr, mem_name : string, expected : TyVar) 
                    : list [OverloadPossibility]
    {
      // XXX we should add a bound here, that the type should have the
      // field mem_name
      def tv = FreshTyVar ("left hand side of the dot");
      def obj = TypeExpr (obj, tv);
      if (tv.IsFixed) {
        def mems = Hashtable ();
        def visited = Hashtable ();
        mutable res = [];

        def lookup (t) {
          | MType.Class (tc, args) when (! visited.Contains (tc.GetId ())) =>
            visited [tc.GetId ()] = null;
            foreach (mem : IMember in tc.LookupMember (mem_name))
              when (!mems.Contains (mem.GetId ())) {
                mems [mem.GetId ()] = null;
                when (!mem.IsStatic && mem.CanAccess (current_type)) {
                  def ty =
                    match (mem) {
                      | meth : IMethod =>
                        meth.GetFreshType ()
                      | mem : IMember =>
                        mem.GetMemType ()
                    };
                  def ty = tc.SubtypingSubst (mem.DeclaringType).Apply (FIXME (ty));
                  def ty = tc.MakeSubst (args).ApplyTv (ty);
                  solver.PushState ();
                  def allowed = expected.Unify (ty);
                  solver.PopState ();
                  when (allowed)
                    res = OverloadPossibility (solver, ty, obj, mem) :: res;
                }
              }
          | MType.TyVarRef (tv) =>
            List.Iter (tv.Constraints, lookup)
          | MType.Array =>
            lookup (FIXME (InternalType.Array))
          | MType.Intersection (lst) =>
            List.Iter (lst, lookup)
          | _ => ()
        }
        lookup (Option.UnSome (tv.LowerBound));
        res
      } else if (IsError (obj)) {
        []
      } else {
        // FIXME: here we should traverse all type paths from lower to
        // upper bound and look how this field is defined there, and finally
        // add maybe-more-specific lower bound
          ReportError (messenger, 
                       $ "cannot determine proper type for `$(tv)', "
                         "to find member `$(mem_name)'");
          []
      }
    }


    TypeLocal (idl : list [string], name : PT.Name, expected : TyVar) : option [TExpr]
    {
      match (idl) {
        | [_] when local_context.FindLocal (name) matches Some =>
          def local = Option.UnSome (local_context.FindLocal (name));
          def ty =
            match (local.ValKind) {
              | LocalValue.Kind.Function (fun_header, _) =>
                Subst.Fresh (solver, FIXME (fun_header.typarms)).ApplyTv (local.Type)
              | _ => local.Type
            }
          _ = Expect (expected, ty, "value reference");
          Some (TExpr.LocalRef (local))
        | _ => None ()
      }
    }


    TypeName (idl : list [string], name : PT.Name, expected : TyVar) : list [OverloadPossibility]
    {
      def from_this =
        match (idl) {
          | [name] when is_method =>
            solver.PushState ();
            def res = TypeMember (<[ this ]>, name, expected);
            solver.PopState ();
            if (res.IsEmpty) []
            else TypeMember (<[ this ]>, name, expected)
          | _ => []
        };
      def globals = name.GetEnv (env).LookupSymbol (idl, current_type);
      def from_global = InterpretGlobals (globals, expected);

      from_this + from_global
    }
    #endregion


    #region Function calls
    TryTypeCall (fnc : TExpr, parms : list [Parm], expected : TyVar,
                 var_args : bool) : TExpr
    {
      def ct = CallTyper (this, fnc, parms, expected);
      ct.is_var_args = var_args;
      ct.Run ();
      ct.result
    }


    ResolveOverload (overloads : list [OverloadPossibility], 
                     parms : list [Parm], expected : TyVar) : TExpr
    {
      def try_type (overload : OverloadPossibility)
      {
        TryTypeCall (overload.Compile (), 
                     parms, 
                     expected, 
                     var_args = overload.VarArgs);
      }

      def print_error_message (overload : OverloadPossibility) {
        solver.PushState ();
        messenger.NeedMessage = true;
        _ = try_type (overload);
        solver.PopState ();
      }

      match (OverloadPossibility.OnlyPossible (overloads)) {
        | [] =>
          TExpr.Error ()

        | overloads =>
          mutable ok = [];

          foreach (overload in overloads) {
            solver.PushState ();
            unless (IsError (try_type (overload)))
              ok = overload :: ok;
            solver.PopState ();
          }

          match (GetBestOverloads (ok)) {
            | [] =>
              when (messenger.NeedMessage) {
                match (overloads) {
                  | [o] =>
                    print_error_message (o);
                  | _ =>
                    ReportError (messenger, "each overload has an error during call:");
                    mutable cnt = 1;
                    foreach (o in overloads) {
                      ReportError (messenger, $ "  overload #$cnt, $o");
                      print_error_message (o);
                      ++cnt;
                    }
                }
              }
              TExpr.Error ()
            | [one] =>
              try_type (one)
            | _ =>
              // FIXME!!!
              // Delay ()
              assert (false)
          }
      }
    }

    
    TypeCall (fnc : PT.PExpr,
              parms : list [PT.PExpr], 
              expected : TyVar, 
              is_property : bool) : TExpr
    {
      def refout (name, expr) {
        def tv = FreshTyVar ("call parameter");
        match (expr) {
          | PT.PExpr.ParmByRef (ex)
          | PT.PExpr.ParmOut (ex) =>
            def ex = TypeExpr (ex, tv);
            CheckLValue (ex, need_ref = true, desc = "ref/out parameter");
            def kind =
              match (expr) {
                | PT.PExpr.ParmByRef => ParmKind.Ref
                | _ => ParmKind.Out
              };
            Parm (kind, ex, name)
          | ex =>
            def ex = TypeExpr (ex, tv);
            Parm (ParmKind.Normal, ex, name)
        }
      }

      def compile_parm (p : PT.PExpr) {
        | <[ $(name : name) = $e ]> => refout (name.Id, e)
        | e => refout ("", e)
      };

      def parms = List.Map (parms, compile_parm);

      def res =
        match (TypeExpr (fnc, FreshTyVar ("called value"))) {
          | _ when messenger.SeenError =>
            TExpr.Error ()

          | TExpr.Overloaded (overloads) =>
            ResolveOverload (overloads, parms, expected)

          | fnc =>
            def res = TryTypeCall (fnc, parms, expected, var_args = false);
            when (IsError (res))
              ReportError (messenger, $ "typing error in call");
            res
        }
      
      match (res) {
        | TExpr.Call (TExpr.PropertyMember (_, prop), _) when IsIndexerProperty (prop) =>
          if (is_property) {}
          else
            ReportError (messenger, 
                         $ "attempt to call an indexer property `$(prop.Name)'");
        | expr when is_property =>
          ReportError (messenger, 
                       $ "the thing indexed isn't property, it is $(expr)");
        | _ => ()
      }

      res
    }
    #endregion


    #region Type conversions
    TypeConversion (expr : TExpr, to : MType) : TExpr
    {
      assert (TypeOf (expr).IsFixed);
      def from = Option.UnSome (TypeOf (expr).LowerBound);

      solver.PushState ();
      def no_check_needed = from.Require (solver, to);
      solver.PopState ();

      if (no_check_needed) {
        Message.warning ($ "there is no check needed to cast $from to $to");
        Message.hint_once ("consider using : instead of :>");
        TExpr.TypeEnforcement (expr, FIXME (MonoType (to, "")))
      } else {
        solver.PushState ();
        def just_subtyping = to.Require (solver, from);
        solver.PopState ();

        if (just_subtyping) {
          TExpr.TypeConversion (expr, FIXME (MonoType (to, "")), is_checked = true);
        } else {
          def operators = SquashDuplicates (
            LookupStaticMethod (from, "op_Explicit") +
            LookupStaticMethod (to, "op_Explicit") +
            LookupStaticMethod (from, "op_Implicit") +
            LookupStaticMethod (to, "op_Implicit"));
          def needed = ConstructFunctionType ([MonoType (from)], MonoType (to));
          def operators = List.Filter (operators, fun (op : IMethod) {
            solver.PushState ();
            def is_wrong = !needed.Provide (FIXME (op.GetFreshType ()) : MType);
            solver.PopState ();
            !is_wrong
          });

          def operators = GetBestOverloads (operators);

          match (operators) {
            | [single] =>
              TExpr.Call (TExpr.StaticRef (single), [Parm (expr)])
            | [] =>
              if (from.IsValueType && to.IsValueType)
                // FIXME: stricter checking here
                TExpr.TypeConversion (expr, FIXME (MonoType (to)), is_checked = true)
              else {
                ReportError (messenger, $ "cannot convert $from to $to");
                TExpr.Error ()
              }
            | lst =>
              // FIXME: included method list
              ReportError (messenger, $"overload ambiguity in type conversion $lst");
              TExpr.Error ()
          }
        }
      }
    }
    #endregion


    #region Matching typing
    TypePatterns (matched_value_type : TyVar, 
                  patterns : list [PT.PExpr * option [PT.PExpr]]) 
                  : list [Pattern * TExpr]
    {
      def typer = PatternTyper (this, matched_value_type, patterns);
      typer.Run ()
    }


    FixupMatchCase (case : Match_case) : void
    {
      case.patterns = 
        List.Map (case.patterns, 
                  fun (p, e) { 
                     (PatternTyping.strip_enums (p), e) 
                  });
      // case.body = TExpr.TypeEnforcement (case.body, t);
    }

    
    TypeMatch (mtch : PT.PExpr.Match, expected : TyVar) : TExpr
    {
      def matched_value_type = FreshTyVar ("matched value type");
      def matched_value = TypeExpr (mtch.expr, matched_value_type);
      mutable disable_warnings = false;
      mutable res = [];

      foreach (case in mtch.cases) {
        when (case.disable_warnings)
          disable_warnings = true;

        PushLocals ();
        def pats = TypePatterns (matched_value_type, case.patterns);
        def res_ty = AtLeast (expected);
        def body = TypeExpr (case.body, res_ty);
        PopLocals ();

        res = Match_case (pats, body) :: res;
      }

      if (res.IsEmpty) {
        ReportError (messenger, "cannot have an empty match construct");
        TExpr.Error ()
      } else {
        res = List.Rev (res);

        unless (disable_warnings)
          PatternTyping.check_matching (res);
        List.Iter (res, FixupMatchCase);

        TExpr.Match (matched_value, res)
      }
    }
    #endregion


    #region Pretty printing
    DescribeExpression (expr : TExpr) : string
    {
      match (expr) {
        | TExpr.LocalRef (d) =>
          $ "a reference to local symbol `$(d)'"
        | TExpr.StaticRef (m) =>
          def tyname =
            if (m.DeclaringType == null)
              ""
            else
              m.DeclaringType.FullName + ".";
          "a reference to global symbol `" + tyname + m.Name + "'"
        | TExpr.FieldMember (_, f) =>
          "a reference to field `" + f.Name + "'"
        | TExpr.ConstantObjectRef (m) =>
          "a reference to constant constructor of `" +
          m.DeclaringType.FullName + "'"
        | TExpr.ImplicitValueTypeCtor (t) =>
          "a reference to implicit constructor of `" +
          t.FullName + "'"
        | TExpr.StaticPropertyRef (p)
        | TExpr.PropertyMember (_, p) =>
          "a reference to property `" + p.Name + "'"
        | TExpr.MethodRef (_, m, _) =>
          "a reference to method `" + m.Name + "'"
        | TExpr.TailCall (f, _)
        | TExpr.Call (f, _) =>
          "a function call to " + DescribeExpression (f)
        | TExpr.SelfTailCall =>
          "self-recursive function call"
        | TExpr.Assign => "an assignment"
        | TExpr.DefValIn => "a value binding"
        | TExpr.DefFunctionsIn => "a function binding"
        | TExpr.Match => "a `match' expression"
        | TExpr.Throw => "a throw expression"
        | TExpr.TryWith => "a try...with expression"
        | TExpr.TryFinally => "a try...finally expression"
        | TExpr.Literal => "a literal value"
        | TExpr.This => "a this pointer reference"
        | TExpr.Base => "a base class reference"
        | TExpr.TypeConversion => "a type conversion (:>)"
        | TExpr.TypeEnforcement => "a type enforcement (:)"
        | TExpr.Sequence => "a sequence"
        | TExpr.Tuple => "a tuple constructor"
        | TExpr.Array => "an array constructor"
        | TExpr.ArrayIndexer => "an array indexer reference"
        | TExpr.TypeOf => "a typeof expression"
        | TExpr.OpCode => "an operator reference"
        // FIXME!
        | _ => "an unknown expression"
      }
    }
    #endregion
  }
}


#region Old code
#endregion
