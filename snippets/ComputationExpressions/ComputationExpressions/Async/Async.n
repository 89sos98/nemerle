using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public partial abstract class Async[A]
  {
    /// <summary>
    /// Implementation detail. DO NOT USE!
    /// </summary>
    public abstract Exec(job : AsyncJobBase, res : ref A) : Async[A];

    /// <summary>
    /// Implementation detail. DO NOT USE!
    /// </summary>
    public abstract Cancel() : void;

    public Start() : Async[A]
    {
      Start(SystemExecutionContexts.ThreadPool(), null);
    }

    public Start(cancelationToken : CancelationToken) : Async[A]
    {
      Start(SystemExecutionContexts.ThreadPool(), cancelationToken);
    }

    public Start(executionContext : ExecutionContext) : Async[A]
    {
      Start(executionContext, null);
    }

    public virtual Start(executionContext : ExecutionContext, cancelationToken : CancelationToken) : Async[A]
    {
      def job = AsyncJob(executionContext, this);
      when (cancelationToken != null)
        cancelationToken.Register(job);
      job.Start();
      job.Result;
    }

    public virtual GetResult() : AsyncResult[A]
    {
      throw NotSupportedException();
    }
  }
}
