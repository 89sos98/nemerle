using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace LRPEGCC
{
  /// <summary>
  /// Description of UnnamedTerminalSymbolsSplitter.
  /// </summary>
  module GrammarCreator
  {  
    private static UnnamedRuleString = "unnamed_rule"; 
  
    public CreateGrammar(typer : Typer, _ : TypeBuilder, startRule : PExpr, rules : PExpr) : Grammar
    {

      def grammar = Parsing.ParseRules(typer, startRule.ToString(), rules);
      
      def grammar = SplitUnnamedTerminalSymbols(grammar);      
      
      def grammar = Optimizer.OptimizeGrammar(grammar);
              
      Print(grammar);
      
      grammar
    }
    
    // this function replaces usages of terminal symbols in the right part of nonterminal rules by the call and created the terminal rule for this call
    private SplitUnnamedTerminalSymbols(grammar : Grammar) : Grammar
    {
      mutable newGrammar = Grammar(grammar.StartRuleName);
      
      foreach(name in grammar.Names)
      {          
        def rule = grammar.GetRule(name);
          
        def (newRule, newRules) = SplitUnnamedTerminalSymbols(rule);
        
        newGrammar = newGrammar.Add(name, newRule);        
        
        foreach(r is Rule.CaptureNamedTerminalSymbol in newRules)
          newGrammar = newGrammar.Add(r.name, r);            
      }      
      newGrammar
    }
        
    // this function replaces usages of terminal symbols in the right part of nonterminal rules by the call and created the terminal rule for this call
    // returns : (a , b)
    // a - modified nonterminal rule
    // b - list of new terminal rules called from a
    private SplitUnnamedTerminalSymbols(rule : Rule) : Rule * list[Rule]
    {  
      when(CanBeSplited(rule))
      {
        def name = tmpname(UnnamedRuleString);
        def r1   = Rule.CaptureNamedTerminalSymbol(name, rule);
        def r2   = Rule.Call(name);
        
        return (r2, [r1]);      
      }
    
      match(rule)
      {
        | Capture(_, _ , _, r) 
        | RepeatMin(_, r)
        | RepeatMinMax(_, _, r)
        | Not(r)
        | And(r) =>
          def (newRule, splitedList) = SplitUnnamedTerminalSymbols(r);
            
          def retRule =
            match(rule)
            {
              | Capture(n, r1, r2,_) => Rule.Capture(n, r1, r2, newRule);
              | RepeatMin(a, _) => Rule.RepeatMin(a, newRule);
              | RepeatMinMax(a, b, _) => Rule.RepeatMinMax(a, b, newRule);
              | Not(_) => Rule.Not(newRule);
              | And(_) => Rule.And(newRule);
              | _           => assert(false);
            };
          
          (retRule, splitedList)
        
        | Sequence(rules)
        | Choice(rules) =>
          mutable newRules = [];
          mutable splitedRules = [];
          
          foreach(r in rules)
          {          
            def (newRule, splitedList) = SplitUnnamedTerminalSymbols(r);
            
            newRules = newRules + [newRule];
            splitedRules = splitedRules + splitedList;          
          }
          
          def retRule = 
            match(rule)
            {
              | Sequence(_) => Rule.Sequence(newRules);
              | Choice(_)   => Rule.Choice(newRules);
              | _           => assert(false);
            };
          
          (retRule, splitedRules);
          
        | _ => (rule, []) 
      } 
    }
    
    /// Determins whether the rule is terminal (combination of terminal symbols 
    /// whithout calling any rule)
    private CanBeSplited(rule : Rule) : bool
    {
      | Chars                       => true
      | CaptureNamedTerminalSymbol  
      | Capture                     
      | Call                        => false
      | RepeatMin(_, rule)          
      | RepeatMinMax(_, _, rule)    
      | Not(rule)                   
      | And(rule)                   => CanBeSplited(rule)
      | Sequence(rules)             
      | Choice(rules)               => !rules.Exists(r => !CanBeSplited(r))
      | ExtensionPoint              => throw NotImplementedException();
    }
    
    private Print(grammar : Grammar) : void
    {
      using(def f = System.IO.StreamWriter("r.txt"))
        f.WriteLine(grammar.ToString());
    }
  }
}
