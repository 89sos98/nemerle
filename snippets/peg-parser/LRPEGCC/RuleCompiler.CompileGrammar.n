using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace LRPEGCC
{
  partial internal class RuleCompiler
  {
    public CompileGrammar(typedGrammar : Grammar) : void
    {
      def untypedGrammar         = GrammarTyper.RemoveAllCaptures(typedGrammar);
      def optimizedTypedGrammar  = Optimizer.OptimizeGrammar(typedGrammar);
      def optimizedUnypedGrammar = Optimizer.OptimizeGrammar(untypedGrammar);

      def calledRules = Hashtable();
      def rulesToCall = Stack();
      def callRule(name, useResult)
      {
        def key = (name, useResult);
        when (!calledRules.Contains(key))
        {
          calledRules.Add(key, 0);
          rulesToCall.Push(key);
        }
      }

      callRule(optimizedTypedGrammar.StartRuleName, true);
      while (rulesToCall.Count > 0)
      {
        def (name, useResult) = rulesToCall.Pop();
        def rule = if (useResult) optimizedTypedGrammar.GetRule(name);
                   else           optimizedUnypedGrammar.GetRule(name);

        def body = CompileRule(rule, useResult, callRule);

        def method = if (useResult)
        {
          def ty = match (rule)
          {
            | Rule.Capture(Handler(retType = RuleType.NType(ty)), _) => ty

            | Rule.Capture as c =>
              Message.Error($"PEG implementation error. Wrong Capture '$(c)'");
              PExpr.Error();

            | _ =>
              Message.Error("PEG implementation error.");
              PExpr.Error();
          };

          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, result : ref Nemerle.Peg.VToken[$ty], text : string) : int
            {
              $body;
            }
          ]>
        }
        else
        {
          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, text : string) : int
            {
              $body;
            }
          ]>
        }

        _ = _tb.DefineWithSource(method);
      }
    }
  }
}
