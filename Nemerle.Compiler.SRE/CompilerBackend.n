using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;

[assembly: Nemerle.Internal.CompilerBackend("Nemerle.Compiler.Sre.CompilerBackend")]

namespace Nemerle.Compiler.Sre
{
  public sealed class CompilerBackend : ICompilerBackend
  {
    public this([NotNull] manager : ManagerClass, [NotNull] libPaths : list[string])
    {
      _manager = manager;
      _metadataReader = LibraryReferenceManager(manager, libPaths);
      _codeEmitter = CodeEmitter(this);
      _attributeCompiler = SreAttributeCompilerClass(manager);
    }

    [Accessor] _manager : ManagerClass;
    [Accessor] _metadataReader : LibraryReferenceManager;
    [Accessor] _codeEmitter : ICodeEmitter;

    public CreateAttributeCompiler() : AttributeCompilerClass
    {
      SreAttributeCompilerClass(_manager)
    }

    public CreateTypesManager() : TypesManager
    {
      SreTypesManager(_manager)
    }

    public CreateTypeBuilder(
      manager       : TypesManager,
      owner         : TypeBuilder,
      ast           : PT.TopDeclaration,
      namespaceNode : NamespaceTree.Node) : TypeBuilder
    {
      SreTypeBuilder(_hieararchy, owner, ast, namespaceNode)
    }

    public CreateMethodBuilder(owner : TypeBuilder, ast : PT.ClassMember.Function, isProperty : bool) : MethodBuilder
    {
      SreMethodBuilder(owner, ast, isProperty)
    }

    public CreateFieldBuilder(owner : TypeBuilder, ast : PT.ClassMember.Field) : FieldBuilder
    {
      SreFieldBuilder(owner, ast)
    }

    public CreatePropertyBuilder(owner : TypeBuilder, ast : PT.ClassMember.Property) : PropertyBuilder
    {
      SrePropertyBuilder(owner, ast)
    }

    public CreateEventBuilder(owner : TypeBuilder, ast : PT.ClassMember.Event) : EventBuilder
    {
      SreEventBuilder(owner, ast)
    }
  }
}