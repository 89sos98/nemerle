<?xml version='1.0' encoding='UTF-8' ?>
<!--
  Copyright (c) 2003 The University of Wroclaw.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
     3. The name of the University may not be used to endorse or promote
        products derived from this software without specific prior
        written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
  NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Examples of programs for the core Nemerle language</title>
  <section id="intro">
    <title>Introduction</title>
    <body>
      <p>
        We will present here a number of examples of core Nemerle language in
	such a way that they form a short tutorial for Nemerle users and later
	can be used as a reference for more advanced fetures.
	This is still under construction, at present you can only find a simple
	example to know how the code looks like.
      </p>
    </body>
  </section>
  <section id="example">
  <title>Simple Exmaple</title>
  <body>
<code>
type Lazy ['a]
  implements 
    I_Comparable_To[Lazy['a]],
    I_Runnable['a]
{
  (* There is no real-life reason it needs integer key, except
     that will put this stuff into tree. *)
  member key : int;
  member fnc : void -> 'a;

  method run () : 'a 
    implements I_Runnable.run 
  = 
    (this ! fnc) ();

  method compare_to (that : Lazy['a]) : int 
    implements I_Comparable_To.compare_to 
  =
    this ! key - that ! key;
}
</code>
        <p>
          Now we can create objects of type <tt>Lazy['a]</tt> and call
          its methods:
        </p>
<code>
let lazy_foo = Lazy 
               { 
                 fnc = fun () : string -> "foo";
                 key = 17;
               } in
let lazy_bar = Lazy
               { 
                 fnc = fun () : string -> "bar"; 
                 key = 37; 
               } in
(* Can use names from type... *)
let cmp_res = lazy_foo # Lazy.compare_to (lazy_bar) in
(* ...or from interface. *)
let dummy1 = lazy_bar # I_Runnable.run () in
(* Non-virtual call: *)
let cmp_res2 = Lazy.compare_to (lazy_foo, lazy_bar) in
...
</code>
</body>
</section>
</document>
