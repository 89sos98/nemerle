using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Peg;
using LRPEGCC;

namespace JSEngine {

    type Statements     = list[Statement];
    type Expressions    = list[Expression];
    type Strings        = list[string];

    [PegGrammar(
        start,
        grammar {
            any                         = ['\u0000'..'\uFFFF'];
            newLine                     = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
            singleLineComment           = "//" (!('\n' / '\r') any)* newLine?;
            delimitedComment            = "/*" (!"*/" any)* "*/";
            comment                     = singleLineComment / delimitedComment;
            spaces                      = (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
            letter                      = (['A'..'Z', 'a' .. 'z'] / '_' / '$');
            decimal_digit               = ['0'..'9'];
            hex_digit                   = ['0'..'9', 'A'..'F', 'a'..'f'];
            octal_digit                 = ['0'..'7'];

            SEMICOLON                   = ';' spaces;
            COLON                       = ':' spaces;
            DOT                         = '.' spaces;
            COMMA                       = ',' spaces;
            LPAREN                      = '(' spaces;
            RPAREN                      = ')' spaces;
            LBRACE                      = '[' spaces;
            RBRACE                      = ']' spaces;
            LFBRACE                     = '{' spaces;
            RFBRACE                     = '}' spaces;
            EQ                          = '=' spaces;
            QUEST                       = '?' spaces;

            VAR                         = "var" spaces;
            TRUE                        = "true" spaces;
            FALSE                       = "false" spaces;
            NULL                        = "null" spaces;
            FUNCTION                    = "function" spaces;
            THIS                        = "this" spaces;
            RETURN                      = "return" spaces;

            identifierValue             = letter (letter / decimal_digit)*;
            identifier      : string    = identifierValue spaces;
            identifiers     : Strings   = identifier (COMMA identifiers)?;

            decimalLiteral  : IntegerLiteral = decimal_digit+ spaces;
            hexLiteral      : IntegerLiteral = "0x" hex_digit+ spaces;
            octalLiteral    : IntegerLiteral = '0' octal_digit+ spaces;
            integerLiteral  : Literal   = hexLiteral / octalLiteral / decimalLiteral;

            trueLiteral     : BooleanLiteral = TRUE;
            falseLiteral    : BooleanLiteral = FALSE;
            boolLiteral     : Literal   = trueLiteral / falseLiteral;

            singleQuoteLiteral : StringLiteral = "'" (!"'" any)* "'" spaces;
            doubleQuoteLiteral : StringLiteral = "\"" (!"\"" any)* "\"" spaces;
            stringLiteral   : Literal   = singleQuoteLiteral / doubleQuoteLiteral;

            nullLiteral     : Literal   = NULL;

            literal : Literal           = integerLiteral / boolLiteral / stringLiteral / nullLiteral;

            infixOperator           : string    = ('+' / '-' / '*' / '/') spaces;
            prefixOperator          : string    = ("++" / "--" / '+' / '-') spaces;
            postfixOperator         : string    = ("++" / "--") spaces;

            literalExpression       : Expression = literal;
            thisExpression          : Expression = THIS;
            functionExpression      : Expression = FUNCTION LPAREN identifiers? RPAREN blockStatement;
            identifierExpression    : Expression = identifier;
            parenExpression         : Expression = LPAREN expression RPAREN;
            otherExpression         : Expression = literalExpression / thisExpression / functionExpression / identifierExpression / parenExpression;

            mayBeTernaryExpression  : Expression = otherExpression (QUEST expression COLON expression)*;
            mayBePostfixExpression  : Expression = mayBeTernaryExpression postfixOperator*;
            mayBePrefixExpression   : Expression = prefixOperator* mayBePostfixExpression;
            mayBeInfixExpression    : Expression = mayBePrefixExpression (infixOperator expression)*;
            mayBeIndexerExpression  : Expression = mayBeInfixExpression (LBRACE expressions? RBRACE)*;
            mayBeCallExpression     : Expression = mayBeIndexerExpression (LPAREN expressions? RPAREN)*;
            mayBeMemberExpression   : Expression = mayBeCallExpression (DOT mayBeMemberExpression)?;
            mayBeAssignExpression   : Expression = mayBeMemberExpression (EQ mayBeAssignExpression)?;

            expression              : Expression = mayBeAssignExpression;
            expressions             : Expressions = expression (COMMA expressions)?;

            emptyStatement      : Statement = SEMICOLON;
            blockStatement      : Statement = LFBRACE statements RFBRACE;
            varDeclStatement    : Statement = VAR identifier (EQ expression) ? SEMICOLON;
            funDeclStatement    : Statement = FUNCTION identifier LPAREN identifiers? RPAREN blockStatement;
            expressionStatement : Statement = expression SEMICOLON;
            returnStatement     : Statement = RETURN expression? SEMICOLON;

            statements          : Statements = (emptyStatement / blockStatement / varDeclStatement / funDeclStatement / expressionStatement /  returnStatement)*;

            start : Statements          = spaces statements !any;
        }
    )]
    public class JSParser {

        identifier(idValue : NToken, _ : NToken) : string {
            idValue.GetText()
        }

        identifiers(id : VToken[string], tail : option[NToken * VToken[list[string]]]) : list[string] {
            match(tail) {
                | Some((_, tail)) => id.Value :: tail.Value
                | _ => [id.Value]
            }
        }

        #region Literals

        #region integer literals

        decimalLiteral(lst : SCG.List[NToken], _ : NToken) : IntegerLiteral {
            def value = System.Text.StringBuilder();
            foreach(token in lst)
                _ = value.Append(token.GetText());
            IntegerLiteral.Decimal(value.ToString())
        }

        hexLiteral(head : NToken, tail : SCG.List[NToken], _ : NToken) : IntegerLiteral {
            def value = System.Text.StringBuilder(head.GetText());
            foreach(token in tail)
                _ = value.Append(token.GetText());
            IntegerLiteral.Hex(value.ToString())
        }

        octalLiteral(head : NToken, tail : SCG.List[NToken], _ : NToken) : IntegerLiteral {
            def value = System.Text.StringBuilder(head.GetText());
            foreach(token in tail)
                _ = value.Append(token.GetText());
            IntegerLiteral.Octal(value.ToString())
        }

        integerLiteral(x : VToken[IntegerLiteral]) : Literal {
            Literal.Integer(x.Value)
        }

        #endregion
        
        #region bool literals

        trueLiteral(_ : NToken) : BooleanLiteral {
            BooleanLiteral.True()
        }

        falseLiteral(_ : NToken) : BooleanLiteral {
            BooleanLiteral.False()
        }

        boolLiteral(value : VToken[BooleanLiteral]) : Literal {
            Literal.Boolean(value.Value)
        }

        #endregion

        #region string literals

        singleQuoteLiteral(_ : NToken, chars : SCG.List[NToken * NToken], _ : NToken, _ : NToken) : StringLiteral {
            def sb = Text.StringBuilder();
            foreach((_, c) in chars)
                _ = sb.Append(c.GetText());
            StringLiteral.SingleQuote(sb.ToString());
        }

        doubleQuoteLiteral(_ : NToken, chars : SCG.List[NToken * NToken], _ : NToken, _ : NToken) : StringLiteral {
            def sb = Text.StringBuilder();
            foreach((_, c) in chars)
                _ = sb.Append(c.GetText());
            StringLiteral.DoubleQuote(sb.ToString());
        }

        stringLiteral(x : VToken[StringLiteral]) : Literal {
            Literal.String(x.Value)
        }

        #endregion

        #region null literal

        nullLiteral(_ : NToken) : Literal {
            Literal.Null()
        }

        #endregion

        literal(x : VToken[Literal]) : Literal {
            x.Value
        }

        #endregion

        #region Operators

        infixOperator(op : NToken, _ : NToken) : string {
            op.GetText()
        }

        prefixOperator(op : NToken, _ : NToken) : string {
            op.GetText()
        }

        postfixOperator(op : NToken, _ : NToken) : string {
            op.GetText()
        }

        #endregion

        #region Expressions

        literalExpression(x : VToken[Literal]) : Expression {
            Expression.Literal(x.Value)
        }

        identifierExpression(x : VToken[string]) : Expression {
            Expression.Identifier(x.Value)
        }

        functionExpression(_ : NToken, _ : NToken, args : option[VToken[list[string]]], _ : NToken, stmts : VToken[Statement]) : Expression {
            def stmts = stmts.Value :> Statement.Block;
            match(args) {
                | Some(args) => Expression.Function(args.Value, stmts)
                | _ => Expression.Function([], stmts)
            }
        }

        thisExpression(_ : NToken) : Expression {
            Expression.This()
        }

        parenExpression(_ : NToken, e : VToken[Expression], _ : NToken) : Expression {
            e.Value
        }

        otherExpression(e : VToken[Expression]) : Expression {
            e.Value
        }

        mayBeTernaryExpression(x : VToken[Expression], tail : SCG.List[NToken * VToken[Expression] * NToken * VToken[Expression]]) : Expression {
            if(tail.Count > 0) {
                mutable result = x.Value;
                foreach((_, true_expr, _, false_expr) in tail)
                    result = Expression.Call(Expression.Operator("?:", OperatorKind.Ternary), [result, true_expr.Value, false_expr.Value]);
                result
            } else
                x.Value
        }

        mayBePostfixExpression(x : VToken[Expression], ops : SCG.List[VToken[string]]) : Expression {
            if(ops.Count > 0) {
                mutable result = x.Value;
                foreach(op in ops)
                    result = Expression.Call(Expression.Operator(op.Value, OperatorKind.Postfix), [result]);
                result
            } else
                x.Value
        }

        mayBePrefixExpression(ops : SCG.List[VToken[string]], x : VToken[Expression]) : Expression {
            if(ops.Count > 0) {
                mutable result = x.Value;
                foreach(op in ops.ToListRev())
                    result = Expression.Call(Expression.Operator(op.Value, OperatorKind.Prefix), [result]);
                result
            } else
                x.Value
        }

        mayBeInfixExpression(x : VToken[Expression], tail : SCG.List[VToken[string] * VToken[Expression]]) : Expression {
            if(tail.Count > 0) {
                mutable result = x.Value;
                foreach((op, y) in tail)
                    result = Expression.Call(Expression.Operator(op.Value, OperatorKind.Infix), [result, y.Value]);
                result
            } else
                x.Value
        }

        mayBeMemberExpression(e : VToken[Expression], member : option[NToken * VToken[Expression]]) : Expression {
            match(member) {
                | Some((_, member)) => Expression.Member(e.Value, member.Value)
                | _ => e.Value
            }
        }

        mayBeIndexerExpression(x : VToken[Expression], tail : SCG.List[NToken * option[VToken[list[Expression]]] * NToken]) : Expression {
            if(tail.Count > 0) {
                mutable result = x.Value;
                foreach((_, args, _) in tail)
                    result =
                        match(args) {
                            | Some(args) => Expression.Indexer(result, args.Value);
                            | _ => Expression.Indexer(result, []);
                        }
                result
            } else
                x.Value
        }

        mayBeCallExpression(x : VToken[Expression], tail : SCG.List[NToken * option[VToken[list[Expression]]] * NToken]) : Expression {
            if(tail.Count > 0) {
                mutable result = x.Value;
                foreach((_, args, _) in tail)
                    result =
                        match(args) {
                            | Some(args) => Expression.Call(result, args.Value);
                            | _ => Expression.Call(result, []);
                        }
                result
            } else
                x.Value
        }

        mayBeAssignExpression(x : VToken[Expression], from : option[NToken * VToken[Expression]]) : Expression {
            match(from) {
                | Some((_, from)) => Expression.Assign(x.Value, from.Value)
                | _ => x.Value
            }
        }

        expression(x : VToken[Expression]) : Expression {
            x.Value
        }

        expressions(head : VToken[Expression], tail : option[NToken * VToken[list[Expression]]]) : list[Expression] {
            match(tail) {
                | Some((_, tail)) => head.Value :: tail.Value
                | _ => [head.Value]
            }
        }

        #endregion

        #region Statements

        emptyStatement(_ : NToken) : Statement {
            Statement.Empty()
        }

        blockStatement(_ : NToken, stmts : VToken[list[Statement]], _ : NToken) : Statement {
            Statement.Block(stmts.Value)
        }

        varDeclStatement(_ : NToken, name : VToken[string], init : option[NToken * VToken[Expression]], _ : NToken) : Statement {
            match(init) {
                | Some((_, expr)) => Statement.VarDecl(name.Value, expr.Value)
                | _ => Statement.VarDecl(name.Value, null)
            }
        }

        funDeclStatement(_ : NToken, name : VToken[string], _ : NToken, args : option[VToken[list[string]]], _ : NToken, stmts : VToken[Statement]) : Statement {
            def stmts = stmts.Value :> Statement.Block;
            match(args) {
                | Some(args) => Statement.FunDecl(name.Value, args.Value, stmts)
                | _ => Statement.FunDecl(name.Value, [], stmts)
            }
        }

        expressionStatement(e : VToken[Expression], _ : NToken) : Statement {
            Statement.Expression(e.Value)
        }

        returnStatement(_ : NToken, value : option[VToken[Expression]], _ : NToken) : Statement {
            match(value) {
                | Some(value) => Statement.Return(value.Value)
                | _ => Statement.Return(null)
            }
        }

        statements(stmts : SCG.List[VToken[Statement]]) : list[Statement] {
            stmts.ToListRev().RevMap(_.Value)
        }

        #endregion

        start(_ : NToken, x : VToken[list[Statement]], _ : NToken) : list[Statement] {
            x.Value
        }

    }

}