using System.Data;


namespace AccessibilityCheckNotTooRestrictive
{
    internal class Foo {
        internal interface Bar {
        
        }  
    }
    public class Baz : Foo.Bar {
    }
}

class RecursiveAccessiblity {
  private enum A {
    | B
    | C
  }
  protected class N {
    public foo () : N { null }
  }
}


class A : DataRow {

  this (builder : DataRowBuilder) {
    base (builder);
  }
}

public class aspx : System.Web.UI.Page, System.Web.SessionState.IRequiresSessionState 
{
  // overriding protected (and even special name) property
  protected override AutoHandlers : int {
    get { 0  }
    set { ignore (value)  }
  }
}

namespace Bug594 {
class Ax {
  class Bx : Ax {
    x : Bx;
  }
}
}

namespace Bug595 {
  class Ax {
    protected x : int = 6;
  }
  class Bx:Ax {
    class Cx {
      public foo(b : Bx) : void { _ = b.x; }
    }
  }
}

namespace UninitializedSubtyping {
  public class Test
  {
          public class Foo
          {
                 protected interface IBar {}
          }

          interface G [T] { }

          private class Bar : Foo, G [Foo.IBar]
          {
          }

          private class Bar1 [A] : Foo where A : Foo.IBar { }


          public static Main () : void {}
  }
}


// REFERENCE: System.Data
// REFERENCE: System.Web
