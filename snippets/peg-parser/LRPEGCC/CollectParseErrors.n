using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Macros;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace LRPEGCC
{
  macro CollectParseErrors(ast)
  {
    def typer = ImplicitCTX();

    def makeWalker(x)
    {
      def pegLocatedType = FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Peg.Located", 0), []);
      def typeHandler(ty : FixedType, var : PT.PExpr) : option[PT.PExpr]
      {
        match(ty)
        {
          | Class(ti, _) when ty.TryRequire(pegLocatedType) && ti.Name.StartsWith("Error") =>
            Some(<[ buffer.Add($var); ]>);
          | _ => None()
        }
      }
      //assert2(false);
      def typeWalker = TypeWalker();
      <[
        def buffer = System.Collections.Generic.List.[Nemerle.Peg.Located]();
        $(typeWalker.Run(x, typeHandler));
        buffer
      ]>
    }

    def getDefaultResult()
    {
      <[ System.Collections.Generic.List.[Nemerle.Peg.Located]() ]>
    }

    if(typer.Manager.IsIntelliSenseMode)
      getDefaultResult()
    else
    {
      def tAst = typer.TypeExpr(ast);
      match(tAst.Type.Hint)
      {
        | Some(_) => makeWalker(tAst)
        | _ =>
          typer.DelayMacro(lastChance =>
            match(tAst.Type.Hint)
            {
              | Some(_) =>
                Some(makeWalker(tAst))
              | _ when lastChance =>
                Some(getDefaultResult())
              | _ =>
                None()
            })
      }
    }
  }
}