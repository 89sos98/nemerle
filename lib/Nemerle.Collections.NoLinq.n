/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/* TYPE DEFINITION */

using Nemerle.Collections.NList;
using Nemerle.Imperative;

using System.Diagnostics;

using NCL = Nemerle.Collections.NList;
using SCG = System.Collections.Generic;

namespace Nemerle.Collections.NoLinq // Nemerle.Utility.NoLinq
{
  [DebuggerNonUserCode]
  public module NCollectionsExtensionsNoLinq
  {
    public ToList[T](this source : array[T]) : list[T]
    {
      Nemerle.Collections.NCollectionsExtensions.ToNList(source)
    }

    public ToArray[T](this source : SCG.ICollection[T]) : array[T]
    {
      Nemerle.Collections.NCollectionsExtensions.AsArray(source)
    }

    public ToArray[T](this source : SCG.IEnumerable[T]) : array[T]
    {
      Nemerle.Collections.NCollectionsExtensions.AsArray(source)
    }
    
    public static Count[T](this seq : SCG.IEnumerable[T]) : int
    {
        | lst is array[T]     => lst.Length
        | lst is list[T]      => lst.Length
        | lst is SCG.List[T]  => lst.Count
        | lst is SCG.IList[T] => lst.Count
        | _ => 
          mutable i = 0;
          foreach (_x in seq)
            i++;
          i
    }

    public static Last[T](this source : SCG.IList[T]) : T
    {
      source[source.Count - 1]
    }

    public static Last[T](this source : array[T]) : T
    {
      source[source.Length - 1]
    }

    public static Last[T](this source : SCG.IEnumerable[T]) : T
    {
      mutable exists = false;
      mutable cur;

      foreach (e in source)
      {
        exists = true;
        cur = e;
      }

      if (exists) cur
      else        throw System.IndexOutOfRangeException();
    }

    public static First[T](this source : SCG.IList[T]) : T
    {
      source[0]
    }

    public static First[T](this source : array[T]) : T
    {
      source[0]
    }

    public static First[T](this source : SCG.IEnumerable[T]) : T
    {
      foreach (e in source)
        return e;

      throw System.IndexOutOfRangeException();
    }
  } // end of NCollectionsExtensionsNoLinq module
} // end if Nemerle.Collections.NoLinq namespace

