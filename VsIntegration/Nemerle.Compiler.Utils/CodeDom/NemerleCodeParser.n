using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections; 
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System.CodeDom.CodeBinaryOperatorType;

using SCG = System.Collections.Generic;

namespace Nemerle.Compiler.Utils
{
  // now CodeDomParser only parses files from Project.CompileUnits
  // it is not thread-safe at the moment!

  //TODO: VladD2: Убрать наследование от ManagerClass. Вместо этого использовать проект к которому подлючен разбираемый файл.

  /// <summary>
  /// Provides an implementation of the <see cref="T:System.CodeDom.Compiler.ICodeParser"/> interface.
  /// </summary>
  public class NemerleCodeParser : NemerleCodeParserBase, ICodeParser
  {
    class Compiler : ManagerClass
    {
      public this ()
      {
        base (CompilationOptions());
        InitCompiler ();
        LoadExternalLibraries ();
      }
    }
    
    /// <summary>
    /// Initializes a new instance of the <see cref="T:Nemerle.Compiler.NemerleCodeParser"/> class.
    /// </summary>
    public this ()
    {
      _manager = Compiler();
    }

    // TODO: do we need to make it type-safe
    protected mutable _currentMethod : MethodBuilder;
    
    protected mutable _compilerInit : bool;

    /// <summary>
    /// Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"/>
    ///.</summary>
    /// <param name="codeStream">A <see cref="T:System.IO.TextReader"/>
    /// that is used to read the code to be parsed.</param>
    /// <returns>
    /// A <see cref="T:System.CodeDom.CodeCompileUnit"/> containing the code
    /// model produced from parsing the code.
    /// </returns>
    public Parse(codeStream : TextReader) : CodeCompileUnit
    {
      def oldMan   = ManagerClass.Instance;
      def topDecls = 
        try
        {
          _manager.ParsingPipeline(LexerString(_manager, codeStream.ReadToEnd(), Location.Default))
        }
        finally { ManagerClass.Instance = oldMan; };

      def unit = CodeCompileUnit();

      mutable lastNamespace;
      mutable codeDomNamespace;

      def switchToNamespace(decl : TopDeclaration)
      {
        unless (decl.PName.context.CurrentNamespace.Equals(lastNamespace)) //FixMe: не надо исползовать PName он может быть пуст!
        {
          lastNamespace = decl.PName.context.CurrentNamespace;
          codeDomNamespace = ToCodeNamespace(decl.PName.context.CurrentNamespace);
          _ = unit.Namespaces.Add(codeDomNamespace);
        }
      }

      foreach (decl in topDecls)
      {
        | TopDeclaration.Class as cls =>

          switchToNamespace(cls);
          _ = codeDomNamespace.Types.Add(ToCodeTypeDeclaration(cls));

        | TopDeclaration.Interface as ifs =>
          
          switchToNamespace(ifs);
          _ = codeDomNamespace.Types.Add(ToCodeTypeDeclaration(ifs));
          
        | TopDeclaration.Enum as enm =>
        
          switchToNamespace(enm);
          _ = codeDomNamespace.Types.Add(ToCodeTypeDeclaration(enm));
        
        | TopDeclaration.Variant as vrt =>
        
          switchToNamespace(vrt);
          _ = codeDomNamespace.Types.Add(ToCodeTypeDeclaration(vrt));
        
        | TopDeclaration.VariantOption as vrto =>
        
          switchToNamespace(vrto);
          _ = codeDomNamespace.Types.Add(ToCodeTypeDeclaration(vrto));
          
        | TopDeclaration.Delegate as del =>
          
          //there is no need to switch to namespace 
          switchToNamespace(del);       
          _ = codeDomNamespace.Types.Add(ToCodeTypeDelegate(del));
          
        | _ =>
        throw NotSupportedException($"$decl is not supported");
      }

      unit;
    }    
  }
}
