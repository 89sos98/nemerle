using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public sealed class DocumentNemerleSource : ISource, IDisposable {

        public this([NotNull] source : Source, [NotNull] document : IDocument) {
            this.source = source;
            this.document = document;
            this.document.DocumentAboutToBeChanged += OnDocumentAboutToBeChanged;
            this.document.DocumentChanged += OnDocumentChanged;
        }

        source : Source;

        [Accessor] document : IDocument;

        [Accessor] mutable current_version : int = 0;

        public CompileUnit : CompileUnit {
            get;
            set;
        }

        public FileIndex : int {
            get { source.FileIndex }
        }

        public LineCount : int {
            get { Invoke(fun() { document.TotalNumberOfLines }) }
        }

        public RelocationRequestsQueue : SCG.List[RelocationRequest] {
            get { null }
        }

        public LockWrite() : void { }

        public UnlockWrite() : void { }

        public LockReadWrite() : void { }

        public UnlocReadkWrite() : void { }

        public GetTextCurrentVersionAndFileIndex() : string * int * int {
            LockWrite();
            try {
                (GetText(), CurrentVersion, FileIndex)
            } finally {
                UnlockWrite();
            }
        }

        public SetRegions(_regions : SCG.IList[RegionInfo], _sourceVersion : int) : void { }

        public SetTopDeclarations(_topDeclarations : array[TopDeclaration]) : void { }

        public GetText() : string {
            Invoke(fun() { document.TextContent })
        }

        public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string {
            Invoke(fun() {
                def start = document.PositionToOffset(TextLocation(colStart - 1, lineStart - 1));
                def end   = document.PositionToOffset(TextLocation(colEnd - 1,   lineEnd - 1));
                document.GetText(start, end - start)
            })
        }

        public GetRegion(location : Location) : string {
            GetRegion(location.Line, location.Column, location.EndLine, location.EndColumn)
        }

        public GetLine(line : int) : string {
            Invoke(fun() {
                def segment = document.GetLineSegment(line);
                document.GetText(segment)
            })
        }

        public GetPositionOfLineIndex(line : int, col : int) : int {
            Invoke(fun() {
                document.PositionToOffset(TextLocation(col - 1, line - 1))
            })
        }

        public GetLineIndexOfPosition(pos : int) : int * int {
            Invoke(fun() {
                def loc = document.OffsetToPosition(pos);
                (loc.Line + 1, loc.Column + 1)
            })
        }

        mutable old_end_loc : TextLocation;
        mutable old_end_offset : int;
        mutable old_text_length : int;

        private OnDocumentAboutToBeChanged(_ : object, e : DocumentEventArgs) : void {
            old_text_length = document.TextLength;
            old_end_offset = e.Offset + if(e.Length > 0) e.Length else 0;
            old_end_loc = document.OffsetToPosition(old_end_offset);
        }

        private OnDocumentChanged(_ : object, e : DocumentEventArgs) : void {
            current_version += 1;

            def start_loc = document.OffsetToPosition(e.Offset);

            def new_text_length = document.TextLength;
            def new_text_offset = Math.Max(0, Math.Min(new_text_length, old_end_offset + (new_text_length - old_text_length)));
            def new_end_loc = document.OffsetToPosition(new_text_offset);

            source.UpdateCompileUnit(
                new_end_loc.Line + 1, new_end_loc.Column + 1,
                old_end_loc.Line + 1, old_end_loc.Column + 1,
                start_loc.Line + 1, start_loc.Column + 1);
        }

        #region Disposable

        public Dispose() : void {
            document.DocumentAboutToBeChanged -= OnDocumentAboutToBeChanged;
            document.DocumentChanged -= OnDocumentChanged;
        }

        #endregion

        #region Utils

        private static Invoke[T](f : void -> T) : T {
            if(WorkbenchSingleton.InvokeRequired)
                WorkbenchSingleton.SafeThreadFunction(f)
            else
                f()
        }

        #endregion

    }

}