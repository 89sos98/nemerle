// Copyright (c) 2003-2005 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using System;
using System.IO;
using antlr;
using Nemerle.Utility;

namespace Nemerle.CSharp
{
  public class CMain
  {
        public static Main() : void
        {
	    mutable files = [];
	    
	    def make_conversion (in_file, out_file)
	    {
		Emit.Initialize (out_file);

		ExtendedToken.ClearWhitespaces ();
              
		def lexer = CSharpLexer (FileStream (in_file, FileMode.Open, FileAccess.Read));
		lexer.setTokenObjectClass("Nemerle.CSharp.ExtendedToken");
              
		def parser = CSharpParser (lexer);
             
		parser.compilation_unit ();
              
		Emit.End ();
	    }
	    
	    def print_version () 
	    {
		System.Console.Error.Write ("C# to Nemerle translator (cs2n) version 0.2.10.99 (SVN)\n"
					    "(c) 2003-2005 University of Wroclaw,"
					    " All rights reserved.\n");
		System.Environment.Exit (0);
	    };
	    
	    mutable help_opts = [];        
	    def print_help () {
		System.Console.WriteLine (Getopt.Usage (help_opts));
		System.Environment.Exit (0);
	    };
	    
	    def opts = Options.GetCommonOptions () + [
		Getopt.CliOption.Flag (name = "-version",
                     aliases = ["-V"],
                     help = "Output version information and exit",
                     handler = print_version),
		Getopt.CliOption.Flag (name = "-help",
                     aliases = ["-h"],
                     help = "Display this usage message and exit",
                     handler = print_help),
		Getopt.CliOption.NonOption (name = "",
                          help = "Specify file to compile",
                          handler = fun (s) { files = s :: files })
	    ];	    
	    help_opts = opts;

	    Getopt.Parse (opts);

	    match (files) 
	    {
		| [] =>
		    Getopt.Error ("need one file to translate\n" + Getopt.Usage (opts))
		| [file] =>
		    match (Options.OutputFileName)
		    {
			| None =>
			    if(file.EndsWith(".cs"))
				make_conversion ( file, file.Substring(0,file.Length - 2) + "n" );
			    else
				make_conversion ( file, file + ".n" );
			| Some (s) =>
			    make_conversion ( file, s);
		    }
		| _ =>
		    Getopt.Error ("need one file to translate\n" + Getopt.Usage (opts))
	    }          
	}
    }
}
