using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;

namespace Calculator
{
  type LoopTokens = NToken * int;
  
  [Record] public class ParserFatalError : Exception
  {
    public Pos     : int;
  }
  
  public class FakeGrammar { }
  
  /// <summary>
  /// Description of CalcParser.
  /// </summary>  
  [PegGrammar(start,
  grammar
  {
    //using Calculator.FakeGrammar;
    //using A = Calculator.FakeGrammar;
    //[Extensible(aaa)]
    //xxx;
    any                   = ['\u0000'..'\uFFFF'];
    digit                 = ['0'..'9']+;
    spaces : void         = ' '*;

    [Extends(simplExpr)]
    num                   : int = digit spaces;

    [Extends(simplExpr)]
    unaryMinus            : int = '-' spaces simplExpr;

    [Extends(simplExpr)]
    parenthesesExpr       : int = '(' spaces sumOrSub ')' spaces;

    //[Extends(simplExpr), Error]
    //parenthesesExprError  : int = '(' spaces sumOrSub (&any / !any);

    [Extensible(simplExprAmbiguityResolve)]
    simplExpr             : int;

    mulOrDiv              : int = simplExpr (('*' / '/') spaces simplExpr)*;
    sumOrSub              : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    start                 : int = spaces sumOrSub !any;
  })]
  public class CalcParser
  {
//Requred for parser --------------------------------------------------------------------------------------------    
    private num(digit : NToken) : int
    {
      int.Parse(GetText(digit))
    }

    private unaryMinus(_ : NToken, se : int) : int
    {
      -se
    }

    private parenthesesExpr(_ : NToken, se : int, _ : NToken) : int
    {
      se
    }

    private parenthesesExprError(_ : NToken, _ : int) : int
    {
      throw ParserFatalError("Ожидается закрывающая скобка или '+', '-', '*', '/' за которым следует число или выражение", this.MaxRollbackPos);
    }

    private inputError(tok : NToken) : int
    {
      throw ParserFatalError("Ожидается '+', '-', '*', '/' за которым следует число или выражение", tok.StartPos);
    }
    

    private simplExprError(tok : NToken) : int
    {
      throw ParserFatalError("Ожидается число или выражение в скобках", tok.StartPos);
    }

    private start(se : int) : int
    {
      se
    }

    private mulOrDiv(se : int, lst : List[LoopTokens]) : int
    {
      DoOpHelper(se, lst)
    }

    private sumOrSub(se : int, lst : List[LoopTokens]) : int
    {
      DoOpHelper(se, lst)
    }

//End requred for parser --------------------------------------------------------------------------------------------    

    private DoOpHelper(se : int, lst : List[LoopTokens]) : int
    {
      def doOp(x : int, y : int, op : string) : int
      {
        match (op)
        {
          | "*" => x * y
          | "/" => x / y
          | "+" => x + y
          | "-" => x - y
          | _     => assert(false);
        }
      }

      mutable r = se;

      foreach ((opTok, secondTok) in lst)
        r = doOp(r, secondTok, GetText(opTok));

      r
    }
  }
}
