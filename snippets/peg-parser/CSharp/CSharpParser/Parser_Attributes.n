using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    //attributeArguments  : FunctionArgumentList  = "("s argumentList? ")"s;
    attributeArguments( _lparen : NToken, _ : NToken,
                        args    : option[VToken[list[FunctionArgument]]],
                        _rparen : NToken, _ : NToken) : list[FunctionArgument]
    {
      args.WithDefault([])
    }

    //attribute           : CustomAttributeInfo   = qualifiedIdentifier attributeArguments?;
    attribute(id : VToken[Expr], args : option[VToken[list[FunctionArgument]]]) : Location * Expr * list[FunctionArgument]
    {
      (GetLocation(_), id.Value, args.WithDefault([]))
    }

    //attributeList       : CustomAttributeInfoList   = attribute (","s attribute)*;
    attributeList(head : VToken[Location * Expr * list[FunctionArgument]],
                  tail : SCG.List[NToken * NToken * VToken[Location * Expr * list[FunctionArgument]]]) : list[Location * Expr * list[FunctionArgument]]
    {
      head.Cons(tail)
    }

    //globalAttributeTarget           : CustomAttributeTarget = ("assembly" / "module")S;
    globalAttributeTarget(keyword : NToken, _ : NToken) : CustomAttributeTarget
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "assembly"  => CustomAttributeTarget.Assembly(loc)
        | "module"    => CustomAttributeTarget.Module(loc)
        | _           => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //globalAttributeTargetSpecifier  : CustomAttributeTarget = globalAttributeTarget ":"s;
    globalAttributeTargetSpecifier(target : VToken[CustomAttributeTarget], _colon : NToken, _ : NToken) : CustomAttributeTarget
    {
      target.Value
    }

    //globalAttributeSection          : CustomAttributeList   = "["s globalAttributeTargetSpecifier attributeList (","s)? "]"s;
    globalAttributeSection( _lparen : NToken, _ : NToken,
                            target  : VToken[CustomAttributeTarget],
                            attrs   : VToken[list[Location * Expr * list[FunctionArgument]]],
                            _comma  : option[NToken * NToken],
                            _rparen : NToken, _ : NToken) : list[CustomAttribute]
    {
      attrs.Value.Map((loc, id, args) => CustomAttribute(loc, id, target.Value, args))
    }

    //globalAttributes                : CustomAttributeList   = globalAttributeSection*;
    globalAttributes(attrs : SCG.List[VToken[list[CustomAttribute]]]) : list[CustomAttribute]
    {
      attrs.Values().Flatten()
    }

    //attributeTarget           : CustomAttributeTarget = ("field" / "event" / "method" / "param" / "property" / "return" / "type")S;
    attributeTarget(keyword : NToken, _ : NToken) : CustomAttributeTarget
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "field"     => CustomAttributeTarget.Field(loc)
        | "event"     => CustomAttributeTarget.Event(loc)
        | "method"    => CustomAttributeTarget.Method(loc)
        | "param"     => CustomAttributeTarget.Param(loc)
        | "property"  => CustomAttributeTarget.Property(loc)
        | "return"    => CustomAttributeTarget.Return(loc)
        | "type"      => CustomAttributeTarget.Type(loc)
        | _           => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //attributeTargetSpecifier  : CustomAttributeTarget = attributeTarget ":"s;
    attributeTargetSpecifier(target : VToken[CustomAttributeTarget], _colon : NToken, _ : NToken) : CustomAttributeTarget
    {
      target.Value
    }

    //attributeSection          : CustomAttributeList   = "["s attributeTargetSpecifier? attributeList (","s)? "]"s;
    attributeSection( _lparen : NToken, _ : NToken,
                      target  : option[VToken[CustomAttributeTarget]],
                      attrs   : VToken[list[Location * Expr * list[FunctionArgument]]],
                      _comma  : option[NToken * NToken],
                      _rparen : NToken, _ : NToken) : list[CustomAttribute]
    {
      attrs.Value.Map((loc, id, args) => CustomAttribute(loc, id, target.WithDefault(CustomAttributeTarget.Default(loc)), args))
    }

    //attributes                : CustomAttributeList   = attributeSection+;
    attributes(attrs : SCG.List[VToken[list[CustomAttribute]]]) : list[CustomAttribute]
    {
      attrs.Values().Flatten()
    }
  }
}