using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    MergeExternAliases(_ : list[CS.ExternAlias]) : void
    {
      | [] =>
        ();
      | alias :: _ =>
        Message.Error(alias.NLocation(), "extern alises not supported");
    }

    MergeGlobalAttributes(attributes : list[CS.CustomAttribute]) : void
    {
      foreach(atb in attributes)
        ();
    }

    MergeUsingDirectives(usingDirectives : list[CS.UsingDirective]) : void
    {
      foreach(u in usingDirectives) {
        | Namespace(ns) =>
          currentEnv = currentEnv.AddOpenNamespace(QualifiedIdentifier(ns, false), u.NLocation());

        | Alias(alias, name) =>
          currentEnv = currentEnv.AddNamespaceAlias(alias.Id, QualifiedIdentifier(name, false), u.NLocation());
      }
    }

    MergeNamespaceNodes(nodes : list[CS.NamespaceNode]) : void
    {
      foreach(n in nodes) {
        | Namespace(name, externs, usings, nodes) =>
          def previousEnv = currentEnv;
          currentEnv = currentEnv.EnterIntoNamespace(QualifiedIdentifier(name, false));
          MergeExternAliases(externs);
          MergeUsingDirectives(usings);
          MergeNamespaceNodes(nodes);
          currentEnv = previousEnv;

        | TypeDeclaration(decl) =>
          MergeTypeDeclaration(decl);
      }
    }
  }
}