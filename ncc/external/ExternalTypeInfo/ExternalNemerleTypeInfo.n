/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    private class ExternalNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl          : TypeDeclaration;
      constant_object : IField;

      public this (lib : LibraryReference, h : System.Type, ns_node : NamespaceTree.Node)
      {
        base (lib, h, ns_node);
        
        //when (h.FullName == "Nemerle.Compiler.Parsetree.PExpr")
        //{
        //  System.Diagnostics.Debug.Assert(false);
        //}

        if (system_type.IsDefined (SystemTypeCache.VariantAttribute, false))
        {
          def names = lib.get_variant_options (system_type);
          def get_opt (name : string)
          {
            match (lib.LibRefManager.NameTree.LookupExactType (NString.Split (name, array ['.', '+'])))
            {
              | Some (tc) => tc
              | None =>
                System.Diagnostics.Debug.Assert(false);
                Util.ice ("cannot find variant option named " + name)
                
            }
          }

          tydecl = TypeDeclaration.Variant (List.Map (names, get_opt));
        } 
        else if (system_type.IsDefined (SystemTypeCache.VariantOptionAttribute, false))
          tydecl = TypeDeclaration.VariantOption();
        else if (system_type.IsDefined (SystemTypeCache.ConstantVariantOptionAttribute, false))
        {
          tydecl = TypeDeclaration.VariantOption ();
          
          match (LookupMember ("_N_constant_object"))
          {
            | [fld] => constant_object = fld :> IField
            | _     => Util.ice ("cannot find _N_constant_object")
          }
        } 
        else if (system_type.IsDefined (SystemTypeCache.TypeAliasAttribute, false))
        {
          def type_string = get_string_attribute(system_type, SystemTypeCache.TypeAliasAttribute, 
                                                 "GetAliasedType");
          tydecl = TypeDeclaration.Alias(TyCodec.DecodeType (lib, tenv, type_string))
        } 
        else if (system_type.IsInterface)
          tydecl = TypeDeclaration.Interface()
        else if (system_type.IsEnum)
          tydecl = TypeDeclaration.Enum()
        else
          tydecl = TypeDeclaration.Class();

        decode_extension_patterns();
      }

      public override GetTydecl()         : TypeDeclaration { tydecl }
      public override GetConstantObject() : IField          { constant_object }

      decode_extension_patterns () : void
      {
        def t = SystemTypeCache.ExtensionPatternEncodingAttribute;
        def attrs = system_type.GetCustomAttributes (t, false);

        when (attrs.Length > 0)
        {
          def get_ids  = t.GetMethod ("get_Identifiers");
          def get_pat  = t.GetMethod ("get_Pattern");
          def get_name = t.GetMethod ("get_Name");

          foreach (attr_obj in attrs)
          {
            def ids = get_ids.Invoke (attr_obj, null) :> string;
            def pat = get_pat.Invoke (attr_obj, null) :> string;
            def name = get_name.Invoke (attr_obj, null) :> string;
            def ext = ExtensionPattern (parent      = this,
                                        identifiers = NString.Split (ids, [',']),
                                        pattern     = MainParser.ParseExpr (Manager.CoreEnv, pat),
                                        name        = name);
                                        
            AddExtensionPattern (ext);
          }
        }
      }
    }
  }
} /* namespace */
