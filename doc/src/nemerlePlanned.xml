<?xml version='1.0' encoding='UTF-8' ?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Nemerle Planned Features</title>
  <section id="intro">
    <title>Intro</title>    
    <body>
      <p>
        This is a description of what is planned to appear in the full version
	of Nemerle language. Several things are still to be designed but we are
	sure about the general direction we want to take.
      </p>
    </body>
  </section>
  <section id="syntaxExt">
    <title>Syntax Extensions</title>
      <body>
        <p>
          Our syntax extensions will share concepts with camlp4,
          macro preprocessors (like CPP and M4), C++ templates and
          various source-to-source translators, that can for example
          create XML i/o routines or SQL tables for types described in
          source language.
        </p>
        <p>
          At basic level it shouldn't be difficult to program such
          language extensions. However I personally wouldn't be surprised
          if language extensions were itself Turing-complete.
        </p>
    </body>
  </section>
  <section id="commenting">
    <title>Commenting Convention</title>
      <body>
        <p>
	  We are planning to design a convention for commenting code.
	  It should be possible to generate documentation directly from
	  code comments and to access specific parts of code inside the
	  comments. We will try to incorporate ideas from javadoc, monodoc
	  and ocamldoc to make code documenting efficient.
	</p>
      </body>
  </section>
  <section id="stdlib">
    <title>Standard Library</title>
      <body>
        <p>
	  Adjectant to libraries designed for .NET we will build a library of
	  functions direct in Nemerle. This library will be well commented and
	  described. Using our commenting convention should be enough to allow
	  users to search through the library for specific algorithm, data
	  structures, methods and types. The library will also contain
	  assertions about implemented function, later possibly with proofs and
	  well described examples. We will encourage users to add their code
	  to the library but the code will be inspected and tested before.
	</p>
      </body>
  </section>
  <section id="tools">
    <title>Logic Tools for Nemerle</title>
      <body>
        <p>
	  We are planning to design a set of tools to facilitate the analysis
	  of programs written in Nemerle. We want to include formal
	  reasoning tools and statistical anaysis and profiling programs.
	  We will also make semi automated testing tool based on similar
	  random testing tools written for Haskell.
	</p>
      </body>
  </section>
</document>