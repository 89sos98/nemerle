/* ------------------------------------------------------------------------- */
/*   Rachunki za FIT                                                         */
/* ------------------------------------------------------------------------- */

using System;

class Odbiorca
{
  private mutable _nazwa_i_adres : string;
  private mutable _nip : string;

  public this (nazwa_adres_i_nip : string) 
  {
    def nip_pos = nazwa_adres_i_nip.IndexOf (", NIP");
    
    assert (nip_pos != -1, "nazwa_adres_i_nip");

    _nazwa_i_adres <- (nazwa_adres_i_nip.Substring (0, nip_pos)).Trim ();
    _nip <- (nazwa_adres_i_nip.Substring (nip_pos + 6)).Trim ();
  }
  
  public NazwaOrazAdres () : string { _nazwa_i_adres }
  public Nip () : string { _nip }
  
  private ZweryfikujNip () : bool
  {
    // FIXME: add NIP number verification
    true
  }
}


class Rachunek
{
  private static mutable _id : int;
  private mutable _odbiorca : Odbiorca;
  private mutable _uczestnik : string;
  private mutable _cena : string;
  private mutable _cena_slownie : string;
  
  public static this () 
  {
    _id <- 0;
  }
  
  public this (uczestnik : string, cena : string, odbiorca : string)
  {
    _uczestnik <- uczestnik;
    _cena <- cena;
    _odbiorca <- Odbiorca (odbiorca);
    
    _cena_slownie <- 
      match (cena) {
        | "185" => "sto osiemdziesiaaat pieccc / 00"
        | "260" => "dwiessscie szessscccdziesiaaat / 00"
        | "325" => "trzysta dwadziessscia pieeeccc / 00"
        | "330" => "trzysta trzydziesssci / 00"
        | "395" => "trzysta dziewieeecccdziesiaaat pieeeccc / 00"
        | _ => 
          printf ("bomba i panika, jak zapisać słownie %s?\n", cena); 
          "bomba/panika"
      }
  }
    
  public ToLaTeX (kopia : bool) : string
  {
    unless (kopia) { _id <- _id + 1 };

    def kopia_czy_oryginal =
      if (kopia) @"{\bf \sout{ORYGINALLL} / KOPIA}" else @"{\bf ORYGINALLL / \sout{KOPIA}}";

    @"    
      \begin{multicols}{2}
        \begin{tabular}{c}
          \hline
          Polskie Stowarzyszenie \\
          dla Maszyn Liczaaacych we Wroclllawiu \\
          ul. Przesmyckiego 20 \\
          51-151 Wroclllaw \\
          REGON 930724005 \\
          \hline 
        \end{tabular}

        \Large \bf RACHUNEK NR " + _id.ToString () + @"/FIT/03}
        {\small Sprzedawca nie jest plllatnikiem podatku VAT.}
        
        \vspace{0.5cm}
        
        " + kopia_czy_oryginal + @"
                
      \end{multicols}
      
      \vspace{1 cm}
            
      Rachunek wystawiono we Wroclllawiu dnia 13 XII 2003 r. dla: " + 
      _odbiorca.NazwaOrazAdres () + @", NIP: " + _odbiorca.Nip () + @"
      
      \vspace{1 cm}

      \begin{tabular}{|p{7cm}|l|c|r|r|}
        \hline
        {\bf Nazwa towaru lub uslllugi} & {\bf J.m.} & {\bf Ilosssccc} & {\bf Cena} & {\bf Wartosssccc} \\
        \hline \hline
        Oplllata konferencyjna za udzialll w~XVII Forum Informatyki Teoretycznej: " +
        _uczestnik + @" & & 1 & " + _cena + @" zlll 00 gr & " + 
        _cena + @" zlll 00 gr \\ \hline \hline
        & & & RAZEM & " + _cena + @" zlll 00 gr \\ \hline
      \end{tabular}
      
      \vspace{1 cm} 
        
      Forma plllatnosssci: {\it przelew}
      
      Slllownie zlll/gr: {\it " + _cena_slownie + @"}
      
      \vspace{2 cm}

      \begin{multicols}{2}
        \begin{tabular}{c}
          \hline
          podpis kupujaaacego \\
          \hspace{7 cm} \\
        \end{tabular}
              
        \begin{tabular}{c}
          \hline
          podpis i pieczeeeccc sprzedawcy \\
          \hspace{7 cm} \\
        \end{tabular}
      \end{multicols}
            
      \newpage
    "
  }
}


class RachunkiZaFit
{
  public static LaTeXHeader () : string 
  {
    @"
      \documentclass[draft,12pt]{article}
      \usepackage[latin2]{inputenc}
      \usepackage{fancyvrb}
      \usepackage{fancyhdr}
      \usepackage{hcolor}
      \usepackage{color}
      \usepackage{polski}
      \usepackage{lscape}
      \usepackage{multicol}
      \usepackage{ulem}
      \usepackage[a4paper]{geometry}

      \DefineVerbatimEnvironment
        {Code}{Verbatim}
        {frame=lines,numbers=left,xleftmargin=15mm,%
        xrightmargin=10mm,framesep=2mm,framerule=1mm,%
        rulecolor=\\color[rgb]{0.8,0.8,0.8}}

      \begin{document}
      \begin{landscape}

      \pagestyle{fancy}
      \lhead{\\small XVII Forum Informatyki Teoretycznej, Karpacz 2003}
      \rhead{}
      \cfoot{}
      
    "
  }

  public static LaTeXFooter () : string
  {
    @"
      \end{landscape}
      \end{document}
    "
  }
  
  public static Main () : void
  {
    printf ("Rachunki za FIT...\n");
    
    def sr = IO.StreamReader ("rachunki-za-fit.csv");
    def sw = IO.StreamWriter ("rachunki/rachunki-za-fit.tex", false, 
                              (Text.UnicodeEncoding () :> Text.Encoding), 2048);

    mutable rachunki <- [];

    // read all the bill information from the CSV file...
    while (sr.Peek () != -1) {

      // read a line and split it along the tab characters
      def line = sr.ReadLine ();
      def split = line.Split (("\t").ToCharArray ());
  
      when ((split :> Array).Length != 4) { throw ArgumentException ("line") };
      
      // the text fields are quoted using the " character
      def unquote (token : string) : string {      
        if (token [0] == '"' && token [token.Length - 1] == '"')
          token.Substring (1, token.Length - 2)
        else
          token
      };
            
      // the format of the bills file is: [NAME; INSTITUTION; PRICE; INSTITUTION_ADDRESS_NIP]
      rachunki <- Rachunek (unquote (split [0]), split [2], unquote (split [3]))  :: rachunki;
    };
        
    // process the bills and save them in the output format
    def iter (rachunki : list <Rachunek>) : void {    
      match (rachunki) {
        | [] => ()
        | rachunek :: reszta =>
          sw.Write (rachunek.ToLaTeX (false));
          sw.Write (rachunek.ToLaTeX (true));
          iter (reszta)
      }
    }; 

    sw.Write (LaTeXHeader ());
    iter (rachunki);   
    sw.Write (LaTeXFooter ());
    
    sw.Close ();
    sr.Close ()    
  }
}
