using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Xml.Linq;

namespace RincMetadataGenerator
{
  [Record]
  class MetadataGenerator
  {
    public Path      : string { get; private set; }
    public Year      : int    { get; private set; }
    public Num       : int    { get; private set; }
    public PageCount : int    { get; private set; }
    public Creator   : string { get; private set; }
    
    public Generate() : string
    {
      def files = GetArticleXmlPaths();
      //_ = MessageBox.Show($<#Count: $(files.Length)$("\n")..$(files; "\n")#>);
      
      def articleMetadatas = files.Map(ReadArticleMetadata).Filter(e => e.HasElements);
      def issueMetadata    = MekeIssueMetadata(articleMetadatas);
      def metadataFilePath = Path.Combine(Path, $"02346621_$(Year)_-_$(Num)_unicode.xml");
      issueMetadata.Save(metadataFilePath);
      metadataFilePath
    }
    
    MekeIssueMetadata(articleMetadatas : list[XElement]) : XDocument
    {
      def xml = $<#<?xml version="1.0" standalone="no" ?>
<journals>
  <opercard>
    <operator>ООО "К-Пресс"|$Creator</operator>
    <date>$(DateTime.Now)</date>
    <cntnode>0</cntnode>
    <cs>1297715</cs>
  </opercard>
  <journal>
    <journalInfo lang="RUS">
      <jrntitle>RSDN Magazine (РСДН Журнал)</jrntitle>
      <jrntitlevar>RSDN Magazine</jrntitlevar>
      <publ>ООО "К-Пресс"</publ>
      <placepubl>Россия, г. Москва</placepubl>
      <loc>129343, г. Москва, ул. Амундсена, 15-1-7.</loc>
    </journalInfo>
    <issue>
      <issn>0234-6621</issn>
      <jrncode jcountry="ru">02346621</jrncode>
      <jdateUni>$Year$Num</jdateUni>
      <pages>3-$PageCount</pages>

    </issue>
  </journal>
</journals>
#>;
      def doc = XDocument.Parse(xml);
      def issue = doc.Descendants("issue").NFirst();
      issue.Add(articleMetadatas.NToArray());
      def cntnode = doc.Descendants("cntnode").NFirst();
      cntnode.Value = doc.Descendants().Count().ToString();
      doc
    }
    
    ReadArticleMetadata(path : string) : XElement
    {
      def doc = XDocument.Load(path);
      
      when (doc.Root.Name != "ARTICLE")
        return XElement("none");
        
      def root        = doc.Root;
      def errors      = List();
      def dummy       = XElement("dummy"); 
      def rus         = XAttribute("lang", "RUS");
      def eng         = XAttribute("lang", "ENG");
      def get(tagName : string) : XElement
      {
        def tag = root.Element(tagName);
        
        if (tag == null)
        {
          errors.Add($"Тег $tagName не задан в документе '$path'");
          dummy
        }
        else
          tag
      }
      def getVal(tagName) : string
      {
        get(tagName).Value
      }
      
      def arttitles(root : XElement) : XElement
      {
        def title       = root.Element("TITLE").Value;
        def arttitleRu  = XElement("arttitle",  rus, title);
        def arttitles   = XElement("arttitles", arttitleRu);
        
        arttitles
      }
      def keywords() : XElement
      {
        def keywords    = getVal("KEYWORDS");
        def keywords    = keywords.Split(array[';'], StringSplitOptions.RemoveEmptyEntries);
        if (keywords.Length == 0)
          XElement("nokeywords", "")
        else
        {
          def elems = List.[object](keywords.MapToArray(k => XElement("keyword", k.Trim())));
          elems.Add(rus);
          XElement("keywords", XElement("kwdGroup", elems.NToArray()))
        }
      }
      def keywords    = keywords();
      def arttitles   = arttitles(root);
      def article     = XElement("article",   array[arttitles, keywords, XElement("path", path)]);

      article
    }
    
    /// Получаем спсок XML-ей для статей. Для этого просматриваем текущий каталог и каталоги 
    /// вложенные в него. 
    GetArticleXmlPaths() : array[string]
    {
      def resulr = List();
      
      def getFilesForDir(path) : void
      {
        def files = Directory.GetFiles(path, "*.xml");
        def isNotMetadata(file)
        {
          !Path.GetFileName(file).StartsWith("Metadata", StringComparison.InvariantCultureIgnoreCase)
        }
        
        foreach (file when isNotMetadata(file) in files)
          resulr.Add(file);
      }
      
      getFilesForDir(Path);
      
      foreach (dir in Directory.GetDirectories(Path))
        getFilesForDir(dir);
        
      resulr.NToArray()
    }
  }
}
