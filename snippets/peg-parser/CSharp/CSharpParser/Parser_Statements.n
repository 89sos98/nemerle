using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Empty statement

    //emptyStatement : Statement = ";"s;
    emptyStatement(_semicolon : NToken, _ : NToken) : Statement
    {
      Statement.Empty(GetLocation(_))
    }

    #endregion

    #region Statement with label

    //labeledStatement : Statement = identifier ":"s statement;
    labeledStatement(label : Identifier, _colon : NToken, _ : NToken, stmt : Statement) : Statement
    {
      Statement.Label(GetLocation(_), label, stmt)
    }

    #endregion

    #region Declaration statements

    //localConstantDeclaration : Statement = "const"S anyType constantDeclarators;
    localConstantDeclaration( _const        : NToken, _ : NToken,
                              constantType  : TypeRef,
                              decls         : list[Location * Identifier * Expr]) : Statement
    {
      Statement.ConstantDecl(GetLocation(_const, constantType), constantType, decls)
    }

    //localVariableType_var : TypeRef = "var"S;
    localVariableType_var(_var : NToken, _ : NToken) : TypeRef 
    {
      null
    }

    //localVariableType_any : TypeRef = anyType;
    localVariableType_any(t : TypeRef) : TypeRef 
    {
      t
    }

    //localVariableType     : TypeRef = localVariableType_var / localVariableType_any;
    localVariableType(opt : TypeRef): TypeRef
    {
      opt
    }

    //localVariableDeclaration : Statement = localVariableType variableDeclarators;
    localVariableDeclaration( variableType  : TypeRef,
                              decls         : list[Location * Identifier * VariableInitializer]) : Statement
    {
      Statement.VariableDecl(Location(this.ParsingSource, this.MaxRollbackPos, this.MaxRollbackPos + 1), variableType, decls)
    }

    //declarationStatement : Statement = (localConstantDeclaration / localVariableDeclaration) ";" s;
    declarationStatement(opt : Statement, _semicolon : NToken, _ : NToken) : Statement
    {
      opt
    }

    #endregion

    #region Expression statements

    //statementExpression     : Expr          = expression;
    statementExpression(opt : Expr) : Expr
    {
      opt
    }

    //statementExpressionList : ExprList  = statementExpression (","s statementExpression)*;
    statementExpressionList(head : Expr,
                            tail : SCG.List[NToken * NToken * Expr]) : list[Expr]
    {
      head.Cons(tail)
    }

    //expressionStatement     : Statement = statementExpression ";"s;
    expressionStatement(expr : Expr, _semicolon : NToken, _ : NToken) : Statement
    {
      Statement.Expression(GetLocation(_), expr)
    }

    #endregion

    #region Selection statements

    //ifStatement : Statement = "if"S "("s booleanExpression ")"s embeddedStatement ("else"S embeddedStatement)?;
    ifStatement(_if       : NToken, _ : NToken,
                _lparen   : NToken, _ : NToken,
                expr      : Expr,
                _rparen   : NToken, _ : NToken,
                trueStmt  : Statement,
                falseStmt : option[NToken * NToken * Statement]) : Statement
    {
      def loc = GetLocation(_);
      def falseStmt = match(falseStmt) {
        | Some( (_, _, stmt) ) => stmt
        | _ => null
      }
      Statement.If(loc, expr, trueStmt, falseStmt)
    }

    //switchLabel_case    : Expr = "case"S constantExpression ":"s;
    switchLabel_case( _case   : NToken, _ : NToken,
                      id      : Expr,
                      _colon  : NToken, _ : NToken) : Expr
    {
      id
    }

    //switchLabel_default : Expr = "default"S ":"s;
    switchLabel_default(_default : NToken, _ : NToken, _colon : NToken, _ : NToken) : Expr
    {
      null
    }

    //switchSection       : SwitchCaseEntry     = (switchLabel_case / switchLabel_default) statementList?;
    switchSection(lbl : Expr, stmts : option[list[Statement]]) : SwitchCaseEntry
    {
      def loc = Location(this.ParsingSource, this.MaxRollbackPos, this.MaxRollbackPos + 1);
      match(lbl) {  //TODO: handle location
        | null => SwitchCaseEntry.Default(loc, stmts.WithDefault([]))
        | id =>   SwitchCaseEntry.Case(loc, stmts.WithDefault([]), id)
      }
    }

    //switchSections      : SwitchCaseEntryList = switchSection+;
    switchSections(sections : SCG.List[SwitchCaseEntry]) : list[SwitchCaseEntry]
    {
      sections.Values()
    }

    //switchStatement     : Statement           = "switch"S "("s expression ")"s "{"s switchSections? "}"s;
    switchStatement(_switch   : NToken, _ : NToken,
                    _lparen   : NToken, _ : NToken,
                    expr      : Expr,
                    _rparen   : NToken, _ : NToken,
                    _lparen2  : NToken, _ : NToken,
                    sections  : option[list[SwitchCaseEntry]],
                    _rparen2  : NToken, _ : NToken) : Statement
    {
      Statement.Switch(GetLocation(_), expr, sections.WithDefault([]))
    }

    //selectionStatement  : Statement = ifStatement
    //                                / switchStatement;
    selectionStatement(opt : Statement) : Statement
    {
      opt
    }

    #endregion

    #region Iteration statements

    //whileStatement  : Statement = "while"S "("s booleanExpression ")"s embeddedStatement;
    whileStatement( _while  : NToken, _ : NToken,
                    _lparen : NToken, _ : NToken,
                    expr    : Expr,
                    _rparen : NToken, _ : NToken,
                    stmt    : Statement) : Statement
    {
      Statement.While(GetLocation(_), expr, stmt)
    }

    //doStatement     : Statement = "do"S embeddedStatement "while"S "("s booleanExpression ")"s ";"s;
    doStatement(_do         : NToken, _ : NToken,
                stmt        : Statement,
                _while      : NToken, _ : NToken,
                _lparen     : NToken, _ : NToken,
                cond        : Expr,
                _rparen     : NToken, _ : NToken,
                _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.DoWhile(GetLocation(_), cond, stmt)
    }

    //forInitializer_var  : object = localVariableDeclaration;
    forInitializer_var(decl : Statement) : object
    {
      decl
    }

    //forInitializer_expr : object = statementExpressionList;
    forInitializer_expr(init : list[Expr]) : object
    {
      init
    }

    //forInitializer      : object = forInitializer_var / forInitializer_expr;
    forInitializer(opt : object ): object
    {
      opt
    }

    //forCondition : Expr = booleanExpression;
    forCondition(expr : Expr) : Expr
    {
      expr
    }

    //forIterator  : ExprList = statementExpressionList;
    forIterator(iter : list[Expr]) : list[Expr]
    {
      iter
    }

    //forStatement : Statement = "for"S "("s forInitializer? ";"s forCondition? ";"s forIterator? ")"s embeddedStatement;
    forStatement( _for : NToken, _ : NToken,
                  _lparen : NToken, _ : NToken,
                  init : option[object],
                  _semicolon1 : NToken, _ : NToken,
                  cond : option[Expr],
                  _semicolon2 : NToken, _ : NToken,
                  iter : option[list[Expr]],
                  _rparen : NToken, _ : NToken,
                  stmt : Statement) : Statement
    {
      def loc = GetLocation(_);
      def make_ForVar(decl) {
        Statement.ForVar(loc, decl, cond.WithDefault(null), iter.WithDefault([]), stmt)
      }

      def make_ForExpr(init) {
        Statement.ForExpr(loc, init, cond.WithDefault(null), iter.WithDefault([]), stmt)
      }

      match(init) {
        | Some(init) =>
          match(init) {
            | decl is Statement.VariableDecl => make_ForVar(decl)
            | init is list[Expr]             => make_ForExpr(init)
            | _ => throw ArgumentOutOfRangeException("init")
          }
        | _ => make_ForExpr([])
      }
    }

    //foreachStatement : Statement = "foreach"S "("s localVariableType identifier "in"s expression ")"s embeddedStatement;
    foreachStatement( _foreach      : NToken, _ : NToken,
                      _lparen       : NToken, _ : NToken,
                      variableType  : TypeRef,
                      variable      : Identifier,
                      _in           : NToken, _ : NToken,
                      expr          : Expr,
                      _rparen       : NToken, _ : NToken,
                      body          : Statement) : Statement
    {
      Statement.Foreach(
        GetLocation(_), 
        variable,
        variableType,
        expr,
        body)
    }

    //iterationStatement : Statement = whileStatement
    //                               / doStatement
    //                               / forStatement
    //                               / foreachStatement;
    iterationStatement(opt : Statement) : Statement
    {
      opt
    }

    #endregion

    #region Jump statements

    //breakStatement        : Statement = "break"S ";"s;
    breakStatement(_break : NToken, _ : NToken, _semicolon : NToken, _ : NToken) : Statement
    {
      Statement.Break(GetLocation(_))
    }

    //continueStatement     : Statement = "continue"S ";"s;
    continueStatement(_continue : NToken, _ : NToken, _semicolon : NToken, _ : NToken) : Statement
    {
      Statement.Continue(GetLocation(_))
    }

    //gotoStatement_case    : Statement = "goto"S "case"S constantExpression ";"s;
    gotoStatement_case( _goto       : NToken, _ : NToken,
                        _case       : NToken, _ : NToken,
                        expr        : Expr,
                        _semicolon  : NToken, _ : NToken): Statement
    {
      Statement.GotoCase(GetLocation(_), expr)
    }

    //gotoStatement_default : Statement = "goto"S "default"S ";"s;
    gotoStatement_default(_goto       : NToken, _ : NToken,
                          _default    : NToken, _ : NToken,
                          _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.GotoDefault(GetLocation(_))
    }

    //gotoStatement_id      : Statement = "goto"S identifier ";"s;
    gotoStatement_id( _goto       : NToken, _ : NToken,
                      label       : Identifier,
                      _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.Goto(GetLocation(_), label)
    }

    //gotoStatement         : Statement = gotoStatement_case / gotoStatement_default / gotoStatement_id;
    gotoStatement(opt : Statement) : Statement
    {
      opt
    }

    //returnStatement       : Statement = "return"S expression? ";"s;
    returnStatement(_return     : NToken, _ : NToken,
                    expr        : option[Expr],
                    _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.Return(GetLocation(_), expr.WithDefault(null))
    }

    //throwStatement        : Statement = "throw"S expression? ";"s;
    throwStatement( _throw      : NToken, _ : NToken,
                    expr        : option[Expr],
                    _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.Throw(GetLocation(_), expr.WithDefault(null))
    }

    //jumpStatement : Statement = breakStatement
    //                          / continueStatement
    //                          / gotoStatement
    //                          / returnStatement
    //                          / throwStatement;
    jumpStatement(opt : Statement) : Statement
    {
      opt
    }

    #endregion


    #region Try-catch-finally

    //catchClause   : TryCatchEntry     = "catch"S ("("s anyType identifier? ")"s)? block;
    catchClause(_catch    : NToken, _ : NToken,
                exception : option[NToken * NToken * TypeRef * option[Identifier] * NToken * NToken],
                body      : Statement) : TryCatchEntry
    {
      def (exceptionType, variable) = match(exception) {
        | Some( (_, _, exceptionType, Some(variable), _, _) ) =>
          (exceptionType, variable)

        | Some( (_, _, exceptionType, None, _, _) ) =>
          (exceptionType, null)

        | _ => (null, null)
      }
      TryCatchEntry(GetLocation(_), exceptionType, variable, body)
    }

    //catchClauses  : TryCatchEntryList = catchClause+;
    catchClauses(clauses : SCG.List[TryCatchEntry]) : list[TryCatchEntry]
    {
      clauses.Values()
    }

    //finallyClause : Statement         = "finally"S block;
    finallyClause(_finally : NToken, _ : NToken, body : Statement) : Statement
    {
      body
    }

    //tryStatement_catch    : TryCatchFinallyTail = catchClauses finallyClause?;
    tryStatement_catch( catchList     : list[TryCatchEntry],
                        finallyBlock  : option[Statement]) : list[TryCatchEntry] * Statement
    {
      (catchList, finallyBlock.WithDefault(null))
    }

    //tryStatement_finally  : TryCatchFinallyTail = finallyClause;
    tryStatement_finally(finallyBlock  : Statement) : list[TryCatchEntry] * Statement
    {
      ([], finallyBlock)
    }

    //tryStatement          : Statement           = "try"S block (tryStatement_catch / tryStatement_finally);
    tryStatement( _try : NToken, _ : NToken,
                  body : Statement,
                  tail : list[TryCatchEntry] * Statement) : Statement
    {
      def (catchList, finallyBlock) = tail;
      Statement.Try(GetLocation(_try), body, catchList, finallyBlock)
    }

    #endregion

    #region Checked-unchecked

    //checkedStatement    : Statement = "checked"S block;
    checkedStatement(_checked : NToken, _ : NToken, body : Statement) : Statement
    {
      Statement.Checked(GetLocation(_), body, true)
    }

    //uncheckedStatement  : Statement = "unchecked"S block;
    uncheckedStatement(_unchecked : NToken, _ : NToken, body : Statement) : Statement
    {
      Statement.Checked(GetLocation(_), body, false)
    }

    #endregion

    #region Lock

    //lockStatement : Statement = "lock"S "("s expression ")"s embeddedStatement;
    lockStatement(_lock   : NToken, _ : NToken,
                  _lparen : NToken, _ : NToken,
                  expr    : Expr,
                  _rparen : NToken, _ : NToken,
                  body    : Statement) : Statement
    {
      Statement.Lock(GetLocation(_), expr, body)
    }

    #endregion

    #region Using

    //resourceAcquisition_var   : object = localVariableDeclaration;
    resourceAcquisition_var(decl : Statement) : object
    {
      decl
    }

    //resourceAcquisition_expr  : object = expression;
    resourceAcquisition_expr(expr : Expr) : object
    {
      expr
    }

    //resourceAcquisition       : object = resourceAcquisition_var / resourceAcquisition_expr;
    resourceAcquisition(opt : object) : object
    {
      opt
    }

    //usingStatement  : Statement = "using"S "("s resourceAcquisition ")"s embeddedStatement;
    usingStatement( _using    : NToken, _ : NToken,
                    _lparen   : NToken, _ : NToken,
                    resource  : object,
                    _rparen   : NToken, _ : NToken,
                    body      : Statement) : Statement
    {
      def loc = GetLocation(_);
      match(resource) {
        | decl is Statement.VariableDecl  => Statement.UsingVar(loc, decl, body)
        | expr is Expr                    => Statement.UsingExpr(loc, expr, body)
        | _ => throw ArgumentOutOfRangeException("resource")
      }
    }

    #endregion

    #region Yied statements

    //yieldStatement_return : Statement = "yield"S "return"S expression ";"s;
    yieldStatement_return(_yield      : NToken, _ : NToken,
                          _return     : NToken, _ : NToken,
                          expr        : Expr,
                          _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.YieldReturn(GetLocation(_), expr)
    }

    //yieldStatement_break  : Statement = "yield"S "break"S ";"s;
    yieldStatement_break( _yield      : NToken, _ : NToken,
                          _break      : NToken, _ : NToken,
                          _semicolon  : NToken, _ : NToken) : Statement
    {
      Statement.YieldBreak(GetLocation(_))
    }

    //yieldStatement        : Statement = yieldStatement_return / yieldStatement_break;
    yieldStatement(opt : Statement) : Statement
    {
      opt
    }

    #endregion

    #region Unsafe and Fixed

    //unsafeStatement : Statement = "unsafe"S block;
    unsafeStatement(_unsafe : NToken, _ : NToken, body : Statement) : Statement
    {
      Statement.Unsafe(GetLocation(_), body)
    }

    //fixedStatement  : Statement = "fixed"S "("s localVariableDeclaration ")"s embeddedStatement;
    fixedStatement( _fixed  : NToken, _ : NToken,
                    _lparen : NToken, _ : NToken,
                    decl    : Statement,
                    _rparen : NToken, _ : NToken,
                    body    : Statement) : Statement
    {
      Statement.Fixed(GetLocation(_), decl :> Statement.VariableDecl, body)
    }

    #endregion

    //embeddedStatement : Statement = block
    //                              / emptyStatement
    //                              / expressionStatement
    //                              / selectionStatement
    //                              / iterationStatement
    //                              / jumpStatement
    //                              / tryStatement
    //                              / checkedStatement
    //                              / uncheckedStatement
    //                              / lockStatement
    //                              / usingStatement
    //                              / yieldStatement
    //                              / unsafeStatement
    //                              / fixedStatement;
    embeddedStatement(opt : Statement) : Statement
    {
      opt
    }

    //statement     : Statement     = labeledStatement
    //                              / declarationStatement
    //                              / embeddedStatement;
    statement(opt : Statement) : Statement
    {
      opt
    }

    //statementList : StatementList = statement+;
    statementList(stmts : SCG.List[Statement]) : list[Statement]
    {
      stmts.Values()
    }

    //block         : Statement     = "{"s statementList? "}"s;
    block(_lparen : NToken, _ : NToken,
          stmts   : option[list[Statement]],
          _rparen : NToken, _ : NToken) : Statement
    {
      Statement.Block(GetLocation(_), stmts.WithDefault([]))
    }
  }
}