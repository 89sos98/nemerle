using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.ComputationExpressions;

namespace Test
{
  public abstract class Async[A]
  {
    public abstract Exec(res : ref A) : Async[A];

    public static ExecAll(mutable async : Async[A]) : A
    {
      mutable res;
      while (async != null)
        async = async.Exec(ref res);
      res;
    }
  }

  [Record]
  public class AsyncReturn[A] : Async[A]
  {
    private value : A;
    public override Exec(res : ref A) : Async[A]
    {
      res = value;
      null;
    }
  }

  [Record]
  public class AsyncDelay[A] : Async[A]
  {
    private cont : void -> Async[A];
    public override Exec(_res : ref A) : Async[A]
    {
      cont();
    }
  }

  [Record]
  public class AsyncWhile : Async[FakeVoid]
  {
    private pred : void -> bool;
    private body : Async[FakeVoid];
    [RecordIgnore]
    private mutable curBody : Async[FakeVoid] = null;
    public override Exec(mutable res : ref FakeVoid) : Async[FakeVoid]
    {
      if (curBody == null)
      {
        if (pred())
        {
          curBody = body.Exec(ref res);
          this;
        }
        else
        {
          null;
        }
      }
      else
      {
        curBody = curBody.Exec(ref res);
        if (curBody == null)
          Exec(ref res);
        else
          this;
      }
    }
  }

  [Record]
  public class AsyncBind[A, B] : Async[B]
  {
    private mutable p : Async[A];
    private cont : A -> Async[B];
    public override Exec(_res : ref B) : Async[B]
    {
      mutable r;
      p = p.Exec(ref r);
      if (p == null)
        cont(r);
      else
        this;
    }
  }

  [Record]
  public class AsyncCombine[A, B] : Async[B]
  {
    private mutable async1 : Async[A];
    private async2 : Async[B];
    public override Exec(_res : ref B) : Async[B]
    {
      mutable r;
      async1 = async1.Exec(ref r);
      if (async1 == null)
        async2;
      else
        this;
    }
  }

  public class AcyncBuilder
  {
    public Return[A](value : A) : Async[A]
    {
      AsyncReturn(value);
    }

    public ReturnComp[A](async : Async[A]) : Async[A]
    {
      async;
    }

    private static zero : Async[FakeVoid] = AsyncReturn(FakeVoid.Value);
    public Zero() : Async[FakeVoid]
    {
      zero;
    }

    public Bind[A, B](async : Async[A], f : A -> Async[B]) : Async[B]
    {
      AsyncBind(async, f);
    }

    public Bind[A, B](async : Async[A], f : void -> Async[B]) : Async[B]
    {
      AsyncBind(async, _ => f());
    }

    public While[A](pred : void -> bool, body : Async[FakeVoid]) : Async[FakeVoid]
    {
      AsyncWhile(pred, body);
    }

    public Delay[A](cont : void -> Async[A]) : Async[A]
    {
      AsyncDelay(cont);
    }

    public Combine[A, B] (async1 : Async[A], async2 : Async[B]) : Async[B]
    {
      AsyncCombine(async1, async2)
    }

    public Run[A] (async : Async[A]) : Async[A]
    {
      async
    }
  }
}
