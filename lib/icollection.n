/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



namespace Nemerle.Collections {
  
  public class EmptyCollection : System.Exception
  {
    public msg : string;
    public this ( msg : string) { this.msg = msg; }
  }

  public interface ICollection<'a>
    : Nemerle.Collections.IEnumerable<'a> {
    /** Adds element to collection. */
    Add (x : 'a) : void;
    /** Removes element from collection */
    Remove (x : 'a) : void;
    /** Returnes one of collection elements, if there is one.
        Throws EmptyCollection exception otherwise. */
    First() : option<'a>;
    /** Clears collection, in other words removeing all elements. */
    Clear() : void;
    /** Checks if collection is empty. */
    IsEmpty() : bool;
    /** Returns number of elements in collection. */
    Size() : int;
    /** Checks if specified element x is member of collection. */
    Member(x : 'a) : bool;
    /** Creates copy of this collection. */
    Copy() : ICollection<'a>;

    /** Folds collection useing specified fold function and initial value.
        Order in which elements are folded is unspecified. */
    Fold<'b> (f : 'a * 'b -> 'b,x : 'b) : 'b;
    /** Maps supplied function to elements of collection, creating new one.*/
    Map<'b> (f : 'a -> 'b) : ICollection<'b>;
    /** Calls supplied function for all elements of collection. */
    Iter (f : 'a -> void) : void;  

    /** Checks if all members of collection satisfy supplied predicate. */
    ForAll (f : 'a -> bool) : bool;
    /** Checks if there exists member of collection that satisfy supplied condition. */
    Exists (f : 'a -> bool) : bool;
    /** Filters collection removing all elements that do not satisfy supplied predicate. */
    Filter (f : 'a -> bool) : void;
    /** 
     * Partitions collection into two collections: elements that satisfy and elements that 
     * do not satisfy supplied predicate.
     */
    Partition (f : 'a -> bool) : ICollection<'a> * ICollection<'a>;
  }

} /* namespace */
