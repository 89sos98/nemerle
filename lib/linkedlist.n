/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Collections {
  class LinkedList<'a> : ICollection<'a>
    {
      mutable l : list<'a>;

      public this () {
        this.l <- [];
      }

      public this (l : list <'a>) {
        this.l <- l;
      }

      public Add (x : 'a) : void {
        this.l <- x :: l
      }
      
      public Remove (x : 'a) : void {
        this.l <- List.Remove (this.l, x)
      }

      public First() : option<'a> {
        match (l) {
          | x::_ => Some(x)
          | [] => None ()
        }
      }
      
      public Clear() : void {
        this.l <- []
      }
     
      public IsEmpty() : bool {
        List.IsEmpty (l)
      }

      public Size() : int {
        List.Length (l)
      }

      public Member(x : 'a) : bool {
        List.Member (l, x)
      }
      
      public Copy() : ICollection<'a> {
        def li = LinkedList ();
        li.l <- List.Copy (this.l);
        li
      }
      
      public Fold<'b> (f : 'a * 'b -> 'b, x : 'b) : 'b {
        List.FoldLeft (this.l, x, f)
      }
      
      public Map<'b>  (f : 'a -> 'b) : ICollection<'b> {
        def li = LinkedList ();
        li.l <- List.Map (this.l, f);
        li
      }

      public Iter (f : 'a -> void) : void {
        List.Iter (this.l, f)
      }
      
      public ForAll (f : 'a -> bool) : bool {
        List.ForAll (this.l, f)
      }

      public Exists (f : 'a -> bool) : bool {
        List.Exists (this.l, f)
      }

      public Filter (f : 'a -> bool) : void {
        this.l <- List.Filter (this.l, f)
      }

      public Partition (f : 'a -> bool) : ICollection<'a> * ICollection<'a> {
        def (s,n) = List.Partition (l, f);
        (LinkedList(s),LinkedList(n))
      }
      
      public GetEnumerator() : IEnumerator<'a> {
        ListEnumerator (this.l)
      }
      
    }
}
