using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.Imperative;
using Snippets;

class AA
{
  public X : int { get; set; }
  public Y : char { get; set; }
}

class BB
{
  public A : AA { get; set; }
  public U : int { get; set; }
  public V : char { get; set; }
}

module Program
{
  Main() : void
  {
    def clone() {
      WriteLine("clone");
      null
    }
    def dispose() {
      WriteLine("dispose");
    }
    def obj = newobj {
        IDisposable : {dispose};
        ICloneable :  {Clone = clone}
        }
    WriteLine(obj is ICloneable);
    obj.Dispose();
    def _ = (obj :> ICloneable).Clone();

    // With initializer
    def _ = BB() with { U = 1; V = 'a'; A = AA() with { X = 2; Y = 'b' } };
    
    def _items = (List.[object]() with [
        ("a", 3), () => "hello"
    ]).ToArray();
        
    def properties = Dictionary() with [ "raisingEvents"=true, "useShellExecute"=false ];
        
    def _k = Diagnostics.Process() with
    {
        EnableRaisingEvents = properties["raisingEvents"];
        StartInfo with
            {
                FileName = <# calc.exe #>;
                UseShellExecute = properties["useShellExecute"];
            }   
    }
    _ = _k.StartInfo;
  }
}