using System;
using System.IO;
using System.Diagnostics;

using SCG = System.Collections.Generic;
using SR  = System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;

using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    public CompleteWord(
      /*[NotNull]*/ filePath : string,
                line     : int,
                col      : int,
      /*[NotNull]*/ source : ISource,
    )
      : array[CompletionElem]
    {
      def fileIndex = Location.GetFileIndex(filePath);
      
      if (IsProjectAvailable)
        this.Project.CompleteWord(fileIndex, line, col, source)
      else
      {
        //// Find the declaration under text cursor.
        //// Так как дерева типов нет, нужно построить Decl и TopDeclarations
        //// для текущего файла.
        def topDecls = ParseTopDeclarations(source);
        Debug.Assert(!IsProjectAvailable);
        def decls = _decls.Rev();
        
        def scanDecls(decls)
        {
          | decl :: tail =>
            if (decl.Location.Contains(line, col))
              match (decl : Decl)
              {
                | GlobalAttribute => array(0)
                | Using as us     => CompleteInUsing    (us, fileIndex, line, col, source);
                | Namespace as ns => CompleteInNamespace(ns, fileIndex, line, col, source);
                | Type            => throw System.Exception();
                | None            => throw System.Exception();
              }
            else scanDecls(tail)
          | _ => TopKeywords
        }
        def scanTopDecls(topDecls : list[TopDeclaration]) : DeclarationBase
        {
          | topDecl :: tail => 
            if (topDecl.Location.Contains(line, col))
              scanTopDecl(topDecl)
            else
              scanTopDecls(tail)
          | [] => null
        }
        and scanTopDecl (topDecl : TopDeclaration)
        {
          | Class(_, decls) | Enum(_, decls) | Interface(_, decls) | Variant(_, decls) 
          | VariantOption(decls) =>
            def member = scanMembers(decls);
            if (member != null)
              member
            else
              topDecl
              
          | Macro | Delegate | Alias => topDecl
        }
        and scanMembers(members) : DeclarationBase
        {
          | member :: tail => 
            if (member.Location.Contains(line, col))
              match (member)
              {
                | TypeDeclaration(topDeclaration) => scanTopDecl(topDeclaration)
                | _ => member
              }
            else
              scanMembers(tail)
          | [] => null
        }
        
        def decl = scanTopDecls(topDecls);
        if (decl == null) scanDecls(decls)
        else CompleteDeclarationBase(decl, fileIndex, line, col, source);
      }
    }

    internal CompleteDeclarationBase(
                ast       : DeclarationBase,
                fileIndex : int,
                line      : int,
                col       : int,
      /*[NotNull]*/ source    : ISource
    )
      : array[CompletionElem]
    {
      match (ast)
      {
        | fn is ClassMember.Function => 
          def bodyLocation = fn.body.CalcExclusiveBodyLocation();
          if (bodyLocation.Contains(line, col))
            this.Project.CompleteWord(fileIndex, line, col, source);
          else
            ComplateInParsedTypeAst(ast, fileIndex, line, col, source)

        | _ => ComplateInParsedTypeAst(ast, fileIndex, line, col, source)
      }
    }


    internal ComplateInParsedTypeAst(
                ast       : DeclarationBase,
                fileIndex : int,
                line      : int,
                col       : int,
      /*[NotNull]*/ source   : ISource
      )
      : array[CompletionElem]
    {
      def loc = ast.Location;
      def env = ast.ParsedName.context;
      ComplateInParsedTypeAst(loc, env, fileIndex, line, col, source)
    }

    internal ComplateInParsedTypeAst(
                loc       : Location,
                env       : GlobalEnv,
                fileIndex : int,
                line      : int,
                col       : int,
      /*[NotNull]*/ source   : ISource
      )
      : array[CompletionElem]
    {
      Debug.Assert(loc.FileIndex == fileIndex);
      def tryGetTypeEnforcementExpressionTokens() : bool * list[Token]
      {
        // Get all tokens of method...
        // Note: If method not wellformed it can take next methods 
        // tokens or no take body tokens.
        def lex = GetLexer(source, loc);
        def toks = lex.ReadAllTokens(); // toks is array!
        // Fing near (to completion point) token index...
        mutable index = toks.FindIndex(fun(x : Token)
        {
          def loc = x.Location;
          loc.Contains(line, col) || loc.Line > line || loc.Line == line && loc.Column >= col
        });

        //DEBUG def (line, col) = (line, col);

        // If last token is ":" we should unconditionally compete types.
        if (index < 0 && toks.GetLast(null) is Token.Operator(":"))
          (true, [])
        else if (index < 0) // ":" not found
          (false, [])
        else // ":" found... process ompete...
        {
          // If last token location not on the completion point 
          // or completion point at the start of last token location 
          // we must ignore this token. Skip it...
          def lastToc = toks[index].Location;
          when (!lastToc.Contains(line, col) 
            || lastToc.Line == line && lastToc.Column == col
          )
            index--; // Shift to the previos token location index...

          def findColonToken(i, lst) : bool * list[Token]
          { // scat tokens backward.
            def tok = if (i < 0) null else toks[i];
            match (tok)
            {
              | Operator(":")          => (true, lst)
              | Operator(".")          => findColonToken(i - 1, tok :: lst)
              | BeginBrace  | BeginQuote | BeginRound | CharLiteral | EndBrace
              | EndQuote | EndRound | FloatLiteral | Operator | Semicolon | null | EndOfFile
                                       => (false, []) // this tokens can't contains in type
              | _                      => findColonToken(i - 1, tok :: lst)
            }
          }
          
          if (toks[index] is Keyword("override"))
            (false, [toks[index]])
          else
            // Get list of completion tokens. It can be situated on the interval
            // from colone token to toks[index]. If before toks[index] no 
            // colon token it is not type enforcement expression.
            findColonToken(index, []);
        }
      }

      def completeTypeEnforcement(env : GlobalEnv, typeExpr : list[Token])
      {
        // Make fake expression and type it...
        //def prefix = "_ : ";
        def loc = if (typeExpr is []) Location(fileIndex, line, col, line, col)
                  else typeExpr.Head.Location + typeExpr.Last.Location;
        def typeName = if (typeExpr is []) "" else source.GetRegion(loc);
        def code = /*prefix +*/ typeName;
        def result = CompleteType(env, code, loc, line, col/* + prefix.Length*/);
        if (result == null)
        {
          Trace.WriteLine("### RunCompletionEngine() (type enforcement completion) return null!");
          TopKeywords
        }
        else if ("void".StartsWithIgnoreCase(typeName) || typeName.TrimEnd() == "")
          MakeCompletionList(result).Append(CompletionElem(0, "void", "type System.Void", null));
        else MakeCompletionList(result)
      }

      def completeOverrides()
      {
        def decl = this.Project.GetActiveDecl(fileIndex, line, col);

        match (decl)
        {
          | Type(builder)      => // Retrive overrides.
            match (builder.SuperClass())
            {
              | Some(typeInfo) =>
                def virtMod = NemerleAttributes.VirtualityModifiers & ~NemerleAttributes.New;
                def allOverrides = typeInfo.GetMembers(SR.BindingFlags.Instance 
                  | SR.BindingFlags.NonPublic
                  | SR.BindingFlags.Public).FilterLazy(m => m.Attributes %&& virtMod);
                def implemented = builder.GetMembers(SR.BindingFlags.Instance 
                  | SR.BindingFlags.NonPublic
                  | SR.BindingFlags.Public
                  | SR.BindingFlags.DeclaredOnly).FilterLazy(m => 
                    m.Attributes %&& NemerleAttributes.Override);
                def canOverride = allOverrides.ExcludeLazy(implemented);
                def res = canOverride.MapToArray(e => CompletionElem(
                  (if (e is IProperty) GlyphType.Property else GlyphType.Method) :> int,
                  e.Name, "info not implemented", array[Elem.Member(e)], 
                  CompletionElemFlags.ForOverriding));
                res;

              | _ => TopKeywords
            }
          | _               => TopKeywords
        }
      }

      def (ok, tokens) = tryGetTypeEnforcementExpressionTokens();
      
      if (ok) completeTypeEnforcement(env, tokens)
      else if (tokens is [Keyword("override")]) completeOverrides()
      else TopKeywords
    }

    // Callback method. Process completion in expressin.
    protected override Complete (
      expression : PExpr,
      expected : TyVar,
      typer : Typer,
      env : GlobalEnv) : TExpr
    {
      assert(true);
      match (expression)
      {
        | PExpr.Member (obj, Splicable.HalfId (name)) =>
          def obj = obj; // for debug
          def name = name; // for debug
          def elems = SCG.List ();
          def elems2 = elems;
          _ = elems2;
          def tobj = typer.TypeExpr (obj);
          def tobj2 = tobj;
          _ = tobj2;
          def typeHint = tobj.Type.Hint;

          def AddOverloads(overloads)
          {
            unless (overloads.IsEmpty)
              elems.Add(Elem.Overloads (overloads));
          }

          def tryInterpretAsGlobals()
          {
            def nss = this.CoreEnv.NameTree.NamespaceTree :: name.GetEnv(env).OpenNamespaces;
            Completion.AddTypesAndNamespaces (elems, nss, obj, name, false);
          }

          def tryInterpretAsQualifiedName() : void
          {
            // Try interpret as qualified name...
            def overloads = typer.TypeNameFull(expression, typer.Solver.FreshTyVar(), true);
            AddOverloads(overloads);
          }

          def tryInterpretAsExtensionMethods(typeHint) : void
          { // Try get extention methods...
            | Some(ty is MType) =>
              def extMethods = this.LibrariesManager.GetExtensionMethods(name.Id, name.GetEnv(env), true);
              foreach (method when this.IsExtensionMethod(method, ty) in extMethods)
                foreach (over in typer.ConstructMethodOverload(null, method, null, true))
                {
                  over.ExtensionMethodObject = tobj;
                  elems.Add(Elem.Overload (over));
                }
            | _ => ()
          }

          def tryInterpretAsMemberAccess(typeHint, tobj) : void
          {
            tryInterpretAsExtensionMethods(typeHint);
            // Try interpret as member access at general expression...
            when (typer.TypeMember (tobj, name, expected, true) is Some(lst))
              AddOverloads(lst);
          }

          def makeCompletionResultException()
          {
            def compl_exc = CompletionResult (elems, name.Id);
            compl_exc.ObjectType = tobj.Type.Fix();
            compl_exc
          }

          tryInterpretAsQualifiedName();
          tryInterpretAsGlobals();
          tryInterpretAsMemberAccess(typeHint, tobj);

          match (typeHint)
          {
            | None when elems.Count == 0 =>
              def res = typer.DelayAction(tobj.Type, Typer.DelayedLambdaAction(_failLoudly => {
                match (tobj.Type.Hint)
                {
                  | Some(_) => 
                    tryInterpretAsMemberAccess(tobj.Type.Hint, tobj);
                    throw makeCompletionResultException()
                  | None => None()
                }
              }));
              //res.ty = typer.Solver.FreshTyVar();
              res
            | _ => throw makeCompletionResultException()

          }

        | PExpr.Member (obj, _) =>
          // Try find completion token in nested member access expressions.
          Complete (obj, expected, typer, env); 

        | PExpr.ToComplete (name) =>
          def prefix = name.Id;
          //def builder = CurrentMethodBuilder;
          def overloads = typer.TypeNameFull (expression, expected, for_completion = true);

          def elems = SCG.List ();
          elems.Add(Elem.Overloads (overloads));

          // find locals
          def CmpOptions = System.StringComparison.InvariantCultureIgnoreCase;
          foreach ((name, local) when name.Id.StartsWith (prefix, CmpOptions) in typer.LocalContext.GetLocals())
            elems.Add(Elem.Local (local));

          // add namespaces and types

          def nss = this.CoreEnv.NameTree.NamespaceTree :: name.GetEnv(env).OpenNamespaces;
          Completion.AddTypesAndNamespaces (elems, nss, null, name, false);
            
          throw CompletionResult (elems, prefix)

        | _ => null;
      }
    }

    /// Callback method. Process completion in patterns.
    protected override CompletePattern (
      expression         : PExpr,
      matched_value_type : TyVar,
      _patternTyper      : Typer.PatternTyper,
      env                : GlobalEnv
    )
      : void //
    {
      assert(true);
      match (expression)
      {
        | PExpr.Is (_nested, PExpr.ToComplete (name)) with obj = null
        | PExpr.Is (_nested, PExpr.Member (obj, Parsetree.Splicable.HalfId (name))) =>
          def obj = obj;
          def name = name;
          def elems = SCG.List ();

          def nss = this.CoreEnv.NameTree.NamespaceTree 
            :: name.GetEnv(this.CoreEnv).OpenNamespaces;
          Completion.AddTypesAndNamespaces (elems, nss, obj, name, true);

          throw CompletionResult (elems, name.Id);

        | PExpr.Call(PExpr.ToComplete(name), _) with obj = null
        | PExpr.ToComplete (name)               with obj = null
        | PExpr.Member (obj, Parsetree.Splicable.HalfId (name)) =>
          def name = name;
          def obj = obj;
          def elems = SCG.List ();
          
          elems.Add(Elem.Simple("_", "wildcard", 0));

          match (matched_value_type.Hint)
          {
            | Some(ty) =>
              def prefix = name.Id;
              def option = System.StringComparison.InvariantCultureIgnoreCase;
              match (ty)
              {
                | MType.Class (ti, args) =>
                  match (ti.GetTydecl())
                  {
                    | TT.TypeDeclaration.Variant (members) => // Pattern is VariantOption.
                      // Add VariantOption's to completion list.
                      foreach (m when m.Name.StartsWith (prefix, option) in members)
                        elems.Add(Elem.Node(m.Name, m.NamespaceNode));

                      def tryAddName(name)
                      {
                        when (name.StartsWith (prefix, option))
                          elems.Add(Elem.Node(name, ti.NamespaceNode))
                      }

                      // If namespace which define matched_value_type open
                      // add the type name to completion list.
                      when (obj == null)
                        match (env.LookupType([ti.Name], null, args.Length))
                        {
                          | Some => tryAddName(ti.Name)
                          | _    =>
                            // Add full name of matched_value_type to completion list.
                            tryAddName (ti.NamespaceNode.GetDisplayName());
                        }
                      
                      throw CompletionResult(elems, name.Id);

                  //| TypeDeclaration.VariantOption =>
                    | _ => System.Console.WriteLine(ty);
                  }
                | _ => System.Console.WriteLine(ty);
              }

            | None => System.Console.WriteLine(matched_value_type);
          }

          def nss = this.CoreEnv.NameTree.NamespaceTree 
            :: name.GetEnv(this.CoreEnv).OpenNamespaces;
          Completion.AddTypesAndNamespaces (elems, nss, obj, name, true);
          
          throw CompletionResult (elems, name.Id);

        | _ => assert(true);
      }
    }

    /// Try compile method body, find completion token and build completion list.
    public RunCompletionEngine (
      /*[NotNull]*/         method             : MethodBuilder, 
      /*[NotNull]*/         content            : string,
                        methodBodyLocation : Location,
                        completionMarkLine : int,
                        completionMarkChar : int
    )
      : CompletionResult
    {
      _isCompletionInProgress = true;

      try
      {
        _currentMessages = SCG.List(32);

        mutable completionList = null;
        def     content        = content + " ";
        def     lexer          = LexerCompletion (this, content, methodBodyLocation, 
                                                  completionMarkLine, completionMarkChar);
          
        try
        {
          _ = ParseMethodBody(method, lexer);
          method.RunBodyTyper ();
        }
        catch
        {
          | e is CompletionResult => completionList = e;
          | e => Trace.WriteLine (e.Message);
        }

        _currentMessages = null;

        completionList
      }
      finally
      {
        _isCompletionInProgress = false;
      }
    }

    public CompleteType (
      [NotNull]         env                : GlobalEnv, 
      [NotNull]         content            : string,
                        methodBodyLocation : Location,
                        completionMarkLine : int,
                        completionMarkChar : int
    )
      : CompletionResult
    {
      _isCompletionInProgress = true;

      try
      {
        _currentMessages = SCG.List(32);

        mutable completionList = null;
        def     content        = content + " ";
        def     lexer          = LexerCompletion (this, content, methodBodyLocation, 
                                                  completionMarkLine, completionMarkChar);
          
        try
        {
          def pExpr = MainParser.ParseExpr(env, lexer, false);
          def _x = env.MonoBindType(pExpr)
        }
        catch
        {
          | e is CompletionResult => completionList = e;
          | e => Trace.WriteLine (e.Message);
        }

        _currentMessages = null;

        completionList
      }
      finally
      {
        _isCompletionInProgress = false;
      }
    }

    private ParseMethodBody(method : MethodBuilder, lexer : LexerBase) : FunBody.Parsed
    {
      def header = method.GetHeader();
      def env    = if (method.Env != null) method.Env else method.DeclaringType.GlobalEnv;
      def body   = FunBody.Parsed(MainParser.ParseExpr(env, lexer, method.Ast.header));

      header.body = body;
      body
    }

    /// Get lexer for some range in source file.
    /// The range specified by loc parametr.
    // Note: All locations strat at start point of loc.
    public GetLexer(source : ISource, loc : Location) : LexerBase
    {
      def code = source.GetRegion(loc);
      def lex = LexerString(this, code, loc);
      lex.BeginParseFile();
      lex.Keywords = lex.Manager.CoreEnv.Keywords;
      lex
    }

    /// Get lexer for a source.
    public GetLexer(source : ISource) : LexerBase
    {
      def code = source.GetText();
      def loc = Location(source.FileIndex, 1, 1);
      def lex = LexerString(this, code, loc);
      lex.BeginParseFile();
      lex.Keywords = lex.Manager.CoreEnv.Keywords;
      lex
    }

    /// Get completion lexer for some range in source file.
    /// The range specified by loc parametr.
    // Note: All locations strat at start point of loc.
    public GetCompletionLexer(
      source : ISource,
      loc : Location, 
      completionMarkLine : int, 
      completionMarkChar : int
    )
      : LexerBase
    {
      def code = source.GetRegion(loc);
      def lex = LexerCompletion(this, code, loc, completionMarkLine, completionMarkChar);
      lex.BeginParseFile();
      lex.Keywords = lex.Manager.CoreEnv.Keywords;
      lex
    }
  } // end class Engine
} // end namespace
