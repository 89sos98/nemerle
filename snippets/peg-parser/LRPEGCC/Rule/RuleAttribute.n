using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace LRPEGCC
{
  [Record]
  internal class Usage : Attribute
  {
    public Text : string { get; private set; }
  }

  [Record]
  internal variant RuleAttribute : Located
  {
    | Inline
    | InlineAllSubrules
    | Extensible
    [Usage("#(handler, stopper-rule, skip-rule)")]
    | Cut                   { handlerName : NameRef; stop : Rule; skip : Rule; }
    [Usage("FailureRecovery(handler, stopper-rule, skip-rule)")]
    | Recovery              { handlerName : NameRef; stop : Rule; skip : Rule; }
    [Usage("< other-rule-name")]
    | PrecedenceLesserThan  { name : NameRef; }
    [Usage("== other-rule-name")]
    | PrecedenceEqualsTo    { name : NameRef; }
    [Usage("> other-rule-name")]
    | PrecedenceGreaterThan { name : NameRef; }

    public static GetUsages() : string
    {
      def ty = typeof(this);
      def options = ty.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Public);

      def makeUsage(opt : Type) : string
      {
        def attrs = opt.GetCustomAttributes(typeof(Usage), false);
        def usage = if (attrs.Length > 0) (attrs[0] :> Usage).Text else opt.Name;
        
        usage
      }

      $<#..$(options; " or "; makeUsage)#>
    }
    #region object  Members

    public override ToString() : string
    {
      match (this)
      {
        | Inline                      => "Inline"
        | InlineAllSubrules           => "InlineAllSubrules"
        | Extensible                  => "Extensible"
        | Recovery(name, stop, skip)  => $"Recovery($name, $stop, $skip)"
        | Cut(name, stop, skip)       => $"%($name, $stop, $skip)"
        | PrecedenceLesserThan (name) => $"< $name"
        | PrecedenceEqualsTo   (name) => $"== $name"
        | PrecedenceGreaterThan(name) => $"> $name"
      }
    }

    #endregion object  Members
  }
}
