using System;
using SC = System.Console;
using System.Text;
using System.Text.RegularExpressions.Regex;
using Nemerle.Text;
using Nemerle.Utility.NString;
using Nemerle.Collections.List;

module zad4 
{
 Main (): void
 {
  def e = Evaluator ();
  def readinput (refr: list [string], ns: list [string], code: string, 
                 prompt: string): void {
   SC.Write (prompt);
   def line = SC.ReadLine ();
   match (line) {
    | null => ()
    | _ => 
     regexp match (line) {
      | @"^\s*$" => readinput (refr, ns, code, prompt)
      | @"^\s*help\s*(\(\))*[;\s]*;;\s*$" => 
       SC.WriteLine ("Available built-in commands:\n"); 
       SC.WriteLine ("help\t-\tprint this help");
       SC.WriteLine ("ref\t-\tlink specified assembly\t"
                  "(ex. ref Nemerle.dll, Nemerle.Compiler.dll)");
       SC.WriteLine ("using\t-\tuse specified namespace\t"
                  "(ex. using Nemerle, Nemerle.Collections)\n");
       SC.WriteLine ("Built-in commands must be entered on a separate line.");
       readinput (refr, ns, code, "- ")
      | @"^\s*using\s+(?<n>\w+(\.\w+)*(\s*,\s*(\w+(\.\w+)*))*)[;\s]*;;\s*$" => 
       SC.WriteLine ("Now using " + n);
       readinput (refr, Concat ([Split (n, ",".ToCharArray ()), ns]), code, "- ")
      | @"^\s*ref\s+(?<r>\w+(\.\w+)*(\s*,\s*(\w+(\.\w+)*))*)[;\s]*;;\s*$" =>    
       SC.WriteLine ("Added " + r + " for linking.");
       readinput (Concat ([Split (Replace (r, @"\s", ""), 
                          ",".ToCharArray ()), refr]), ns, code, "- ")
      | _ =>  { 
       def l = line.TrimEnd ();
       if (l.EndsWith (";;")) {
        try { 
         def res = e.Eval (typeof (object), refr, ns,
                           code + l.TrimEnd ("; \t".ToCharArray ()));
         when (res != null)
          SC.WriteLine (res.ToString ()); 
        } 
        catch { | e : Exception => SC.WriteLine (e.Message); } 
        readinput (refr, ns, "", "- "); 
       }
       else {
        readinput (refr, ns, code+line, "= ");
       }
      }
     }
   }
  }
  readinput ([], ["System"], "", "- ");
 }
}

