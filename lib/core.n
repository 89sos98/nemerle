(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open System.Core;

namespace Nemerle 
{
  public interface Func0 implements Func1
  {
    apply () : object;
  }

  public interface Func1
  {
    apply (_ : object) : object;
  }
  
  public interface Func2 implements Func1
  {
    apply (_ : object, _ : object) : object;
  }
  
  public interface Func3 implements Func1
  {
    apply (_ : object, _ : object, _ : object) : object;
  }
  
  public interface Func4 implements Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object) : object;
  }
  
  public interface Func5 implements Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object) : object;
  }
  
  public interface Func6 implements Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object) : object;
  }
  
  public class Tuple2
  {
    public field1 : object;
    public field2 : object;
  }
  
  public class Tuple3
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
  }
  
  public class Tuple4
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
  }
  
  public class Tuple5
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
  }
  
  public class Tuple6
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
  }
  
  public class Tuple7
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
    public field7 : object;
  }


  (**
    * Used to store the Nemerle types in genereated assembly metadata
    *)    
  public class TypeAttribute extends System.Attribute
  {
    public this (encoded_type : string) 
    {    
      _encoded_type <- encoded_type
    }
    
    public GetEncodedType () : string 
    { 
      _encoded_type
    }
    
    public mutable _encoded_type : string;
  }

  (**
   * Marks a Nemerle variant type
   *)
  public class VariantAttribute extends System.Attribute
  {
    public this () { }
  }

  (**
    * Marks a Nemerle variant option
    *)    
  public class VariantOptionAttribute extends System.Attribute
  {
    public this (encoded_type : string) 
    {    
      _encoded_type <- encoded_type
    }
    
    public GetEncodedType () : string 
    {
      _encoded_type
    }
    
    public mutable _encoded_type : string;
  }
}


(**
 * This namespace is always opened
 *)
namespace Nemerle.Core 
{
  public class Assertion_failed extends System.Exception 
  {
    public msg : string;
    
    public this (file : string, line : int, msg : string) 
    { 
      this.msg <- "assertion failed in file " + file + ", line " + string_of_int (line);
      
      when (msg != "") { this.msg <- this.msg + ": " + msg }
    }
  }

  public class Invalid_argument extends System.Exception 
  {
    public msg : string;
    public this (msg : string) { this.msg <- msg; }
  }
    
  public class Not_found extends System.Exception 
  {
    public this () {}
  }
    
  public class Match_failure extends System.Exception 
  {
    public this () {}
  }

  public class Null_match extends System.Exception
  {
    public this () {}

    public static raise_self () : bool 
    { 
      def _ = raise Null_match ();
      true
    }
  }
}
