// Copyright (c) 2003, 2004 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

using System;
using Nemerle.Collections;

namespace Nemerle.CSharp
{

    /**
     *  C# wrapper for STree class
     */
    public class StatementTree
    {
        public this ()
        {
            s_tree = STree.Empty ()
        }

        public this (t : antlr.Token)
        {
            s_tree = STree.Tok (t)
        }

        public this (s : string)
        {
            s_tree = STree.TokS (s)
        }

        public this (s : string,ch : LinkedList<StatementTree>)
        {
            mutable l = [];
            
            def get_stree (t : StatementTree)
            {             
                  l = t.s_tree :: l;
            }

            ch.Iter (get_stree);
            
            s_tree = STree.Statement(s,l)
        }

        public EliminateJumps () : void
        {
            def t = s_tree.EliminateJumps ();
            Console.WriteLine(t.ToString ());
        }
        
        override public ToString () : string
        {            
            s_tree.ToString ()
        }
        
        private s_tree : STree;
    }

    /**
     *  STree class, representing single statement
     */
    public variant STree
    {        
        | Empty
        | TokS { s : string; }
        | Tok { t : antlr.Token; }
        | Statement { s_name : string; children : list<STree> ; }

        override public ToString () : string
        {
            match(this)
            {
                | Empty => ""
                | Tok (t) => t.getText ()
                | TokS (s) => s
                | Statement ( _ , children) =>
                  def sb = System.Text.StringBuilder ();
                  def loop (l)
                  {
                      match(l : list<STree>)
                      {
                          | [] => ()
                          | x :: xs =>  ignore (sb.Append (x.ToString ()));loop (xs)
                      }
                  }

                  loop(children);
                  
                  sb.ToString ()                  
            }
        }        

        public EliminateJumps () : STree
        { 
            eliminate_goto ()
        } 

        private eliminate_goto () : STree
        { 
            eliminate_goto_block () 
        } 

        private eliminate_goto_block () : STree
        {             
            def walk (ch : list<STree> , acc : list<STree>) : list <STree>
            {
                match(ch)
                {
                    | Statement ("LABEL",[Tok(id),s1,s2]) :: tail =>
                      def label = (id :> ExtendedToken).getTextOnly ();

                      def part_goto (lt : list<STree>,acc : list <STree>) : list <STree> * list <STree>
                      {
                          match(lt)
                          {
                              | Statement ("GOTO",[s1,Tok(id),s2]) :: tail=>
                                if((id :> ExtendedToken).getTextOnly () == label)
                                    (acc,tail)
                                else
                                    part_goto(tail , Statement ("GOTO",[s1,Tok(id),s2]) :: acc)
                                    
                              | head :: tail => part_goto (tail,head :: acc)
                              | _ => ([],[])
                          }
                      }

                      def (before,after) = part_goto(tail,[]);                      

                      match((before,after)) 
                      {
                          | ([],[]) => walk ( tail,  Statement ("LABEL",[Tok(id),s1,s2]) :: acc)
                          | (_,_) =>
                            def block = Statement("BLOCK",(TokS("\n{") :: before) + [TokS("\n}")]);

                            def wh = Statement("DO",[TokS("\ndo"),block,TokS ("\nwhile"),TokS("("),TokS("true"),TokS(")")]);

                            def lab = Statement ("LABEL",[Tok(id),s1,wh]);
                            
                            walk ( after, lab :: acc)
                      }
                      
                      
                      
                    | Statement ("GOTO", [s1,Tok(id),s2]) :: tail =>
                      def goto = (id :> ExtendedToken).getTextOnly ();

                      def part_label (lt : list<STree>,acc : list <STree>) : list <STree> * list <STree>
                      {
                          match(lt)
                          {
                              | Statement ("LABEL",[Tok(id),s1,s2]) :: tail=>
                                if((id :> ExtendedToken).getTextOnly () == goto)
                                    (acc,tail)
                                else
                                    part_label(tail , Statement ("LABEL",[Tok(id),s1,s2]) :: acc)
                                    
                              | head :: tail => part_label (tail,head :: acc)
                              | _ => ([],[])
                          }
                      }
                      
                      def (before,after) = part_label(tail,[]);

                      walk ( tail, Statement ("GOTO", [s1,Tok(id),s2]) :: acc)
                      
                    | Statement (name,children) :: tail    =>
                      def ch = Statement(name,children).eliminate_goto_block ();
                      walk ( tail,  ch :: acc)
                      
                    | s :: tail => walk (tail, s :: acc)
                    | _ => List.Rev (acc)
                }
            }

            match(this)
            {
                | Statement ("BLOCK",children) =>
                  def ch = walk (children,[]);
                  Statement ("BLOCK",ch)
                | s => s
            }
        } 

        private get_labels (stats : list <STree>) : list <string>
        {
            match(stats)
            {
                | Statement ("LABEL",[name,_,_]) :: tail=>
                  (name :> ExtendedToken).getTextOnly() :: get_labels (tail)
                | _ => []
            }
        }
    }

}