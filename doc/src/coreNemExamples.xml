<?xml version='1.0' encoding='UTF-8' ?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Examples of programs for the core Nemerle language</title>
  <section id="intro">
    <title>Introduction</title>
    <body>
      <p>
        We will present here a number of examples of core Nemerle language in
	such a way that they form a short tutorial for Nemerle users and later
	can be used as a reference for more advanced fetures.
	This is still under construction, at present you can only find a simple
	example to know how the code looks like.
      </p>
    </body>
  </section>
  <section id="example">
  <title>Simple Exmaple</title>
  <body>
<code>
type Lazy ['a]
  implements 
    I_Comparable_To[Lazy['a]],
    I_Runnable['a]
{
  (* There is no real-life reason it needs integer key, except
     that will put this stuff into tree. *)
  member key : int;
  member fnc : void -> 'a;

  method run () : 'a 
    implements I_Runnable.run 
  = 
    (this ! fnc) ();

  method compare_to (that : Lazy['a]) : int 
    implements I_Comparable_To.compare_to 
  =
    this ! key - that ! key;
}
</code>
        <p>
          Now we can create objects of type <tt>Lazy['a]</tt> and call
          its methods:
        </p>
<code>
let lazy_foo = Lazy 
               { 
                 fnc = fun () : string -> "foo";
                 key = 17;
               } in
let lazy_bar = Lazy
               { 
                 fnc = fun () : string -> "bar"; 
                 key = 37; 
               } in
(* Can use names from type... *)
let cmp_res = lazy_foo # Lazy.compare_to (lazy_bar) in
(* ...or from interface. *)
let dummy1 = lazy_bar # I_Runnable.run () in
(* Non-virtual call: *)
let cmp_res2 = Lazy.compare_to (lazy_foo, lazy_bar) in
...
</code>
</body>
</section>
</document>
