using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Peg
{
  public module FSMBuilder
  {
    public Symbol(c : char) : FSM
    {
      Symbol(RangeSet().AddRange(c, c));
    }

    public Symbol(chars : RangeSet) : FSM
    {
      def fsm = FSM();
      def fsm = fsm.AddTransition(Transition.Symbol(fsm.StartState, fsm.OkState, chars));
      fsm
    }

    public Seq(seq : list[RangeSet]) : FSM
    {
      def fsm = FSM();
      def fsm = fsm.AddTransition(Transition.Epsilon(fsm.StartState, fsm.OkState));
      def append(set : RangeSet, fsm1 : FSM) : FSM
      {
        def (fsm1, start, ok) = fsm1.IncludeFSM(Symbol(set));
        def fsm1 = fsm1.AddTransition(Transition.Epsilon(fsm1.OkState, start));
        def fsm1 = fsm1.SetOkState(ok);
        fsm1;
      }
      seq.FoldLeft(fsm, append);
    }

    public Seq(fsms : list[FSM]) : FSM
    {
      def fsm = FSM();
      def fsm = fsm.AddTransition(Transition.Epsilon(fsm.StartState, fsm.OkState));
      def append(fsm2 : FSM, fsm1 : FSM) : FSM
      {
        def (fsm1, start, ok) = fsm1.IncludeFSM(fsm2);
        def fsm1 = fsm1.AddTransition(Transition.Epsilon(fsm1.OkState, start));
        def fsm1 = fsm1.SetOkState(ok);
        fsm1;
      }
      fsms.FoldLeft(fsm, append);
    }

    public String(str : string) : FSM
    {
      Seq(str.Map(Symbol))
    }

    public Option(fsm : FSM) : FSM
    {
      fsm.AddTransition(Transition.Epsilon(fsm.StartState, fsm.OkState));
    }

    public RepeatMin(min : int, fsm : FSM) : FSM
    {
      def loop = fsm
        .AddTransition(Transition.Epsilon(fsm.StartState, fsm.OkState))
        .AddTransition(Transition.Epsilon(fsm.OkState, fsm.StartState));
      Seq($[0..min - 1].Map(_ => fsm).Append([loop]))
    }

    public RepeatMinMax(min : int, max : int, fsm : FSM) : FSM
    {
      Seq($[0..min - 1].Map(_ => fsm).Append($[0..max - min - 1].Map(_ => Option(fsm))))
    }

    public Choice(fsms : list[FSM]) : FSM
    {
      def fsm = FSM();
      def append(fsm2 : FSM, fsm1 : FSM) : FSM
      {
        def (fsm1, start, ok) = fsm1.IncludeFSM(fsm2);
        def fsm1 = fsm1.AddTransition(Transition.Epsilon(fsm1.StartState, start));
        def fsm1 = fsm1.AddTransition(Transition.Epsilon(ok, fsm1.OkState));
        fsm1;
      }
      fsms.FoldLeft(fsm, append);
    }
  }
}
