using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  public partial class Engine : ManagerClass
  {
    /// Content of current namespace.
    mutable _decls : list[Decl] = [];
    /// Content namespace stack.
    _namespaces : Stack[list[Decl]] = Stack();
    /// Cutent parsing file index.
    mutable _fileIndex : int;
    //[Accessor]
    mutable _fileInfos : array[Decl.Namespace] = array(100);

    BeginParseFile(fileIndex : int) : void
    {
      assert(_decls is []);
      assert(_namespaces.Count == 0);
      _namespaces.Clear();

      // Expand array
      when (fileIndex >= _fileInfos.Length)
      {
        def newArray = array(fileIndex * 2 + 1);
        _fileInfos.CopyTo(newArray, 0);
        _fileInfos = newArray;
      }
    }

    // HACK: see usings
    public static VeryBigNumber = 1000000;
    
    EndParseFile(fileIndex : int, endLocation : Location, topDeclarations : list[TopDeclaration]) : void
    {
      def loc = Location(fileIndex, 1, 1, endLocation.EndLine, endLocation.EndColumn);
      
      _fileInfos[fileIndex] = Decl.Namespace(loc, _decls.Rev(), [], [], 
        CoreEnv, CoreEnv, loc, topDeclarations);

      _decls = [];
      assert(_namespaces.Count == 0);
    }

    private UsingDirectiveParsed(
      location      : Location,
      name          : list [string],
      nameLocations : list [Location],
      alias         : string,
      aliasLocation : Location,
      beforeEnv     : GlobalEnv,
      afterEnv      : GlobalEnv
      ) : void
    {
      _decls ::= Decl.Using(location, name, nameLocations, 
        alias, aliasLocation, beforeEnv, afterEnv);
    }

    private BeforeNamespaceParse() : void
    {
      _namespaces.Push(_decls);
      _decls = [];
    }

    private AfterNamespaceParse(
      location : Location,
      name : list [string],
      nameLocations : list [Location],
      outsideEnv : GlobalEnv,
      insideEnv : GlobalEnv,
      bodyLocation : Location
      ) : void
    {
      // Save content of current namespace
      def currentNsDecls = _decls;
      _decls = _namespaces.Pop(); // Pop parent namespace declarations
      // Create new namespace info and add it to parent namespace declarations
      _decls ::= Decl.Namespace(location, currentNsDecls, name, nameLocations, 
        outsideEnv, insideEnv, bodyLocation, null);
    }
  } // end class Engine
} // end namespace

