using Nemerle.Compiler;
using Nemerle.Completion;
using System.IO;
using System.Console;

def engine = Engine ();
def str = StreamReader ("compl-s.n").ReadToEnd ();
engine.Sources.Add ("compl-s.n", str);

def type_tree = engine.GetTypeTree ();

mutable my_method = null;

foreach (t in type_tree.Types) {
  System.Console.WriteLine (t.Name);
  foreach (m in t.Methods) {
    when (m.Name == "Bar")
      my_method = m._member :> MethodBuilder;
    System.Console.WriteLine ($ "  $(m.Name)");
  }
}

def env = my_method.DeclaringType.GlobalEnv;

my_method.GetHeader ().body =
  FunBody.Parsed (MainParser.ParseExpr (env, "this.Fo ", 7));

try {
  my_method.RunBodyTyper ()
} catch {
  | e is CompletionResult =>
    System.Console.WriteLine (e.Overloads);
  | e =>
    System.Console.WriteLine (e);
}
