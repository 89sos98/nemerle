using System;
using System.Console;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Surround;
using Nemerle.Utility;

[assembly: DefineSurround("Red", false,
  Console.ForegroundColor = ConsoleColor.Red,
  Console.ResetColor())]

[assembly: DefineSurround("Green", false,
  Console.ForegroundColor = ConsoleColor.Green,
  Console.ResetColor())]

[assembly: DefineSurround("Yellow", false,
  Console.ForegroundColor = ConsoleColor.Yellow,
  Console.ResetColor())]

namespace CSharpParser.Tests
{
  [Record]
  public class TestCase
  {
    [Accessor]
    private fileName : string;

    [Accessor]
    private source : SourceSnapshot;

    [Accessor]
    private errorLines : list[int];

    [Accessor]
    private validateAst : CompilationUnit -> bool;
  }

  module Program
  {
    RunTest(test : TestCase) : bool
    {
      def displayError(errorPos)
      {
        def errorLocation = test.Source.GetSourceLine(errorPos);
        def line = errorLocation.StartLineColumn[0];
        def col = errorPos - errorLocation.StartPos + 1;
        WriteLine($"[$line:$col] unexpected parse error");
        WriteLine(errorLocation.GetText().TrimEnd(array['\r', '\n', '\u2028', '\u2029']));
        surroundwith(Yellow)
        {
          Write(string('-', col - 1));
          WriteLine('^'); // error pointer
        }
        WriteLine();
      }

      mutable testIsPassed = true;

      def parser = CSharpParser.Parser();
      match(parser.Parse(test.Source))
      {
        | Some(unit) =>

          mutable hitErrorLines = [];

          // handle actual parse errors
          foreach(error in unit.GetParseErrors())
          {
            def line = error.Location.StartLineColumn[0];
    
            if(test.ErrorLines.Contains(line))
            {
              // we expected error on this line (this is negative test)
              //
              hitErrorLines ::= line;
            }
            else
            {
              // this error is unexpected
              //
              WriteLine(error);
              displayError(error.Location.StartPos);
    
              testIsPassed = false;
            }
          }

          // handler expected parse errors
          //
          foreach(errorLine in test.ErrorLines)
            unless(hitErrorLines.Contains(errorLine))
            {
              surroundwith(Red)
                WriteLine($"expected error didn't occur on line $errorLine in `$(test.FileName)'");

              testIsPassed = false;
            }

          // check AST only when error checks passed
          //
          when(testIsPassed)
          unless(test.ValidateAst(unit))
          {
            surroundwith(Red)
              WriteLine($"AST validation failed for `$(test.FileName)'");

            testIsPassed = false;
          }

        | _ =>
          def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
          surroundwith(Red)
            WriteLine($"Failed to parse file `$(test.FileName)'");
          displayError(errorPos);

          testIsPassed = false;
      }

      testIsPassed
    }

    Main() : int
    {
      mutable totalTests = 0;
      mutable totalFailed = 0;

      foreach(test in GetTestCases("positive\\*.cs"))
      {
        unless(RunTest(test))
          totalFailed += 1;
        totalTests += 1;
      }

      foreach(test in GetTestCases("negative\\*.cs"))
      {
        unless(RunTest(test))
          totalFailed += 1;
        totalTests += 1;
      }

      if(totalFailed == 0)
      {
        surroundwith(Green)
          WriteLine("All tests passed.");
        0
      }
      else
      {
        surroundwith(Red)
          WriteLine($"$totalFailed tests of $totalTests failed.");
        _ = ReadKey(true);
        -1
      }
    }
  }
}