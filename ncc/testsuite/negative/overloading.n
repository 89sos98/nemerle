using Nemerle.IO;

class A {}
class B : A {}
class C : B { public this () {} }
 
module M {
  f (_ : A, _ : B) : void {} //E: Posible overload: method M\.f\(.+ : A, .+ : B\) : void
  f (_ : B, _ : A) : void { printf ("OK\n") } //E: Posible overload: method M\.f\(.+ : B, .+ : A\) : void
  public Main () : void 
  {
    f (C (), C ());     // E: typing fails on ambiguity between overloads
  }
}

using M1;
using M2;

interface I1 {}
interface I2 {}
interface I : I1, I2 {}

class MM
{
  static f (_ : I1) : void {} //E: Posible overload: method MM\.f\(.+ : I1\) : void
  static f (_ : I2) : void {} //E: Posible overload: method MM\.f\(.+ : I2\) : void
  static m (a : I) : void { MM.f (a) }    // E: typing fails on ambiguity between overloads
}

class M1
{
  public static g (_ : I) : void { } // E: Posible overload: method M1\.g\(.+ : I\) : void
}

class M2
{
  public static g (_ : I) : void { } //E: Posible overload: method M2\.g\(.+ : I\) : void
}

class M3
{
  static h (a : I) : void { g(a) }    // E: typing fails on ambiguity between overloads
}


namespace ConstVariantAndType
{
  using X;

  class TextView { } //E: Posible overload: constructor ConstVariantAndType\.TextView\.\.ctor

  variant X
  {
    | TextView // E: Posible overload: constructor of constant variant ConstVariantAndType\.X\.TextView
  }

  module M
  {

   Main () : void
   {
     def x = TextView (); // E: typing fails on ambiguity between overloads
     ()
   }
  }
}


namespace NotExpectVoidInSequence
{
  namespace n1
  {
    class Attribute {} //E: Posible overload: constructor NotExpectVoidInSequence\.n1\.Attribute\.\.ctor
  }

  namespace n3
  {
    using n1;
    using System;
    class AA
    {
      Attribute () : void //E: Posible overload: method NotExpectVoidInSequence\.n3\.AA\.Attribute\(\) : void
      {
        ();
      }
      X () : void
      {
        Attribute (); // E: typing fails on ambiguity between overloads
        ();
      }
      static Main () :  void
      {
        AA().X();
      }
    }
  }
}


public class Bug743 
{
  public this (_ : string) { }          //E: Posible overload: constructor Bug743\.\.ctor\(.+ : string\) : Bug743
  public this (_ : string, _ = "a") { } //E: Posible overload: constructor Bug743\.\.ctor\(.+ : string, .+ : string\) : Bug743
  foo () : void
  {
    _ = Bug743 ("s"); // E: typing fails on amb
  }
}

public class FunctionsOverl
{
  f (_ : int) : void { }
  
  foo () : void
  {
    System.Console.WriteLine (f : double -> void); //E: expected double -> void, got int -> void in type-enforced expression: the types double and int are not compatible
  }
}