/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Typedtree
{
  [Record]
  public class Constraint
  {
    public tyvar : string;
    public ty : TType;
  }

  public variant TypeDeclaration
  {
    | Class
    | Alias         { ty : TType; }
    | Interface
    | Variant       { members : list [TypeInfo]; }
    | VariantOption
    | Enum
  }

  public variant TType
  {
    | Class    { tycon : TypeInfo; args : list [TType]; }
    | Variable { tyvar : Tyvar.T; }
    | ByRef    { t : TType; }
    | Out      { t : TType; }
    | Function { from : TType; to : TType; }
    | Void
    | Product  { args : list [TType]; }    
    | Array    { t : TType; rank : int; }

    public override ToString () : string
    {
      Tyutil.string_of_type (this)
    }

    public IsValueType : bool
    {
      get {
        match (this) {
          | TType.Class (tc, _) =>
            match (tc.GetTypeInfoKind ()) {
              | TypeInfoKind.ExternalNemerleType (st) =>
                st.IsValueType || st.Equals (SystemType.Void)
              | TypeInfoKind.ExternalNetType (st) => st.IsValueType 
              | TypeInfoKind.NemerleType (exact) => exact.IsValueType 
            }
          | TType.Void => true
          | _ => false
        }
      }
    }
 
    public IsFromNull : bool
    {
      get {
        match (this) {
          | Variable (var) => var.value is TvValue.FreeFromNull
          | _ => false
        }
      }
    }
    
    public GetSystemType () : System.Type {
      match (Tyutil.top_expand (this)) {
        | TType.Void => SystemType.Void
        | TType.Product (l) => CompileTypedMethod.tuple_type (l.Length)
        | TType.Function (args, _) => 
          CompileTypedMethod.function_type (Tyutil.fun_args (args).Length)
      
        | TType.Variable (tv) => tv.GetSystemType ()

#if _GENERICS
        | TType.Class (ti, []) => ti.GetSystemType ();

        | TType.Class (ti, args) =>
          def tconstructor = ti.GetSystemType ();
          def typedargs = array (args.Length);
          mutable idx = 0;
          foreach (arg in args) {
            typedargs [idx] = arg.GetSystemType ();
            ++idx;
          }
          tconstructor.BindGenericParameters (typedargs);  
#else
        | TType.Class (ti, _) => 
          def ret = ti.GetSystemType ();
          assert (ret != null);
          ret
#endif
        
        | TType.ByRef (et) | TType.Out (et) => 
#if _NET_2_0
          et.GetSystemType ().MakeByRefType ()
#else        
          CompileTypedTree.make_ref_type (et.GetSystemType ())
#endif         
        
        | TType.Array (et, rank) =>
#if _NET_2_0
          if (rank == 1)
            et.GetSystemType ().MakeArrayType ()
          else            
            et.GetSystemType ().MakeArrayType (rank)
#else        
          def et = et.GetSystemType ();
          def rankstr = "[" + System.String (',', rank - 1) + "]";
          def ty = Passes.Emitter._module_builder.GetType (et.FullName + rankstr);
          if (ty == null) {
            def arr = System.Array.CreateInstance (et, (array (rank) : array [int]));
            assert (arr != null, "unbound array type " + et.FullName + rankstr);
            arr.GetType ()
          } 
          else ty
#endif          
      }
    }
  }

  [Record]
  public class Fun_parm : Located
  {
    public name : string;
    public color : int;
    public mutable ty : TType;
    public mutable decl : LocalValue;
    public modifiers : Modifiers;
#if NTE
    public kind : ParmKind;
#endif
  }

  public enum FunctionUsage 
  {
    | NotUsed
    | UsedJustOnce
    | Used
    | UsedAsFirstClass
  }
  
  public class Fun_header : Located, Nemerle.IComparable [Fun_header]
  {
    public mutable name : string;
    public id : int;
    public mutable ret_type : TType;
    public mutable parms : list [Fun_parm];
    public mutable typarms : list [Tyvar.T];
    public tenv : Tyvar.TEnv;

    public mutable usage : FunctionUsage;
    #if NTE
    public mutable body : FunBody;
    #else
    // used for loop generation
    public mutable body : TExpr;
    #endif

    /// local values defined in this function, which are closurised (used by children) 
    public mutable closure_vars : list [LocalValue] = [];
    /// local value, which is declaring this function (valid for local funs)
    public mutable decl : LocalValue;
    public mutable all_locals : list [LocalValue] = [];
    internal mutable children_funs : list [Fun_header] = [];

    internal mutable cg_method : CG_method;

    public CompareTo (other : Fun_header) : int
    {
      id - other.id
    }

    public this (loc : Location, 
                 name : string, 
                 ret_type : TType, 
                 parms : list [Fun_parm], 
                 typarms : list [Tyvar.T], 
                 tenv : Tyvar.TEnv)
    {
      base (loc);
      this.name = name;
      this.ret_type = ret_type;
      this.parms = parms;
      this.typarms = typarms;
      this.tenv = tenv;

      id = Util.next_id ();
      usage = FunctionUsage.NotUsed;
    }
    
    /**
     *  Retrieves functions in which current function is nested. Empty list if
     *  this is a plain method of some class.
     */
    public GetParents () : list [Fun_header] {
      if (decl != null)
        match (decl.kind) {
          | LocalValueKind.Function (_, pars) => pars
          | _ => Util.ice ("invalid value kind for function")
        }
      else []
    }
    
    public override ToString () : string {
      name
    }
  }

  
  [Record]
  public variant Pattern : Located
  {
    | Wildcard
    | As          { pat : Pattern; decl : LocalValue; }
    | HasType     { tycon : TypeInfo; }
    | Tuple       { args : list [Pattern]; }
    | Record      { args : list [IField * Pattern]; }
    | Application { name : TypeInfo; arg : Pattern; }
    | Enum        { fld : IField; val : Nemerle.Compiler.Literal; }
    | Literal     { lit : Nemerle.Compiler.Literal; }
#if NTE
    | Error
#endif

    public mutable ty : TType;      
  }

  [Record]
  public class Match_case
  {
    public mutable patterns : list [Pattern * TExpr];
    public mutable body : TExpr;
  }

  [Record]
  public variant TExpr : Located
  { 
    | LocalRef              { decl : LocalValue; }
    | StaticRef             { mem : IMember; }
    | ImplicitValueTypeCtor { tc : TypeInfo; }
    | FieldMember           { obj : TExpr; fld : IField; }
    | ConstantObjectRef     { mem : IField; }
    | PropertyMember        { obj : TExpr; prop : IProperty; }
    | StaticPropertyRef     { prop : IProperty; }
    | MethodRef             { obj : TExpr; meth : IMethod; notvirtual : bool; }
    | Call                  { func : TExpr; parms : list [Parm]; }
    | TailCall              { func : TExpr; parms : list [Parm]; }
    | SelfTailCall          { parms : list [Parm]; }
    | Assign                { target : TExpr; source : TExpr; }
    | DefValIn              { name : LocalValue; val : TExpr; body : TExpr; }
    | DefFunctionsIn        { funs : list [Fun_header]; body : TExpr; }
    | Match                 { expr : TExpr; cases : list [Match_case]; }
    | Throw                 { exn : TExpr; }
    | TryWith               { body : TExpr; exn : LocalValue; handler : TExpr; }
    | TryFinally            { body : TExpr; handler : TExpr; }
    | Literal               { val : Nemerle.Compiler.Literal; }
    | This
    | Base                  { base_ctor : IMethod; }
    | TypeConversion        { expr : TExpr; target_type : TType; is_checked : bool; }  // (expr :> ty)
    | TypeEnforcement       { expr : TExpr; target_type : TType; } // (expr : ty)
    | Sequence              { e1 : TExpr; e2 : TExpr; }
    | Tuple                 { args : list [TExpr]; }
    | Array                 { args : list [TExpr]; dimensions : list [TExpr]; }
    | TypeOf                { target_type : TType; }
    | ArrayIndexer          { over_type : TType; obj : TExpr; args : list [TExpr]; }
    | OpCode                { name : string; }
    
#if NTE
    | Delayed               { }
    | Overloaded            { mutable possibilities : list [OverloadPossibility]; }
    | Error
#endif // NTE

    public mutable ty : TType;
  }

  public enum ParmKind {
    | Normal
    | Ref
    | Out
  }

  [Record]
  public class Parm
  {
    public kind : ParmKind;
    public expr : TExpr;
    public name : string;  // "" if no name given

    public this (expr : TExpr)
    {
      kind = ParmKind.Normal;
      this.expr = expr;
      name = "";
    }
  }
} // Nemerle.Compiler.Typedtree
