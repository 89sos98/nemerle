(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Collections;
open Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler 
{
  module Passes 
  {
  (*
    private load_referenced_libs (libs : list (string)) : void {    
      match (libs) {
        | [] => ()
        | lib :: rest =>
          def lr = LibraryReference (FileName (lib));
          LibraryReferenceManager.AddLibrary (lr);
          load_referenced_libs (rest)
      }
    }
    *)
    
    (** 
     * Run passes of the compiler.  This function is run after input files
     * are parsed.  [decls] contains list of declarations in list of
     * parsed modules. 
     *)
    public run (do_xml : bool, decls : list (list (Top_decl)), referenced_libs : list (string)) : void
    {
      unless (do_xml == true)
        print_endline ("scan...");
      List.iter (Scan_globals.run, decls);
      (*
      unless (do_xml == true)
        print_endline ("libraries...");
      load_referenced_libs (referenced_libs);
      if (do_xml)
        XmlDump.run ()
      else {
      *)
        print_endline ("start...");
        Tyinfo.Run ();
        Message.maybe_bailout();
        print_endline ("typing...");
        Tyexpr.run ();
        Message.maybe_bailout();
        print_endline ("cg...");
        def decls = CGexpr.run ();
        Message.maybe_bailout();
        print_endline ("flat...");
        CGflat.run (decls);
        (*
        print_endline ("cgil (test)...");
        def _ = CGIL (decls);
        *)
        ()
      //}
    }      
  }
}
