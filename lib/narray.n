/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Utility 
{
  /**
   * Helper functions, absent from System.Array.
   */
  public module NArray
  {
    public Iter<'a> (arr : array <'a>, f : 'a -> void) : void
    {
      def loop (i) {
        if (i >= arr.Length) ()
        else {
          f (arr[i]);
          loop (i + 1);
        }
      };
      loop (0)
    }
    
    public IterI<'a> (arr : array <'a>, f : int * 'a -> void) : void
    {
      def loop (i) {
        if (i >= arr.Length) ()
        else {
          f (i, arr[i]);
          loop (i + 1);
        }
      };
      loop (0)
    }
    
    public Fold<'a, 'b> (arr : array <'b>, ini : 'a, f : 'b * 'a -> 'a) : 'a
    {
      def loop (acc, i) {
        if (i >= arr.Length) acc
        else loop (f (arr[i], acc), i + 1)
      };
      loop (ini, 0)
    }
    
    public FoldI<'a, 'b> (arr : array <'b>, ini : 'a, f : int * 'b * 'a -> 'a) : 'a
    {
      def loop (acc, i) {
        if (i >= arr.Length) acc
        else loop (f (i, arr[i], acc), i + 1)
      };
      loop (ini, 0)
    }

    /**
     * Returns 'true' if at least one of the 'l' arrays's elements
     * satisfies the condition 'f'.
     *
     * Example of use:
     *
     *   NArray.Exists (array ["a", "b", "abc", "d", "e"], fun (x) { x.Length > 2 })
     *
     * evaluates to 'true' as there is one string of length 3 on the list.
     */
    public Exists <'a> (a : array <'a>, f : 'a -> bool) : bool
    {
      def walk_array (i : int) : bool
      {
        if (i < a.Length)
          if (f (a [i]))
            true
          else
            walk_array (i + 1)
        else
          false
      }

      walk_array (0)
    }

    
    /**
     * Returns 'true' if exactly all of the 'l' arrays's elements
     * satisfy the condition 'f'.
     *
     * Example of use:
     *
     *   NArray.ForAll (array [2, 4, 6, 8, 10], fun (x) { x % 2 == 0 })
     *
     * evaluates to 'true' as all the array's elements are even integers.
     */
    public ForAll <'a> (a : array <'a>, f : 'a -> bool) : bool
    {
      def walk_array (i : int) : bool
      {
        if (i < a.Length)
          if (f (a [i]))
            walk_array (i + 1)
          else
            false
        else
          true
      }

      walk_array (0)
    }

    
    /**
     * Converts a list into an array. (it doesn't work too well in current type system)
     */  
    public FromList<'a> (t : System.Type, x : list <'a>) : array <'a> {
      def list_length = Nemerle.Collections.List.Length (x);
      def result = (System.Array.CreateInstance (t, list_length) :> array<'a>);
      mutable i = 0;
      Nemerle.Collections.List.Iter (x, fun (x) {
        result[i] = x; i = i + 1
      });
      result
    }
  }

} /* end of namespace */
