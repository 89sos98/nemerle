using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Peg;
using Nemerle.Utility;
using LRPEGCC;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpParser
{
  [PegGrammar(start,
  grammar
  {  
    any                       = ['\u0000'..'\uFFFF'];
    newLine                   = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
    singleLineComment         = "//" (!('\n' / '\r') any)* newLine?; // newLine необезательный так как комментарий может находиться в конце файла
    delimitedComment          = "/*" (!"*/" any)* "*/";
    comment                   = singleLineComment / delimitedComment;
    spaces                    = (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
    letter                    = (['A'..'Z', 'a' .. 'z', 'А' .. 'Я', 'а' .. 'я'] / '_');
    digit                     = ['0'..'9'];
    identifierValue           = '@'? letter (letter / digit)*;
    identifier   : string     = identifierValue spaces;
    //decimalDigits             = digit+;
    //hexDigit                  = ['0'..'9', 'A'..'F', 'a' .. 'f'];
    //integerTypeSuffix         = 'U' / 'u' / 'L' / 'l' / "UL" / "Ul" / "uL" / "ul" / "LU" / "Lu" / "lU" / "lu";
    //decimalIntegerLiteral     = decimalDigits !(realTypeSuffix / E / '.') integerTypeSuffix? spaces;
    //hexadecimalIntegerLiteral = '0' ('x' / 'X') hexDigit+  integerTypeSuffix? spaces;
    //integerLiteral            = decimalIntegerLiteral / hexadecimalIntegerLiteral;
    //exponentPart              = E  ('+' / '-' / Empry)   decimalDigits;
    //E                         = 'e' / 'E';
    //realTypeSuffix            = 'F' / 'f' / 'D' / 'd' / 'M' / 'm';

    // decimalIntegerLiteral пересекается с realLiteral, так что нужно использовать предикаты или ставить 
    // realLiteral раньше decimalIntegerLiteral в преорететном выборе!
    //realLiteral1              = decimalDigits  '.'   decimalDigits   exponentPart?   realTypeSuffix?;
    //realLiteral2              =                '.'   decimalDigits   exponentPart?   realTypeSuffix?;
    //realLiteral3              =                      decimalDigits   exponentPart    realTypeSuffix?;
    //realLiteral4              =                      decimalDigits                   realTypeSuffix;
    //realLiteral               = realLiteral1 / realLiteral2 / realLiteral3 / realLiteral4;
    
    
    //num             : int = digit spaces;
    //unaryMinus      : int = '-' spaces simplExpr;
    //parenthesesExpr : int = '(' spaces sumOrSub ')' spaces;
    //simplExpr       : int = num / parenthesesExpr / unaryMinus;
    //mulOrDiv        : int = simplExpr (('*' / '/') spaces simplExpr)*;
    //sumOrSub        : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    start       : string = spaces identifier !any;
  })]
  public class CsParser
  {
    private identifier(identifier : NToken, _spaces : NToken) : string
    {
      identifier.GetText()
    }
    
    private start(_ : NToken, identifier : VToken[string], _ : NToken) : string
    {
      identifier.Value
    }
  }
}
