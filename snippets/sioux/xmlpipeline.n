/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.Xml;
using System.Xml.Xsl; 
 
namespace Nemerle.Xml
{
    /**
     *  description of xml pipeline, used to process xml files
     */
    public class XmlPipeline
    {
        /* -- PUBLIC METHODS ----------------------------------------------------- */

        /**
         *  Method used to generate xml templates and transform it using page handlers and xsl styles
         */
        public static Process(generator : IGenerator ,
                              handlers : list <XmlTemplate -> XmlTemplate> ,
                              styles : list <XslTransform>) : XmlTemplate
        {
            mutable doc = generator.Generate();

            def apply_handlers(hs : list <XmlTemplate -> XmlTemplate>)
            {
                match(hs)
                {
                    | [] => ()
                    | head :: tail => doc = head(doc);
                                      apply_handlers(tail)
                }
            }
            apply_handlers(handlers);
            
            def apply_styles(stylesheets)
            {
                match(stylesheets)
                {
                    | [] => ()
                    | head :: tail => doc = XmlTemplate(apply_xsl_transform(head , doc.GetDocument()));
                                      apply_styles(tail)
                }
            }
            apply_styles(styles);
            
            doc
        }

        /* -- PRIVATE METHODS ------------------------------------------------------------------*/
        
        private static apply_xsl_transform (xsl : XslTransform, doc : XmlDocument): XmlDocument
        {            
            def reader = xsl.Transform (doc, null, (null : XmlResolver));
            def result = XmlDocument ();
            result.XmlResolver = null;
            result.Load (reader);
            result    
        }
        
    }
}