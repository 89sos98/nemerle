(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

namespace Nemerle.Collections 
{ 
  (**
   * 
   *)
  class Empty_queue extends System.Exception 
  {
    public this () {}
  }


  (**
   *
   *)
  class Queue ('a) 
    implements ICollection('a)
  {
    mutable first : list ('a);
    mutable last  : list ('a);

    public this () {
      this.first <- [];
      this.last  <- [];
    }


    (* BACKWARD COMPATIBILITY WRAPPERS *)
    public add (x : ('a)) : void 
      { Add (x); }
    public iter (f : ('a) -> void) : void 
      { Iter (f); }
    public clear () : void
    { Clear (); }
     
    
    private move () : void {
      match (this.first) {
        | [] => this.first <- List.Rev (this.last)
        | _  => ()
      }
    }

    public Add (x : ('a)) : void 
      {
        this.last <- x :: this.last;
      }
     
    public Push (x : ('a)) : void {
      this.Add (x)
    }
     
    public Take () : ('a) {
      this.move ();
      match (this.first) {
        | x :: xs => 
          this.first <- xs;
          x
        | [] => raise Empty_queue ()
      }
    }

    public Pop () : ('a) {
      this.Take ()
    }

    public Peek () : ('a) {
      this.move ();
      match (this.first) {
        | x :: _ => x
        | [] => raise EmptyCollection ("Nemerle.Collections.Queue")
      }
    }

    public Top () : ('a) {
      this.Peek ()
    }

    public First () : ('a) {
      this.Peek ()
    }

    public Clear () : void {
      this.first <- [];
      this.last  <- [];
    }

    public Copy () : Queue ('a) {
      def q =  Queue();
      q.first <- List.Copy(this.first);
      q.last  <- List.Copy(this.last);
      q
    }

    public IsEmpty () : bool {
      this.move ();
      match (this.first) {
        | [] => true
        | _  => false
      }
    }

    public Length () : int {
      List.Length (this.first) + List.Length (this.last)
    }
    public Size () : int 
      { Length () }

    public Iter (f : ('a) -> void) : void {
      this.move ();
      List.Iter (f, this.first);
    }

    public 'b Fold (f : ('b * 'a) -> 'b, x : 'b) : 'b {
      this.move ();
      List.FoldLeft (f, x, this.first)
    }

    public Transfer (q : Queue('a)) : void {
      this.move();
      q.move();
      this.last <- List.Rev (q.first);
      q.first <- []
    }

    public Member (x : 'a) : bool {
      List.Memq(x,this.first) || List.Memq(x,this.last)
    }

    public Remove (x : 'a) : void{
      this.first <- List.Remove(x,this.first);
      this.last <- List.Remove(x,this.last);
      move ()
    }

    public ForAll (f : 'a -> bool) : bool {
      List.ForAll (f,this.first) && List.ForAll (f,this.last)
    }

    public Exists (f : 'a -> bool) : bool {
      List.Exists (f,this.first) || List.Exists (f,this.last)
    }

    public Filter (f : 'a -> bool) : void {
      this.first <- List.Filter(f,this.first);
      this.last  <- List.Filter(f,this.last);
      move ()
    }

    public 'b Map (f : 'a -> 'b) : ICollection ('b) {
      def q = Queue ();
      q.first <- List.Map(f,this.first);
      q.last  <- List.Map(f,this.last);
      q
    }

    public Partition (f : 'a -> bool): (ICollection('a) * ICollection('a)) {
      def sat    = Queue ();
      def nonsat = Queue ();
      def (s,n) = List.Partition(f,this.first);
      sat.first <- s; 
      nonsat.first <- n;
      def (s,n) = List.Partition(f,this.last);
      sat.last <- s;
      nonsat.last <- n;
      sat.move ();
      nonsat.move ();
      (sat,nonsat)
    }

  } (* end of class Queue *)
} (* end of namespace *)

