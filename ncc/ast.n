(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Compiler;

namespace Nemerle.Compiler {

class Location 
  {
    file : string;
    line : int;
    column : int;
  }
  
class Located
  {
    mutable loc : Location;
    this () {}
  }

variant Modifier 
  {
    | Mod_public
    | Mod_private
    | Mod_new
    | Mod_protected
    | Mod_internal
    | Mod_abstract
    | Mod_sealed
    | Mod_static
  }
  
variant Literal
  {
    | L_void
    | L_null
    | L_int { val : int; }
    | L_string { val : string; }
    | L_float { val : float; }
    | L_char { val : int; }
    | L_bool { val : bool; }
  }

variant Val_kind
  {
    | Val_normal
    | Val_extern { name : string; }
  }
  
variant Fun_body
  {
    | FB_parsed_expr { expr : Parsetree.Expr; }
    | FB_typed_expr { expr : Typedtree.Expr; }
    | FB_extern { name : string; }
    | FB_abstract  // for interafce method
  }

variant Fun_kind
  {
    | FK_method { f_implements : list (string); }
    | FK_bound_method { f_implements : list (Decl); }
    | FK_ctor
    | FK_static_ctor
    | FK_function
    | FK_iface_method { new_flag : bool; }
  }


} // Nemerle.Compiler
