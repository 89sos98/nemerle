/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler 
{
  /** Represents an explicitly bound type variable, like the one from
      polymorphic type or method definition. It is also used in
      generalizations of inferred types. */
  public class StaticTyVar
  {
    public override ToString () : string
    {
      // XXX include constraints?
      $ "$(Name).$(Id)"
    }


    /** Return lower constraints on given type variable (that is the
        [where] clauses). The constraints should be already normalized (that 
        is they should follow MType.Intersection invariants).
      */
    public Constraints : list [MType]
    {
      get {
        assert (constraints != null);
        constraints
      }

      set {
        assert (constraints == null);
        constraints = value;
        unless (value.IsEmpty)
          LowerBound.Validate ();
      }
    }


    public LowerBound : MType
    {
      get {
        assert (constraints != null);
        match (constraints) {
          | [] =>
            assert (InternalType.Object != null);
            InternalType.Object
          | [x] => x
          | lst => MType.Intersection (lst)
        }
      }
    }
    

    public Name : string
    {
      get { name }
    }


    public Id : int
    {
       get { id }
    }
    

    public this (name : string)
    {
      this.name = name;
      id = current_id;
      ++current_id;
    }

    public GetSystemType () : System.Type
    {
#if _GENERICS
      assert (gbuilder != null);
      gbuilder
#else    
      match (Constraints) {
        | [] => SystemType.Object
        | t :: _ => t.GetSystemType ()
      }
#endif      
    }


    [Nemerle.OverrideObjectEquals]
    public Equals (o : StaticTyVar) : bool
    {
      id == o.id
    }

#if _GENERICS
    internal SetGenericBuilder (x : SRE.GenericTypeParameterBuilder) : void
    {
      gbuilder = x;
    }

    mutable gbuilder : SRE.GenericTypeParameterBuilder = null; 
#endif
    internal id : int;
    static mutable current_id : int;
    name : string;
    mutable constraints : list [MType];
  }
}
