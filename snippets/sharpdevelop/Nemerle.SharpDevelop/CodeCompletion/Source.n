using System;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class Source : ISource {

        public this(item : ProjectItem, file_index : int) {
            this.item = item;
            this.file_index = file_index;
        }

        [Accessor] item : ProjectItem;

        [Accessor] file_index : int;

        [Accessor] relocation_requests_queue : SCG.List[RelocationRequest] = SCG.List();

        [Accessor] mutable current_version : int = 0;

        internal Declarations : array[TopDeclaration] {
            get;
            set;
        }

        internal Document : IDocument {
            get;
            set;
        }

        public CompileUnit : CompileUnit {
            get;
            set;
        }

        public LineCount : int { 
            get { 0 }
        }

        public LockWrite() : void {
        }

        public UnlockWrite() : void {
        }

        public LockReadWrite() : void {
        }

        public UnlocReadkWrite() : void {
        }

        public GetTextCurrentVersionAndFileIndex() : string * int * int {
            LockWrite();
            try {
                (GetText(), CurrentVersion, FileIndex)
            } finally {
                UnlockWrite();
            }
        }

        public SetRegions(regions : SCG.IList[RegionInfo], sourceVersion : int) : void {
        }

        public SetTopDeclarations(topDeclarations : array[TopDeclaration]) : void {
            Declarations = topDeclarations;
        }

        public GetText() : string {
            ""
        }

        public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string {
            ""
        }

        public GetRegion(location : Location) : string {
            GetRegion(location.Line, location.Column, location.EndLine, location.EndColumn);
        }

        public GetLine(line : int) : string {
            ""
        }

        public GetPositionOfLineIndex(line : int, col : int) : int {
            0
        }

        public GetLineIndexOfPosition(pos : int) : int * int {
            (0, 0)
        }

    }

}