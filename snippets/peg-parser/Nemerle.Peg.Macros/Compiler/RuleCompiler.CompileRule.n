using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    _typer    : Typer;
    _tb       : TypeBuilder;
    _isDebug  : bool;
    _pegLocatedType : FixedType;

    public this(typer : Typer, tb : TypeBuilder)
    {
      _typer    = typer;
      _tb       = tb;
      _isDebug  = _typer.Manager.Options.IsConstantDefined("DEBUG");
      _pegLocatedType = FixedType.Class(_typer.Manager.LookupTypeInfo("Nemerle.Peg.Located", 0), []);
    }

    public CompileRule(ruleToCompile : RuleDefinition,
                       useResult : bool,
                       callRule : NameRef * bool -> void,
                       defineMemoize : NameRef * FixedType -> string * string * string * string
                       ) : PExpr
    {
      def initMethodsMap(tb : TypeBuilder) : Hashtable[string, ClassMember.Function]
      {
        def isScopeHendler(m : ClassMember)
        {
          | Function as f => 
            f.Name.EndsWith(RuleCompiler.ScopeBeginSufix, RuleCompiler.ScopeEndSufix)
            && f.header.Parameters.Length <= 1;

          | _ => false
        }
        def methods = tb.GetParsedMembers(false).Filter(isScopeHendler).Map(_ :> ClassMember.Function);
        def groupedMethods = methods.GroupBy(m => m.Name);
        def methodsMap = Hashtable();

        foreach (g in groupedMethods)
        {
          def method = g.First();
          when (g.Count() > 1)
            Message.Error(method.Location, $"The method '$(g.Key)' is scope handler. The overloading not supported to scope handler.");
          methodsMap.Add(g.Key, method);
        }

        methodsMap
      }
      def methodsMap = initMethodsMap(_tb);

      def prepandExprs(exprs : list[PExpr], mainExpr : PExpr.Sequence) : PExpr.Sequence
      {
        match (mainExpr)
        {
          | <[ { ..$nestedExprs } ]> => <[ { ..$(exprs + nestedExprs) } ]>
        }
      }

      def defVars(exprs : list[string], mainExpr : PExpr.Sequence) : PExpr.Sequence
      {
        def vars = exprs.Map(var => <[ mutable $(var : dyn); ]>);
        match (mainExpr)
        {
          | <[ { ..$nestedExprs } ]> => <[ { ..$(vars + nestedExprs) } ]>
        }
      }

      mutable labelCount = 0;
      mutable varCount = 0;
      def newVar()
      {
        ++varCount;
        $"token_$(varCount)";
      }

      def makeVariables(subrule : Rule) : list[string]
      {
        match (subrule)
        {
          | Capture(Handler(_, _, ty), _)
          | Capture(Argument(ty), _)
            =>
            match (ty)
            {
              | Tuple(types) => types.MapFiltered(ty => !(ty is RuleType.Void), _ => newVar())
              | None         => []
              | _            => [newVar()]
            }
          | _ => []
        }
      }

      def testChar(rset)
      {
        def makeCond(rset)
        {
          def cmp(range : RangeSet.Range)
          {
            if (range.from == range.to)
              (1, [<[ c == $(range.from : char) ]>])
            else if (range.from == char.MinValue)
              (1, [<[ c <= $(range.to : char) ]>])
            else if (range.to == char.MaxValue)
              (1, [<[ $(range.from : char) <= c ]>])
            else if (range.from + 1 == range.to)
              (2, [<[ c == $(range.from : char) ]>, <[ c == $(range.to : char) ]>])
            else
              (2, [<[ ($(range.from : char) <= c && c <= $(range.to : char)) ]>])
          }
          def rset = rset.Ranges.Map(cmp);

          def (rsetSize, rset) = rset.Fold((0, []), ((sz, r), (rsetSize, rset)) => (rsetSize + sz, r :: rset));

          def gen(ranges)
          {
            | [range]         => range;
            | range :: ranges => <[ $range || $(gen(ranges))]>
            | []              => <[ false ]>;
          }
          (rsetSize, gen(rset.Reverse().Flatten()))
        }

        if (rset.Ranges.Length > 2 && !_isDebug)
        {
          def ranges = rset.Ranges.NToArray();
          def rec(first, last)
          {
            match (last - first)
            {
              | 0 =>
                <[ c <= $(ranges[last].to : char) ]>
              | _ =>
                def mid = (first + last) / 2 + 1;
                <[
                  if (c >= $(ranges[mid].from : char))
                    { $(rec(mid, last)); }
                  else
                    { $(rec(first, mid - 1)); }
                ]>
            }
          }
          def last = ranges.Length - 1;
          <[
            if (c >= $(ranges[0].from : char))
              { $(rec(0, last)); }
            else
              { false; }
          ]>
        }
        else
        {
          def nset = RangeSet().AddRange(char.MinValue, char.MaxValue).Sub(rset);
          def (rsetSize, rset) = makeCond(rset);
          def (nsetSize, nset) = makeCond(nset);
          if (rsetSize <= nsetSize && !_isDebug)
            rset;
          else
            <[! $nset]>;
        }
      }

      def makeSubruleCode(results         : list[string],
                          subrule         : Rule,
                          makeInitExpr    : PExpr               -> PExpr,
                          makeSetExpr     : PExpr * list[PExpr] -> PExpr,
                          makeSetNoneExpr : PExpr               -> PExpr)
        : list[PExpr] * PExpr * PExpr * PExpr
      {
        match (results)
        {
          | [] =>
            ([], <[ () ]>, <[ () ]>, compile(subrule, []))

          | [result] =>
            def result          = <[ $(result : dyn) ]>;
            def variables       = makeVariables(subrule);
            def ruleCode        = compile(subrule, variables);
            def initList        = makeInitExpr(result);
            def setExpr         = makeSetExpr(result, variables.Map(var => <[ $(var : dyn) ]>));
            def setNoneExpr     = makeSetNoneExpr(result);
            def initialising    = initList :: variables.Map(var => <[ mutable $(var : dyn); ]>);
            (initialising, setExpr, setNoneExpr, ruleCode)

          | _ => assert(false);
        }
      }
      and makeListCode(results      : list[string],
                       subrule      : Rule)
        : list[PExpr] * PExpr * PExpr
      {
        def (initialising, setExpr, _setNoneExpr, rule) =
          makeSubruleCode(results, subrule,
                        varRef                 => <[ $varRef = SCG.List(); ]>, 
                        (varRef, variableRefs) => <[ $varRef.Add(..$variableRefs); ]>,
                        _                      => <[ () ]>);
        (initialising, setExpr, rule)
      }
      and compile(currentRule : Rule, results : list[string]) : PExpr
      {
        def code = match (currentRule)
        {
          | And(rule)              =>
            <[
              {
                def newPos = $(compile(rule, []));
                if (newPos >= 0) pos else -1;
              }
            ]>

          | Not(Chars([RangeSet where (Ranges = [range])])) when range.from == char.MinValue && range.to == char.MaxValue => // !any
            <[
              {
                if (pos >= text.Length) pos else -1;
              }
            ]>

          | Not(rule)              =>
            <[
              {
                def newPos = $(compile(rule, []));
                if (newPos < 0) pos else -1;
              }
            ]>

          | Call(name)             =>
            match (results)
            {
              | [] =>
                callRule(name, false);
                <[
                  {
                    $(DecorateRuleName(name.Id) : dyn)(pos, text);
                  }
                ]>

              | [result] =>
                callRule(name, true);
                <[
                  {
                    $(DecorateRuleName(name.Id) : dyn)(pos, ref $(result : dyn), text);
                  }
                ]>

              | _ => assert(false);
            }

          | Fsm(fsm)               =>
            def fsm = DFSMTransform.Do(fsm);
            def labelOfs = labelCount;
            labelCount += fsm.StateCount + 2;
            def okState  = fsm.StateCount;
            def endState = fsm.StateCount + 1;
            def goto(n)  { PExpr.Typed(Location.Default, TExpr.Goto(_typer.Manager.InternalType.Void, labelOfs + n, 1)) }
            def label(n) { PExpr.Typed(Location.Default, TExpr.Label(_typer.Manager.InternalType.Void, labelOfs + n, TExpr.DefaultValue(_typer.Manager.InternalType.Void))) }
            def states = $[0..fsm.StateCount - 1].Fold(SCG.Dictionary(), (state, states) =>
              {
                def transitions = fsm.Transitions.Filter(t => t.From == state);
                def sumbolTransitions = transitions.MapFiltered(_ is Transition.Symbol, _ :> Transition.Symbol);
                def isOkState = fsm.OkStates.Contains(state);
                states.Add(state, (isOkState, sumbolTransitions));
                states;
              });
            def statements = SCG.List();
            statements.Add(<[ mutable okPos = -1 ]>);
            statements.Add(<[ mutable curPos = pos ]>);
            when (fsm.StartState != 0)
              statements.Add(goto(fsm.StartState));
            for (mutable state = 0; state < fsm.StateCount; ++state)
            {
              def (isOkState, sumbolTransitions) = states[state];
              when (!sumbolTransitions.IsEmpty())
              {
                statements.Add(label(state));
                when (isOkState)
                  statements.Add(<[ okPos = curPos ]>);
                statements.Add(<[ when (curPos >= text.Length) $(goto(endState)) ]>);
                statements.Add(<[ c = text[curPos] ]>);
                statements.Add(<[ ++curPos ]>);
                foreach (trans in sumbolTransitions)
                {
                  def (isOkState, sumbolTransitions) = states[trans.To];
                  def toState = if (sumbolTransitions.IsEmpty())
                    if (isOkState)
                      okState;
                    else
                      endState;
                  else
                    trans.To;
                  statements.Add(<[ when ($(testChar(trans.Chars))) $(goto(toState)) ]>);
                }
                statements.Add(goto(endState));
              }
            }
            statements.Add(label(okState));
            statements.Add(<[ okPos = curPos ]>);
            statements.Add(label(endState));
            statements.Add(<[ okPos ]>);
            PExpr.Sequence(statements.NToList());

          | Chars(chars)           =>
            def generate(_)
            {
              | [ch] =>
                match (ch.Ranges)
                {
                  | [range] when range.from == char.MinValue && range.to == char.MaxValue =>
                    <[ pos + 1 ]>
                  | _ =>
                    <[
                      c = text[pos];
                      if ($(testChar(ch))) pos + 1 else -1;
                    ]>
                }
              
              | ch :: chars =>
                match (ch.Ranges)
                {
                  | [range] when range.from == char.MinValue && range.to == char.MaxValue =>
                    <[
                      def pos = pos + 1;
                      $(generate(chars));
                    ]>
                  | _ =>
                    <[
                      c = text[pos];
                      
                      if ($(testChar(ch)))
                      {
                        def pos = pos + 1;
                        $(generate(chars));
                      }
                      else
                        -1;
                    ]>
                }

              | [] => assert(false);
            }
            def len = chars.Length;
            def check = if (len > 1) <[pos + $((len - 1) : int)]> else <[pos]>;

            if (len > 1 && chars.ForAll(_.IsSinglChar))
            {
              def makeCharCheckCode(ch, i : int) : PExpr
              {
                def index = if (i <= 0) <[ pos ]> else <[ pos + $(i : int) ]>;
                
                <[ text[$index] == $(ch.Ranges.Head.from : char) ]>
              }
              def exprs = chars.Select(makeCharCheckCode);
              def condExpr = exprs.Aggregate((e1, e2) => <[ $e1 && $e2 ]>);
            
              match (results)
              {
                | [] => <[ if ($check < text.Length && $condExpr) pos + $(len : int) else -1 ]>
                | [result] =>
                  <[
                    def newPos = if ($check < text.Length && $condExpr) pos + $(len : int) else -1;
                    when (newPos >= 0)
                      $(result : dyn) = Nemerle.Peg.NToken(pos, newPos);
                    newPos
                  ]>
                  
                | _ => assert(false);
              }
            }
            else match (results)
            {
              | [] => <[ if ($check < text.Length) $(generate(chars)) else -1 ]>
              | [result] =>
                <[
                  def newPos = if ($check < text.Length) $(generate(chars)) else -1;
                  when (newPos >= 0)
                    $(result : dyn) = Nemerle.Peg.NToken(pos, newPos);
                  newPos
                ]>
                
              | _ => assert(false);
            }

          | Choice(rules)          =>
            def generate(_)
            {
              | [rule]        => rule;
              | rule :: rules =>
                <[
                  {
                    def newPos = $rule;
                    
                    if (newPos < 0) $(generate(rules)) else newPos;
                  }
                ]>

              | []            => assert(false);
            }

            generate(rules.Map(compile(_, results)));

          | RepeatMinMax(0, 1, subrule)    =>
            def (initialising, setExpr, setNoneExpr, ruleCode) = match (subrule)
            {
              | Capture(Handler(_, _, ty), _) when GrammarTyper.IsOptimizableOptionType(ty)
              | Capture(Argument(ty), _) when GrammarTyper.IsOptimizableOptionType(ty) =>
                makeSubruleCode(results, subrule,
                                _                      => <[ () ]>,
                                (varRef, variableRefs) => match (variableRefs)
                                                          {
                                                            | [variableRef] => <[ $varRef = $variableRef; ]>
                                                            | _ => assert(false);
                                                          },
                                _                      => <[ () ]>);

              | _ =>
                makeSubruleCode(results, subrule,
                                _                      => <[ () ]>,
                                (varRef, variableRefs) => <[ $varRef = Some(..$variableRefs); ]>,
                                varRef                 => <[ $varRef = None(); ]>);
            }
            prepandExprs(initialising, <[
              {
                def newPos = $ruleCode;

                if (newPos >= 0)
                {
                  $setExpr;
                  newPos
                }
                else
                {
                  $setNoneExpr;
                  pos
                }
              }
            ]>)

          | RepeatMinMax(minCount, maxCount, subrule)    =>
            def (initialising, addTokensToList, ruleCode) = makeListCode(results, subrule);
            prepandExprs(initialising, <[
              {
                def rep(count, pos)
                {
                  if (count == $(maxCount : int))
                    pos
                  else
                  {
                    def newPos = $ruleCode;

                    if (newPos >= 0)
                    {
                      $addTokensToList;
                      rep(count + 1, newPos)
                    }
                    else if (count >= $(minCount : int))
                      pos
                    else
                      -1
                   }
                }

                rep(0, pos);
              }
            ]>);

          | RepeatMin(0, subrule)    =>
            def (initialising, addTokensToList, ruleCode) = makeListCode(results, subrule);

            prepandExprs(initialising, <[
              {
                def rep(pos : int)
                {
                  def newPos = $ruleCode;

                  if (newPos >= 0)
                  {
                    $addTokensToList;
                    rep(newPos)
                  }
                  else
                    pos
                }

                rep(pos)
              }
            ]>)

          | RepeatMin(minCount, subrule)    =>
            def (initialising, addTokensToList, ruleCode) = makeListCode(results, subrule);

            prepandExprs(initialising, <[
              {
                def rep(count, pos)
                {
                  def newPos = $ruleCode;

                  if (newPos >= 0)
                  {
                    $addTokensToList;

                    rep(count + 1, newPos)
                  }
                  else if (count >= $(minCount : int))
                    pos
                  else
                    -1
                }

                rep(0, pos)
              }
            ]>)

          | Sequence(subrules)        =>
            def generate(rules : list[Rule], results : list[string]) : PExpr
            {
              match (rules)
              {
                | [rule]        => compile(rule, results);
                | rule :: rules =>
                  match (rule)
                  {
                    | Capture(Handler(_, _, ty), _) when !(ty is RuleType.None || ty is RuleType.Void)
                    | Capture(Argument(ty), _)      when !(ty is RuleType.None || ty is RuleType.Void)
                      =>
                      def (result :: results) = results;
                      def ruleCode = compile(rule, [result]);
                      <[
                        {
                          def pos = $ruleCode;
                          if (pos >= 0) $(generate(rules, results)) else -1
                        }
                      ]>

                    | _ =>
                      def ruleCode = compile(rule, []);
                      <[
                        {
                          def pos = $ruleCode;
                          if (pos >= 0) $(generate(rules, results)) else -1
                        }
                      ]>
                  }

                | []                =>
                  assert(results.Length == 0);
                  <[ { pos } ]>;
              }
            }

            def generateNoResult(rules : list[Rule]) : PExpr
            {
              match (rules)
              {
                | [rule]        => compile(rule, []);
                | rule :: rules =>
                  <[
                    {
                      def pos = $(compile(rule, []));
                      if (pos >= 0) $(generateNoResult(rules)) else -1
                    }
                  ]>
                | []            =>  <[ { pos } ]>;
              }
            }

            match (results)
            {
              | [] => generateNoResult(subrules);
              | _  => generate(subrules, results);
            }

          | Capture(Argument(Chars), subrule) =>
            def code = compile(subrule, []);
            match (results)
            {
              | []       => code;
              | [result] =>
                <[
                  def newPos = $code;
                  when (newPos >= 0)
                    $(result : dyn) = Nemerle.Peg.NToken(pos, newPos);
                  newPos;
                ]>
              | _ => assert(false);
            }

          | Capture(Argument, subrule) => compile(subrule, results);
          | Capture(Handler(name, _, retType), subrule) =>
            match (results)
            {
              | []       => compile(subrule, [])
              | [result] =>
                def varNames     = makeVariables(subrule);
                def subRuesCode  = compile(subrule, varNames);

                def ty = match(retType : RuleType)
                {
                  | NType(ty) => ty
                  | _         => assert(false);
                }

                def setResultLocation =
                  if (ty.TryRequire(_pegLocatedType))
                    match(varNames)
                    {
                      | []  with (start = <[ pos ]>,
                                  end   = <[ newPos ]>)
                      | _   with (start = <[ Nemerle.Peg.Internal.EvalLocationStart($(varNames.Head : dyn), pos) ]>,
                                  end   = <[ Nemerle.Peg.Internal.EvalLocationEnd($(varNames.Last() : dyn), newPos) ]>)
                        =>
                        <[ $(result : dyn).Location = Nemerle.Peg.Location(_parsingSource, $start, $end); ]>
                    }
                  else
                    <[ () ]>;

                def (memPos, memNewPos, memResult, maxRollbackPos) = defineMemoize(name, ty);

                defVars(varNames, <[
                  {
                    if ($(memPos : dyn) == pos)
                    {
                      when ($(memNewPos : dyn) >= 0)
                        $(result : dyn) = $(memResult : dyn);
                      $(memNewPos : dyn)
                    }
                    else
                    {
                      $(memPos : dyn) = pos;
                      def newPos = $subRuesCode;
                      $(memNewPos : dyn) = newPos;

                      if (newPos >= 0)
                      {
                        $(result : dyn) = $(name.Id : dyn)(..$(varNames.Map(var => <[ $(var : dyn) ]>)));
                        $setResultLocation;
                        $(memResult : dyn) = $(result : dyn);
                      }
                      else
                        when ($(maxRollbackPos : dyn) < pos)
                          $(maxRollbackPos : dyn) = pos;

                      newPos
                    }
                  }
                ]>)
              | _        => assert(false);
            }

          | Scope(name, subrule) =>
            def beginName = name.Id + RuleCompiler.ScopeBeginSufix;
            def endName   = name.Id + RuleCompiler.ScopeEndSufix;
            def checkHandler(name : string, methodsMap : Hashtable[string, ClassMember.Function]) : option[bool]
            {
              mutable method;

              if (methodsMap.TryGetValue(name, out method))
              {
                def paramCount = method.header.Parameters.Length;
                def boolTy = _tb.InternalType.Boolean;

                if (name.EndsWith(RuleCompiler.ScopeBeginSufix) && paramCount != 0)
                  Message.Error(method.NameLocation, "A begin scope handler must have no parameters.")
                else
                {
                  assert(name.EndsWith(RuleCompiler.ScopeEndSufix));
                  when (paramCount != 1 || !_tb.BindFixedType(method.header.Parameters.Head.Type).Equals(boolTy))
                    Message.Error(method.NameLocation, "A end scope handler must have only one boolean parameter.")
                }

                def ty = _tb.BindFixedType(method.header.ReturnType);

                match (ty)
                {
                  | FixedType.Void => Some(false)
                  | _ =>
                    if (ty.Equals(boolTy))
                      Some(true)
                    else
                    {
                      Message.Error(method.header.ReturnType.Location, 
                        "The return type of scope handler must be void or bool");
                      Some(false)
                    }
                }
              }
              else
                None();
            }
            def beginRes  = checkHandler(beginName, methodsMap);
            def endRes    = checkHandler(endName,   methodsMap);
            def subRuesCode = compile(subrule, results);

            when (endRes.IsNone && beginRes.IsNone)
              Message.Error(name.Location, $"You must specify at least one scope handler for scope $name. Scope handlers must have signatures: '$beginName() : bool/void', '$endName(isOk : bool) : bool/void'.");

            def code =
              match (endRes)
              {
                | Some(true) =>
                  <[
                    def newPos = $subRuesCode;
                    if ($(endName : dyn)(newPos >= 0))
                      newPos;
                    else
                      -1;
                  ]>

                | Some(false) =>
                  <[
                    def newPos = $subRuesCode;
                    $(endName : dyn)(newPos >= 0);
                    newPos;
                  ]>

                | None => subRuesCode
              };

            match (beginRes)
            {
              | Some(true) =>
                <[
                  if ($(beginName : dyn)())
                    $code
                  else
                    -1
                ]>

              | Some(false) =>
                <[
                  $(beginName : dyn)();
                  $code;
                ]>

              | None => code
            }

          | Cut => throw NotImplementedException();
        }

        if (_isDebug)
        {
          match (currentRule)
          {
            | Capture(Argument, _) =>
              code;
            | _ =>
              def s = $"$currentRule";
              <[
                _ = $(s : string);
                $code;
              ]>
          }
        }
        else
          code
      } // end of compile()

      match (ruleToCompile.Rule)
      {
        | Some(rule )=>
          if (useResult)
          {
            match (ruleToCompile.Attributes.Filter(_ is RuleAttribute.Recovery))
            {
              | [] =>
                <[
                  unchecked
                  {
                    mutable c : char;
                    _ = c; // eliminate warning "a local value c was never used"
                    $(compile(rule, ["result"]))
                  }
                ]>

              | [recovery is RuleAttribute.Recovery] =>
                
                def skipRule = compile(Rule.RepeatMin(0, Rule.Sequence([Rule.Not(recovery.stop), recovery.skip])), []);
                <[
                  unchecked
                  {
                    mutable c : char;
                    _ = c; // eliminate warning "a local value c was never used"
                    def newPos = $(compile(rule, ["result"]));
                    if (newPos < 0)
                    {
                      def skipPos = $skipRule;
                      if (skipPos > pos)
                      {
                        $("result" : dyn) = $(recovery.handlerName.Id : usesite)(pos, skipPos, $(ruleToCompile.Id : int));
                        ResetMaxRollbackPos();
                        skipPos
                      }
                      else
                        -1
                    }
                    else
                      newPos;
                  }
                ]>

              | _ =>
                Message.Error(ruleToCompile.Location, "RuleAttribute.Recovery can by only one.");
                PExpr.Error();
            }
          }
          else
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                $(compile(rule, []))
              }
            ]>
        | _ => 
          if (useResult)
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                _ = result;
                -1
              }
            ]>
          else
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                -1
              }
            ]>
      }
    }
  }
}
