using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.WUI.Reactive
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro View(tb : TypeBuilder, method : MethodBuilder) 
  {
    ViewImpl.DoTransform(tb, method, Macros.ImplicitCTX())
  }
  
  module ViewImpl
  {
    public DoTransform(tb : TypeBuilder, method : MethodBuilder, typer : Typer) : void
    {
      Macros.DefineCTX(typer); _ = tb;
      
      match (method.Header.body)
      {
        | FunBody.Parsed(body) =>
          def newBody = <[ Nemerle.WUI.Reactive.TransformView($body) ]>;
          newBody.Location = body.Location;
          method.Header.body =  FunBody.Parsed(newBody);
          
        | _ => ()
      }
    }
  }
}
