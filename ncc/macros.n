/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Transformations of quoted expressions into syntax trees
 */

using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.IO;

using Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;
using System.Text;

namespace Nemerle.Compiler {

public module Macros
{
  /// PUBLIC API FOR USAGE IN MACROS

  /** generates new unique symbol, which can be safely used
      as name of quoted variables, functions, etc.
   */
  public NewSymbol () : Name
  {
    Name ([Util.tmpname ("")], TypingContext.MacroColor, null)
  }

  /** controlled hygiene breaking - generates symbol, which
      placed in generated code would bind to variables
      at macro-use site
   */
  public UseSiteSymbol (id : string) : Name
  {
    Name (NString.Split (id, array ['.']), TypingContext.MacroUseColor, 
          TypingContext.MacroUseContext)
  }

  /** Checks if given expression describes name of a type, like
      [System.Console] (it is a class)
   */
  public IsTypeName (ctx : CTX, e : PExpr) : bool
  {
    def collect_member (obj : PExpr, acc) {
      match (obj) {
        // name in expressions has always one element in name
        | <[ $(n : name) ]> =>
          def env = n.GetEnv (ctx.env);
          match (env.LookupType (n.Id :: acc)) {
            | Some => true
            | _ => false
          }
        | <[ $head.$(id : dyn) ]> => collect_member (head, id :: acc)
        | _ => false
      }
    };
    collect_member (e, [])
  }

  /** Checks if given expression describes name of a type, like
      [System.Console] (it is a class)
   */
  public GetIfIsType (env : GlobalEnv, e : PExpr) : option <TypeInfo>
  {
    def collect_member (obj : PExpr, acc) {
      match (obj) {
        // name in expressions has always one element in name
        | <[ $(n : name) ]> =>
          def env = n.GetEnv (env);
          env.LookupType (n.Id :: acc)
        | <[ $head.$(id : dyn) ]> => collect_member (head, id :: acc)
        | _ => None ()
      }
    };
    collect_member (e, [])
  }

  public DefaultValueOfType (ty : TT.TType) : PExpr {
    match (Tyutil.top_expand (ty)) {
      | TT.TType.T_app (tc, _) when tc.IsValueType => 
        def ctor = Nemerle.Macros.Symbol (tc.FullName);
        <[ $(ctor : name) () ]>

      | TT.TType.T_void => <[ () ]>

      | _ => <[ null ]>
    }
  }
  
  /** Lifts given list of expressions to syntax tree of list containing
      elements, whose syntax trees are defined by those expressions.
      (expressions on the list are not lifted)
   */
  public Lift (l : list<PExpr>) : PExpr
  {
    | x :: xs => <[ $x :: $(Lift (xs)) ]>
    | [] => <[ [] ]>
  }

  /** Lifts given list to syntax tree of this list, applying
      supplied function to each of its elements. The function
      is used here to lift elements of list, so we can build
      entire syntax trees from them.
   */
  public Lift<'a> (l : list<'a>, f : 'a -> PExpr) : PExpr
  {
    match (l) {
      | x :: xs => <[ $(f (x)) :: $(Lift (xs, f)) ]>
      | [] => <[ [] ]>
    }
  }

  public Lift<'a> (o : option <'a>, f : 'a -> PExpr) : PExpr
  {
    match (o) {
      | Some (v) => <[ Some ($(f (v))) ]>
      | _ => <[ None () ]>
    }
  }
  
  /** Creates syntax tree of given number (expression building it) */
  public Lift (x : int) : PExpr { <[ $(x : int) ]> }


  /// DATA STRUCTURES USED IN QUOTATION AND MACROS
  variant MacroParm 
  {
    | Expr
    | Exprs
    | Implicit   // note that parameter isn't given by user
  }
  
  public type CTX = TypingContext;

  implicit_ctx_name : Name;

  public GetImplicitCTXName () : Name { implicit_ctx_name }
  
  public this () { implicit_ctx_name = NewSymbol () }
  
  // some tool methods
  public UnSString (x : Splicable_string) : list <string>
  {
    | Splicable_string.SS_string ({ idl = x }) => x
    | _ => throw System.ArgumentException ("Macros.UnSString")
  }

  public StringOfSString (x : Splicable_string) : string
  {
    | Splicable_string.SS_string ({ idl = x }) => NString.Concat (".", x)
    | _ => throw System.ArgumentException ("Macros.UnSString")
  }

  public NameOfSString (x : Splicable_string) : Name
  {
    | Splicable_string.SS_string (x) => x
    | _ => throw System.ArgumentException ("Macros.NameOfSString")
  }

  // QUOTATION HANDLING SECTION

  /** Lifts up [Splicable_string]. [Splicable_string.SS_spliced_expr] is substituted by its
      content and appropriate [Splicable_string.SS_string] expression is created.
   */
  quoted_sstring (ctx : CTX, st : Splicable_string) : PExpr
  {
    match (st) {
      | Splicable_string.SS_string ({ idl = str }) =>
        def c = ctx.env.GetMacroContext ();
        def qidl = Lift (str, quoted_string);
        <[ Splicable_string.SS_string (Name.NameInCurrentColor 
                      ($qidl, $("_N_MacroContexts"  : dyn).Get ($(c : int)))) ]>

      | Splicable_string.SS_spliced_expr (PExpr.Spliced (PExpr.TypeEnforcement (e, <[ type: $(ty : name) ]>))) =>
        match (ty.Id) {
          | "name"  => <[ Splicable_string.SS_string ($e) ]>
          | "dyn" => <[ Splicable_string.SS_string (Name ([$e], -1, null)) ]>
          | "usesite" => <[ Splicable_string.SS_string (Name (NString.Split ($e, array ['.']), 
                                             TypingContext.MacroUseColor, 
                                             TypingContext.MacroUseContext)) ]>
          | x => Message.fatal_error ("unsupported splicing type `" + x + "' in splicable expression")
        }

      | Splicable_string.SS_spliced_expr (e) => e
    }
  }

  quoted_sint (i : Splicable_int) : PExpr
  {
    | Splicable_int.SI_int (i) => <[ Splicable_int.SI_int ($(i : int)) ]>

    | Splicable_int.SI_spliced_expr (PExpr.Spliced (PExpr.TypeEnforcement (e, <[ type: $(ty : name) ]>))) =>
      if (ty.Id == "int")
        <[ Splicable_int.SI_int ($e) ]>
      else
        Message.fatal_error ("unsupported splicing type in splicable integer")

    | Splicable_int.SI_spliced_expr (e) => e
  }

  /** Lifts up [Name] giving it supplied context number. */
  quoted_name (n : Name, context : int) : PExpr
  {
    def qidl = Lift (List.Map (n.idl, quoted_string));
    <[ Name.NameInCurrentColor ($qidl, $("_N_MacroContexts" 
                                         : dyn).Get ($(context : int))) ]>
  }

  quoted_string (s : string) : PExpr { <[ $(s : string) ]> }

  public QuotedCaseGuard (ctx : CTX, pair : PExpr * option <PExpr>) : PExpr
  {
    match (pair) {
      | (pat, Some (gu)) =>
        <[ ($(quoted_expr (ctx, pat)), Some ($(quoted_expr (ctx, gu)))) ]>
      | (pat, None) =>
        <[ ($(quoted_expr (ctx, pat)), None ()) ]>
    }
  }

  public QuotedMatchCase (ctx : CTX, cas : MatchCase) : PExpr
  {
    def ({ patterns = guards; body = expr; }) = cas;
    def quotedc_case_guard (x) { QuotedCaseGuard (ctx, x) };
    
    match (guards) {
      | [(PExpr.Ellipsis (args), None)] =>
        <[ MatchCase ($(quoted_expr (ctx, args)),
                       $(quoted_expr (ctx, expr))) ]>
      | _ =>
        <[ MatchCase ($(Lift (guards, quotedc_case_guard)),
                       $(quoted_expr (ctx, expr))) ]>
    }
  }

  public quoted_fparam (ctx : CTX, p : Fun_parm) : PExpr
  {
    match (p) {
      | <[ funparm: $name : $ty ]> =>
        <[ Fun_parm (name = $(quoted_sstring (ctx, name)),
                     ty = $(quoted_type (ctx, ty)),
                     modifiers = Modifiers (NemerleAttributes.None, [])) ]>
                     
      | <[ funparm: params $name : $ty ]> =>
        def qattr = quoted_expr (ctx, <[ System.ParamArrayAttribute ]>);
        <[ Fun_parm (name = $(quoted_sstring (ctx, name)),
                     ty = $(quoted_type (ctx, ty)),
                     modifiers = Modifiers (NemerleAttributes.None, [$qattr])) ]>

      | <[ funparm: $name : $ty = $expr ]> =>
        def e = quoted_expr (ctx, expr);
        def qattr =
          quoted_expr (ctx, <[ System.ComponentModel.DefaultValueAttribute ($e) ]>);
        <[ Fun_parm (name = $(quoted_sstring (ctx, name)),
                     ty = $(quoted_type (ctx, ty)),
                     modifiers = Modifiers (NemerleAttributes.None, [$qattr])) ]>
      | _ =>
        Util.ice ("no attributes in quoted parameters supported yet")
    }
  }

  quoted_tparms (ctx : CTX, tyvars : list <string * int>, 
                 constraints : list <Constraint>) : PExpr 
  {
    def quoted_tvar (name, color) {
      <[ ( $(name : string), $(color : int) ) ]>
    }
    def quoted_constr (c : Constraint) {
      def (name, color) = c.tyvar;
      <[ Constraint ($(name : string), $(color : int), $(quoted_type (ctx, c.ty))) ]>
    }

    match (constraints) {
      | [(("", _), PType.Product ([PType.Void, PType.Spliced (e)]))] =>
        <[ Typarms ($(Lift (tyvars, quoted_tvar)), $e) ]>

      | [(("", _), PType.Product ([PType.Spliced (e1), PType.Spliced (e2)]))] =>
        <[ Typarms ($e1, $e2) ]>

      | (("", _), PType.Product ([PType.Spliced (e), PType.Void])) :: where_cts =>
        <[ Typarms ($e, $(Lift (where_cts, quoted_constr))) ]>

      | _ =>
        <[ Typarms ($(Lift (tyvars, quoted_tvar)),
                    $(Lift (constraints, quoted_constr))) ]>
    }
  }

  make_quoted_funheader (ctx : CTX, parms : list<Fun_parm>, qtparms : PExpr,
                         ty : PType, qname : PExpr) : PExpr
  {
    def qparms =
      match (parms) {
        | [{ name = Splicable_string.SS_string ({ idl = [] }); ty = <[ type: void ]>; 
             modifiers = (_, [e], _); }] =>
          quoted_expr (ctx, e)
        | _ =>
          Lift (parms, fun (x) { quoted_fparam (ctx, x) })
      };
    def qtype = quoted_type (ctx, ty);
    <[ Fun_header ($qtparms, $qname, $qtype, $qparms) ]>
  } 
  
  make_quoted_fundecl (ctx : CTX, parms : list<Fun_parm>, qtparms : PExpr,
                       ty : PType, qname : PExpr, body : PExpr) : PExpr
  {
    def qheader = make_quoted_funheader (ctx, parms, qtparms, ty, qname);
    def qbody = quoted_expr (ctx, body);
    <[ Function_decl ($qheader, $qbody) ]>
  }
  
  quoted_attributes (ctx : CTX, attrs : Modifiers) : PExpr
  {
    match (attrs) {
      | (_, [PExpr.Ellipsis (e)], _) => quoted_expr (ctx, e)
      | _ =>
        def quotedc_expr (x) { quoted_expr (ctx, x) };
        <[ Modifiers (($((attrs.mods :> int) : int) :> NemerleAttributes),
                      $(Lift (attrs.custom_attrs, quotedc_expr))) ]>
    };
  }

  internal quoted_member (ctx : CTX, mem : ClassMember) : PExpr {
    def quotedc_expr (x) { quoted_expr (ctx, x) };
    def quotedc_member (x) { quoted_member (ctx, x) };
    def qnm = quoted_sstring (ctx, mem.name);
    def qattrs = quoted_attributes (ctx, mem.modifiers);
    match (mem) {
      | ClassMember.TypeDeclaration (td) =>
        <[ ClassMember.TypeDeclaration (name = $qnm, modifiers = $qattrs,
                   td = $(quoted_tydecl (ctx, td))) ]>
        
      | ClassMember.Field (t) =>
//      | <[ decl: ..$_ $_ : $t; ]> => // field
        <[ ClassMember.Field (name = $qnm, modifiers = $qattrs,
                    ty = $(quoted_type (ctx, t))) ]>

      /// Example
      ///   <[ decl: ..$attrs $n < ..$tparms> (..$fparms) : $t where ..$cts
      ///              implements ..$impl $body ]> 
      | ClassMember.Function { header = { typarms = (tparms, cts);
                       ret_type = t; parms = fparms; };
                       kind = kd; body = bd;
                   } =>
        def quoted_funkind (x) {
          | Fun_kind.FK_method (impl) =>
            match (impl) {
              | [Splicable_string.SS_spliced_expr (PExpr.Ellipsis (e))] =>
                <[ Fun_kind.FK_method ($(quoted_expr (ctx, e))) ]>
              | _ =>
                <[ Fun_kind.FK_method ($(Lift (impl, fun (x) {
                     quoted_sstring (ctx, x)
                   }))) ]>
            }
          | Fun_kind.FK_bound_method =>
            // quotation of IMethod? noooo!
            <[ Fun_kind.FK_bound_method ([]) ]>
          | Fun_kind.FK_ctor => <[ Fun_kind.FK_ctor () ]>
          | Fun_kind.FK_static_ctor => <[ Fun_kind.FK_static_ctor () ]>
          | Fun_kind.FK_function => <[ Fun_kind.FK_function () ]>
        };

        def qtparms = quoted_tparms (ctx, tparms, cts);
        def qhd = make_quoted_funheader (ctx, fparms, qtparms, t, qnm);
        
        <[ ClassMember.Function (name = $qnm,
                       modifiers = $qattrs,
                       header = $qhd,
                       kind = $(quoted_funkind (kd)),
                       body = $(quoted_funbody (ctx, bd))) ]>
        
      | ClassMember.EnumOption (val) =>
        def qval = Lift (val, quotedc_expr);
        <[ ClassMember.EnumOption (name = $qnm, modifiers = $qattrs, value = $qval) ]>
        
      | ClassMember.Event { ty = t; add = a; remove = r; } =>
        <[ ClassMember.Event (name = $qnm, modifiers = $qattrs, ty = $(quoted_type (ctx, t)),
                    add = $(Lift (a, quotedc_member)),
                    remove = $(Lift (r, quotedc_member))) ]>
        
      | ClassMember.Property { ty = t; prop_ty = p; dims = fps; set = s; get = g; } =>
        def qfps = Lift (fps, fun (x) { quoted_fparam (ctx, x) });
        <[ ClassMember.Property (name = $qnm, modifiers = $qattrs,
                       ty = $(quoted_type (ctx, t)),
                       prop_ty = $(quoted_type (ctx, p)),
                       set = $(Lift (s, quotedc_member)),
                       get = $(Lift (g, quotedc_member)), dims = $qfps) ]>
    }
  }
  
  internal quoted_tydecl (ctx : CTX, td : TopDeclaration) : PExpr {
    def qn = quoted_sstring (ctx, td.name);
    def qattr = quoted_attributes (ctx, td.modifiers);
    
    match (td) {
      | TopDeclaration.Class { typarms = tprms; t_extends = extend; decls = members; } =>
        def qtparms = quoted_tparms (ctx, tprms.tyvars, tprms.constraints);
        def qexten = Lift (List.Map (extend, fun (x) { quoted_type (ctx, x) }));        
        def qmems = Lift (List.Map (members, fun (x) { quoted_member (ctx, x) }));
                          
        <[ TopDeclaration.Class (name = $qn, modifiers = $qattr, t_extends = $qexten,
                     typarms = $qtparms, decls = $qmems) ]>

      | TopDeclaration.Alias { typarms = tprms; ty = t; }=>
        def qtparms = quoted_tparms (ctx, tprms.tyvars, tprms.constraints);                
        <[ TopDeclaration.Alias (name = $qn, modifiers = $qattr,
                     typarms = $qtparms, ty = $(quoted_type (ctx, t))) ]>
        
      | TopDeclaration.Interface { typarms = tprms; t_extends = extend; methods = members; } =>
        def qtparms = quoted_tparms (ctx, tprms.tyvars, tprms.constraints);
        def qexten = Lift (List.Map (extend, fun (x) { quoted_type (ctx, x) }));        
        def qmems = Lift (List.Map (members, fun (x) { quoted_member (ctx, x) }));
                          
        <[ TopDeclaration.Interface (name = $qn, modifiers = $qattr, t_extends = $qexten,
                     typarms = $qtparms, methods = $qmems) ]>
                     
      | TopDeclaration.Variant { typarms = tprms; t_extends = extend; decls = members; } =>
        def qtparms = quoted_tparms (ctx, tprms.tyvars, tprms.constraints);
        def qexten = Lift (List.Map (extend, fun (x) { quoted_type (ctx, x) }));          
        def qmems = Lift (List.Map (members, fun (x) { quoted_member (ctx, x) }));
                          
        <[ TopDeclaration.Variant (name = $qn, modifiers = $qattr, t_extends = $qexten,
                       typarms = $qtparms, decls = $qmems) ]>

      | TopDeclaration.VariantOption { decls = members; } =>
        def qmems = Lift (List.Map (members, fun (x) { quoted_member (ctx, x) }));
                          
        <[ TopDeclaration.VariantOption (name = $qn, modifiers = $qattr, decls = $qmems) ]>

      | _ =>
        Util.ice ("this quotation is not supported yet")
    }
  }

  quoted_funbody (ctx : CTX, x : Fun_body) : PExpr
  {
    match (x) {
      | Fun_body.FB_parsed_expr (expr) =>
        <[ Fun_body.FB_parsed_expr ($(quoted_expr (ctx, expr))) ]>
      | Fun_body.FB_typed_expr (expr) => <[ Fun_body.FB_parsed_expr ($(expr : typed)) ]>
      | Fun_body.FB_compiled_expr => <[ Fun_body.FB_compiled_expr () ]>
      | Fun_body.FB_extern (name) => <[ Fun_body.FB_extern ($(name : string)) ]> 
      | Fun_body.FB_abstract => <[ Fun_body.FB_abstract () ]>
    }
  }

  quoted_literal (lit : Literal) : PExpr
  {
    | Literal.L_void => <[ Literal.L_void () ]>
    | Literal.L_null => <[ Literal.L_null () ]>
    | Literal.L_int (val) => <[ Literal.L_int ($(val : int)) ]>
    | Literal.L_uint (val) => <[ Literal.L_uint ($(val : uint)) ]>
    | Literal.L_byte (val) => <[ Literal.L_byte ($(val : byte)) ]>
    | Literal.L_sbyte (val) => <[ Literal.L_sbyte ($(val : sbyte)) ]>
    | Literal.L_short (val) => <[ Literal.L_short ($(val : short)) ]>
    | Literal.L_ushort (val) => <[ Literal.L_ushort ($(val : ushort)) ]>
    | Literal.L_long (val) => <[ Literal.L_long ($(val : long)) ]>
    | Literal.L_ulong (val) => <[ Literal.L_ulong ($(val : ulong)) ]>
    | Literal.L_string (val) => <[ Literal.L_string ($(val : string)) ]>
    | Literal.L_float (val) => <[ Literal.L_float ($(val : float)) ]>
    | Literal.L_double (val) => <[ Literal.L_double ($(val : double)) ]>
    | Literal.L_decimal (val) => <[ Literal.L_decimal ($(val : decimal)) ]>
    | Literal.L_bool (val) => <[ Literal.L_bool ($(val : bool)) ]>
    | Literal.L_char (val) => <[ Literal.L_char ($(val : char)) ]>
    | Literal.L_enum (l, _) => <[ Literal.L_enum ($(quoted_literal (l)), null) ]>
  }
  
  public quoted_fundecl (ctx : CTX, d : Function_decl) : PExpr
  {
    def <[ fundecl: $name < ..$typarms> (..$args) : $ty
                    where ..$tyconstrs $body ]> = d;
    def qtparms = quoted_tparms (ctx, typarms, tyconstrs);
    def qname = quoted_sstring (ctx, name);
    make_quoted_fundecl (ctx, args, qtparms, ty, qname, body)
  }

  /** Creates parse tree of (expression which builds) given typed type. */
  public quoted_ttype (ctx : CTX, t : PType) : PExpr
  {
    def quotedc_ttype (x) { quoted_ttype (ctx, x) };

    match (t) {
      | <[ type: $tycon < .. $args > ]> =>
        def tyco = match (tycon) { 
          | Splicable_string.SS_string ({ idl = s }) =>
            <[ $(Lift (List.Map (s, quoted_string))) ]>
          | Splicable_string.SS_spliced_expr (e) => e
        };
        def findtyco = <[
          match (Nemerle.Macros.ImplicitCTX ().env.LookupType ($tyco)) {
            | Some (x) => x
            | None =>
              Message.fatal_error ("unbound type " + Util.qid_of_list ($tyco))
          }
        ]>;
        match (args) {
          | [PType.Ellipsis(ar)] => 
            <[ TT.TType.T_app ($findtyco, $(quoted_ttype (ctx, ar))) ]>
          | _ =>
            <[ TT.TType.T_app ($findtyco, $(Lift (args, quotedc_ttype))) ]>
        }

      | <[ type: ref $ty ]> =>
        <[ TT.TType.T_ref ($(quoted_ttype (ctx, ty))) ]>
  
      | <[ type: out $ty ]> =>
        <[ TT.TType.T_out ($(quoted_ttype (ctx, ty))) ]>
  
      | <[ type: $from -> $to ]> =>
        <[ TT.TType.T_fun ($(quoted_ttype (ctx, from)), $(quoted_ttype (ctx, to))) ]>
  
      | <[ type: void ]> => <[ TT.TType.T_void () ]>
        
      | <[ type: .. $args ]> =>
        <[ TT.TType.T_prod ($(Lift (args, quotedc_ttype))) ]>

      | <[ type: array < $r, $ty> ]> =>
        <[ TT.TType.T_array ($(quotedc_ttype (ty)), $(quoted_sint (r))) ]>

      // rest of constructs must be in not quoted form, because they define
      // internal data structures
      | PType.Spliced (PExpr.TypeEnforcement (val, <[ type: $(ty : name) ]>)) =>
          match (ty.Id) {
            | "name" => <[ TT.TType.T_var (Tyvar.T ($val)) ]>
            // it doesn't make much sense here, as it is the same as <[ $v ]>,
            // but we put it here for consistency
            | "typed" => val
            | x =>
              Message.fatal_error ("unsupported type of spliced special token `" + x + "' in typed type")
          }

      | PType.Spliced (e) => e

      | PType.Infer => <[ TT.TType.T_infer () ]>

      | PType.Ellipsis (ar) =>
        <[ TT.TType.T_prod ($(quoted_ttype (ctx, ar))) ]>

      | PType.Typed => 
        Util.ice ("You've got beer from me for generating such a code...");
    } 
  }

  /** Transforms syntax tree of quoted parsed type to its construction tree
      (expression which builds it). */
  public quoted_type (ctx : CTX, t : PType) : PExpr
  {
    def quotedc_type (x) { quoted_type (ctx, x) };

    match (t) {
      | <[ type: $tycon < .. $args> ]> =>
        match (args) {
          | [PType.Ellipsis(ar)] => 
            <[ PType.Class ($(quoted_sstring (ctx, tycon)),
                      $(quoted_type (ctx, ar))) ]>
          | _ =>
            <[ PType.Class ($(quoted_sstring (ctx, tycon)), 
                      $(Lift (args, quotedc_type))) ]>
        }

      | <[ type: ref $ty ]> =>
        <[ PType.ByRef ($(quoted_type (ctx, ty))) ]>
  
      | <[ type: out $ty ]> =>
        <[ PType.Out ($(quoted_type (ctx, ty))) ]>
  
      | <[ type: $from -> $to ]> =>
        <[ PType.Function ($(quoted_type (ctx, from)), $(quoted_type (ctx, to))) ]>
  
      | <[ type: void ]> => <[ PType.Void () ]>
  
      | <[ type: .. $args ]> =>
        <[ PType.Product ($(Lift (args, quotedc_type))) ]>

      | <[ type: array < $r, $ty> ]> =>
        <[ PType.Array ($(quotedc_type (ty)), $(quoted_sint (r))) ]>

      // rest of constructs must be in not quoted form, because they define
      // internal data structures
      | PType.Spliced (PExpr.TypeEnforcement (val, <[ type: $(ty : name) ]>)) =>
          match (ty.Id) {
            | "name" => <[ PType.Class (Splicable_string.SS_string ($val), []) ]>
            | "typed" => <[ PType.Typed ($val) ]>
            | x =>
              Message.fatal_error ("unsupported type of spliced special token `" + x + "' in type")
          }

      | PType.Spliced (e) => e

      | PType.Infer => <[ PType.Infer () ]>

      | PType.Ellipsis (ar) => <[ PType.Product ($(quoted_type (ctx, ar))) ]>

      | PType.Typed => 
        Util.ice ("You've got beer from me for generating such a code...");
    } 
  }

  public mutable in_pattern : bool = false;
  
  public quoted_expr (ctx : CTX, expr : PExpr) : PExpr 
  {
    def quotedc_expr (x) { quoted_expr (ctx, x) };
    
    match (expr) {
      | <[ $(id : name) ]> =>
        <[ PExpr.Ref ($(quoted_name (id, ctx.env.GetMacroContext ()))) ]>
      | <[ $obj . $mem ]> => 
        <[ PExpr.Member ($(quotedc_expr (obj)), $(quoted_sstring (ctx, mem))) ]>

      | <[ $func (.. $parms) ]> =>
        match (parms) {
          | [ PExpr.Ellipsis (args) ] =>
            <[ PExpr.Call ($(quoted_expr (ctx, func)), $(quoted_expr (ctx, args))) ]>
          | _ =>
            <[ PExpr.Call ($(quotedc_expr (func)), $(Lift (parms, quotedc_expr))) ]>
        }

      | <[ $target = $source ]> =>
        <[ PExpr.Assign ($(quoted_expr (ctx, target)), $(quoted_expr (ctx, source))) ]>

      | <[ def $name = $val ]> =>
        <[ PExpr.Define ($(false : bool), $(quoted_sstring (ctx, name)), 
                  $(quoted_expr (ctx, val))) ]>

      | <[ mutable $name = $val ]> =>
        <[ PExpr.Define ($(true : bool), $(quoted_sstring (ctx, name)),
                  $(quoted_expr (ctx, val))) ]>

      | PExpr.DefPattern (pat, val) =>
        <[ PExpr.DefPattern ($(quoted_expr (ctx, pat)), $(quoted_expr (ctx, val))) ]>;

      | <[ def .. $funs ]> =>
        match (funs) {
          | [(_, PExpr.Ellipsis (args))] =>
            <[ PExpr.DefFunctions ($(quoted_expr (ctx, args))) ]>
          | _ =>
            <[ PExpr.DefFunctions ($(Lift (funs, fun (x) { quoted_fundecl (ctx, x) }))) ]>
        };

      | <[ fun < ..$typarms> (..$args) : $ty where .. $tyconstrs $body ]> =>
        def qtparms = quoted_tparms (ctx, typarms, tyconstrs);
        def qname = <[ Splicable_string.SS_string (Name ([])) ]>;
        // lift function declaration from lambda expression
        def fdecl = make_quoted_fundecl (ctx, args, qtparms, ty, qname, body);
        // return syntax tree of lifted lambda
        <[ PExpr.Lambda ($fdecl) ]>

      | <[ match ($expr) {.. $cases } ]> =>
        match (cases) {
          | [cas] when match (cas.patterns) { | [] => true | _ => false } =>
            match (cas.body) {
              | PExpr.Ellipsis (e) =>
                <[ PExpr.Match ($(quoted_expr (ctx, expr)), $(quoted_expr (ctx, e))) ]>
              | _ =>
                Util.ice ("parser generated strange match_case")
            }
          | _ =>
            <[ PExpr.Match ($(quoted_expr (ctx, expr)), 
                        $(Lift (cases, fun (x) { QuotedMatchCase (ctx, x) }))) ]>
        }

      | <[ throw $exc ]> =>
        <[ PExpr.Throw ($(quoted_expr (ctx, exc))) ]>

      | <[ ref $e ]> =>
        <[ PExpr.ParmByRef ($(quoted_expr (ctx, e))) ]>
        
      | <[ out $e ]> =>
        <[ PExpr.ParmOut ($(quoted_expr (ctx, e))) ]>

      | <[ try $body catch { $exn : $exn_ty => $handler } ]> => 
        def qbody = quoted_expr (ctx, body);
        <[ PExpr.TryWith ($qbody, $(quoted_sstring (ctx, exn)),
                       $(quoted_type (ctx, exn_ty)), 
                       $(quoted_expr (ctx, handler))) ]>

      | <[ try $body finally $handler ]> =>
        <[ PExpr.TryFinally ($(quoted_expr (ctx, body)), 
                          $(quoted_expr (ctx, handler))) ]>

      | PExpr.Literal (lit) => <[ PExpr.Literal ($(quoted_literal (lit))) ]>

      | <[ this ]> => <[ PExpr.This () ]>

      | <[ base ]> => <[ PExpr.Base () ]>

      | <[ typeof ($t) ]> => <[ PExpr.Typeof ($(quoted_type (ctx, t))) ]>

      | <[ ( $expr :> $ty ) ]> =>
        <[ PExpr.TypeConversion ($(quoted_expr (ctx, expr)),
                              $(quoted_type (ctx, ty))) ]>

      | <[ ( $expr : $ty ) ]> =>
        <[ PExpr.TypeEnforcement ($(quoted_expr (ctx, expr)),
                               $(quoted_type (ctx, ty))) ]>

      | <[ {.. $seq } ]> =>
        match (seq) {
          | [PExpr.Ellipsis (seq)] =>
            <[ PExpr.Sequence ($(quoted_expr (ctx, seq))) ]>
          | _ =>
            <[ PExpr.Sequence ($(Lift (seq, quotedc_expr))) ]>
        }

      | <[ (.. $args) ]> =>
        match (args) {
          | [PExpr.Ellipsis (args)] =>
            <[ PExpr.Tuple ($(quoted_expr (ctx, args))) ]>
          | _ =>
            <[ PExpr.Tuple ($(Lift (args, quotedc_expr))) ]>
        }

      | <[ array < $rank > $value ]> =>
        <[ PExpr.Array ($(quoted_expr (ctx, rank)), $(quoted_expr (ctx, value))) ]>

      | <[ array (.. $sizes) ]> =>
        match (sizes) {
          | [PExpr.Ellipsis (args)] =>
            <[ PExpr.EmptyArray ($(quoted_expr (ctx, args))) ]>
          | _ =>
            <[ PExpr.EmptyArray ($(Lift (sizes, quotedc_expr))) ]>
        }

      | <[ $obj [.. $args] ]> =>  
        match (args) {
          | [PExpr.Ellipsis (args)] =>
            <[ PExpr.Indexer ($(quotedc_expr (obj)), $(quoted_expr (ctx, args))) ]>
          | _ =>
            <[ PExpr.Indexer ($(quoted_expr (ctx, obj)), $(Lift (args, quotedc_expr))) ]>
        }

      | PExpr.Wildcard => <[ PExpr.Wildcard () ]>
      | PExpr.As (pat, name) => 
        <[ PExpr.As ($(quoted_expr (ctx, pat)), $(quoted_sstring (ctx, name))) ]>
         
      | PExpr.Application (func, arg) =>
        <[ PExpr.Application ($(quoted_expr (ctx, func)), $(quoted_expr (ctx, arg))) ]>

      // rest of constructs must be in not quoted form, because they define
      // internal data structures
      | PExpr.MacroCall (name, namespc, parms) =>
        def quoted_syntax (s) {
          | SyntaxElement.SyntaxExpr (body) =>
            <[ SyntaxElement.SyntaxExpr ($(quoted_expr (ctx, body))) ]>
            
          | SyntaxElement.SyntaxType (body) =>
            <[ SyntaxElement.SyntaxType ($(quoted_type (ctx, body))) ]>

          | SyntaxElement.SyntaxCase (body) =>
            <[ SyntaxElement.SyntaxCase ($(QuotedMatchCase (ctx, body))) ]>
            
          | SyntaxElement.SyntaxCaseGuard (body, guard) =>
            <[ SyntaxElement.SyntaxCaseGuard ($(QuotedCaseGuard (ctx, (body, guard)))) ]>
            
          | SyntaxElement.SyntaxFunDecl (body) =>
            <[ SyntaxElement.SyntaxFunDecl ($(quoted_fundecl (ctx, body))) ]>
            
          | SyntaxElement.SyntaxFunParm (body) =>
            <[ SyntaxElement.SyntaxFunParm ($(quoted_fparam (ctx, body))) ]>
            
          | SyntaxElement.SyntaxDeclaration (body) =>
            <[ SyntaxElement.SyntaxDeclaration ($(quoted_member (ctx, body))) ]>
            
          | SyntaxElement.SyntaxTType (body) =>
            <[ SyntaxElement.SyntaxTType ($(quoted_type (ctx, body))) ]>

          | SyntaxElement.SyntaxTTypeBuilder
          | SyntaxElement.SyntaxTMethod
          | SyntaxElement.SyntaxTField
          | SyntaxElement.SyntaxTProperty
          | SyntaxElement.SyntaxTEvent
          | SyntaxElement.SyntaxTFunParm =>
            Util.ice ("syntax elements shouldn't appear in quotations")
        };

        <[ PExpr.MacroCall ($(quoted_name (name, ctx.env.GetMacroContext ())),
                        GlobalEnv.ExactPath ($(Lift (List.Map (namespc.Name,
                           quoted_string)))),
                        $(Lift (parms, quoted_syntax))) ]>

      | PExpr.Spliced (PExpr.TypeEnforcement (val, <[ type: $(ty : name) ]>)) =>
        match (ty.Id) {
          | "name" => <[ PExpr.Ref ($val) ]>
          | "usesite" => <[ PExpr.Ref (Name (NString.Split ($val, array ['.']), 
                                         TypingContext.MacroUseColor, 
                                         TypingContext.MacroUseContext)) ]>
          | "dyn" => <[ PExpr.Ref (Name ([$val], -1, null)) ]>
          | "byte" => <[ PExpr.Literal (Literal.L_byte ($val)) ]>
          | "sbyte" => <[ PExpr.Literal (Literal.L_sbyte ($val)) ]>
          | "short" => <[ PExpr.Literal (Literal.L_short ($val)) ]>
          | "ushort" => <[ PExpr.Literal (Literal.L_ushort ($val)) ]>
          | "int" => <[ PExpr.Literal (Literal.L_int ($val)) ]>
          | "uint" => <[ PExpr.Literal (Literal.L_uint ($val)) ]>
          | "long" => <[ PExpr.Literal (Literal.L_long ($val)) ]>
          | "ulong" => <[ PExpr.Literal (Literal.L_ulong ($val)) ]>
          | "string" => <[ PExpr.Literal (Literal.L_string ($val)) ]>
          | "bool" => <[ PExpr.Literal (Literal.L_bool ($val)) ]>
          | "char" => <[ PExpr.Literal (Literal.L_char ($val)) ]>
          | "float" => <[ PExpr.Literal (Literal.L_float ($val)) ]>
          | "double" => <[ PExpr.Literal (Literal.L_double ($val)) ]>
          | "decimal" => <[ PExpr.Literal (Literal.L_decimal ($val)) ]>

          | "typed" => <[ PExpr.Typed ($val) ]>
          | x =>
            Message.fatal_error ("unsupported type `" + x + "' of spliced literal in expression")
        }

      | PExpr.Spliced (e) when !in_pattern => e

      | PExpr.Spliced => expr

      | PExpr.Lambda =>
        Util.ice ("this kind of quoted fun () ... is not supported")
      | PExpr.Quoted => 
        Message.fatal_error ("compound of several <[ ... ]> macro scopes is"
                             " not allowed");
      | PExpr.Typed | PExpr.TypedPattern => 
        Util.ice ("You've got beer from me for generating such a code (and me to)...");
      | PExpr.Ellipsis =>
        Message.fatal_error ("List of expression parameters outside of quoted sequence:"
                             " use <[ { .. $x } ]> pattern")
    }
  } // end quoted_expr

  /** transforms given expression (which is supposed to be generated from
      quoted expression) into pattern 
   */    
  public patternize_quotation (exp : PExpr) : PExpr 
  {
    | PExpr.Ref => exp

    | <[ $obj . $mem ]> =>
//      <[ tern: $(Name (obj.idl + mem.idl, obj.color, obj.context) : name) ]>
        /// FIXME: this case is executed for NemerleAttributes.None, but we dont
        ///        have matching for enums yet
//        PExpr.Wildcard ()
      <[ $(patternize_quotation (obj)) . $mem ]>
      
    | <[ $constr (.. $pars) ]> =>
      def (con, name) = Option.UnSome (Util.qidl_of_expr (constr));
      def last = List.Last (con);
      match (name.context.LookupType (con)) {        
        | Some (tcon) =>
          def convert_params (pars : list <PExpr>, mems : list<IField>,
                              acc : list <PExpr>) : PExpr {
            match ((pars, mems)) {
              | ([], []) => 
                match (acc) {
                  | [] => PExpr.Wildcard ()
                  | _ => PExpr.Sequence (List.Rev (acc))
                }

              | (<[ $(n : name) = $expr ]> :: xs, ms)
                when !List.IsEmpty (n.idl) =>
                convert_params (xs, ms, <[ $(n : name) = $(patternize_quotation (expr)) ]> :: acc)

              | (expr :: xs, m :: ms) =>
                convert_params (xs, ms, <[ $(m.Name : dyn) = $(patternize_quotation (expr)) ]> :: acc)

              | ([], _ :: _) => convert_params ([], [], acc)

              | (_ :: _, []) =>
                Message.fatal_error ("number of supplied parameters is too large")
            }
          };

          def unalias (tcon : TypeInfo) {
            def flds = tcon.GetFields (BindingFlags.DeclaredOnly %|
                                       BindingFlags.Public %|
                                       BindingFlags.NonPublic %|
                                       BindingFlags.Instance);
          
            match (tcon.GetTydecl ()) {
              | Typedtree.TypeDeclaration.VariantOption =>
                def pars =
                  if (last.EndsWith ("ClassMember.Function"))
                    List.Tail (pars)
                  else
                    pars;
                PExpr.Application (<[ $(Name (con, name.color, name.context) : name) ]>,
                                    convert_params (pars, flds, []))

              | Typedtree.TypeDeclaration.Class  =>
                // we lose informations about constructor here, but as it's 
                // compiler internal computation we can ignore it
                if (last.EndsWith ("Name")) 
                  <[ { idl = $(patternize_quotation (List.Head (pars))) } ]>
                else
                  convert_params (pars, flds, [])

              | Typedtree.TypeDeclaration.Alias (TT.TType.T_app (tc, _)) => unalias (tc)

              | _ =>
                Util.ice ("expression generated from quotation has neither variant"
                          " nor class constructor")
            }
          }

          unalias (tcon)

        | None when last.EndsWith ("NameInCurrentColor") =>
          match (pars) {
            | expr :: _ =>
              <[ { idl = $(patternize_quotation (expr)) } ]>
            | _ =>
              Util.ice ("wrong or not enough parameters supplied to "
                        "NameInCurrentColor")
          }

        | None when last.EndsWith ("ExactPath") => PExpr.Wildcard ()
          
        | None =>
          Util.ice ("expression generated from quotation has broken constructor")
      }

    | <[ (..$elems) ]> => <[ (..$(List.Map (elems, patternize_quotation))) ]>

    | PExpr.Literal => exp 

    | PExpr.Wildcard => exp

    | PExpr.Spliced (e) => e

    | _ =>
      Message.debug (exp.ToString ()); 
      Message.debug (PrettyPrint.SprintExpr (None (), exp));
      Util.ice ("Bad constructed quoted expression in pattern matching")
  }


  // GENERATION OF MACRO CLASSES SECTION

  /** Generate class implementing interface [MacroRegistry.IMacro], which
      encapsulates execution of macro. Created methods are:
      [Run] for running macro,
      [GetName] for retrieving its name,
      [GetNamespace] for retrieving macro's definition site (namespace)
      [SyntaxExtension] for retrieving syntax extension it defines,
      [CallTransform] for transforming supported call parameters to
        description taken by [Run] method
   */
  internal GenerateMacroClass (env : GlobalEnv, parent_type : option <TypeBuilder>,
                               attrs : Modifiers, header : Fun_header, 
                               synt : list <PExpr>, expr : PExpr) : void
  {
    def loc = header.loc;
    def name = 
      match (header.name) {
        | Splicable_string.SS_string ({ idl = [n] }) => n
        | _ => Message.fatal_error (loc, "spliced name in macro name is not allowed")
      };

    mutable phase = Nemerle.MacroPhase.None;
    mutable tail_transparent = false;
    /// FIXME: we should really operate on typed attributes
    List.Iter (attrs.custom_attrs, fun (_) {
      | <[ MacroUsage (..$(ph :: _)) ]>
      | <[ $_.MacroUsage (..$(ph :: _)) ]> =>
        phase = 
        match (ph) {
          | <[ BeforeInheritance ]> | <[ $_.BeforeInheritance ]> =>
            Nemerle.MacroPhase.BeforeInheritance
          | <[ BeforeTypedMembers ]> | <[ $_.BeforeTypedMembers ]> =>
            Nemerle.MacroPhase.BeforeTypedMembers
          | <[ WithTypedMembers ]> | <[ $_.WithTypedMembers ]> =>
            Nemerle.MacroPhase.WithTypedMembers
          | _ =>
            Nemerle.MacroPhase.None
        }

      | <[ TailRecursionTransparent (true) ]>
      | <[ $_.TailRecursionTransparent (true) ]> =>
        tail_transparent = true;        
      | _ => ()
    });

    // in case of occurance of special type parameters, we change default type
    // on which macro can be executed (macros on methods, fields, types)
    mutable target_type_suff = "";
    def set_target_info (atleast, atmost, suff, name) {
      when (phase == Nemerle.MacroPhase.None)
        Message.error (loc, "macro operating on declaration must have stage attribute");
      when ((atleast :> int) > (phase :> int) || (atmost :> int) < (phase :> int)) 
        Message.error (loc, "macro from this stage cannot have `" + name + "' parameter");
      match (target_type_suff) {
        | "" => target_type_suff = suff
        | ":type" =>
          match (suff) {
            | ":method" | ":field" | ":property" | ":event"
            | ":param" =>
              target_type_suff = suff
            | _ =>
              Message.error (loc, "multiple `TypeBuilder' parameters")              
          }
        | ":method" =>
          if (suff == ":param")
            target_type_suff = suff
          else
            Message.error (loc, "after `Method' theres can be only `Parameter', not " + suff)
          
        | _ =>
          Message.error (loc, "parameter `TypeBuilder' must occure before " + suff)
      }
    };

    // walk through parameters given to macro, extract their names,
    // note type names, control if they correspond to Nemerle grammar,
    // handle variable amount of parameters and default values
    // create code decomposing passed parameters if needed
    def analyze_params (pars : list <Fun_parm>, acc, accs, accmp,
                        defaults : list<Name * PExpr>, types : list<string>) 
                        : list <PExpr> * list <PExpr> * list <MacroParm>
    {
      // build pattern for list from list of patterns
      def roll (li, bu) {
        match (li) {
          | [] => bu
          | x::xs => roll (xs, <[ $x :: $bu ]>)
        }
      };
      // build expression for list from list of expressions
      def roll_expr (li, bu) {
        match (li) {
          | [] => bu
          | (va, d)::xs => roll_expr (xs, <[ { def $(va : name) = $d; $bu } ]>)
        }
      };

      // handle case of standard (not `params' nor with default value) parameter;
      // decompose handled types, note them and build pattern matching
      // parameter's expression
      def normal_parm (t, va) {
        match (t) {
          | PType.Infer 
          | <[ type: expr ]> => 
            (<[ SyntaxElement.SyntaxExpr ($(va : name)) ]>, "PExpr" :: types, MacroParm.Expr ())
            
          | <[ type: funparm ]> =>
            (<[ SyntaxElement.SyntaxFunParm ($(va : name)) ]>, "funparm" :: types,
             MacroParm.Expr ())

          | <[ type: string ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_string ($(va : name)))) ]>,
             "string" :: types, MacroParm.Expr ())
             
          | <[ type: int ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_int ($(va : name)))) ]>,
             "int" :: types, MacroParm.Expr ())
             
          | <[ type: ParsedField ]> =>
            set_target_info (1, 2, ":field", "ParsedField");            
            (<[ SyntaxElement.SyntaxDeclaration ((ClassMember.Field) as $(va : name)) ]>,
             "ParsedField" :: types, MacroParm.Implicit ())

          | <[ type: ParsedMethod ]> =>
            set_target_info (1, 2, ":method", "ParsedMethod");            
            (<[ SyntaxElement.SyntaxDeclaration ((ClassMember.Function) as $(va : name)) ]>,
             "ParsedMethod" :: types, MacroParm.Implicit ())
             
          | <[ type: ParsedProperty ]> =>
            set_target_info (1, 2, ":property", "ParsedProperty");            
            (<[ SyntaxElement.SyntaxDeclaration ((ClassMember.Property) as $(va : name)) ]>,
             "ParsedProperty" :: types, MacroParm.Implicit ())
             
          | <[ type: ParsedEvent ]> =>
            set_target_info (1, 2, ":event", "ParsedEvent");            
            (<[ SyntaxElement.SyntaxDeclaration ((ClassMember.Event) as $(va : name)) ]>,
             "ParsedEvent" :: types, MacroParm.Implicit ())
             
          | <[ type: ParsedParameter ]> =>
            set_target_info (1, 2, ":param", "ParsedParameter");            
            (<[ SyntaxElement.SyntaxFunParm ($(va : name)) ]>, "ParsedParameter" :: types,
             MacroParm.Implicit ())

          | <[ type: TypeBuilder ]> =>
            set_target_info (1, 3, ":type", "TypeBuilder");
            target_type_suff = ":type";
            (<[ SyntaxElement.SyntaxTTypeBuilder ($(va : name)) ]>, "TypeBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: FieldBuilder ]> =>
            set_target_info (3, 3, ":field", "FieldBuilder");            
            (<[ SyntaxElement.SyntaxTField ($(va : name)) ]>, "FieldBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: MethodBuilder ]> =>
            set_target_info (3, 3, ":method", "MethodBuilder");
            (<[ SyntaxElement.SyntaxTMethod ($(va : name)) ]>, "MethodBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: PropertyBuilder ]> =>
            set_target_info (3, 3, ":property", "PropertyBuilder");            
            (<[ SyntaxElement.SyntaxTProperty ($(va : name)) ]>, "PropertyBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: EventBuilder ]> =>
            set_target_info (3, 3, ":event", "EventBuilder");            
            (<[ SyntaxElement.SyntaxTEvent ($(va : name)) ]>, "EventBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: ParmeterBuilder ]> =>
            set_target_info (3, 3, ":param", "ParameterBuilder");                        
            (<[ SyntaxElement.SyntaxTFunParm ($(va : name)) ]>, "ParameterBuilder" :: types,
             MacroParm.Implicit ())

          | <[ type: uint ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_uint ($(va : name)))) ]>,
             "uint" :: types, MacroParm.Expr ())

          | <[ type: long ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_long ($(va : name)))) ]>,
             "long" :: types, MacroParm.Expr ())
             
          | <[ type: ulong ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_ulong ($(va : name)))) ]>,
             "ulong" :: types, MacroParm.Expr ())

          | <[ type: short ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_short ($(va : name)))) ]>,
             "short" :: types, MacroParm.Expr ())
             
          | <[ type: ushort ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_ushort ($(va : name)))) ]>,
             "ushort" :: types, MacroParm.Expr ())

          | <[ type: byte ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_byte ($(va : name)))) ]>,
             "byte" :: types, MacroParm.Expr ())
             
          | <[ type: sbyte ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_sbyte ($(va : name)))) ]>,
             "sbyte" :: types, MacroParm.Expr ())

          | <[ type: float ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_float ($(va : name)))) ]>,
             "float" :: types, MacroParm.Expr ())
             
          | <[ type: double ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_double ($(va : name)))) ]>,
             "double" :: types, MacroParm.Expr ())

          | <[ type: decimal ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_decimal ($(va : name)))) ]>,
             "decimal" :: types, MacroParm.Expr ())

          | <[ type: bool ]> =>
            (<[ SyntaxElement.SyntaxExpr (PExpr.Literal (Literal.L_bool ($(va : name)))) ]>,
             "bool" :: types, MacroParm.Expr ())
             
          | <[ type: $(n : name) ]> =>
            Message.fatal_error (loc, $"type $(n.Id) not supported for macro parameter")
          | _ =>
            Message.fatal_error (loc, "complex types are not supported for macro parameters")
        }
      };

      // create list of match cases (patterns and expressions) containing
      // cases for default values of parameters, add expressions defining
      // missed parameters according to those default values
      def traverse_patterns (pattss, defaults, defsrest, accpat, accexp) {
        match ((pattss, defaults)) {
          | ([], _) => (accpat, accexp)
          | (patts :: xss, []) =>
            traverse_patterns (xss, [], [], Lift (List.Rev (patts))
                               :: accpat, roll_expr (defsrest, expr) :: accexp)
          | (patts :: xss, d :: ds) =>
            def newdrest = d :: defsrest;
            traverse_patterns (xss, ds, newdrest,
                               Lift (List.Rev (patts)) :: accpat,
                               roll_expr (defsrest, expr) :: accexp)
        }
      };

      def message (types) {
        def plist = NString.Concat (", ", List.Rev (types));
        <[
          // runtime variable containing parameters of macro
          def len = List.Length (parms);
          def types = NString.Concat (", ", List.Map (parms, fun (x : object) {
            x.ToString ()
          }));
          Message.fatal_error ("macro `" + $(name : string) +
                               "' expects following list of arguments: (" + 
                               $(plist : string) + ") got some " +
                               len.ToString () + " parameters [" + types + "]")
        ]>
      };
      
      // iterate through parameters
      match (pars) {
        | [] => 
          // we have fixed amount of parameters, so there is always
          // case, which triggers error, handle it
          def warn = message (types);
          def (pats, exps) =
            traverse_patterns (acc :: accs, defaults, [], [ <[ _ ]> ], [warn]);
          (pats, exps, List.Rev (accmp))

        | [ { name = Splicable_string.SS_string (va); ty = t;
            modifiers = (_, [<[ System.ParamArrayAttribute ]>], _) } ] =>
          // variable amount of parameters is handled here
          def (initpat, initex) =
            match (acc) {
              // if there are some elemnts other than out 'va', then this
              // pattern won't be exchaustive, and we must supply error msg
              | _ :: _ =>
                def warn = message ("params array" :: types);
                ([ <[ _ ]> ], [warn])
              | _ =>
                ([], [])
            };
          match (t) {
            | <[ type: array <expr> ]> =>
              def (pats, exps) =
                traverse_patterns (accs, defaults, [], 
                                   roll (acc, <[ exprs ]>) :: initpat,
                  <[
                    def $(va : name) = (array (List.Length (exprs))
                                       : array <PExpr>);
                    mutable i = 0;
                    foreach (SyntaxElement.SyntaxExpr (e) in exprs) { 
                      $(va : name)[i] = e;
                      ++i;
                    }
                    $expr
                  ]> :: initex);
              (pats, exps, List.Rev (MacroParm.Exprs () :: accmp))

            | _ =>
              Message.fatal_error (loc, "only array of expr or parm are "
                                   "supported in params")
          }

        | ({ name = Splicable_string.SS_string (va); ty = t;
            modifiers =
              (_, [<[ System.ComponentModel.DefaultValueAttribute ($e) ]>], _) }) :: xs =>
          // parameter with default value
          match (normal_parm (t, va)) {
            | (p, str :: strs, macroparm) =>
              analyze_params (xs, p :: acc, acc :: accs, macroparm :: accmp, 
                (va, e) :: defaults, str + "(opt)" :: strs)
            | _ => Util.ice ("normal_parm returned empty types list")
          }

        | ({ name = Splicable_string.SS_string (va); ty = t; modifiers = _ }) :: xs =>
          match (defaults) {
            | [] =>
              /// [macroparm] is type of parameter supplied by user of macro
              /// or [MacroParm.Implicit] if it is not given by him, but implicitly
              /// passed by compiler
              def (p, str, macroparm) = normal_parm (t, va);
              analyze_params (xs, p :: acc, accs, macroparm :: accmp, defaults, str)
            | _ =>
              Message.fatal_error (loc, "parameters with default values must not"
                                   " be mixed with normal")
          }
          
        | ({ name = Splicable_string.SS_spliced_expr }) :: _ =>
          Util.ice ("spliced in macro parameters")
      }    
    }; // end analize_parms

    // creates match cases from pairs of pattern and expression
    def consolide_cases (pats, exps, acc) {
      match ((pats, exps)) {
        | ([], []) => acc
        | (x :: xs, y :: ys) => 
          consolide_cases (xs, ys, <[ case: $x => $y ]> :: acc)
        | _ => Util.ice ()
      }
    };

    // store positions and types of all parameters accessed by their names
    def mapparams (pars : list <Fun_parm>, n,
                   hash : Hashtable <string, int * PType>)
    {
      match (pars) {
        | [] => hash
        | ({ name = Splicable_string.SS_string ({ idl = [x] }); ty = t }) :: xs => 
          if (hash.Contains (x)) 
            Message.fatal_error (loc, "parameter names cannot repeat")
          else
            hash.Add (x, (n, t)); mapparams (xs, n + 1, hash)
        | ({ name = Splicable_string.SS_spliced_expr }) :: _ => Util.ice ("spliced in macro params")
        | ({ name = Splicable_string.SS_string ({ idl = _}) }) :: _ => Util.ice ("complex name in param name")
      }
    };
    def paramsmap = mapparams (header.parms, 0, Hashtable ());

    // if syntax extending section of macro exists, analyze all tokens and
    // permutation of parameters in its definition
    def analyze_syntax (toks) {
      def analyze_one (tok, acc) {
        def (elements, positions) = acc;
        match (tok) {
          | <[ $(x : string) ]> when LexerBase.IsKeyword (x) =>
            (Parser.GrammarElement.GE_keyword (x) :: elements, positions)

          | <[ $(x : string) ]> when LexerBase.IsOperator (x) =>
            (Parser.GrammarElement.GE_operator (x) :: elements, positions)

          | <[ Optional ($x) ]> =>
            match (analyze_one (x, acc)) {
              | (Parser.GrammarElement.GE_optional :: _, _) =>
                Message.fatal_error (loc, "nested Optional tokens not allowed in"
                                     " syntax definition")
                                     
              | (tok :: rest, pos) => (Parser.GrammarElement.GE_optional (tok) :: rest, pos)
                
              | _ => Util.ice ("analyze_one returned empty list")
            }
            
          | <[ $(x : dyn) ]> =>
            match (paramsmap.Get (x)) {
              | Some ((pos, ty)) =>
                paramsmap.Remove (x);
                def grammar_token =
                  match (ty) {
                    | <[ type: funparm ]> => Parser.GrammarElement.GE_funparm ()
                    | <[ type: array <expr> ]> => Parser.GrammarElement.GE_expression_list (",")
                    | _ => Parser.GrammarElement.GE_expression ()
                  };
                (grammar_token :: elements, pos :: positions)
              | None =>
                Message.fatal_error (tok.loc, "parameters from syntax description doesn't"
                                     " match macro's")
            }
          | _ => Message.fatal_error (tok.loc, "unsupported syntax token")
        }
      };
      def (elements, positions) = List.FoldLeft (toks, ([], []), analyze_one);
      // we have reached end of syntax definition, reverse accumulator
      // and return stored tokens and parameters' positions
      match (List.Rev (elements)) {
        | Parser.GrammarElement.GE_keyword (key) :: rules => (key, rules, positions)

        // if there was no syntax definition
        | [] => ("", [], [])
        | _ => Message.fatal_error ("first token of syntax definition must be keyword")
      }
    };

    // lift grammar element
    def lift_ge (x) {
      | Parser.GrammarElement.GE_operator (name) => <[ Parser.GrammarElement.GE_operator ($(name : string)) ]>
      | Parser.GrammarElement.GE_keyword (name) => <[ Parser.GrammarElement.GE_keyword ($(name : string)) ]>
      | Parser.GrammarElement.GE_expression => <[ Parser.GrammarElement.GE_expression () ]>
      | Parser.GrammarElement.GE_expression_list (sep) =>
        <[ Parser.GrammarElement.GE_expression_list ($(sep : string)) ]>
        
      | Parser.GrammarElement.GE_funparm => <[ Parser.GrammarElement.GE_funparm () ]>
      | Parser.GrammarElement.GE_optional (g) => <[ Parser.GrammarElement.GE_optional ($(lift_ge (g))) ]>
    };

    // this also checkes parameters to infer target type of macro
    def (macro_patts, macro_exprs, macro_parms) = 
      analyze_params (header.parms, [], [], [], [], []);
    
    def retname =
      if (target_type_suff != "" || phase != Nemerle.MacroPhase.None)
        if (target_type_suff != "") {
          def phase_suf =
            if (phase == Nemerle.MacroPhase.BeforeInheritance) ":postscan"
            else if (phase == Nemerle.MacroPhase.BeforeTypedMembers) ":preadd"
            else if (phase == Nemerle.MacroPhase.WithTypedMembers) ":postadd"
            else
              Message.fatal_error (loc, "macro operating on type declaration parts must"
                                   " have phase modifier");
          name + target_type_suff + phase_suf
        }
        else
          Message.fatal_error (loc, "macro with phase modifier must operate on type"
                               " declaration parts")
      else
        name;
    
    // build macro class
    attrs.mods |= NemerleAttributes.Macro %| NemerleAttributes.Public %| 
                  NemerleAttributes.Sealed;
//    def macro_class_name = Nemerle.Macros.Symbol (Util.tmpname (retname));
    def macro_class_name = NewSymbol ();
    def td = 
      match (parent_type) {
        | Some (t) =>
          t.DefineNestedType (<[ decl:
            ..$attrs class $(macro_class_name : name) : IMacro { }
          ]>)

        | None =>
          env.Define (<[ decl:
            ..$attrs class $(macro_class_name : name) : IMacro { }
          ]>)
      };
    td.MarkWithSpecialName ();
    td.Define (<[ decl: public this () { } ]>);

    def (key, rules, positions) = analyze_syntax (synt);

    td.Define (<[ decl:
      GetName () : string implements IMacro.GetName { $(retname : string) }
    ]>);

    td.Define (<[ decl:
      GetNamespace () : string implements IMacro.GetNamespace {
        $(env.GetCurrentNamespace () : string)
      }
    ]>);

    // count notimplicit parameters
    mutable count = List.Length (macro_parms);
    
    // create decision tree for transformation of supported call
    // parameters to our SyntaxElement description
    def create_transform_tree (parms) {
      | MacroParm.Expr :: xs =>
        <[
          match (trans_p) {
            | x :: trans_p =>
              trans_res = SyntaxElement.SyntaxExpr (x) :: trans_res;
              $(create_transform_tree (xs))
            | [] => ()
          }
        ]>
      | [MacroParm.Exprs] =>
        <[
          def app_expr (l : list <PExpr>) {
            | x :: xs => 
              trans_res = SyntaxElement.SyntaxExpr (x) :: trans_res;
              app_expr (xs)
            | [] => ()
          };
          app_expr (trans_p)
        ]>

      | [] =>
        <[
          match (trans_p) {
            | x :: _ =>
              trans_res = SyntaxElement.SyntaxExpr (x) :: trans_res
            | [] => ()
          }
        ]>

      | MacroParm.Implicit :: xs =>
        --count;
        create_transform_tree (xs)
        
      | _ => Util.ice ("corrupted macro parameters")
    };
                          
    td.Define (<[ decl:
      CallTransform (trans_p : list<PExpr>) : list<SyntaxElement>
      implements IMacro.CallTransform
      {
        mutable trans_res = [];
        $(create_transform_tree (macro_parms));
        List.Rev (trans_res);
      }
    ]>);

    def macro_cases = List.Rev (consolide_cases (macro_patts, macro_exprs, []));

    def run_body = 
      if (phase == Nemerle.MacroPhase.None)
        <[ match (parms) { ..$macro_cases } ]>
      else
        <[ match (parms) { ..$macro_cases }; null ]>;
    
    td.Define (<[ decl:
      Run ($(implicit_ctx_name : name) : Tyexpr.CTX, parms : list<SyntaxElement>) : PExpr
      implements IMacro.Run
      {
        $run_body
      }
    ]>);

    td.Define (<[ decl:
      public IsTailRecursionTransparent : bool
      {
        get { $(tail_transparent : bool) }
      }
    ]>);
                                
    td.Define (<[ decl:
      SyntaxExtension () : string * list<Parser.GrammarElement> * list<int>
      implements IMacro.SyntaxExtension
      {
        ($(key : string), $(Lift (rules, lift_ge)),
         $(Lift (positions, fun (x) { <[ $(x : int) ]> } )))
      }
    ]>);

    td.Compile ();                                
  }

  public CreatePermutingFunction (positions : list <int>) 
  : list <SyntaxElement> -> list <SyntaxElement>
  {
    def len = List.Length (positions);
    fun (li) {
      def take_first (n, l, acc) {
        match ((n, l)) {
          | (0, _) => (List.Rev (acc), l)
          | (_, []) => Util.ice ("too few parameters")
          | (n, x :: xs) =>
            take_first (n - 1, xs, x :: acc)
        }
      };
      def pararr = (array (len)) : array <SyntaxElement>;
      mutable m = 0;
      def loop (l, ps) {
        match ((l, ps)) {
          | (x :: xs, [p]) =>
            pararr[p] = x;
            loop (xs, [])
          | (x :: xs, p :: pp) =>
            if (p == len - 1) {
              def (rtail, rfront) =
                take_first (len - m - 1, List.Rev (xs), []);
              pararr[p] = x;
              loop (List.RevAppend (rtail, List.Rev (rfront)), pp)
            }
            else {
              pararr[p] = x;
              m = m + 1;
              loop (xs, pp)
            }
          | (xs, []) => List.Append (List.FromArray (pararr), xs)
          | ([], _) => Util.ice ("too few parameters")
        }
      };
      loop (li, positions)
    }
  }

  public TraverseExpr (ctx : option<CTX>, expr : PExpr, call : bool * PExpr -> PExpr) : PExpr
  {
    Util.locate (expr.loc, {
      def expr = 
        match (ctx) {
          | Some (c) => MacroRegistry.expand_macro (c, c, expr)
          | _ => expr
        };

      def trav_funparms (fps) {
        def go_funparm (p : Fun_parm) {
          | <[ funparm: $n : $t = $_e ]> =>
            <[ funparm: $n : $t = $(traverse (_e)) ]>
          | _ => p
        };
        List.Map (fps, go_funparm)
      };
      def traverse (x) { TraverseExpr (ctx, x, call) };

      ignore (call (false, expr));
 
      def recursed =
        match (expr) {
          | <[ $(_ : name) ]> => expr

          | <[ $obj . $mem ]> => 
            <[ $(traverse (obj)) . $mem ]>

          | <[ $func (.. $parms) ]> =>
            def parms = List.Map (parms, traverse);
            <[ $(traverse (func)) (..$parms) ]>

          | <[ $target = $source ]> =>
            <[ $(traverse (target)) = $(traverse (source)) ]>

          | <[ def $n = $val ]> => <[ def $n = $(traverse (val)) ]>

          | <[ mutable $n = $val ]> => <[ mutable $n = $(traverse (val)) ]>

          | <[ def (.. $elems) = $val ]> =>
            <[ def (..$(List.Map (elems, traverse))) = $(traverse (val)) ]>

          | <[ match ($expr) {.. $cases } ]> =>
            def go_case (c : MatchCase) {
              def go_guard (g : PExpr * option <PExpr>) {
                | <[ caseguard: $pat when $e ]> =>
                  <[ caseguard: $(traverse (pat)) when $(traverse (e)) ]>
                | <[ caseguard: $pat ]> =>
                  <[ caseguard: $(traverse (pat)) ]>
              };

              def <[ case: | ..$guards => $expr ]> = c;
              def guards = List.Map (guards, go_guard);
              <[ case: | ..$guards => $(traverse (expr)) ]>
            };

            def cases = List.Map (cases, go_case);
            <[ match ($(traverse (expr))) {.. $cases } ]>

          | <[ throw $exc ]> =>
            <[ throw $(traverse (exc)) ]>

          | <[ try $body catch { $exn : $exn_ty => $handler } ]> => 
            <[ try $(traverse (body)) catch { 
                 $exn : $exn_ty => $(traverse (handler))
               } ]>

          | <[ try $body finally $handler ]> =>
            <[ try $(traverse (body)) finally $(traverse (handler)) ]>

          | PExpr.Literal => expr

          | <[ this ]> => expr

          | <[ base ]> => expr

          | <[ typeof ($_) ]> => expr

          | <[ ( $expr :> $ty ) ]> =>
            <[ ( $(traverse (expr)) :> $ty ) ]>

          | <[ ( $expr : $ty ) ]> =>
            <[ ( $(traverse (expr)) : $ty ) ]>

          | <[ {.. $seq } ]> =>
            <[ { ..$(List.Map (seq, traverse)) } ]>

          | <[ (.. $args) ]> =>
            <[ ( ..$(List.Map (args, traverse)) ) ]>

          | <[ ref $e ]> => <[ ref $(traverse (e)) ]>

          | <[ out $e ]> => <[ out $(traverse (e)) ]>

          | <[ array (..$args) ]> =>
            <[ array ( ..$(List.Map (args, traverse)) ) ]>

          | <[ array $args ]> =>
            <[ array $(traverse (args)) ]>

          | <[ array < $rank > $args ]> =>
            <[ array < $(traverse (rank))> $(traverse (args)) ]>

          | <[ $obj [.. $args] ]> =>
            <[ $(traverse (obj)) [ ..$(List.Map (args, traverse)) ] ]>

          | <[ fun < ..$tparms> (..$args) where ..$tconstrs $body ]> =>
            def args = trav_funparms (args);
            <[ fun < ..$tparms> (..$args) where ..$tconstrs $(traverse (body)) ]>

          | <[ def ..$funs ]> =>
            def go_fun (f : Function_decl) {
              | <[ fundecl: $n < ..$tparms> (..$args)
                   where .. $tconstrs $body ]> =>
                def args = trav_funparms (args);
                <[ fundecl: $n < ..$tparms> (..$args)
                   where .. $tconstrs $(traverse (body)) ]>
              | _ => f
            };
            <[ def ..$(List.Map (funs, go_fun)) ]>

          | PExpr.As (pat, nm) =>
            PExpr.As (traverse (pat), nm) 

          | PExpr.DefPattern (pat, val) =>
            PExpr.DefPattern (traverse (pat), traverse (val))

          | PExpr.Application (func, arg) =>
            PExpr.Application (traverse (func), traverse (arg))

          | PExpr.Wildcard =>
            traverse (expr)

          | PExpr.MacroCall (x, namespc, parms) =>
            def go_parm (y) {
              | SyntaxElement.SyntaxExpr (e) =>
                SyntaxElement.SyntaxExpr (traverse (e))
              | _ => y
            };
            PExpr.MacroCall (x, namespc, List.Map (parms, go_parm))

          | PExpr.Spliced (e) => PExpr.Spliced (traverse (e))

          | PExpr.Ellipsis (e) => PExpr.Ellipsis (traverse (e))

          | PExpr.Quoted (quot) =>
            def inner =
            match (quot) {
              | SyntaxElement.SyntaxExpr (body) => SyntaxElement.SyntaxExpr (traverse (body))
              | SyntaxElement.SyntaxType 
              | SyntaxElement.SyntaxCase 
              | SyntaxElement.SyntaxCaseGuard
              | SyntaxElement.SyntaxFunDecl 
              | SyntaxElement.SyntaxFunParm 
              | SyntaxElement.SyntaxTType 

              | SyntaxElement.SyntaxDeclaration 
              | SyntaxElement.SyntaxTTypeBuilder 
              | SyntaxElement.SyntaxTField 
              | SyntaxElement.SyntaxTMethod 
              | SyntaxElement.SyntaxTProperty 
              | SyntaxElement.SyntaxTEvent 
              | SyntaxElement.SyntaxTFunParm => quot
            }
            PExpr.Quoted (inner)

          | PExpr.Typed | PExpr.TypedPattern => expr

          | PExpr.Lambda => Util.ice ("Bad construction of PExpr.Lambda")
        };
      call (true, recursed)
    })
  }

  public RecursiveRename (tc : TypeBuilder, expr : PExpr, from : Name, to : Name) : PExpr
  {
    def rename_expr (is_post, e) {
      if (is_post) 
        match (e) {
          | <[ $(n : name) ]> when n.Equals (from) => 
            <[ $(to : name) ]>

          | <[ def $(n : name) = $val ]> when n.Equals (from) => 
            <[ def $(to : name) = $val ]>

          | <[ mutable $(n : name) = $val ]> when n.Equals (from) => 
            <[ mutable $(to : name) = $val ]>

          | <[ this.$(n : name) ]> when n.Equals (from) =>
            <[ this.$(to : name) ]>

          | <[ $obj.$(n : name) ]> when n.Equals (from) =>
            match (GetIfIsType (tc.env, obj)) {
              | Some (t) when t.SameAs (tc) =>
                <[ $obj.$(to : name) ]>
              | _ => e
            }

          | PExpr.TryWith (body, Splicable_string.SS_string (exn), exn_ty, handler) 
            when exn.Equals (from) =>
            PExpr.TryWith (body, Splicable_string.SS_string (to), exn_ty, handler)
          | _ => e    
        }
      else e
    }
    Util.locate (expr.loc, {
      TraverseExpr (None (), expr, rename_expr)
    });
  }
}
} // end ns
