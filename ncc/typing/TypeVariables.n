/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Tyops;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Tyvar;
using Nemerle.Compiler.Parsetree;

using System.Reflection.Emit;

using NC = Nemerle.Compiler;

namespace Nemerle.Compiler {

public module Tyvar
{
  mutable tyvars : SystemMap [int, T];

  store_tv (t : T) : void
  {
    tyvars = tyvars.Add (t.id, t)
  }
  
  public class T
  {
    public name : string;
    mutable constraints : list [TType];
    public id : int;
    internal mutable value : TvValue;
    public mutable is_fixed : bool;

#if _GENERICS    
    mutable generic_builder : GenericTypeParameterBuilder = null; 

    public SetGenericBuilder (builder : GenericTypeParameterBuilder) : void
    {
      generic_builder = builder;
    }
#endif

    public this (n : string)
    {
      this.name = n;
      this.constraints = [];
      this.is_fixed = false;
      this.id = Util.next_id ();
      this.value = TvValue.Unspecified ();
      store_tv (this);
    }

    public this (t : T)
    {
      this.name = t.name;
      this.constraints = t.constraints;        // to be is_fixed
      this.value = TvValue.Free ();
      this.id = Util.next_id ();      
      this.is_fixed = true;
      store_tv (this);
    }

    public this ()
    {
      this.name = "_N_fv" + this.id.ToString ();
      this.constraints = [];
      this.value = TvValue.Free ();
      this.id = Util.next_id ();      
      this.is_fixed = true;
      store_tv (this);
    }

    public add_constraint (ty : TType) : void
    {
      if (this.is_fixed)
        Message.error ("this type variable cannot get any new constraints here")
      else ();
      this.constraints = ty :: this.constraints
    }
    
    public GetConstraints () : list [TType] { constraints }
    
    internal SubstituteConstraints (sub : Subst) : void {
      constraints = List.RevMap (constraints, fun (t : TType) { 
        t /- sub 
      })
    }

    public GetSystemType () : System.Type {
#if _GENERICS
      if (generic_builder != null)
        generic_builder
      else
#endif    
      match (constraints) {
        | [] => SystemType.Object
        | t :: _ => t.GetSystemType ()
      }
    }
  }

  public class TEnv
  {
    tyvars : NemerleMap [Name, T];
    
    private this (tv : NemerleMap [Name, T])
    {
      this.tyvars = tv;
    }

    public this ()
    {
      this.tyvars = NemerleMap ();
    }

    /** Perform typing of Parsetree type to Typedtree type, looking up type constructors 
        in given global environment (with accessibility information implied by given current
        TypeInfo) and type variables in current instance.
        If [check_parms] is true, then we check if type substituted for a given type
        variable conforms to all of its constraints. It should be true in general, but
        is false when we don't know the subtyping relations yet (during scanning of
        global types).
     */
    public bind (curtc : NC.TypeBuilder, t : PExpr, check_parms : bool) : TType
    {
      def f (allow_ref, t : PExpr) : TType {
        match (t) {
          | PExpr.ParmByRef when !allow_ref
          | PExpr.ParmOut when !allow_ref =>
            Message.fatal_error ("nested ref/out type found")
            
          | PExpr.ParmByRef (t) => TType.ByRef (f (false, t))
          | PExpr.ParmOut (t) => TType.Out (f (false, t))

          | <[ array [ $t ] ]> => TType.Array (f (false, t), 1)
          | <[ array [ $(rank : int), $t ] ]> => TType.Array (f (false, t), rank)

          | <[ $arg1 -> $arg2 ]> => TType.Function (f (true, arg1), f (false, arg2))
          | <[ @* (..$args) ]> =>
            def targs = List.Map (args, fun (a) { f (allow_ref, a) });
            TType.Product (targs)

          | PExpr.Void => TType.Void ()

          | PExpr.Member 
          | PExpr.Ref =>
            match (Util.QidOfExpr (t)) {
              | Some ((idl, nm)) =>
                match (this.tyvars.Find (nm)) {
                  | Some (tv) => TType.Variable (tv)
                  | None =>
                    def env = nm.context;
                    assert (env != null, t.ToString ());
                    
                    def ti = env.GetType (idl, curtc);
                    when (check_parms) {
                      ignore (ti.MakeSubst ([]))
                    };
                    TType.Class (ti, [])
                }
              | None => Message.fatal_error (t.loc, "expected qualified identifier in type")
            }

          | PExpr.Indexer (t, args) =>
            match (Util.QidOfExpr (t)) {
              | Some ((idl, nm)) =>
                match (this.tyvars.Find (nm)) {
                  | Some (tv) =>
                    Message.error ("type variable `" + nm.Id + "' supplied with arguments");
                    TType.Variable (tv)

                  | None =>
                    def env = nm.context;
                    def ti = env.GetType (idl, curtc);
                    def args = List.Map (args, fun (t) { f (false, t) });                    
                    when (check_parms) {
                      ignore (ti.MakeSubst (args))
                    };
                    TType.Class (ti, args)                    
                }
              | None => Message.fatal_error (t.loc, "expected qualified identifier in type")
            }

          | PExpr.TypedType (body) => body
            
          | PExpr.Wildcard =>
            // this is our entire type inference... 
            free_variable ()

          | PExpr.Spliced => Util.ice ("Spliced type survived to typying.")
          | PExpr.Array  => Message.fatal_error ("array type must be `array [T]' or `array [rank, T]'")
          | PExpr.Ellipsis => Util.ice ("Type arguments list survived to typying.")
          | x => Message.fatal_error (t.loc, "it isn't a legal type expression: " +
                                      PrettyPrint.SprintExpr (None (), x))
        }
      }

      f (true, t)
    }
    
    public add_typarms (tp : Typarms, curtc : NC.TypeBuilder, check_parms : bool) : TEnv * list [T]
    {
      def name_of_tv (tv) {
        def (name, color) = tv;
        Name (name, color, null)
      }
      mutable newwhole = this.tyvars;
      mutable newvars = [];
      foreach (tv in tp.tyvars) {
        def tv_obj = T (Pair.First (tv));
        newwhole = newwhole.Replace (name_of_tv (tv), tv_obj);
        newvars = tv_obj :: newvars;
      }
      def tenv = TEnv (newwhole);
      foreach (constraint in tp.constraints) 
        match (newwhole.Find (name_of_tv (constraint.tyvar))) {
          | Some (tv) =>
            tv.add_constraint (tenv.bind (curtc, constraint.ty, check_parms))
          | None =>
            Message.error ("unbound type variable `" + Pair.First (constraint.tyvar) + "' in constraint")
        }
      foreach (tv : T in newvars) tv.is_fixed = true;
      (tenv, List.Rev (newvars))
    }
  }

  private lookup (id : int) : T 
  {
    match (tyvars.Find (id)) {
      | Some (x) => x
      | None => Util.ice ()
    }
  }

  internal global_store (s : Subst) : void 
  {
    s.Iter (fun (id, t) { lookup (id).value = t })
  }

  internal fresh_subst (parms : list [T]) : Subst
  {
    def loop (proto : T, ctx : Subst * list [T]) {
      def (sub, vars) = ctx;
      def tv = Tyvar.T (proto);
      (sub.Add (proto.id, TvValue.Exactly (TType.Variable (tv))), tv :: vars)
    };
    def (sub, vars) = List.FoldLeft (parms, (SystemMap (), []), loop);
    foreach (var in vars) var.SubstituteConstraints (sub);
    sub
  }

  public free_variable () : TType { TType.Variable (T ()) }

  public Init () : void
  {
    tyvars = SystemMap ();
  }
} // module Tyvar
} // end ns
