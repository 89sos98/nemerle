/** this is test program for accesing sql databse
    as for now it requires Postgres database server running on localhost
    with database user 'postgres' (password 'sql')
 */

// REFERENCE: Npgsql.dll
// REFERENCE: ../macros/Nemerle.Data.Npgsql.dll

using System;
using System.Data;
using Npgsql;
 
public class Test 
 {
    static insert (conn : NpgsqlConnection, x : string, y : string) : void
    {
      /// this is usage of macro ExecuteNonQuery, which creates Npgsql parameters
      /// [:x] and [:y], set their value to corresponding variables [x] and [y],
      /// verify syntax and type correctness of query at compile-time, and generating
      /// code for runtime insertion of data to database
      ignore (Nemerle.Data.Npgsql.ExecuteNonQuery ("INSERT INTO employee VALUES ($x, $y)",
                                                    conn));
    }

    public static Main() : void
    {
       // this is how compiler connects to database to validate queries occuring in program
       Nemerle.Data.Npgsql.CreateCompileTimeConnection ("Server=localhost;Database=test;"
                                                        "User ID=postgres;Password=sql;");
      
       Console.WriteLine("start...");

       def connectionString = 
          "Server=localhost;" +
          "Database=test;" +
          "User ID=postgres;" +
          "Password=sql;";

       def dbcon = Npgsql.NpgsqlConnection (connectionString);
       dbcon.Open ();
       Console.WriteLine("connection opened...");

//       insert (dbcon, "Kocia", "Bicia");

       def myparm = "Kasia";

       // requires a table to be created named employee
       // with columns firstname and lastname
       // such as,
       //        CREATE TABLE employee (
       //           firstname varchar(32),
       //           lastname varchar(32));

       /// This is standard C#-like implementation of database inteoperation,
       /// whithout using Nemerle macros
       def sql = "SELECT (firstname) AS ff, lastname " +
           "FROM employee WHERE firstname = :a";
       def dbcmd = NpgsqlCommand (sql, dbcon);

       ignore (dbcmd.Parameters.Add("a", myparm));
 
       while(reader.Read()) {
         def firstname = reader.GetString (0);
         def lastname = reader.GetString (1);
         Nemerle.IO.printf ("Name: %s %s\n", firstname, lastname)            
       };
       reader.Close();
       dbcmd.Dispose();

       /// and this is equivalent code utilizing ExecuteReaderLoop, which is
       /// a macro checking syntax and type validness of query at compile-time
       /// (by connecting to database)
       Nemerle.Data.Npgsql.ExecuteReaderLoop ("SELECT * FROM employee WHERE"
                                              " firstname = $myparm", dbcon, {
         Nemerle.IO.printf ("Name: %s %s\n", firstname, lastname)
       });

       //// another examples using Nemerle sql macros       
       def tt = 4; def ty = "dfd4";
       /// CREATE TABLE intstr (a INT4, b VARCHAR(32));
       Nemerle.Data.Npgsql.ExecuteReaderLoop ("SELECT a AS liczba, b,"
          " COUNT(*) AS ilosc FROM intstr " 
          "WHERE a = $tt or b = $ty GROUP BY a, b", dbcon, {
         Nemerle.IO.printf ("%d %s\n", liczba, b);
         System.Console.WriteLine (ilosc)
       });
       Nemerle.IO.printf ("%d\n", Nemerle.Data.Npgsql.ExecuteScalar
                          ("SELECT MAX(a) FROM intstr", dbcon));

/*                          
       Nemerle.Data.Npgsql.ExecuteReaderLoop ("INSERT INTO intstr VALUES (1, '2');"
                                              " SELECT * FROM intstr;", conn, { 
         ()
       });
*/
       dbcon.Close();
    }
 }
