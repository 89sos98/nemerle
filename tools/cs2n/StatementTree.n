// Copyright (c) 2003-2005 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 


using Nemerle.Collections;

namespace Nemerle.CSharp
{

    /**
     *  C# wrapper for STree class
     */
    public class StatementTree
    {
        public this ()
        {
            s_tree = STree.TokS ("")
        }

        public this (t : antlr.Token)
        {
            s_tree = STree.Tok (t)
        }

        public this (s : string)
        {
            s_tree = STree.TokS (s)
        }

        public this (s : string,ch : LinkedList[StatementTree])
        {
            mutable l = [];
            
            def get_stree (t : StatementTree)
            {             
                  l = t.s_tree :: l;
            }

            ch.Iter (get_stree);

            s_tree = STree.Statement(s,l)
        }        
        
        public ToString (tp : string) : string
        {	 
	    STree.set_type(tp);	
            def st = s_tree.translate_switch(). eliminate_continues ().eliminate_jump_2 (Jump.ReturnBreak );
            match (st)
            {
		| [tree2] => tree2.eliminate_jump (Jump.Return) .ToString ()
		| _ => assert (false);
            } 
        }

        public override ToString () : string { ToString (""); }

        public PlainString : string {
          get {
            match (s_tree) {
              | STree.TokS (s) => s
              | _ => null
            }
          }
        }
        
        private s_tree : STree;
    }

    /**
     *  Description of jump
     */
    public enum Jump
    {
	| ReturnBreak
	| Return
	| Continue
	| Break
	| Goto
	| All
    }

    /**
     *  STree class, representing single statement
     */
    public variant STree
    {        
        | TokS { s : string; }
        | Tok { t : antlr.Token; }
        | Statement { s_name : string; children : list[STree] ; }                                   	
	

	#region ToString method
	
        override public ToString () : string
        {	    
            match(this)
            {             
                | Tok (t) => t.getText ()
                | TokS (s) => s

                | Statement ( "RETURN" , [Tok (t), expr, s]) =>
                  ExtendedToken.getWhitespaces (t) + expr.ToString () + s.ToString ()

                | Statement ( "RETURN" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "()" + s.ToString ()

                | Statement ( "CONTINUE" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "/*" + ExtendedToken.getTextOnly (t)+ "*/()" +s.ToString ()
                
		| Statement ("WHILE",children) =>
		  def new_while = Statement("WHILE_",children);
		  match(children)
		  {
		     | [_,_,_,_,Statement("BLOCK",_)] =>		       
     		       new_while.ToString () + ";";
		     | _ => new_while.ToString ();
		  }
		
		| Statement ("SWITCH",[Tok(s),lp,exp,rp,switch_block]) =>
		    ExtendedToken.getWhitespaces(s) + "match" + lp.ToString () + exp.ToString () + rp.ToString () + switch_block.ToString ()

		| Statement ("SWITCH_BLOCK",xs) =>
		    def print_all (secions) : string
		    {
			| [] => ""
			| head :: tail =>
			    head.ToString () + print_all (tail)
		    }
			
		    def print (sections) : string
		    {
			| [] => ""
			| (Statement("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",Statement ("SWITCH_LABEL",[Tok(c),_,_]) :: _),_]) as head) 
			  :: [] =>
			    if(get_default_label(head))
				head.ToString ()
			    else			    
				head.ToString () + 
				Statement("SWITCH_SECTION", 
				[
				Statement("SWITCH_SECTION_LABELS",[Statement ("SWITCH_LABEL",[Tok(c),TokS(" _ "),Tok(ExtendedToken("",":"))]) ]) , 
				Statement("SWITCH_SECTION_STATEMENTS",[TokS("()")])
				]).ToString ()

			| head :: tail => 
			    if(get_default_label(head))
				print_all (tail) + head.ToString ()
			    else 
				head.ToString () + print (tail) 
		    }

		    def (lbrace,sections,rbrace) = cut_off_braces(xs);
		    lbrace.ToString () + print (sections) + rbrace.ToString ()
		    
		| Statement ("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",lbs),Statement("SWITCH_SECTION_STATEMENTS",sts)]) =>
		    def print_labels (labels) : string
		    {
			| [] => ""
			| head :: tail => head.ToString () + print_labels(tail)			
		    }

		    def print_statements(statements) : string
		    {
			| [] => ""
			| head :: tail => head.ToString () + print_statements(tail)
		    }

		    print_labels(lbs) + "=> " + print_statements(sts)

		| Statement ("SWITCH_LABEL",[Tok(c),ce,Tok(colon)]) =>
		    ExtendedToken.getWhitespaces(c) + "|" + ce.ToString () + ExtendedToken.getWhitespaces (colon)
		    
		| Statement ("SWITCH_DEFAULT",[Tok(d),Tok(colon)]) =>
		    ExtendedToken.getWhitespaces(d) + "|" + " _ " + ExtendedToken.getWhitespaces (colon) 

		| Statement("CATCH_CLAUSES", (head :: _) as lst) =>
	
		    def sb = System.Text.StringBuilder ();
		    foreach (x in lst)		  
			ignore (sb.Append (x.ToString ()));
		    
		    def first_whitespace = get_first_whitespace (head);
		
		    first_whitespace + "catch { " + sb.ToString () + first_whitespace + "}"

		| Statement ("SPECIFIC_CATCH", [Tok(c),_,ty,id,_,block]) =>
		    ExtendedToken.getWhitespaces (c) + "| " + id.ToString () + " : " + ty.ToString () + " => " + block.ToString ()

		| Statement ("SPECIFIC_CATCH", [Tok(c),_,ty,_,block]) =>
		    ExtendedToken.getWhitespaces (c) + "| _ : " + ty.ToString () + " => " + block.ToString ()

		| Statement ("GENERAL_CATCH", [Tok(c),block]) =>
		    ExtendedToken.getWhitespaces (c) + "| _ : System.Exception => " + block.ToString ()

		| Statement ("BREAK",[Tok(b),s]) =>
		    ExtendedToken.getWhitespaces(b) + "(sdsd)" + s.ToString ()
		  
                | Statement ( _ , children) =>
                  
                  def sb = System.Text.StringBuilder ();
                  foreach (x in children)		  
                    ignore (sb.Append (x.ToString ()));
		    
                  
                  sb.ToString ()                  
            }
        }                        
	
	#endregion
	
	/* -- SWITCH TRANSLATION ----------------------------------------- */
	
	#region switch translation
	
	private is_default (label : STree) : bool
	{
	    | Statement ("SWITCH_DEFAULT",_) => true
	    | _ => false
        }
	
	private get_default_label (section : STree) : bool
	{
	    | Statement ("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",lbs),_]) =>
                List.Exists (lbs, is_default)

	    | _ => false
	}	
	
	/**
	 *  main switch translation function
	 */
	internal translate_switch () : STree
	{	    
	    match(this)
	    {
		| Statement("SWITCH",[s,lp,exp,rp,switch_block]) =>
		    def (lbrace,sections,rbrace) = cut_off_braces (switch_block);
		    def translated_switch_block = Statement("SWITCH_BLOCK",lbrace :: translate_switch_sections (sections) + [rbrace]);
		    Statement("SWITCH",[s,lp,exp,rp, translated_switch_block])

		| x => 	
		    def loop (trees,acc)
		    {
			match(trees)
			{
			    | (Statement(_,_) as statement) :: tail =>
				loop (tail, statement.translate_switch () :: acc)
			    | head :: tail =>
				loop (tail, head :: acc)				
			    | [] => List.Rev (acc)
			}
		    }
		    match(x)
		    {
			| Statement(name,trees) =>
			    Statement(name,loop(trees,[]))
			| _ => x
		    }
	    }   
	}	
	
	/**
	 *  method used to translate a list of switch sections
	 */
	private translate_switch_sections (sections : list [STree]) : list [STree]
	{	    
	    def switch_block = Statement("SWITCH_BLOCK",TokS("{") :: sections + [TokS("}")]);
	    def (_,statements,_) = cut_off_braces(switch_block.eliminate_jump( Jump.Break ));
	    statements
	}   // FIXME: what about 'goto case'?

	#endregion

	/* -- JUMP ELIMINATION ------------------------------------------- */

	private cut_off_braces (lst : list [STree]) : STree * list [STree] * STree
        {
            def st = Statement("BLOCK",lst);
            cut_off_braces (st)
        }
        
        private cut_off_braces (t : STree) : STree * list [STree] * STree
        {                     
	    | Statement("SWITCH_BLOCK",x::xs) 
            | Statement("BLOCK",x::xs) =>		    
		def (sx,end) = List.DivideLast (xs);
                (x, sx, end)		

            | _ => assert(false);            
        }

	private get_first_whitespace (tree : STree) : string
	{
	    | TokS (_) => "";
	    | Tok (t)  => ExtendedToken.getWhitespaces(t)
	    | Statement(_,x :: _) => get_first_whitespace(x)
	    | _ => assert(false);
	}

	private get_catch_clauses (clauses : list [STree]) : list [STree] * option [STree]
	{
	    def is_catch_clause (_)
	    {
		| Statement ("GENERAL_CATCH",_) 
		| Statement ("SPECIFIC_CATCH",_) =>
		    true
		| _ => false
	    }

	    def (finally_clause , catch_clauses ) = List.Partition (clauses , is_catch_clause);

	    match(finally_clause)
	    {
		| [] =>  (catch_clauses , None ())
		| [x] =>  (catch_clauses, Some (x))
		| _ => assert(false)
	    }
	}

	private divide_switch_sections (sections : list [STree],jump : Jump) : list [STree] * list [STree]
	{
	    def contains (tree : STree) 
	    {
              match (jump) {
                | Jump.Continue 
                | Jump.Return => tree.jump_inside (jump)
                | _ => false
              }
	    }	
            List.Partition (sections, contains)
	}

        /* -- CONTINUE ELIMINATION ----------------------------------------- */

	#region eliminate continues
	/**
         *  Main 'continue' elimination function. Returns tree made by 'continue' elimnation.
         *  Function first searchs for loop, then transforms it.
         */
	
        internal eliminate_continues () : STree
        {
            /*def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_continues () :: acc)
                }
            }*/
            	  
	    def eliminate_block (block) : STree
	    {
	      	| Statement("BLOCK",_) => 
		  def (lbrace,body_eliminated,rbrace) = cut_off_braces(block.eliminate_jump ( Jump.Continue ));
		  Statement("BLOCK",lbrace :: body_eliminated + [rbrace]);		  
		
		| _  => 
		  def body = Statement ("BLOCK",[TokS("{"),block,TokS("}")]);
		  def (_,body_eliminated,_) = cut_off_braces(body.eliminate_jump ( Jump.Continue ));
		  match(body_eliminated)
                  {
                    | [block_eliminated] => block_eliminated
	     	    | _ => assert(false); 
        	  }	  
	    }
		  
            match (this)
            {   
                // WHILE loop
                
                | Statement("WHILE",[w,lp,be,rp,block]) =>
		    if (block.jump_inside ( Jump.Continue ))
			Statement("WHILE",[w,lp,be,rp,eliminate_block(block)])
		    else                  
			Statement("WHILE",[w,lp,be,rp,block.eliminate_continues ()])
                
		// DO ... WHILE loop
		
		| Statement("DO",[d,block,w,lp,be,rp,s]) =>
                  if (block.jump_inside ( Jump.Continue ))
		      Statement("DO",[d,eliminate_block(block),w,lp,be,rp,s]) 
                  else                  
		      Statement("DO",[d,block.eliminate_continues() ,w,lp,be,rp,s]) 

                // FOR loop
  
		| Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block]) =>
		  if (block.jump_inside ( Jump.Continue ))
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,eliminate_block(block)]) 
                  else                  
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block.eliminate_continues()]) 

                // FOREACH loop

		| Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block]) =>      
		  if (block.jump_inside ( Jump.Continue ))
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,eliminate_block(block)])  
                  else                  
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block.eliminate_continues()])       		
		      
		| x =>
		    def loop (trees,acc)
		    {
			match(trees)
			{
			    | (Statement(_,_) as statement) :: tail =>
				loop (tail, statement.eliminate_continues () :: acc)
			    | head :: tail =>
				loop (tail, head :: acc)				
			    | [] => List.Rev (acc)
			}
		    }
		    match(x)
		    {
			| Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",xs)]) =>
			    Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",loop(xs,[]))])
			| Statement(name,trees) =>			    
			    Statement(name,loop(trees,[]))
			| _ => x
		    }
            }
        }
	
	#endregion

        /* -- JUMP ELIMINATION --------------------------------------------- */
        
	#region eliminate_jump
	
	/**
         *  Function used to eliminate jumps from function bodies, loop bodies, switch sections..
	 *  It doesn't add new variables, only transform trees
         */	
        internal eliminate_jump (jump : Jump) : STree
        {
            def (lbrace,statements,rbrace) = cut_off_braces (this);

            def loop (sts : list [STree],acc : list [STree]) : list [STree]
            {
                match(sts)
                {
                    | (Statement("IF", _) as if_st)  :: tail
                    | (Statement("WHEN", _) as if_st) :: tail =>                      
			def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
			def est_block       = block_statement.eliminate_jump (jump);
			def est_if          = if_st.eliminate_jump_if (est_block,jump);
                      
			List.Rev(est_if :: acc)
			
                    | (Statement ("SWITCH",_) as switch) :: tail =>
			match(jump)
			{
			    | Jump.Continue  //FIXME: maybe goto
			    | Jump.Return =>
				def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
				def est_block       = block_statement.eliminate_jump (jump);
				
				List.Rev( switch.eliminate_jump_if(est_block,jump) :: acc)
			    | _ => loop (tail, switch :: acc )
			}
			
                    | Statement("BLOCK",xs) :: tail =>
			def (lb,ys,rb) = cut_off_braces (xs);
			def block_statement = Statement("BLOCK",lb :: ys + tail  + [rb]);
			def est_block       = block_statement.eliminate_jump (jump);
			List.Rev(est_block :: acc)
		  		    		  
		    | (Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",xs)]) as switch_section) :: tail =>
			match(jump)
			{			    
			    | Jump.Break => 
				def block = Statement("BLOCK",TokS("{") :: xs + [TokS("}")]);
				def (_,statements,_) = cut_off_braces(block.eliminate_jump(jump));
				loop (tail, Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",statements)]) :: acc)
			    | _ =>
				loop (tail, switch_section  :: acc )
			}
		    
		    | (Statement("BREAK",_) as break_statement) :: tail =>
			match(jump)
			{			    
			    | Jump.Break =>
				List.Rev (break_statement  :: acc) 
			    | _ =>
				loop (tail, break_statement :: acc )
			}
		    
                    | (Statement("RETURN", _) as ret_st) :: tail =>
			match(jump)
			{
			    | Jump.Return =>
				List.Rev (ret_st :: acc)			    
			    | _ => 
				loop (tail, ret_st :: acc )
			    
			}
			
	 	    | (Statement("CONTINUE", _) as con_st) :: tail =>		      
			match(jump)
			{
			    | Jump.Continue => 			    
				List.Rev (con_st :: acc)			    
			    | _ =>
				loop (tail, con_st :: acc )
			    
			}

                    | (Statement("FOREACH", _) as while_st) :: tail
		    | (Statement("FOR", _) as while_st) :: tail	
		    | (Statement("DO", _) as while_st) :: tail
		    | (Statement("WHILE", _) as while_st) :: tail =>
			match(jump)
			{
			    | Jump.Continue =>
				loop (tail, while_st.eliminate_continues ()  :: acc )
			    | _ =>
				loop (tail, while_st :: acc )			    
			}		      
		 
                    | head :: tail => loop (tail, head :: acc )
                    | _ =>  List.Rev(acc)
                }
            }
	    
	    match(this)
	    {
		| Statement("SWITCH_BLOCK",_) =>
		    Statement("SWITCH_BLOCK",lbrace :: loop(statements,[]) + [rbrace])
		| _ =>
		    Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])
	    }
            
        }
	
	#endregion

	#region eliminate jump in if

	/**
         *  Function used to transform 'if' trees containing jumps
         */
        protected eliminate_jump_if (return_st : STree,jump : Jump) : STree
        {
            def(lb,sts,rb) = cut_off_braces (return_st);
	    
            match(this)
            {
                | Statement("IF",[Tok(i),lp,exp,rp,st1,Tok(e),st2]) =>

		    def ws_if    = ExtendedToken.getWhitespaces(i);
		    def ws_else  = ExtendedToken.getWhitespaces(e);
                  
		    // checking "if"
                  
		    def transform_if () : STree
		    {
			def s1 = Statement("BLOCK",[Tok(ExtendedToken(ws_if,"{")),st1] + sts +[Tok(ExtendedToken(ws_if,"}"))]);
			def es1 = s1.eliminate_jump (jump);
			def s2 = Statement("BLOCK",[Tok(ExtendedToken(ws_else,"{")),st2] + sts +  [Tok(ExtendedToken(ws_else,"}"))]);
			def es2 = s2.eliminate_jump (jump);
			
			Statement("IF",[Tok(i),lp,exp,rp,es1,Tok(e),es2])
		    }
		    
		    if (st1.jump_inside(jump) || st2.jump_inside(jump))
			transform_if()
		    else
			Statement("BLOCK", lb :: this :: sts + [rb])
		    
		// checking "when"
                      
                | Statement("WHEN",[Tok(i),lp,exp,rp,st1]) =>
		
		    def whitespaces = ExtendedToken.getWhitespaces(i);					    		    
		    
		    def transform_when (whitespaces) : STree
		    {			
			def s1 = Statement("BLOCK",[Tok(ExtendedToken(whitespaces : string,"{")),st1] + sts +[Tok(ExtendedToken(whitespaces,"}"))]);
			def es1 = s1.eliminate_jump (jump);
			
			def rs = Statement("BLOCK",lb :: (
			if(sts matches [] && !(jump matches Jump.Continue))  // when RETURN is in loop, and loop is last statement in block
			    Statement("RETURN", [Tok (ExtendedToken (ExtendedToken.getWhitespaces (i), "return")),
                                       TokS("Nemerle.Extensions.DefaultValue(" + tp + ")"),TokS(";")]);
			else
			    return_st
			) :: [rb]);
			
			Statement("IF", [Tok(ExtendedToken(whitespaces,"if")), lp, exp, rp, es1, Tok(ExtendedToken(whitespaces , "else")), rs])
		    }		    
		    
		    if(st1.jump_inside (jump))
			transform_when (whitespaces)
		    else
			Statement("BLOCK", lb :: (this :: sts) + [rb])
    
		| Statement("IF", _)
                | Statement("WHEN", _) =>
                  assert(false);
		
		// checking SWITCH
		
		| Statement("SWITCH",[s,lp,ce,rp,Statement("SWITCH_BLOCK",xs)]) as switch =>
		    
		    def loop (sections,acc)
		    {
			match(sections)
			{
			    | [] => List.Rev (acc)
			    | Statement ("SWITCH_SECTION",[lbs ,Statement("SWITCH_SECTION_STATEMENTS",statements)]) :: tail =>
				def s = Statement("BLOCK",[TokS("{")] + statements + sts +[TokS("}")]);
				def es = s.eliminate_jump(jump);
				def (_,sts,_) = cut_off_braces(es);
				loop( tail , Statement ("SWITCH_SECTION", [ lbs , Statement("SWITCH_SECTION_STATEMENTS", sts ) ] ) :: acc)
			    | _ => assert(false)
			}
		    };
		    
		    match(jump)
		    {	
			| Jump.Continue
			| Jump.Return =>
			    def (lb,sections,rb) = cut_off_braces (xs);
			    def (jmp,_non_jmp) = divide_switch_sections(sections,jump);
		
			    match(jmp)
			    {
				| [] => 
				    Statement("BLOCK",lb :: (this :: sts) + [rb]);
				    //switch				    
				| _ => Statement("SWITCH",[s,lp,ce,rp,Statement("SWITCH_BLOCK",lb :: loop(sections,[]) + [rb] )])
			    }
			| _ => switch
		    }
		    

                | x => x
            }
        }

	#endregion
                
        /* -- BREAK ELIMINATION -------------------------------------------- */

        /**
         *  Another elimination function. Used for break elimination mainly.
	 *  Returns list of trees made by jump elimnation.
         *  Function first searchs for loop, then transforms it.
	 *  Adds one new variable. 
         */
        internal eliminate_jump_2 (jump : Jump) : list [STree]
        {
	    def loop (trees,acc)
	    {
		match(trees)
		{
		    | (Statement(_,_) as statement) :: tail =>			
			def eliminated_st = statement.eliminate_jump_2 (jump);			

			match(eliminated_st)
			{
			    | [] => assert(false)				    
			    | [el_st] =>
				loop (tail, el_st :: acc)

		    	    | (head :: _) as lst =>
				def whitespaces = get_first_whitespace(head);
				def block = Statement("BLOCK", TokS(whitespaces + "{") :: List.Rev(lst) + [TokS(whitespaces + "}")]);
					loop (tail, block :: acc) 
			}
				
		    | head :: tail =>
			loop (tail, head :: acc)				
		    | [] => List.Rev (acc)
		}
	    }
	    
	    def eliminate_block(block : STree, w : antlr.Token) : STree
	    {
		match(block.eliminate_jump_2 (jump))
		{
		  | [x] => x
                  | xs => 
		    def whitespaces = ExtendedToken.getWhitespaces (w);
		    Statement("BLOCK",
		    Tok(ExtendedToken(whitespaces, "{")) :: List.Rev(xs) + [Tok(ExtendedToken(whitespaces, "}"))]);
		}    
	    }
	    
	    // propagate RETURN out of a loop
	    def make_when_statement (w : antlr.Token, ns : string, rs : string) : STree
	    {
	        def return_statement = 
		Statement("RETURN",[Tok (ExtendedToken (ExtendedToken.getWhitespaces (w), "return")),TokS(" " + rs),TokS(";")]);
			
	        Statement("WHEN",
		[Tok (ExtendedToken (ExtendedToken.getWhitespaces (w),"when")),
		 TokS("( "),TokS(ns),TokS(" )"),return_statement]);
	    }
	
            match((this,jump))
            {			
		// FOREACH loop  -  FIXME: emit warning message about uneffectivness
                  
                /*| (Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block]), Jump.ReturnBreak) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.jump_inside (jump))
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();

		     def (block_eliminated2,ret,con) = block_eliminated.eliminate_jump_in_loop (ns,rs,jump);
		     
		     def when_eliminated = Statement
		      ("WHEN",[Tok(ExtendedToken(ExtendedToken.getWhitespaces (f), "when")),TokS(" ("),TokS("!" + ns),TokS(" )"),block_eliminated2]);
		      
		     if(!ret && !con)
		     {
		     	[Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
                        Tok (ExtendedToken(ExtendedToken.getWhitespaces (f), "mutable " + ns + " = false;"))];
	             }
		     else
			if(!con)
			{  		     
			    def when_statement = make_when_statement(f,ns,rs);
						
			    [when_statement,
			    Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
			    TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			    TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
			}
			else
			{
			    [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block_eliminated2]),
			    Tok (ExtendedToken(ExtendedToken.getWhitespaces (f), "mutable " + ns + " = false;"))];
			}
		     
		  }
		  else
		     [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block_eliminated])]
                  
                // FOR loop  
                  
                | (Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block]), Jump.ReturnBreak) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.jump_inside (jump))
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def cs = new_continue_symbol ();
		     
		     def new_fc = 
		     if (fc == "")
                        "!" + ns;
                     else
                        fc + " && !" + ns;

		     def (block_eliminated2,ret, con , brk) = block_eliminated.eliminate_jump_in_loop (ns,rs,cs,jump);
		     
		     def for_unmodified = Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block_eliminated2]);
		     def for_modified = Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]);
		     
		     init_loop_variables ( for_unmodified, for_modified , ret , con , brk , ns , cs , rs , f)
		     if(!ret && !con)
		     {
                        [Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
                        TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
	             }
		     else
			if(!con)
			{  		     
			    def when_statement = make_when_statement(f,ns,rs);
						
			    [when_statement,
			    Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
			    TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			    TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
			}
			else
			{
			    [Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block_eliminated2]),
			    TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;")];
			}
		     
		  }
		  else
		     [Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block_eliminated])]*/
		  
		//  
                // DO ... WHILE loop
		//
                  
                | (Statement("DO",[Tok(w),block,while_tok,lp,TokS(be),rp,s]), Jump.ReturnBreak) =>
		
                  def block_eliminated = eliminate_block(block,w);
		  
   	          if(block_eliminated.jump_inside (jump))
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def cs = new_continue_symbol ();

		     def (block_eliminated2 , ret , con , brk) = block_eliminated.eliminate_jump_in_loop (ns,rs,cs,jump);

		     def do_unmodified = Statement("DO",[Tok(w),block_eliminated2,while_tok,lp,TokS(be),rp,s]);
		     def do_modified = Statement("DO",[Tok(w),block_eliminated2,while_tok,lp,TokS(be + " && !" + ns),rp,s]);

		     match((ret,con,brk))
			{
			    | (false,false,true) => 
				[do_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;")];
			    | (true,false,_) =>
				def when_statement = make_when_statement(w,ns,rs);
					
				[when_statement,
				do_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) 
				    + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];

			    | (false, true ,false) =>
				[do_unmodified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;")]
			    | (true,true,_) =>
				def when_statement = make_when_statement(w,ns,rs);
					
				[when_statement,
				do_unmodified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) 
				    + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
				    
			    | (false,true,true) => 
				[do_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;")]
			    | _ => 
				assert(false)
			}
		  }
		  else
		     [Statement("DO",[Tok(w),block_eliminated,while_tok,lp,TokS(be),rp,s])]
		
		//
		// WHILE loop
		//
		
		| (Statement("WHILE",[Tok(w),lp,TokS(be),rp,block]), Jump.ReturnBreak) =>
		    
		    def block_eliminated = eliminate_block(block,w);
		  
		    if(block_eliminated.jump_inside ( Jump.ReturnBreak ))
		    {
			def ns = new_break_loop_symbol ();
			def rs = new_return_symbol ();
			def cs = new_continue_symbol ();			

			def (block_eliminated2, ret , con , brk) = block_eliminated.eliminate_jump_in_loop (ns,rs,cs,jump);
		    
			def while_unmodified = Statement("WHILE",[Tok(w),lp,TokS(be),rp,block_eliminated2]);
			def while_modified = Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp,block_eliminated2]);

			match((ret,con,brk))
			{
			    | (false,false,true) => 
				[while_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;")];
			    | (true,false,_) =>
				def when_statement = make_when_statement(w,ns,rs);
					
				[when_statement,
				while_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) 
				    + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];

			    | (false, true ,false) =>
				[while_unmodified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;")]
			    | (true,true,_) =>
				def when_statement = make_when_statement(w,ns,rs);
					
				[when_statement,
				while_unmodified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) 
				    + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
				    
			    | (false,true,true) => 
				[while_modified,
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
				TokS (ExtendedToken.getWhitespaces (w) + "mutable " + cs + " = false;")]
			    | _ => 
				assert(false)
			}  
		    }
		    else
			[Statement("WHILE",[Tok(w),lp,TokS(be),rp,block_eliminated])]

		| (x,_) =>
		    match(x)
		    {
			| Statement(name,trees) =>
			    [Statement(name,loop(trees,[]))]
			| _ => [x]
		    }
            }
        }

        /**
         *  Function used to transform loops containig jump statements
	 *
	 *  function returns transformed tree, and three booleans
	 *  first one is true, if block contains return
	 *  second is true, if block contains continue
	 *  third is true, if block contains break
         */
        protected eliminate_jump_in_loop (ns : string,rs : string,cs : string, jump : Jump) : STree * bool * bool * bool
        {
	    // elimnates jumps in CHECKED, UNCHECKED, TRY, USING, LOCK
	    
	    def eliminate_jumps_in_embedded_statement (block_st : STree,tail,c)
	    {		
		def (block_eliminated, ret1 , con1 , brk1) = block_st.eliminate_jump_in_loop (ns,rs,cs,Jump.All);
					    
		def whitespaces = ExtendedToken.getWhitespaces (c);

		def tail_block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
		def (block_el, ret2 , con2 , brk2) = tail_block.eliminate_jump_in_loop (ns,rs,cs,Jump.All);
    
		def when_st = 
		match((ret1,con1,brk1))
		{
		    | (true,true,_) 
		    | (_,true,true) =>
		        Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),
		        TokS("( "),TokS("!" +  ns + " && " + "!"+  cs),TokS(" )"),block_el]);
		    | (false,true,false) => 
		        Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),
		        TokS("( "),TokS( "!"+  cs),TokS(" )"),block_el]);
		    | (true,false,_) 
		    | (_,false,true) => 
		        Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),
		        TokS("( "),TokS( "!"+  ns),TokS(" )"),block_el]);
		    | _ => assert(false);
		}

		(when_st , block_eliminated , ret1 || ret2 , con1 || con2 , brk1 || brk2 )
	    }
	    
	    // acc2 is for checking, if loop contains return
	    // acc3 is for checking, if loop contains continue
	    // acc4 is for checking, if loop contains break
	    
	    // function returns transformed tree, and three booleans
	    // first one is true, if block contains return
	    // second is true, if block contains continue
	    // third is true, if block contains break
	    
            def loop (sts : list [STree], acc : list [STree],acc2 : bool,acc3 : bool,acc4 : bool) 
		: list [STree] * bool * bool * bool
            {
                match (sts)
                {
                    | [] => (List.Rev (acc), acc2 , acc3 ,  acc4)

                    | (Statement ("WHEN",_) as if_st) :: []
                    | (Statement ("IF",_) as if_st) :: [] =>
                      def (if_st_el , ret , con , brk) = if_st.eliminate_jump_in_loop (ns,rs,cs,jump);
                      
                      (List.Rev (if_st_el :: acc),ret || acc2, con || acc3 , brk || acc4)

                    | (Statement ("WHEN",[Tok(i),_,_,_,_]) as if_st) :: tail 
                    | (Statement ("IF",[Tok(i),_,_,_,_,_,_]) as if_st) :: tail =>
                      if (if_st.jump_inside (jump))
                      {
                          def whitespaces = ExtendedToken.getWhitespaces (i);
                          def (if_st_el, ret1 ,con1 , brk1) = if_st.eliminate_jump_in_loop (ns,rs,cs,jump);
			  
                          def block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
                          def (block_el,ret2 , con2 , brk2) = block.eliminate_jump_in_loop (ns,rs,cs,jump);
			  
                          def when_st = Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),
			    TokS("( "),TokS("!"+  ns),TokS(" )"),block_el]);
                          
                          (List.Rev (when_st :: if_st_el :: acc),ret1 || ret2 || acc2 , con1 || con2 || acc3 , brk1 || brk2 || acc4)
                      }
                      else
                          (loop (tail , if_st  :: acc, acc2 , acc3 , acc4))
			  
		    | Statement("RETURN",[Tok(b),TokS(expr),s]) :: _ =>		  
			def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
			[Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
			Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
			[TokS(ExtendedToken.getWhitespaces(b) + "}")]);  // oh, this is ugly
		      
			(List.Rev(new_block :: acc),true,false,false)

                    | Statement("RETURN",[Tok(b),s]) :: _ =>
			def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
			[Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
			Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
			[TokS(ExtendedToken.getWhitespaces(b) + "}")]);

			(List.Rev(new_block :: acc),true,false,false)
		      
                    | Statement("BREAK",[Tok(b),s]) :: _ => 
			(List.Rev(Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]) :: acc)
			    , false , false , true)
		    | (Statement("CONTINUE",[Tok(b),s]) as con_st) :: _ => 
			match(jump)
			{
			    | Jump.All
			    | Jump.Continue => 
				(List.Rev(Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + cs + " = true"),s]) 
				:: acc), false , true , false)
			    | _ => 
				(List.Rev(con_st : STree :: acc),false, true , false)
			}
		    
		    | (Statement("BLOCK",_) as block_st) :: tail=>

			if(block_st.jump_inside(jump))
			{ 
			    def (block_eliminated , ret1 , con1 , brk1) = block_st.eliminate_jump_in_loop (ns,rs,cs,jump);

			    def whitespaces = get_first_whitespace (block_eliminated);

			    def tail_block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
			    def (block_el, ret2 , con2 , brk2) = tail_block.eliminate_jump_in_loop (ns,rs,cs,jump);

			    def when_st = Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),
			    TokS("( "),TokS("!"+  ns),TokS(" )"),block_el]);
                          
			    (List.Rev (when_st :: block_eliminated :: acc),ret1 || ret2 || acc2 , con1 || con2 || acc3 , brk1 || brk2 || acc4)
			}
			else
			    (loop (tail , block_st  :: acc, acc2 , acc3 , acc4)) 

		    // CHECKED and UNCHECKED

		    | (Statement(name,[Tok(c),block_st]) as ch_st) :: tail =>
			
			if(block_st.jump_inside(Jump.All))
			{ 			    
			    def (when_st,block_eliminated , ret, con , brk) = eliminate_jumps_in_embedded_statement(block_st,tail,c);

			    (List.Rev (when_st :: 
			    Statement(name,[Tok(c),block_eliminated]):: acc),ret ||  acc2 ,  con || acc3 , brk || acc4)
			}
			else
			    (loop (tail , ch_st  :: acc, acc2 , acc3 , acc4))

		    // TRY

		    | (Statement("TRY", Tok(t) :: block_st :: rest) as try_st) :: tail =>
			
			if(block_st.jump_inside(Jump.All))
			{ 			    
			    def (when_st,block_eliminated , ret, con , brk) = eliminate_jumps_in_embedded_statement(block_st,tail,t);

			    (List.Rev (when_st :: 
			    (Statement("TRY",Tok(t) :: block_eliminated :: rest) ) :: acc),ret ||  acc2 ,  con || acc3 , brk || acc4)
			}
			else
			    (loop (tail , try_st :: acc, acc2 , acc3 , acc4))
		    
		    // LOCK and USING
		    
		    | (Statement(name,[Tok(c),lp,expr,rp,block_st]) as st) :: tail =>
			
			if(block_st.jump_inside(Jump.All))
			{ 			    
			    def (when_st,block_eliminated , ret, con , brk) = eliminate_jumps_in_embedded_statement(block_st,tail,c);

			    (List.Rev (when_st :: 
			    Statement(name,[Tok(c),lp,expr,rp,block_eliminated]):: acc),ret ||  acc2 ,  con || acc3 , brk || acc4)
			}
			else
			    (loop (tail , st  :: acc, acc2 , acc3 , acc4))
		    
		    | head :: tail => (loop (tail , head :: acc, acc2 , acc3 , acc4))
                }
	    }

            match(this)
            {
                | Statement("IF",[i,lp,be,rp,st1,e,st2]) =>

                  mutable st1_el = null;
                  mutable st2_el = null;
                  
                  match (st1.eliminate_jump_2 (jump))
                  {
                      | [tree] => st1_el = tree
                      | _ => assert(false);
                  }

                  match (st2.eliminate_jump_2 (jump))
                  {
                      | [tree] => st2_el = tree
                      | _ => assert(false);
                  }
                  
                  if (st1.jump_inside (jump) && st2.jump_inside (jump))
		  {
		      def (st1_el, ret1 , con1 , brk1)= st1.eliminate_jump_in_loop (ns,rs,cs,jump);
		      def (st2_el, ret2 , con2 , brk2)= st2.eliminate_jump_in_loop (ns,rs,cs,jump);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret1 || ret2 , con1 || con2 , brk1 || brk2)
		  }

                  else if (st1.jump_inside (jump))
		  {
		      def (st1_el, ret , con , brk)= st1.eliminate_jump_in_loop (ns,rs,cs,jump);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]), ret , con , brk)
		  }    
                       
                  else if (st2.jump_inside (jump))
		  {
		      def (st2_el , ret , con , brk)= st2.eliminate_jump_in_loop (ns,rs,cs,jump);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]), ret , con , brk)
		  }
                  else
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),false,false,false)
                      
                | Statement("WHEN",[w,lp,be,rp,st]) =>
		  def (st_el, ret , con , brk)= st.eliminate_jump_in_loop (ns,rs,cs,jump);
                  (Statement("WHEN",[w,lp,be,rp,st_el]), ret , con, brk)
                  
                | Statement("BREAK",[Tok(b),s]) =>
		  
		    (Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),false,false,true)
		| Statement("RETURN",[Tok(b),s]) =>		  
		    (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		    [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		    Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
		    [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true, false, false)

		| Statement("RETURN",[Tok(b),TokS(expr),s]) =>		  
		    (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		    [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		    Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
		    [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true , false , false)		  
		
		| Statement ( "CONTINUE" , [Tok(b),s]) as con_st =>

		    match(jump)
		    {
			| Jump.All
			| Jump.Continue => 
			    (Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + cs + " = true"),s]),false , true , false)
			| _ => 
			    (con_st,false, true , false)
		    }
		    
                | Statement("BLOCK",stmts) =>
		    def (lbrace,statements,rbrace) = cut_off_braces (stmts);
		    def (block_eliminated, ret , con , brk) = loop (statements,[], false , false , false);
		    (Statement("BLOCK",lbrace :: block_eliminated + [rbrace]), ret , con , brk)
                
		//
		// CHECKED and UNCHECKED
		//
		
		| Statement(name,[Tok(c),block]) => 
		    def (block_eliminated, ret , con , brk) = block.eliminate_jump_in_loop (ns,rs,cs,jump );
		    (Statement(name,[Tok(c), block_eliminated]) , ret , con , brk)
		
		//
		// LOCK and USING
		//
		
		| Statement(name,[Tok(c),lp,expr,rp,block]) =>
		    def (block_eliminated, ret , con , brk) = block.eliminate_jump_in_loop (ns,rs,cs,jump );
		    (Statement(name,[Tok(c),lp,expr,rp, block_eliminated]) , ret , con , brk)
		
		//
		// TRY
		//
		
		| Statement("TRY", Tok(t) :: block :: rest ) =>
		    def (block_eliminated, ret , con , brk) = block.eliminate_jump_in_loop (ns,rs,cs,jump );
		    (Statement("TRY",Tok(t) :: block_eliminated :: rest) , ret , con , brk)		
		
                | x =>		    
		    match(x.eliminate_jump_2 (jump))
		    {
			| [y] => (y,false,false,false)
			| _ => assert(false);
		    }
	    }
        }

	/**
	 *  Returns true, if statement or one of substatement contains specified jump
	 */
	protected jump_inside (jump : Jump) : bool
	{
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.jump_inside (jump))
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match((this,jump))
            {	
		| (Statement("RETURN",_),Jump.All)
		| (Statement("BREAK",_),Jump.All)
		| (Statement("CONTINUE",_),Jump.All) 
		| (Statement("GOTO",_),Jump.All) => true
		
		| (Statement("RETURN",_),Jump.Return)
	        | (Statement("RETURN",_),Jump.ReturnBreak)  
                | (Statement("BREAK",_),Jump.ReturnBreak)
		| (Statement("BREAK",_),Jump.Break)
		| (Statement("CONTINUE",_),Jump.Continue) 
		| (Statement("GOTO",_),Jump.Goto) => true
                | (Statement("BLOCK",xs),_) =>
		    loop(xs);                  
                | (Statement("IF",[_,_,_,_,st1,_,st2]),_) =>
                  st1.jump_inside (jump) || st2.jump_inside (jump)
                | (Statement("WHEN",[_,_,_,_,st]),_) =>
                  st.jump_inside (jump) 
		| (Statement("SWITCH",[_,_,_,_,Statement("SWITCH_BLOCK",xs)]),_) =>
		    loop(xs)
		| (Statement("SWITCH_SECTION",[_,Statement("SWITCH_SECTION_STATEMENTS",xs)]),_) =>
		    loop(xs)		
		
		| (Statement("TRY",_ :: block :: _),_) 
		| (Statement("USING_STATEMENT",[_,_,_,_,block]),_) 
		| (Statement("LOCK",[_,_,_,_,block]),_) 
		| (Statement("CHECKED",[_,block]),_) 
		| (Statement("UNCHECKED",[_,block]),_) =>
		    block.jump_inside (Jump.All)
		
                | _ => false
            }
        }

	/** 
	 *  checks only for breaks inside statement
	 */	 
	protected only_break_inside () : bool
	{
	    def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.only_break_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {	        	     
                | Statement("BREAK",_) => true		
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.only_break_inside () || st2.only_break_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.only_break_inside () 
		| Statement("SWITCH",[_,_,_,_,Statement("SWITCH_BLOCK",xs)]) =>
		    loop(xs)
		| Statement("SWITCH_SECTION",[_,Statement("SWITCH_SECTION_STATEMENTS",xs)]) =>
		    loop(xs)
                | _ => false
            }
	}

        /* -- SYMBOL GENERATION ----------------------------------------- */
        
	new_symbol (suffix : string) : string
        {
            ++ symbol_count;
            "temp_" + symbol_count.ToString() + suffix
        }

        private new_break_loop_symbol () : string
        {
            new_symbol ("_break_loop_")
        }

	private new_return_symbol () : string
        {
            new_symbol ("_return_")
        }

	private new_continue_symbol () : string
        {
            new_symbol ("_continue_")
        }
	
	public static set_type (tpe : string) : void
	{
	    tp = tpe;
	}
	
	private static mutable tp : string = "";
        private static mutable symbol_count : int = 0;
        
    }

}
