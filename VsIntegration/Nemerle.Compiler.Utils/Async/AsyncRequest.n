using System;
using System.Linq;
using System.Threading;

using Nemerle.Collections;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.Compiler.Utils.Async
{
  /// <summary>
  /// Description of WorkRequest.
  /// </summary>
  public class AsyncRequest
  {
    public this(
      requestType : AsyncRequestType, 
      engine      : Engine, 
      source      : ISource,
      work        : Action[AsyncRequest])
    {
      Type    = requestType;
      Engine  = engine;
      Source  = source;
      _doWork = work;
    }

            _doWork        : Action[AsyncRequest];

    public Source           : ISource { get; private set; }
    public IsSourcePresent  : bool    { get { Source != null } }

    public  Engine          : Engine               { get; private set; }
    public  Type            : AsyncRequestType     { get; private set; }
    public  Stop            : bool                 { get;         set; }
    public  IsCompleted     : bool                 { get; private set; }
    mutable _waitHandle     : ManualResetEvent;
    public AsyncWaitHandle  : WaitHandle
    {
      get
      {
        when (_waitHandle == null)
          _waitHandle = ManualResetEvent(IsCompleted);

        _waitHandle
      }
    }

    public MarkAsCompleted() : void
    {
      IsCompleted = true;
      when (_waitHandle != null)
      {
        ignore(_waitHandle.Set());
        _waitHandle.Close();
      }
    }

    public DoWork() : void { _doWork(this); }

    /// Возвращает true, если данная задача теряет смысл если "other" помещается в 
    // очередь после данной.
    public virtual IsForceOutBy(other : AsyncRequest) : bool
    {
      if (other.Engine : object != this.Engine)
        false
      else match (Type)
      {
        | AsyncRequestType.UpdateCompileUnit => 
          other.Type == AsyncRequestType.BuildTypesTree
          || other.Type == AsyncRequestType.UpdateCompileUnit && other.Source : object == Source

        | AsyncRequestType.BuildTypesTree    => other.Type == AsyncRequestType.BuildTypesTree
        | _ => false
      }
    }

    public override ToString() : string { $"$Type" }
  }
}
