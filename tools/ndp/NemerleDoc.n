using NemerleDoc;
using System;

module Nemerledoc {


  /// <exception cref="TestException">
  /// This is a test comment.
  /// </exception>
  /// <remarks>This function is for testing purposes only; to test all tags</remarks>
  /// <summary>Test list tag.
  /// <list type="table">
  /// <listheader>
  /// <term>This program</term><description>does</description>
  /// </listheader>
  /// <item><term>if XML file is an argument</term><description>analyzes this file</description></item>
  /// <item><term>if dll file is an argument</term><description>analyzes this file</description></item>
  /// </list>
  /// End of list tag test. But there is some value:
  /// <value>this is value</value>
  /// </summary>
  /// <permission cref="System.Security.PermissionSet">Public Access</permission>
  /// <param name="arg1">This is arg1</param>
  /// <param name="arg2">This is arg2</param>
  /// <param name="arg3">This is arg3</param>
  /// <example>This is an example;
  /// <code>
  ///    $ mono nemerledoc.exe
  /// </code>
  /// with arguments.
  /// </example>
  /// <returns>This function returns nothing</returns>
  /// <seealso cref="AnyThing"/>
  /// <include file="NoFile.xml" path="/doc/members/member/*"/>
  public _foo () : void {}
  
  Help () : void {
    Console.WriteLine("USAGE:");
    Console.WriteLine("  nemerledoc.exe <options> <files>");
    Console.WriteLine("     <options>:");
    Console.WriteLine("             -np show non public elements");
    Console.WriteLine("             -title:\"title\" title for index page");
    Console.WriteLine("             -dest:\"directory\" directory where result files will be written");
    Console.WriteLine("             -s simplifies some monster type expressions, functions, tuples etc.");
    Console.WriteLine("             -d debug info");
    Console.WriteLine("     <files>: a list of *.dll and *.xml files");
  }
  
  /// <summary>
  /// Whether to simplify monsters like Function'x[Tuple'20[.....]]
  /// </summary>
  public mutable simplify : bool = false;
  
  public mutable debug : bool = false;

  public mutable title : string = "";
  
  /// <summary>Destination directory</summary>
  public mutable destDir : string = "";

  /// <summary>
  /// Usage:
  /// <code>nemerledoc.exe &amp;lt;options&amp;gt; &amp;lt;files&amp;gt;</code>
  /// Writing <c>nemerledoc.exe</c> shows this info. 
  /// </summary>
  public Main(args : array [ string ]) : void
  {
    def tree = DataTree();
    if (args.Length == 0) Help();
    else {
        mutable publicOnly = true;
        mutable fileList = [];
        foreach (arg in args)
        {
          if (arg.Equals("-np")) publicOnly = false
          else if (arg.Equals("-s")) simplify = true
          else if (arg.Equals("-d")) debug = true
          else if (arg.StartsWith("-dest")) destDir = arg.Substring(6)
          else if (arg.StartsWith("-title")) title = arg.Substring(7)
          else 
              fileList = fileList + [ arg ];
        }      
        // prepare destination directory
        when (destDir.Length > 0)
        {
            Console.WriteLine("Writing result to directory: {0}", destDir);
            when (!System.IO.Directory.Exists(destDir))
            {
              _ = System.IO.Directory.CreateDirectory(destDir);
            }
            def sep = System.IO.Path.DirectorySeparatorChar.ToString();
            when (!destDir.EndsWith(sep))
                destDir = destDir + sep;
        }
        // deal with default css file
        def css_file = "nemerle-doc.css";
        when (!IO.File.Exists(destDir + css_file)) {
          def assembly = System.Reflection.Assembly.GetExecutingAssembly();
          Console.WriteLine("Create css file: " + css_file);
          def in_stream = IO.BinaryReader(assembly.GetManifestResourceStream(css_file));
          def fstream = IO.FileStream(destDir + css_file, IO.FileMode.CreateNew);
          def out_stream = IO.BinaryWriter(fstream);

          mutable buf = in_stream.ReadBytes(1024);
          while (buf.Length > 0) {
              out_stream.Write(buf);
              buf = in_stream.ReadBytes(1024);
          }
          in_stream.Close();
          out_stream.Close();
        }

        // process files
        foreach (file in fileList)
        {
            Console.Write("Analyzing file '{0}'....\t", file);
            if (!IO.File.Exists(file)) Console.Write("File does not exist")
            else {
                if (file.EndsWith(".dll") || file.EndsWith(".exe"))
                {
                  try {
                      AssemblyAnalyzer.analyze(file, tree);
                      tree.AddSource(file);
                      Console.Write("OK");
                  } catch {
                    e is Exception => Console.WriteLine("Broken analysis with message {0}", e);
                  }
                } else
                if (file.EndsWith(".xml"))
                {
                  try {
                      _ = XmlDocParser(tree, file);
                      tree.AddSource(file);
                      Console.Write("OK");
                  } catch {
                    e is Exception => Console.WriteLine("Broken analysis with message {0}", e);
                  }
                } else 
                    Console.Write("file type is not recognized");
            }
            Console.WriteLine("");
        }
        
        tree.ToHtml(publicOnly);
    }
  }
}
