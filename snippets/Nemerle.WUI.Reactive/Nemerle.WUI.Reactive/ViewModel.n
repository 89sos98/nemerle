using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.WUI.Reactive
{
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder) 
  {
    ViewModelImpl.DoTransform(tb, Macros.ImplicitCTX())
  }
  
  module ViewModelImpl
  {
    public DoTransformExpr(tb : TypeBuilder, typer : Typer, expr : PExpr) : string
    {
      match (expr)
      {
        | PExpr.Sequence([e]) => DoTransformExpr(tb, typer, e)
        | <[ string.Concat(..$args) ]> => 
          //assert2(false);
          _ = args;
          <#viewModel.FirstName() + " " + viewModel.LastName()#>
          
        | <[ $_($_) ]> when expr.TypedObject is TExpr.MacroEnvelope => 
          def m = expr.TypedObject :> TExpr.MacroEnvelope;
          DoTransformExpr(tb, typer, m.expandedPExpr)
          
        | _ => ""
      }
    }
    
    public DoTransform(tb : TypeBuilder, typer : Typer) : void
    {
      Macros.DefineCTX(typer);
      
      def convertMethod(name : string, meth : MethodBuilder) : PExpr
      {
        #region Type method body
        def typer = typer;
        def body = meth.Body;
        def oldEmitDebug = typer.Manager.Options.EmitDebug;
        typer.Manager.Options.EmitDebug = false;
        def methodTyper = Typer(tb, null, meth, meth.Env);
        methodTyper.RunFullTyping();
        typer.Manager.Options.EmitDebug = oldEmitDebug;
        #endregion
        def bodyScript = DoTransformExpr(tb, typer, body);
        meth.Body = body;
        
        def code = $<#
viewModel.$name = ko.dependentObservable(
  function()
  {
    return $bodyScript;
  });#>;
        <[ $(code : string) ]>
      }
      
      def convertMember(member : IMember) : PExpr
      {
        | meth is MethodBuilder when meth.Name.StartsWith("get_") || meth.Name.StartsWith("set_") => null //TODO: Add property IMethod.IsAccessor
        | meth is MethodBuilder when meth.IsConstructor => null
        | prop is PropertyBuilder when prop.AutoPropertyField.IsSome => 
          def prefix = $<#viewModel.$(prop.Name) = ko.observable("#>;
          <[ $(prefix : string) + this.$(prop.Ast.name).ToString() + $(<#");#> : string) ]>
          
        | prop is PropertyBuilder when prop.CanRead && !prop.CanWrite => 
          convertMethod(prop.Name, prop.GetGetter() :> MethodBuilder)

        | meth is MethodBuilder when meth.Header.ParametersDeclarations.Length == 0 =>
          convertMethod(meth.Name, meth)
          
        | _ => Message.Error(member.Location, "Unsupported member"); null
          
      }
      
      def members = tb.GetMembers(BF.DeclaredOnly | BF.Instance | BF.Public);
      def exprs1 = members.RevMap(convertMember).RevFilter(_ != null);
      def exprs2 = exprs1.Map(e => <[ _ = sb.AppendLine($e) ]>);
      
      def member = tb.DefineWithSource(<[ decl:
        public GetViewModelScript() : string
        {
          def sb = System.Text.StringBuilder();
          _ = sb.AppendLine("var viewModel = { };");
          { ..$exprs2 }
          _ = sb.AppendLine("ko.applyBindings(viewModel);");
          sb.ToString()
        }
        ]>);

      _ = member;
    }
  }
}
