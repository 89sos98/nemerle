using System;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Nemerle.Extensions {

    public macro AnonymousClassCtor(params ctor_def : array[expr]) 
        syntax("new", "(", ctor_def, ")" )
    {
        AnonymousMacroImpl.MakeAnonymousClassCtor(Macros.ImplicitCTX(), NList.ToList(ctor_def))
    }

    internal module AnonymousMacroImpl {

        [Record]
        private class FieldInfo {
            [Accessor] private generic_arg : PT.Name;
            [Accessor] private field : PT.Name;
            [Accessor] private value : PT.PExpr;
            public PropertyName : string { get { field.ToString() } }
            public FieldName : string { get { "_" + field.ToString() } }
        }

        public MakeAnonymousClassCtor(typer : Typer, ctor_def : list[PT.PExpr]) : PT.PExpr {
            def fields = ctor_def.FoldRight([], fun(cd, acc) {
                def append_field_info(field_init) {
                    | <[ $(field : name) = $value ]> => FieldInfo(Macros.NewSymbol(field.Id), field, value) :: acc
                    | _ => Message.Error($"Expected 'a = foo()' got '$cd'."); acc
                }
                match(cd) {
                    | PT.PExpr.Member(_, member) as member_access =>
                        append_field_info(<[ $(member.GetName() : name) = $member_access ]>)
                    | _ => append_field_info(cd)
                }
            });
            def name = GetAnonymousClassName(fields);
            def ty = BuildAnonymousClass(typer, name, fields);
            def ctor = <[ $(ty.FullName : usesite) ( ..$(fields.Map(f => f.Value) ) ) ]>;

            def make_result(typed_ctor) {
                _ = typed_ctor.Type.DeepFix();
                PT.PExpr.Typed(typed_ctor)
            }

            def typed_ctor = typer.TypeExpr(ctor);
            if(typed_ctor.Type.Hint.IsSome) 
                make_result(typed_ctor)
            else
                typer.DelayMacro(last_chance =>
                    match(typed_ctor.Type.Hint.IsSome, last_chance) {
                        | (true, _) => Some(make_result(typed_ctor))
                        | (false, true) => Some(ctor)
                        | _ => None()
                })
        }

        private GetAnonymousClassName(fields : list[FieldInfo]) : string {
            fields.FoldLeft(System.Text.StringBuilder("_N_Anonymous"),
                (f, sb) => sb.Append("_<").Append(f.PropertyName).Append(">"))
            .ToString()
        }

        private BuildAnonymousClass(typer : Typer, name : string, fields : list[FieldInfo]) : TypeInfo {
            match(typer.Env.LookupType([name])) {
                | Some(ty) => ty
                | None() => {
                    def anonymous_ref = <[ Nemerle.Extensions.IAnonymous ]>;
                    def ty_name = <[ $(name : usesite) ]>;
                    def generic_args = fields.Map(f => <[ $(f.GenericArg : name) ]>);
                    def ty_ref = match(fields) {
                        | [] => ty_name
                        | _ => <[ $ty_name [ ..$generic_args ] ]>
                    }
                    def equality_comparer(t) {
                        <[ System.Collections.Generic.EqualityComparer.[ $t ].Default ]>
                    }

                    // Entire class definition is placed in global namespace
                    def ty = {
                        // Format string for debugger view
                        def debugger_display_fmt = {
                            mutable prefix = null : string;
                            fields.FoldLeft(System.Text.StringBuilder("\\{"),
                                (f, sb) => sb.Append({prefix = if(null == prefix) " " else ", "; prefix })
                                    .Append($"$(f.PropertyName) = {$(f.PropertyName)}")
                            ).Append(" \\}").ToString()
                        }

                        // fields and properties declaration
                        def members = fields.Map(field => <[ decl :
                                [Nemerle.Utility.Accessor($(field.PropertyName : usesite))]
                                private $(field.FieldName : usesite) : $(field.GenericArg : name);
                        ]>);

                        typer.Manager.CoreEnv.Define(match(fields) {
                            | [] =>
                                <[ decl:
                                    [Record,
                                        System.Diagnostics.DebuggerDisplay( $(debugger_display_fmt : string) )]
                                    internal sealed class $(name : usesite) : $anonymous_ref, System.IEquatable[ $ty_ref ] {
                                        ..$members
                                    }
                                ]>
                            | _ =>
                                def generic_args_decl = fields.Map(f => PT.Splicable.Name(f.GenericArg));
                                <[ decl:
                                    [Record,
                                        System.Diagnostics.DebuggerDisplay( $(debugger_display_fmt : string) )]
                                    internal sealed class $(name : usesite) [ ..$generic_args_decl ] : $anonymous_ref, System.IEquatable[ $ty_ref ] {
                                        ..$members
                                    }
                                ]>
                        })
                    }

                    // GetFields() implementation
                    {
                        def field_array_name = Macros.NewSymbol("field_array");
                        def field_array = fields.Map(f => <[ $(f.PropertyName : string) ]>);
                        ty.Define(<[ decl: 
                                private static $(field_array_name : name) : System.Collections.ObjectModel.ReadOnlyCollection[string] = System.Collections.ObjectModel.ReadOnlyCollection(array[ ..$field_array ]);
                        ]>);
                        ty.Define(<[ decl:
                                GetFields() : System.Collections.ObjectModel.ReadOnlyCollection[string] implements $anonymous_ref.GetFields {
                                    $(field_array_name : name)
                                }
                        ]>);
                    }


                    // Item indexer implementation
                    {
                        def body = match(fields) {
                            | [] => <[ ignore(field); null ]>
                            | _ =>
                                def cases = fields.FoldRight([<[ case : | _ => null ]>],
                                    (f, cases) => <[ case: | $(f.PropertyName : string) => this.$(f.FieldName : usesite) : object ]> :: cases );
                                <[ match(field) { ..$cases } ]>
                        }
                        ty.Define(<[ decl:
                                Item[field : string] : object implements $anonymous_ref.Item {
                                    get { $body }
                                }
                        ]>);
                    }


                    // GetContent implementation 
                    {
                        def body = match(fields) {
                            | [] => <[ null ]>
                            | field :: [] => <[ this.$(field.FieldName : usesite) : object ]>
                            | _ =>
                                def tuple_args = fields.Map(f => <[ this.$(f.FieldName : usesite) ]>);
                                <[ Nemerle.Builtins.Tuple.[ ..$generic_args ] ( ..$tuple_args ) : object ]>
                        }
                        ty.Define(<[ decl:
                                GetContent() : object implements $anonymous_ref.GetContent {
                                    $body 
                                }
                        ]>);
                    }


                    // ToString implementation
                    {
                        def sb_name = Macros.NewSymbol("sb");
                        mutable prefix = null : string;
                        def sb_list = fields.Map(f => <[ 
                            _ = $(sb_name : name)
                                .Append($( {prefix = if(null == prefix) " " else ", "; prefix} : string))
                                .Append($(f.PropertyName + " = " : string))
                                .Append(this.$(f.FieldName : usesite)) ]> );
                        ty.Define(<[ decl:
                                public override ToString() : string {
                                    def $(sb_name : name) = System.Text.StringBuilder("{");
                                    { ..$sb_list }
                                    $(sb_name : name).Append(" }") .ToString()
                                }
                        ]>);
                    }

                    // GetHashCode implementation, I think that it is better that StructuralHashCode
                    {
                        def hash_method = match(fields) {
                            | [] => <[ decl:
                                    public override GetHashCode() : int { 0 }
                                ]>
                            | _ =>
                                def (p1, p2) = HashHelper.GetPrimePair(fields.Length);
                                def body = fields.Map(f => <[
                                    hash = unchecked( ($(p2 : int) * hash)
                                        + $(equality_comparer(PT.PExpr.Ref(f.GenericArg))).GetHashCode(this.$(f.FieldName : usesite)) ) ]>);
                                <[ decl:
                                    public override GetHashCode() : int { 
                                        mutable hash : int = $(p1 : int);
                                        { ..$body }
                                        hash
                                    }
                                ]>
                        }
                        ty.Define(hash_method);
                    }

                    def equals_generic_body = fields.FoldLeft(<[ true ]>, (f, acc) => <[
                        $acc && $(equality_comparer(PT.PExpr.Ref(f.GenericArg))).Equals(this.$(f.FieldName : usesite), other.$(f.FieldName : usesite))
                    ]>);

                    def equals_anonymous_body = <[
                        this.GetType().FullName.Equals(other.GetType().FullName)
                            && $(equality_comparer( <[object]> )).Equals( (this : $anonymous_ref).GetContent(), other.GetContent())
                    ]>;

                    // Equals(other : object) implementation
                    {
                        def body = match(fields) {
                            | [] => <[
                                    match(other) {
                                        | _ is $ty_ref => true
                                        | other is $anonymous_ref => (other.GetFields().Count == 0)
                                        | _ => false
                                    }
                                ]>
                            | _ =>
                                <[
                                    match(other) {
                                        | other is $ty_ref => $equals_generic_body
                                        | other is $anonymous_ref => $equals_anonymous_body
                                        | _ => false
                                    }
                                ]>
                        }
                        ty.Define(<[ decl:
                            public override Equals(other : object) : bool { $body }
                        ]>);
                    }


                    // Typed Equals implementation
                    {
                        def body = match(fields) {
                            | [] => <[ !ReferenceEquals(null, other) ]>
                            | _ => <[ !ReferenceEquals(null, other) && $equals_generic_body ]>
                        }
                        ty.Define(<[ decl:
                            Equals(other : $ty_ref) : bool implements System.IEquatable[ $ty_ref ].Equals { $body }
                        ]>);
                    }


                    // Equality operation
                    {
                        def define_eq(a, b, body) {
                            ty.Define(<[ decl: public static @== (a : $a, b : $b) : bool { $body } ]>);
                            ty.Define(<[ decl: public static @!= (a : $a, b : $b) : bool { ! $body } ]>);
                        }
                        def define_eq_b(b) {
                            define_eq(ty_ref, b, <[ $(equality_comparer(b)).Equals(a, b) ]>);
                        }
                        def define_eq_a(a) {
                            define_eq(a, ty_ref, <[ $(equality_comparer(a)).Equals(b, a) ]>)
                        }

                        define_eq_b(ty_ref);
                        define_eq_b(anonymous_ref);
                        define_eq_b(<[ object ]>);
                        
                        define_eq_a(anonymous_ref);
                        define_eq_a(<[ object ]>);
                    }


                    // Tuple interop
                    match(fields) {
                        | [] => ()
                        | field :: [] =>
                            ty.Define(<[ decl:
                                public ToTuple() : $(field.GenericArg : name) {
                                    this.$(field.FieldName : usesite)
                                }
                            ]>);
                            ty.Define(<[ decl:
                                public static @:> ([Nemerle.Assertions.NotNull] obj : $ty_ref) : $(field.GenericArg : name) {
                                    obj.ToTuple()
                                }
                            ]>);
                        | _ =>
                            def tuple_args = fields.Map(f => <[ this.$(f.FieldName : usesite) ]>);
                            ty.Define(<[ decl:
                                public ToTuple() : Nemerle.Builtins.Tuple[ ..$generic_args ] {
                                    Nemerle.Builtins.Tuple( ..$tuple_args )
                                }
                            ]>);
                            ty.Define(<[ decl:
                                public static @:> ([Nemerle.Assertions.NotNull] obj : $ty_ref) : Nemerle.Builtins.Tuple[ ..$generic_args ] {
                                    obj.ToTuple()
                                }
                            ]>);
                    }


                    unless(typer.InErrorMode)
                        ty.Compile();
                    ty
                }
            }
        }

    }

    internal module HashHelper {

        private primes : array[int] = array[
            885551, 959773, 909287, 842801,
            791081, 966041, 728647, 967139,
            912869, 801137, 804511, 913943,
            914461, 700127, 940421, 962561,
            756127, 757927, 953789, 954181 ];

        public GetPrimePair(x : int) : int * int {
            def half_len = primes.Length / 2;
            def pos = x % half_len;
            (primes[pos], primes[pos + half_len])
        }
    }

}
