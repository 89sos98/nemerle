using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public variant AsyncResult[A]
  {
    | Value { value : A }
    | Exeption { ex : Exception }

    public override ToString() : string
    {
      match (this)
      {
        | Value(value) => $"Value($value)"
        | Exeption(ex) => $"Exception($(ex.GetType().FullName))"
      }
    }
  }

  public partial abstract class Async[A]
  {
    /// <summary>
    /// Implementation detail. DO NOT USE!
    /// </summary>
    public abstract Exec(job : AsyncJobBase, res : ref A) : Async[A];

    public Start() : Async[A]
    {
      Start(SystemThreadPoolExecutionContext.Instance);
    }

    public virtual Start(executionContext : ExecutionContext) : Async[A]
    {
      def job = AsyncJob(executionContext, this);
      job.Start();
      job.Result;
    }

    public virtual GetResult() : AsyncResult[A]
    {
      throw NotSupportedException();
    }
  }
}
