  using System;
using System.Console;
using SCG = System.Collections.Generic;
using Nemerle.Utility;
using Nemerle.Collections;
using LRPEGCC;

namespace Test
{
  public variant Expr
  {
    | Num { value : int; }
    | Add { left : Expr; right : Expr }
    public override ToString() : string
    {
      match (this)
      {
      | Num(value) => $"$value";
      | Add(left, right) => $"Add($left, $right)";
      }
    }
  }

  [PegGrammar(items,
  {
    def any       = Range('\u0000', '\uFFFF');
    def letter    = Or(Range('a', 'z'), Range('A', 'Z'), '_');
    def digit     = Range('0', '9');
    def findFirst = Or(start, Seq(any, findFirst));
    def findLast  = Or(Seq(any, findLast), start);
    def spaces    = ZeroOrMany(' ');
    def item      = Seq(OneOrMany(Or(digit, letter)), spaces);
    def items     = Seq(spaces, item, ZeroOrMany(Seq(',', spaces, item)), Not(any));
    def start     = Seq(letter, ZeroOrMany(Or(digit, letter)));
  })]
  class TestGrammar
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
    private Num(num : string) : Expr.Num
    {
      Expr.Num(int.Parse(num));
    }
    private Add(l : Expr, r : Expr) : Expr.Add
    {
      Expr.Add(l, r);
    }
  }

  [PegGrammar(start,
  {
    def any       = Range('\u0000', '\uFFFF');
    def digit     = Range('0', '9');
    def spaces    = ZeroOrMany(' ');
    def num       = Seq(OneOrMany(digit), spaces);
    def expr      = Or(Seq(num, '+', spaces, expr), num);
    def start     = Seq(spaces, expr, Not(any));
  })]
  class CalcGrammar
  {
    private _text : string;
    public this(text : string)
    {
      _text = text;
    }
    private GetChar(pos : int) : char
    {
      _text[pos];
    }
    private CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }
  }

  module Program
  {
    Main() : void
    {
      try
      {
        //def (start, end) = FSM.Template.Parse("*a?b*");
        WriteLine(CalcGrammar(""));
        //WriteLine(TestGrammar(""));
        {
          mutable text = " + 123+ 123 +1235414124 ";
          for (mutable i = 0; i < 10; ++i)
            text = text + text;
          text = "123" + text + "+ 2";
          WriteLine(text.Length);
          def start = DateTime.Now;
          repeat (50) _ = CalcGrammar(text).Start();
          def pos = CalcGrammar(text).Start();
          def end = DateTime.Now;
          WriteLine($"$pos $(end - start)");
        }

        {
          mutable text = " , 123, 123s , 1s2s24,3 ";
          for (mutable i = 0; i < 10; ++i)
            text = text + text;
          text = "asd" + text + ", a";
          WriteLine(text.Length);
          def start = DateTime.Now;
          repeat (50) _ = TestGrammar(text).Start();
          def pos = TestGrammar(text).Start();
          def end = DateTime.Now;
          WriteLine($"$pos $(end - start)");
        }
      }
      catch
      {
      | ex is Exception => WriteLine(ex);
      }
      _ = ReadKey();
    }
  }
}
