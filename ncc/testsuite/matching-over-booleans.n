
module M {

  method_a (b : bool) : int {
    if (b) 123 else 321;
  }

  method_b (b : bool) : int {
    match (b) {
      | true => 123
      | _ => 321
    }
  }

  method_c (b : bool) : int {
    match (b) {
      | false => 321
      | _ => 123
    }
  }

  method_d (b : bool) : int {
    match (b) {
      | false => 321
      | true => 123
    }
  }

  method_e (b : bool) : int {
    /* should emit the the match failed exception */
    match (b) { // W: this matching is not exhaustive, example unmatched value:
      | false when b == false => 321
      | true => 123
    }
  }

  method_f (b : bool) : int {
    /* should not emit the the match failed exception */
    match (b) {
      | false when b == false => 321
      | false => 321
      | true => 123
    }
  }


  Main () : void 
  {
    def run_method (method : bool -> int) : void {

      printf ("%d\n", method (true));
      printf ("%d\n", method (false));
    };

    def methods = [method_a, method_b, method_c, method_d, method_e, method_f];

    Nemerle.Collections.List.Iter (run_method, methods)  
  }
}

/*
123
321
123
321
123
321
123
321
123
321
123
321
*/
