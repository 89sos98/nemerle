using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using LibRefManager = Nemerle.Completion2.Factories.IntelliSenseModeLibraryReferenceManager;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    mutable _optionsHasBeenRead : bool;
    mutable _assemblyReferences : array[string];

    public RequestOnReloadProject() : void
    {
      _optionsHasBeenRead = false;
      RequestOnBuildTypesTree();
    }

    public BeginReloadProject() : AsyncRequest
    {
      // The GetAssemblyReferences() must not be called from working thread!
      // We mast materialize it value in GUI thread.
      _assemblyReferences = _callback.GetAssemblyReferences().ToArray();
      Options = _callback.GetOptions();
      Options.PersistentLibraries = false; // reload references
      _optionsHasBeenRead = true;
      BeginBuildTypesTree();
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
