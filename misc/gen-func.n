using Nemerle.Collections;
using Nemerle.IO;

def gen (g, k) {
  def l = List.Repeat (null, k);
  mutable cnt = 1;
  def tp =
    l.Map (fun (_) {
      def n = $ "'p$cnt";
      ++cnt;
      n
    });
  def tps = (tp + ["'r"]).ToString (", ");
  // def tupl = if (tp.IsEmpty) "object" else tp.ToString (" * ");
  def tupl_k = if (g) $ "Tuple$k $tp" else $ "Tuple$k";
  def tupl = if (tp.IsEmpty || ! g) "System.Object" else tupl_k;

  print ("public abstract class FuncNew$k [$tps]");

  when (k != 1)
    print ($ " : FuncNew1 [$tupl, 'r]");

  def parms = tp.Map (fun (tp) { $ "_ : $tp" }).ToString (", ");
  print ("\n{\n");

  print ($ "  public abstract apply ($parms) : 'r;\n");

  when (k != 1)
    if (k == 0)
      print ($ "  public override apply (_ : $tupl) : 'r { apply () }\n");
    else {
      cnt = -1;
      def parm_refs = tp.Map (fun (ty) {
        ++cnt;
        if (g)
          $ "o.field$cnt"
        else
          $ "(o :> $tupl_k).field$(cnt + 1) :> $ty"
      }).ToString (", ");
      print ($ "  public override apply (o : $tupl) : 'r { apply ($parm_refs) }\n");
    }

  print ("}\n\n");

  
  def tps = tp.ToString (", ");
  def tpso = (tp + ["System.Object"]).ToString (", ");
  def tps' = if (tps == "") "" else $" [$tps]";
  print ($ "public abstract class FuncVoid$k$(tps') : FuncNew$k [$tpso]\n{\n");
  print ($ "  public abstract apply_void ($parms) : void;\n");
  cnt = 0;
  def (parms, refs) = 
    List.Split (tp.Map (fun (tp) { 
      ++cnt;
      ($ "p$cnt : $tp",
       $ "p$cnt")
     }));
  def parms = parms.ToString (", ");
  def refs = refs.ToString (", ");

  print ($ "  public override apply ($parms) : System.Object { apply_void ($refs); null }\n");
  print ("}\n\n");

  when (g && k > 1) {
    def (impl, cl) =
      if (k > 3)
        (",\n   DisableImplicitConstructor]", "sealed class")
      else
        ("]", "struct");
        
    cnt = 0;
    def tp =
      l.Map (fun (_) {
        def n = $ "'p$cnt";
        ++cnt;
        n
      });
    def tp = tp.ToString (", "); 
    
    print(@"
  [System.Serializable,
   Record,
   // StructuralEquality,
   TupleToString,
   StructuralHashCode$impl
  public $cl Tuple$k [$tp]
  {
");
    for (mutable i = 0; i < k; ++i)
      print ("    public field$i : 'p$i;\n");

    print ("  }\n\n");
 }
}

print ("#if _GENERICS && ! _stage1\n");
for (mutable i = 0; i < 10; ++i)
  gen (true, i);
print ("#else\n");
print ("using Nemerle.Internal;\n");
for (mutable i = 0; i < 10; ++i)
  gen (false, i);
print ("#endif\n");
print ("}\n");

