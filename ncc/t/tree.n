open main;

interface I_Comparable_To ('a) 
  {
    compare (e : 'a) : int;
  }

class KV ('a) implements I_Comparable_To (KV ('a))
  {
    key : string;
    val : 'a;

    private compare (x : KV ('a)) : int
      implements I_Comparable_To.compare 
        {
          compare_strings (this#key, x#key)
        }

    this (key : string, val : 'a)
      {
        this#key <- key;
        this#val <- val;
      }
  }

class main {
  variant tree ('b)
    where 'b :> I_Comparable_To ('b) =
      [ 
        | Node { 
            left : tree ('b); 
            data : 'b; 
            right : tree ('b); 
          }
        | Tip {}
      ]

  static ('a) where 'a :> I_Comparable_To('a) insert (t : tree ('a), e : 'a) : tree ('a) =
    match t with [
      | Node ?t =>
        let res = t#data#compare(e) in
        if res < 0 then
          let l = insert (t#left, e) in
          Node (l, t#data, t#right)
        else if res > 0 then
          Node (t#left, t#data, insert (t#right, e))
        else
          raise Invalid_argument("Tree.insert")
      | Tip => Node (Tip (), e, Tip ())
    ];
    
  static ('a) where 'a :> I_Comparable_To('a) find (t : tree ('a), e : 'a) : 'a =
    match t with [
      | Node ?t =>
        let res = t#data#compare(e) in
        if res < 0 then
          find (t#left, e)
        else
          if res > 0 then
            find (t#right, e)
          else
            t#data
      | Tip =>
        raise Not_found ()
    ];

    static Main () : void 
      {
        let t = Tip () in
        let t = insert (t, KV (key = "foo", val = 1)) in
        let t = insert (t, KV (key = "bar", val = 2)) in
        let t = insert (t, KV ("baz", val = 3)) in
        let t = insert (t, KV ("quxx", 4)) in
        {
          try
            if (find (t, KV ("bar", 0))) # val == 2 then
              if (find (t, KV ("quxx", 0))) # val == 4 then
                print_endline ("ok!")
              else
                print_endline ("oops1")
            else
              print_endline ("oops2")
          with ?x : Not_found =>
            print_endline ("not found");
          try
            let _ = insert (t, KV ("bar", 12)) in
            ()
          with ?x : Invalid_argument =>
            print_endline ("inval (ok)")
        }
      }
}

(*
BEGIN-OUTPUT
ok!
inval (ok)
END-OUTPUT
*)
