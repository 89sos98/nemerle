#
# Copyright (c) 2003 The University of Wroclaw.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    3. The name of the University may not be used to endorse or promote
#       products derived from this software without specific prior
#       written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

program:
	{ top_decl }

top_decl:
	"open" qid ";"
		Add qid to namespace search path.
	"namespace" ID "=" qid ";"
		Define short name (an alias) for namespace.
	"namespace" qid "{" { top_decl } "}"
		Declare symbols in specified namespace.
	type_decl

type_header:
	ID [ typarms ] [ extends ] [ implements ]
	
typarms:
	"(" TYVAR { "," TYVAR } ")" [ where_constraints ]
		Types can be parametrized by type variables. Type variables can be constrained 
		to be subtypes of given type. One type variable can be constrained more then 
		once, it has to satisfy each constraint.

where_constraints:
	"where" TYVAR ":>" ty { "," TYVAR ":>" ty }
	
ftyparms:
	TYVAR { "," TYVAR } [ where_constraints ]
		Used in function parametrized over types (just different syntax then in types).
	
extends:
	"extends" ty
		Types can extend other types. Extending implies subtyping. "extends" clause
		makes all fields of extended type be fields of derived type.
		
implements:
	"implements" ty { "," ty }
		Types can implement interfaces. Defined type is subtype of each interface
		it implements.

type_decl:
	attrs "type" type_header "=" type_declarator ";"
		An alias for existing type or external type import.
	attrs "interface" type_header "{" { interface_member } "}"
	attrs "class" type_header "{" { class_member } "}"
	attrs "module" type_header "{" { module_member } "}"
		It's much like static class, but all fields and functions
		are forced to be static.  It is not possible to have
		instances of modules.
	attrs "variant" type_header "{" { "|" variant_option } "}"
	
type_declarator:
	ty
	"extern" STRING_LITERAL
        
id_or_dummy:
	ID
	"_"

qid:
	ID { "." ID }

interface_member:
	[ "new" ] fun_def_head ";"
        
variant_option:
	ID [ "{" { field_def } "}" ]
	
attrs:
	{ attr }

attr:
	"new"
	"public"
	"protected"
	"internal"
	"private"
	"abstract"
	"sealed"

field_def:
	attrs [ "mutable" ] ID ":" ty ";"

module_member:
	attrs [ "mutable" ] ID ":" ty [ "=" "extern" STRING_LITERAL ] ";"
	attrs fun_def
	type_decl

class_member:
	attrs [ "static" ] [ "mutable" ] ID ":" ty [ "=" "extern" STRING_LITERAL ] ";"
	attrs [ "static" ] fun_def
	type_decl
	
fun_def_head:
	[ ftyparms ] ID "(" fun_parms ")" ":" ty [ "implements" qid { "," qid } ]
	[ ftyparms ] "this" "(" fun_parms ")"

fun_body:
	"=" "extern" STRING_LITERAL ";"
	block

fun_def:
	fun_def_head fun_body
	
ref_or_out:
	"ref"
	"out"
        
fun_parm:
	id_or_dummy ":" ty

fun_parms:
	[ fun_parms { "," fun_parm } ]

prim_ty:
	qid
		Reference named type. It is an error to reference type with formal arguments
		without actual arguments.
	qid "(" ty { "," ty } ")"
		Reference named type with specified type arguments. There ought to be exactly
		the same number of actual and formal parameters.
	TYVAR
	"(" ty ")"
		Grouping.
	"void"
		Type with exactly one inhibiting value (maybe it should be called unit then).
	"ref" prim_ty
	"out" prim_ty

ty:
	prim_ty { "*" prim_ty }
		Tuple type.
	prim_ty { "->" prim_ty }
		Type of functions.

prim_expr:
	qid
		Value reference.
	"this"
		Reference parent type instance in method.
	"(" expr ")"
		Allow grouping.
	"null"
		Polymorphic constant.
	"(" ")"
		The only value of type void.
	STRING_LITERAL
	NUMBER_LITERAL
	"(" expr ":>" ty ")"
		Type cast.
	"(" expr ":" ty ")"
		Type enforcement.
	prim_expr "." ID
		Member reference.
	"(" expr {+ "," expr }+ ")"
		Tuple constructor.

expr_in_seq:
	expr ";"
	decl_expr
	
sequence:
	expr_in_seq { ";" expr_in_seq } [ ";" ]
		All expression but the last one ought to have void type.

block:
	"{" expr_list "}"

decl_expr:
	"def" id_or_dummy "=" expr ";"
		Define new value. It only make sense to use "def" (or "mutable" for that
		matter) in sequence.
	"def" tuple_pattern "=" expr ";"
		Special form of pattern matching.
	"def" local_fun_def { "and" local_fun_def }
		Define several, possibly mutually recursive, functions.
	"mutable" ID "<-" expr ";"
		Define new mutable value.

expr:
	prim_expr
	prim_expr "(" [ parameter { "," parameter } ] ")"
		Function call.
	prim_expr "<-" expr
		Assignment to mutable value (local mutable value, mutable
		type member, or array member).
	"if" "(" expr ")" expr "else" expr
	"match" "(" expr ")" "{" [ "|" ] match_case { "|" match_case } "}"
	"raise" expr
		Raise exception.
	"try" expr "with" ID ":" ty "=>" expr
		Try compute first expression. If specified exception is raised -- catch it.
		Exception value is then bound to specified ID.
	"try" expr "finally" expr
		Try compute first expression. No matter how control leaves it, execute second
		expression.
	expr OPERATOR expr
		Operators are defined in standard library.
	OPERATOR expr
	block
	[ ftyparms ] "fun" "(" fun_parms ")" ":" ty local_fun_body
		Syntactic sugar for function definition.

local_fun_def:
	fun_def_head block
	
parameter:
	[ "ref" ] expr
	[ "ref" ] ID "=" expr

pattern:
	ID
		Lowercase simple ID is pattern variable.
	qid [ pattern ]
		Uppercase, possibly qualified, IDs are expected to be
		variant constructors.
	"_"
		Match-all pattern.
	"{" ID "=" pattern { ";" ID "=" pattern } [ ";" ] "}"
		Decompose type.
	tuple_pattern
		Tuple patterns can be also used in context where normally
		record pattern would be required. It ought to have right
		number of arguments, that are bound to members of matched
		value in sequence.
	"(" pattern ")"

tuple_pattern:
	"(" pattern {+ "," pattern }+ ")"

match_case:
	pattern "=>" sequence

# vim: ai ft=conf ts=4
