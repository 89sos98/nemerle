using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;
using Nemerle.Imperative;

namespace LRPEGCC
{
  internal partial module GrammarTyper
  {
    mutable _debug = true;
    
    public Check(grammar : Grammar) : void
    {
      def isOptional(rule : Rule) : bool
      {
        isOptionalImpl(rule, HashSet([rule]))
      }
      and isOptionalImpl(rule : Rule, visited : HashSet[Rule]) : bool
      {
        def isOptional = isOptionalImpl(_, visited);
        
        match (rule)
        {
          | Capture(_, rule1)                 => isOptional(rule1)
          | Choice(rules2)                    => rules2.Exists(isOptional)
          | Sequence(rules3)                  => rules3.ForAll(isOptional)
          | RepeatMin(0, _rule)               => true // *
          | RepeatMin(_, rule4)               => isOptional(rule4) // +
          | RepeatMinMax(0, _, _rule)         => true // ?
          | RepeatMinMax(n, _, rule5)         => n == 0 || isOptional(rule5)
          | Not                               => true
          | And                               => true
          | Scope(_, rule8)                   => isOptional(rule8)
          | Recovery(_, stopper, skipRule)    => isOptional(stopper) && isOptional(skipRule)
          | Call(name)                        =>
            def r = grammar.GetRule(name).Rule;
            if (visited.Add(r))
              isOptional(r)
            else
              false
            
          | Chars | ExtensionPoint | Fsm      => false
          | Cut                               => false // ???
        }
      }
      mutable recRules;
      def hasLeftRecImpl(rule : Rule, visited : Set[RuleRef]) : bool
      {
        def hasLeftRec = hasLeftRecImpl(_, visited);
        
        match (rule)
        {
          | Capture(_, rule1)                  => hasLeftRec(rule1)
          | Choice(rules2)                     => rules2.Exists(hasLeftRec)
          | Sequence(rules3)                   =>
            breakLoop : 
            {
              foreach (r in rules3)
              {
                when (hasLeftRec(r))
                  breakLoop(true);
                  
                unless (isOptional(r)) // stop if 'r' not optional
                  break;
              }
                
              false
            }
                      
          | RepeatMin(0, rule4)               => hasLeftRec(rule4) // *
          | RepeatMin(_, rule5)               => hasLeftRec(rule5) // +
          | RepeatMinMax(0, _, rule6)         => hasLeftRec(rule6) // ?
          | RepeatMinMax(_, _, rule7)         => hasLeftRec(rule7)
          | Not(rule8)                        => hasLeftRec(rule8)
          | And(rule9)                        => hasLeftRec(rule9)
          | Scope(_, rule10)                  => hasLeftRec(rule10)
          | Recovery(_, stopper, skipRule)    => hasLeftRec(stopper) && hasLeftRec(skipRule)
          | Call(name)                        =>
            def r = grammar.GetRule(name).Rule;
            if (visited.Contains(name))
            {
              recRules = visited.Replace(name);
              true
            }
            else
              hasLeftRecImpl(r, visited.Add(name))
            
            
          | Chars | ExtensionPoint | Fsm      => false
          | Cut                               => false // ???
        }
      }
      
      def tryFindLeftRec()
      {
        def recSets = List();
        // make recurcive rule set
        foreach (name in grammar.Names)
        {
          def rule = grammar.GetRule(name).Rule;
          
          when (hasLeftRecImpl(rule, Set()))
          {
            //assert2(!_debug);
            recSets.Add(recRules);
          }
        }
        // find minimal rule set and report error about it
        when (!recSets.IsEmpty())
        {
          mutable min = recSets.NFirst();
          
          foreach (s in recSets.Skip(1))
            when (HashSet(min).IsSupersetOf(HashSet(s))) //TODO: VladD2: Implement IsSupersetOf for Set[T].
              min = s;
        
          foreach (name in min)
            Message.Error(name.Location, $"A left recursion is detected for the following rules: ..$min.");
        }
      }
      
      tryFindLeftRec();
      //true
    }
  }
}
