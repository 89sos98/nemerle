/*
 * Copyright (c) 2010 RSDN Team.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using SCG = System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  public interface IParser
  {
    Parse(input : string) : list[TopDeclaration];
  }

  public abstract class ParserBase : IParser
  {
    public abstract CreateLexer(input : string) : LexerBase;

    public Parse(input : string) : list[TopDeclaration]
    {
      using(lexer = CreateLexer(input))
        MainParser.Parse(lexer)
    }
  }

  [Record]
  public sealed class DefaultParser : ParserBase
  {
    [Accessor] manager : ManagerClass;

    public override CreateLexer(fileName : string) : LexerBase
    {
      def lexer = LexerFile(manager, fileName);
      when(manager.Options.IndentationSyntax)
        lexer.SwitchToIndentationMode();
      lexer
    }
  }

  public class DispatchingFileParser : IParser
  {
    public this(manager : ManagerClass)
    {
      this(manager, DefaultParser(manager))
    }

    public this(manager : ManagerClass, defaultParser : IParser)
    {
      this.manager = manager;
      this.defaultParser = defaultParser;
    }

    public Register(parserType : Type, fileExtension : string) : void
    {
      registeredParsers[fileExtension.ToLower()] = parserType;
    }

    public Parse(fileName : string) : list[TopDeclaration]
    {
      def extension = System.IO.Path.GetExtension(fileName).ToLower();
      def parser = match(registeredParsers.TryGetValue(extension))
      {
        | (parserType, true) =>
          System.Activator.CreateInstance(parserType, array[manager : object]) :> IParser
        | _ =>
          defaultParser
      }
      parser.Parse(fileName)
    }

    manager : ManagerClass;
    defaultParser : IParser;
    registeredParsers : Hashtable[string, Type] = Hashtable();
  }
}