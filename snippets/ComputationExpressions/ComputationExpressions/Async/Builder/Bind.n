namespace Nemerle.ComputationExpressions.Async
{
  [Record]
  internal class AsyncBind[A, B] : Async[B]
  {
    private mutable async : Async[A];
    private cont : A -> Async[B];

    public override Exec(job : AsyncJobBase, _res : ref B) : Async[B]
    {
      mutable r;
      async = job.ExecWhileReady(async, ref r);
      if (job.State == AsyncJobBase.JobState.Ready && async == null)
        cont(r);
      else
        this;
    }
  }

  [Record]
  internal class AsyncBindVoid[A, B] : Async[B]
  {
    private mutable async : Async[A];
    private cont : void -> Async[B];

    public override Exec(job : AsyncJobBase, _res : ref B) : Async[B]
    {
      mutable r;
      async = job.ExecWhileReady(async, ref r);
      if (job.State == AsyncJobBase.JobState.Ready && async == null)
        cont();
      else
        this;
    }
  }
}
