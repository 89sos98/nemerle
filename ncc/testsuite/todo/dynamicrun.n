/*

class A {
    public virtual Foo () : int { 1; }
}
class B : A {
    new Foo () : int { 2; }
    static Main () : void { System.Console.WriteLine (C ().Foo ()); }
}
class C : B {
    public override Foo () : int { 1; }
}

*/

using Nemerle.Compiler;

class M {
  static Main () : void {
    Message.InitOutput (System.Console.Out);         
    Passes.InitCompiler ();

    Passes.LoadExternalLibraries ();

     def tb = GlobalEnv.DefineExact (<[ decl:
       public class A {
       }
     ]>);

     tb.Define (<[ decl: public F () : int { 5 } ]>);
     tb.Compile ();
     
     // we need to process global assembly attributes before creating assembly name
     def assem_name = AttributeCompiler.CreateAssemblyName ();
     Passes.ILGenerator = CGIL (assem_name);  
      
     TypeBuilder.Run ();

     Passes.ILGenerator.EmitAuxDecls ();

     Passes.ILGenerator.EmitDecls ();

    TypeBuilder.CheckFinalization ();
     
     System.Console.WriteLine ("bla");     
     
     def ass = Passes.ILGenerator.GeneratedAssembly;
//     def x = ass.CreateInstance ("A");
//     System.Console.WriteLine (ass.ToString ());
     def x = tb.GetSystemType ();
     
//     System.Console.WriteLine (x.GetType ().ToString ());
     System.Console.WriteLine (x.ToString ());
     def c = x.GetConstructor (array []);
     
     
    //  GlobalEnv.FinishMacroContextClass ();


  }
}
