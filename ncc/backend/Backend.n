using System;
using System.Reflection;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  public interface ICompilerBackend
  {
    MetadataReader : IMetadataReader { get; }

    CodeEmitter : ICodeEmitter { get; }

    CreateAttributeCompiler() : AttributeCompilerClass;

    CreateTypesManager() : TypesManager;

    CreateTypeBuilder(
      manager       : TypesManager,
      owner         : TypeBuilder,
      ast           : PT.TopDeclaration,
      namespaceNode : NamespaceTree.Node) : TypeBuilder;

    CreateMethodBuilder(
      owner       : TypeBuilder,
      ast         : PT.ClassMember.Function,
      isProperty  : bool) : MethodBuilder;

    CreateFieldBuilder(
      owner : TypeBuilder,
      ast   : PT.ClassMember.Field) : FieldBuilder;

    CreatePropertyBuilder(
      owner : TypeBuilder,
      ast   : PT.ClassMember.Property) : PropertyBuilder;

    CreateEventBuilder(
      owner : TypeBuilder,
      ast   : PT.ClassMember.Event) : EventBuilder;

    CreateLocalValue(
      definedIn     : TT.TFunHeader,
      name          : string,
      nameLocation  : Location,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue;
  }

  public interface IMetadataReader
  {
    AddLibrary(name : string) : void;

    AddExtensionMethod(method : IMethod) : void;
    LoadLibrariesContents() : void;
    LoadExtensions() : void;
    RemoveInternalExtensionMethods() : void;
    GetExtensionMethods (name : string, env : GlobalEnv, for_completion : bool) : SCG.IEnumerable [IMethod];

    add_buildins : bool { get; set; }
    AddBuildins(tc : TypeInfo) : void
  }

  public interface ICodeEmitter
  {
    EmitMethodBody(methodBuilder : MethodBuilder) : void;
    GetMethodInfo(fromType : FixedType, meth : IMethod) : MethodInfo;
    EncodeType(t : FixedType) : string;
  }

  public module CompilerBackendExtensions
  {
    public CreateLocalValue(
      this backend  : ICompilerBackend,
      definedIn     : TT.TFunHeader,
      name          : string,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue
    {
      backend.CreateLocalValue(definedIn, name, Location.Default, ty, kind, isMutable)
    }

    public CreateLocalValue(
      this backend  : ICompilerBackend,
      definedIn     : TT.TFunHeader,
      name          : PT.Name,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue
    {
      backend.CreateLocalValue(definedIn, name.Id, name.Location, ty, kind, isMutable)
    }
  }
}