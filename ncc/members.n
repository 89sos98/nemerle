 /*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Tyops;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler.Typedtree;

using System.Reflection;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler {

public class NemerleMember : IMember
{
  loc : Location;
  protected mutable name : string;
  protected accessibility : Accessibility;
  internal modifiers : Modifiers;
  declaring_type : TypeBuilder;
  id : int;
  protected mutable kind : MemberKind;
  internal mutable ty : TType;
  protected mutable handle : MemberInfo;

  mutable is_protected : bool;
  mutable is_public : bool;
  mutable is_internal : bool;

  protected mutable m_has_been_used : bool;
  
  protected this (par : TypeBuilder, d : PT.ClassMember)
  {
    loc = d.loc;
    modifiers = d.modifiers;
    name = d.name.GetName ().Id; 
    declaring_type = par;
    id = Util.next_id ();

    is_public = modifiers.mods %&& NemerleAttributes.Public;
    is_internal = modifiers.mods %&& NemerleAttributes.Internal;
    is_protected = modifiers.mods %&& NemerleAttributes.Protected;

    if (is_public)
      accessibility = Accessibility.Public
    else if (is_protected && is_internal)
      accessibility = Accessibility.ProtectedOrInternal
    else if (is_protected)
      accessibility = Accessibility.Protected
    else if (is_internal)
      accessibility = Accessibility.Internal
    else
      accessibility = Accessibility.Private;

    match ((par.GetAccessibility (), accessibility)) {
      | (Accessibility.Private, _) =>
        accessibility = Accessibility.Private
      | (Accessibility.Public, _) => ()
      | (Accessibility.Internal, Accessibility.Public) =>
        accessibility = Accessibility.Internal
      | (Accessibility.Protected, Accessibility.Internal)
      | (Accessibility.Internal, Accessibility.Protected) =>
        accessibility = Accessibility.ProtectedAndInternal
      | _ => ()
    }

    // mark public and protected members explicitly used
    m_has_been_used =
      (is_public || is_protected) && declaring_type.IsExternallyAccessible ||
      name.StartsWith ("_") || declaring_type.Name.StartsWith ("_") ||
      name == "value__"
  }

  public CanAccess (source : TypeInfo) : bool
  {
    def walk_declaring (tc : TypeInfo) {
      tc.SameAs (declaring_type) || 
        (tc.DeclaringType != null && walk_declaring (tc.DeclaringType))
    };

    is_public
    || declaring_type.SameAs (source)
    || (is_internal && 
        (match (source.GetTypeInfoKind ()) { 
          | TypeInfoKind.NemerleType => true 
          | _ => false 
        }))
    || (is_protected && Option.IsSome (source.SuperType (declaring_type)))
    || walk_declaring (source)
  }

  public DeclaringType : TypeInfo
  {
    get { declaring_type }
  }

  public Name : string
  {
    get { name }
  }

  public OverloadName : string
  {
    get { Util.ice ("OverloadName not implemented for non-external members") }
  }

  public MemberType : System.Reflection.MemberTypes {
    get {
      match (kind) {
        | MemberKind.Field => MemberTypes.Field
        | MemberKind.Method => MemberTypes.Method
        | MemberKind.Property => MemberTypes.Property
        | MemberKind.Type => MemberTypes.NestedType
        | MemberKind.Event => MemberTypes.Event
      }
    }
  }

  public GetMemType () : TType
  {
    ty
  }

  [Nemerle.OverrideObjectEquals]
  public Equals (o : IMember) : bool
  {
    GetId () == o.GetId ()
  }

  public GetKind () : MemberKind
  {
    kind
  }

  public Location : Location
  {
    get { loc }
  }
  
  public Attributes : NemerleAttributes
  {
    get { modifiers.mods }
  }

  public GetModifiers () : Modifiers
  {
    modifiers
  }
  
  public IsStatic : bool
  {
    get { Attributes %&& NemerleAttributes.Static }
  }

  public HasBeenUsed : bool
  {
    get { m_has_been_used }
    set {
      m_has_been_used = m_has_been_used || value;
      declaring_type.HasBeenUsed = value
    }
  }
  
  internal SetInstanceUsed () : void {
    m_has_been_used = true;
  }

  public GetId () : int
  {
    id
  }

  public virtual GetHandle () : System.Reflection.MemberInfo
  {
    assert (false)
  }

  public MarkWithSpecialName () : void
  {
    modifiers.mods = modifiers.mods %| NemerleAttributes.SpecialName
  }

  protected UpdateEmbeddedModifiers (parent : Modifiers, child : Modifiers) : void
  {
    def copied_mods = 
    if (child.mods %&& NemerleAttributes.AccessModifiers)
      parent.mods %& ~NemerleAttributes.AccessModifiers;
    else
      parent.mods;
    when (child.mods %&& NemerleAttributes.Static && !(parent.mods %&& NemerleAttributes.Static))
      Message.error ("accessor cannot be static if containing entity isn't");
    child.mods |= copied_mods;
  }

  public override ToString () : string
  {
    declaring_type.describe_member (this)
  }
}

public class NemerleField : NemerleMember, IField
{
  private is_mutable : bool;
  private is_volatile : bool;
  
  public mutable field_builder : Emit.FieldBuilder;
  public mutable enum_value : object;
  
  public this (par : TypeBuilder, f : PT.ClassMember.Field) {
    base (par, f);
    def is_static = Attributes %&& NemerleAttributes.Static;
    is_mutable = Attributes %&& NemerleAttributes.Mutable;
    is_volatile = Attributes %&& NemerleAttributes.Volatile;
    ty =
      if (is_static)
        par.BindType (Tyvar.TEnv (), f.ty)
      else
        par.BindType (f.ty);
    kind = MemberKind.Field (this);
    Tyutil.CheckAccessibility (this, accessibility, ty);
  }

  public IsMutable : bool
  {
    get { is_mutable }
  }

  public IsVolatile : bool
  {
    get { is_volatile }
  }
  
  public IsLiteral : bool
  {
    get
    {
      match (DeclaringType.GetTydecl ()) {
        | TypeDeclaration.Enum when IsStatic => true
        | _ => false
      }
    }
  }

  public GetValue () : object
  {
    assert (IsLiteral);
    enum_value
  }

  public GetFieldInfo () : FieldInfo
  {
    field_builder
  }
  
  override public GetHandle () : System.Reflection.MemberInfo
  {
    field_builder
  }
}

public class NemerleProperty : NemerleMember, IProperty
{
  is_mutable : bool;
  getter : NemerleMethod;
  setter : NemerleMethod;
  internal parms : list [TType];
  
  internal mutable property_builder : Emit.PropertyBuilder;
  
  public this (par : TypeBuilder, f : PT.ClassMember.Property) {
    base (par, f);
    is_mutable = Option.IsSome (f.set);
    
    def is_static = Attributes %&& NemerleAttributes.Static;
    ty =
      if (is_static)
        par.BindType (Tyvar.TEnv (), f.prop_ty)
      else
        par.BindType (f.prop_ty);

    kind = MemberKind.Property (this);

    def par = par;
    
    parms = 
      List.Map (f.dims, fun (parm : PT.Fun_parm) {
        par.BindType (parm.ty)
      });

    match (f.get) {
      | Some (fn : PT.ClassMember.Function) =>
        UpdateEmbeddedModifiers (modifiers, fn.modifiers);
        getter = NemerleMethod (par, fn, is_property = true);
        par.AddMember (getter);
      | Some => Util.ice ("property getter was set to other class member than ClassMember.Function")
      | None => ()
    };
    match (f.set) {
      | Some (fn : PT.ClassMember.Function) =>
        UpdateEmbeddedModifiers (modifiers, fn.modifiers);
        setter = NemerleMethod (par, fn, is_property = true);
        par.AddMember (setter);
      | Some => Util.ice ("property setter was set to other class member than ClassMember.Function")
      | None => ()
    };

    Tyutil.CheckAccessibility (this, accessibility, ty);

    // we'll check for the get/set usage methods instead
    m_has_been_used = true
  }

  public IsMutable : bool
  {
    get { is_mutable }
  }

  public IsIndexer : bool
  {
    get
    {
      List.Length (parms) > 0
    }
  }
  
  public GetPropertyInfo () : PropertyInfo
  {
    property_builder
  }

  public GetGetter () : IMethod
  {
    getter
  }
  
  public GetSetter () : IMethod
  {
    setter
  }
  
  override public GetHandle () : System.Reflection.MemberInfo
  {
    property_builder
  }
}

public class NemerleMethod : NemerleMember, IMethod
{
  // FIXME: make these private
  public mutable fun_kind : FunKind;
  public mutable fun_body : FunBody;
  public mutable fun_header : Fun_header;
  
  public mutable method_builder : System.Reflection.Emit.MethodBuilder;
  public mutable ctor_builder : System.Reflection.Emit.ConstructorBuilder;

  is_var_args : bool;

  public GetMethodBase () : MethodBase
  {
    if (method_builder == null)
      (ctor_builder : MethodBase)
    else
      method_builder
  }

  public override GetHandle () : MemberInfo
  {
    GetMethodBase ()
  }

  public GetConstructorBuilder () : Emit.ConstructorBuilder 
    implements IMethod.GetConstructorInfo
  {
    assert (ctor_builder != null);
    ctor_builder
  }
  
  public GetMethodBuilder () : Emit.MethodBuilder 
    implements IMethod.GetMethodInfo
  {
    assert (method_builder != null);
    method_builder
  }

  public GetExternName () : option [string]
  {
    match (fun_body) {
      | FunBody.Extern (name) => Some (name)
      | _ => None ()
    }
  }

  public HasExternBody : bool
  {
    get { (fun_body is FunBody.Extern) }
  }

  public HasAbstractBody : bool
  {
    get { (fun_body is FunBody.Abstract) }
  }
  
  public Body : PT.PExpr {
    get {
      match (fun_body) {
        | FunBody.Parsed (e) => e
        | _ =>
          Message.fatal_error ("No parsetree body accessible")
      }
    }
    
    set { fun_body = FunBody.Parsed (value) }
  }
  
  public IsVarArgs : bool
  {
    get { is_var_args }
  }

  public this (par : TypeBuilder, f : PT.ClassMember.Function)
  {
    this (par, f, false)
  }
  
  public this (par : TypeBuilder, f : PT.ClassMember.Function, is_property : bool)
  {
    base (par, f);

    // convert +, -, /= name to op_Addition equivalents
    match (OperatorLongName (this.name, List.Length (f.header.parms))) {
      | Some (long) => this.name = long
      | None => ()
    };
    
    def par = par; // hack, so previous par is not closurised
    def accessibility = accessibility; // ditto, this

    // both override and abstract imply virtual
    when (Attributes %&& (NemerleAttributes.Override 
                          %| NemerleAttributes.Abstract))
      modifiers.mods |= NemerleAttributes.Virtual;

    def is_static = Attributes %&& NemerleAttributes.Static;
 
    def (tenv', typarms) =
      if (is_static)
        par.BindTyparms (Tyvar.TEnv (), f.header.typarms)
      else
        par.BindTyparms (f.header.typarms);
   
    mutable types_to_check = [];

    foreach (tv in typarms)
      foreach (t in Tyvar.constraints (tv))
        types_to_check = t :: types_to_check;
        
    def bind (t) {
      def ty = par.BindType (tenv', t);
      types_to_check = ty :: types_to_check;
      ty
    };
    def mkparm (p : PT.Fun_parm) : Fun_parm {
      def name = p.name.GetName ();
      Fun_parm (loc = p.loc, name = List.Head (name.idl), color = name.color, ty = bind (p.ty), 
                decl = null, modifiers = p.modifiers)
    };
    fun_body = f.body;
    
   /* We need to convert things like:
        foo (x : int * int) : int { bar }
            ===>
        foo (_1 : int, _2 : int) : int { def x = (_1, _2); bar }
      To be consistent. */

    def parms =
      match (f.header.parms) {
        | [parm] when ! is_property =>
          match (Tyutil.top_expand (par.BindType (tenv', parm.ty))) {
            | TType.Product (types) =>
              mutable modifiers = parm.modifiers;
              def mkdummyparm (t : TType) {
                // make the first argument intercept custom attributes
                def mods = modifiers;
                modifiers = Modifiers.Empty;
                Fun_parm (loc = parm.loc, 
                          name = Util.tmpname ("tupled"),
                          color = TypingContext.MacroColor,
                          ty = t, 
                          decl = null,
                          modifiers = mods)
              };
              def parms = List.Map (types, mkdummyparm);
              def refs = List.Map (parms, fun (fp : Fun_parm) {
                PT.PExpr.Ref (PT.Name (fp.name))
              });
              match (fun_body) {
                | FunBody.Parsed (body) =>
                  fun_body = FunBody.Parsed (<[ { def $(parm.name) =
                    ( .. $refs ); $body } ]>)
                | _ => Util.ice ()
              };
              parms
            | _ => List.Map (f.header.parms, mkparm)
          }
        | _ => List.Map (f.header.parms, mkparm)
      };

    when (! parms.IsEmpty) {
      def is_params (parm : Fun_parm) {
        List.Exists (parm.modifiers.custom_attrs, 
          fun (e) {
            | <[ System.ParamArrayAttribute ]>
            | <[ System.ParamArrayAttribute () ]>
            | <[ System.ParamArray ]>
            | <[ System.ParamArray () ]> => true
            | _ => false
          })
      }
      def (till_last, last) = List.DivideLast (parms);
      
      when (is_params (last)) {
        match (last.ty) {
          | TType.Array (_, 1) =>
            is_var_args = true
          | _ =>
            Message.error ("only single-dimensional arrays are allowed in `params' parameters")
        }
      }

      when (List.Exists (till_last, is_params))
        Message.error ("`params' is allowed only on last parameter");
    }

    fun_kind =
      match ((f.kind, this.name)) {
        | (FunKind.Method ([]), ".ctor") when is_static =>
          this.m_has_been_used = true;
          this.name = ".cctor";
          FunKind.StaticConstructor ()
        | (FunKind.Method ([]), ".ctor") =>
          FunKind.Constructor ()
        | (FunKind.Method ([]), _) when is_static =>
          FunKind.Function ()
        | (FunKind.Constructor, _) when is_static =>
          this.m_has_been_used = true;
          this.name = ".cctor";
          FunKind.StaticConstructor ()
        | (FunKind.Method (_ :: _), ".ctor") =>
          Message.error ("constructor cannot implement anything");
          FunKind.Constructor ()
        | (FunKind.Method (_ :: _), _) when is_static =>
          Message.error ("static function cannot implement anything");
          FunKind.Function ()
        | (x, _) => x
      };

    fun_header = Fun_header (
      ret_type = bind (f.header.ret_type),
      typarms = typarms,
      name = this.name,
      parms = parms,
      tenv = tenv',
      loc = f.header.loc);
      
    ty = Tyutil.fun_type (fun_header);
    
    kind = MemberKind.Method (this);

    // check it at the end, since error reporting routine there
    // needs us to be initialized to name us
    foreach (t in types_to_check)
      Tyutil.CheckAccessibility (this, accessibility, t);

    // don't warn about the unused `Main' methods...
    when (is_static && name == "Main")
      HasBeenUsed = true
  }

  public SetHeader (h : Fun_header) : void {
    fun_header = h;
    ty = Tyutil.fun_type (fun_header);
  }

  public GetHeader () : Fun_header
  { fun_header }

  public ReturnType : TType {
    get { fun_header.ret_type }
  }
  
  public GetFreshType () : TType
  { GetMemType () /- Tyvar.fresh_subst (fun_header.typarms) }

  public GetFunKind () : FunKind
  { fun_kind }

  static OperatorLongName (op : string, params_amount : int) : option [string]
  {
    if (params_amount == 2) {
      match (op) {
        | ":" => Some ("op_Implicit")
        | ":>" => Some ("op_Explicit")
        | "+" => Some ("op_Addition")
        | "-" => Some ("op_Subtraction")
        | "*" => Some ("op_Multiply")
        | "/" => Some ("op_Division")
        | "%" => Some ("op_Modulus")
        | "%^" => Some ("op_ExclusiveOr")
        | "%&" => Some ("op_BitwiseAnd")
        | "%|" => Some ("op_BitwiseOr")
        | "&&" => Some ("op_LogicalAnd")
        | "||" => Some ("op_LogicalOr")
        | "=" => Some ("op_Assign")
        | "<<" => Some ("op_LeftShift")
        | ">>" => Some ("op_RightShift")
        // | ">>*" => Some ("op_SignedRightShift")
        // | ">>&" => Some ("op_UnsignedRightShift")
        | "==" => Some ("op_Equality")
        | ">" => Some ("op_GreaterThan")
        | "<" => Some ("op_LessThan")
        | "!=" => Some ("op_Inequality")
        | ">=" => Some ("op_GreaterThanOrEqual")
        | "<=" => Some ("op_LessThanOrEqual")
        | "*=" => Some ("op_MultiplicationAssignment")
        | "-=" => Some ("op_SubtractionAssignment")
        | "^=" => Some ("op_ExclusiveOrAssignment")
        | "<<=" => Some ("op_LeftShiftAssignment")
        | "%=" => Some ("op_ModulusAssignment")
        | "+=" => Some ("op_AdditionAssignment")
        | "&=" => Some ("op_BitwiseAndAssignment")
        | "|=" => Some ("op_BitwiseOrAssignment")
        | "," => Some ("op_Comma")
        | "/=" => Some ("op_DivisionAssignment")
        | _ => None ()
      }
    }
    else if (params_amount == 1) {
      match (op) {
        | "+" when params_amount == 1 => Some ("op_UnaryPlus")
        | "-" => Some ("op_UnaryNegation")        
        | "--" => Some ("op_Decrement")
        | "++" => Some ("op_Increment")
        | "~" => Some ("op_OnesComplement")
        | "!" => Some ("op_LogicalNot")
        | _ => None ()
      }
    }
    else None ()
  }
}

public class NemerleEvent : NemerleMember, IEvent
{
  adder : NemerleMethod;
  remover : NemerleMethod;
  
  internal mutable event_builder : Emit.EventBuilder;
  internal storage_field : NemerleField;
  
  public this (par : TypeBuilder, f : PT.ClassMember.Event) {
    base (par, f);
    
    def is_static = Attributes %&& NemerleAttributes.Static; 
    ty =
      if (is_static)
        par.BindType (Tyvar.TEnv (), f.ty)
      else
        par.BindType (f.ty);

    kind = MemberKind.Event (this);

    def loc = f.loc;
    def par = par;
    def self = this;

    mutable meth_attrs = [];
    mutable field_attrs = [];
    def hacking_remove_meth_attrs (x) {
      | <[ ("method", $x) ]> => meth_attrs = x :: meth_attrs; false
      | _ => true;
    }
    def hacking_remove_field_attrs (x) {
      | <[ ("field", $x) ]> => field_attrs = x :: field_attrs; false
      | _ => true;
    }
    f.modifiers.custom_attrs = List.Filter (f.modifiers.custom_attrs, hacking_remove_meth_attrs);
    f.modifiers.custom_attrs = List.Filter (f.modifiers.custom_attrs, hacking_remove_field_attrs);
    meth_attrs = List.Rev (meth_attrs);
    field_attrs = List.Rev (field_attrs);

    def is_iface = (par.GetTydecl () matches TypeDeclaration.Interface);

    def make_mfunction (pref, meth) {
      def name = PT.Splicable.Name (PT.Name (pref + self.Name));
      def value_parm = PT.Fun_parm (loc, PT.Splicable.Name (PT.Name ("value")), 
                                    f.ty, Modifiers.Empty);
      def fh = PT.Fun_header (loc, name, PT.PType.Void (), [value_parm]);

      PT.ClassMember.Function (loc, fh.name, Modifiers (f.modifiers.mods, meth_attrs), fh, FunKind.Method ([]), meth);
    };

    def (add, remove) =
      match ((f.add, f.remove)) {
        | (Some (add), Some (remove)) =>
          (add, remove)
        | (None, None) =>
          if (is_iface)
            (make_mfunction ("add_", FunBody.Abstract ()),
             make_mfunction ("remove_", FunBody.Abstract ()))
          else {
            def mods = 
              NemerleAttributes.Private %| NemerleAttributes.Mutable %|
              (if (is_static) NemerleAttributes.Static
               else NemerleAttributes.None);
            def field_name = PT.Name (Util.tmpname (f.name.GetName ().Id));

            def field = PT.ClassMember.Field (f.loc, PT.Splicable.Name (field_name),
                                    Modifiers (mods, field_attrs), f.ty);
            storage_field = NemerleField (par, (field :> PT.ClassMember.Field));
            par.AddMember (storage_field);
            def lock_expr =
              if (is_static) <[
                typeof ($(PT.Name (NString.Split (par.FullName, array ['.'])) : name))
              ]>
              else <[ this ]>;

            // according to C# spec, we have to add locks
            // http://www.jaggersoft.com/csharp_standard/17.7.1.htm
            (make_mfunction ("add_", FunBody.Parsed (<[
               lock ($lock_expr) { $(field_name : name) += $("value" : dyn) }
             ]>)),
             make_mfunction ("remove_", FunBody.Parsed (<[
               lock ($lock_expr) { $(field_name : name) -= $("value" : dyn) }
             ]>)))
          }
        | _ =>
          Message.fatal_error ("events must have both `add' and `remove' methods")
      };
    
    def make_method (mfunc : PT.ClassMember) {
      UpdateEmbeddedModifiers (f.modifiers, mfunc.modifiers);
      def meth' = NemerleMethod (par, (mfunc :> PT.ClassMember.Function));
      par.AddMember (meth');
      meth'
    };

    adder = make_method (add);
    remover = make_method (remove);

    Tyutil.CheckAccessibility (this, accessibility, ty);
  }

  public GetEventInfo () : EventInfo
  {
     assert (false);
  }

  public override GetHandle () : MemberInfo
  {
    // for some reason !(event_builder)...
    /// lame spec: SRE.EventBuilder is not MemberInfo or event EventInfo
    /// but we return null to do not spoil API
    null
  }

  public GetAdder () : IMethod
  {
    adder
  }
  
  public GetRemover () : IMethod
  {
    remover
  }
}


}
