using System;
using System.Console;
using System.Collections.Generic;

using Nemerle.Utility;
using Nemerle.Collections;

module Prog
{
  module Enumerator
  {
    public Make(values: list[int]) : IEnumerable[int]
    {
      foreach (e in values)
        yield e
    }
  }

  TestArrays() : void
  {
    mutable first = array [1, 2, 3];
    mutable second = array [4, 5, 6];
    
    foreach (el in first.Map2Array(second, (l, r) => l + r ))
      WriteLine(el);
        
    first = array [1, 2];
    second = array [4, 5, 6];
    
    try
    {    
      foreach (el in first.Map2Array(second, (l, r) => l + r ))
        WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
  }
  
  TestList() : void
  {
    mutable first = [10, 20, 30];
    mutable second = [40, 50, 60];
    
    foreach (el in first.Map2Array(second, (l, r) => l + r ))
      WriteLine(el);    
        
    first = [1, 2];
    second = [4, 5, 6];
    
    try
    {    
      foreach (el in first.Map2Array(second, (l, r) => l + r ))
          WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
  }
  
  TestEnumerable() : void
  {
    mutable first = Enumerator.Make([-1, -2, -3]);
    mutable second = Enumerator.Make([-4, -5, -6]);
    
    foreach (el in first.Map2Array(second, (l, r) => l + r ))
      WriteLine(el);
        
    first = Enumerator.Make([1, 2]);
    second =  Enumerator.Make([4, 5, 6]);
    
    try
    {    
      foreach (el in first.Map2Array(second, (l, r) => l + r ))
        WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
  }
  
  TestZip() : void
  {
    foreach (el in array[1, 2, 3].Zip(array[-1, -2, -3]))
      WriteLine(el);
        
    foreach (el in [1, 2, 3, 4].Zip([-1, -2, -3, 0]))
      WriteLine(el);
        
    foreach (el in Enumerator.Make([10, 20, 30]).Zip(Enumerator.Make([-10, -20, -35])))
      WriteLine(el);
        
    try
    {
      foreach (el in array[1, 2].Zip(array[-1, -2, -3]))
        WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
     
    try
    {
      foreach (el in [1, 2, 4, 4].Zip([]))
        WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
     
    try
    {
      foreach (el in Enumerator.Make([1, 2, 3]).Zip(Enumerator.Make([-1])))
        WriteLine(el);
    }
    catch
    {
      | _ is ArgumentException => Console.WriteLine("error");
    }
  }
  
  public Main() : void  
  {   
    Console.WriteLine("Map2Array-Zip tests");
    Console.WriteLine("Arrays test");
    TestArrays();
    Console.WriteLine("Lists test");
    TestList();
    Console.WriteLine("IEnumerable test");
    TestEnumerable();
    Console.WriteLine("Zip test");
    TestZip();
                
    ///_ = ReadKey();
  }
}

/*
BEGIN-OUTPUT
Map2Array-Zip tests
Arrays test
5
7
9
error
Lists test
50
70
90
error
IEnumerable test
-5
-7
-9
error
Zip test
(1, -1)
(2, -2)
(3, -3)
(1, -1)
(2, -2)
(3, -3)
(4, 0)
(10, -10)
(20, -20)
(30, -35)
error
error
error
END-OUTPUT
*/