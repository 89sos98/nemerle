using Nemerle.Compiler;
using Nemerle.Completion;
using Nemerle.Collections;
using Nemerle.Utility;
using System.IO;
using System.Console;

def engine = Engine ();
def files = Hashtable ();
def rawArgs = System.Environment.GetCommandLineArgs ().ToList();
def (progName, args) = rawArgs.Head :: rawArgs.Tail;

when (args.Length == 0)
{
	WriteLine(
  $ "usage: $progName <filename>\n" +
    "       <filename> is the Nemerle source code you want to pass to the \n" +
    "       code completion engine");
	System.Environment.Exit(1);
}

foreach (path in args)
{
  def source = File.ReadAllText (path);
  engine.Sources.Add (path, source);
  files [path] = source;
}

def type_tree = engine.GetTypeTree ();
//def _second_tree = engine.GetTypeTree ();
// mutable the_method = null;

mutable count = 0;

def loop (x) : IMember
{
  mutable completionMember;

  foreach (node in x.Children.Values)
  {
    count++;
    //WriteLine (node.Name.ToString("."));
    match (node.Value)
    {
      | NamespaceReference => completionMember = loop (node);
      | Cached(tycon)      =>
          match (tycon)
          { | tb is TypeBuilder =>
              WriteLine (tb.FrameworkTypeName);
              foreach (n in tb.GetMembers ())
              {
                //match (n.GetKind ())
                //{ | Field (field)   => WriteLine (field);  // IField
                //  | Method (method) => WriteLine (method); // IMethod
                //      when (method.Name == "Bar")
                //        completionMember = method; 
                //  | Property (prop) => WriteLine (prop);   // IProperty
                //  | Type (tycon)    => WriteLine (tycon);  // TypeInfo
                //  | Event (body)    => WriteLine (body);   // IEvent
                //}
                match (n.GetKind ())
                { | Method (method) => // IMethod
                      when (method.Name == "Bar")
                        completionMember = method; 
                  | _    => ()
                }
              }
            | _                 => ();
          }
      | _                  => ()
    }
  }

  completionMember;
}

WriteLine ("Found types\n===========");
def completionMember = loop (type_tree);
WriteLine ($"\n $count types found \n===========");

WriteLine ("\n================================================");
WriteLine ($" Completion member: $completionMember");

def try_completion (body)
{
  try
  {
    WriteLine ($"\nTrying to complete: '$body'");
    def overloads = engine.RunCompletionEngine (completionMember, body);

    if (overloads == null)
      WriteLine ("No member found!!!");
    else
    {
      WriteLine ("  Member found:");

      foreach (overl in overloads)
        WriteLine ($"    $(overl.Member.Name)  -> $overl"
          " $(overl.Member.Attributes)");

      WriteLine ("  ==========");
      
      WriteLine ("Finished");
      WriteLine ("================================================");
    }
  }
  catch { ex => WriteLine(ex); }
}

//FixMe: Bugs
try_completion ("Fo");
try_completion ("");
try_completion ("def _ = 0; ");

// Work fine:
try_completion ("System.");
try_completion ("System.Reflection.");
try_completion ("this.Fo");
try_completion ("def a = \"a\"; a.L");
try_completion ("string.For");
try_completion ("string.");
try_completion ("Q");
try_completion ("def s = System.Collections.Generic.List (); s.");
