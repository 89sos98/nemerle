/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

namespace Nemerle.Compiler {
module CGopt {

  /**
   * Check if given method tail-calls anywhere.
   */
  has_tail_call (meth : CG_method) : bool {
    def walk (ex : CG_expr) : bool {
      match (ex) {
        | CE_call => true
        | CE_ignore (e)
        | CE_cast (e, _)
        | CE_let (_, e) => walk (e)
        | CE_if (_, e1, e2) => walk (e1) || walk (e2)
        | CE_sequence (l) =>
          walk_list (null, l)
        | _ => false
      }
    }
    and walk_list (last, lst) {
      match (lst) {
        | CE_literal (L_void) :: xs => walk_list (last, xs)
        | x :: xs => walk_list (x, xs)
        | [] =>
          if (last == null) false
          else walk (last)
      }
    };

    walk (meth.body)
  }

  /**
   * Mark tail calls with CE_tail_call ().
   */
  tail_call_optimize (meth : CG_method) : void {
    def replace_tailcalls (only_self : bool, ex : CG_expr) : CG_expr {
      def is_self (mb) {
         Flags.self_tail_call_opt && 
         (mb : object) == (meth.method_builder : object)
      };
      def r =
        match (ex) {
          | CE_call (CE_global_ref (mb), parms) when is_self (mb)
          | CE_call (CE_method_ref (CE_this, mb'), parms) when is_self (mb') =>
            CE_self_tail_call (parms)
          | CE_call (ex, parms) when !only_self => 
            CE_tail_call (ex, parms)
            
          | CE_let (v, e) => 
            CE_let (v, replace_tailcalls (only_self, e))
            
          | CE_if (c, e1, e2) => 
            CE_if (c, replace_tailcalls (only_self, e1), replace_tailcalls (only_self, e2))

          | CE_cast (e, t) => CE_cast (replace_tailcalls (true, e), t)

          | CE_ignore (e) => CE_ignore (replace_tailcalls (true, e))
            
          | CE_sequence (l) =>
            def loop (acc, l) {
              match (l) {
                | CE_literal (L_void) :: xs => loop (acc, xs)
                | x :: xs => loop (x :: acc, xs)
                | [] =>
                  match (acc) {
                    | hd :: tl =>
                      List.Rev (replace_tailcalls (only_self, hd) :: tl)
                    | [] => []
                  }
              }
            };
            CE_sequence (loop ([], l))

          | _ => ex
        };
      r.loc <- ex.loc;
      r.ty <- ex.ty;
      r
    };

    when (has_tail_call (meth)) {
      meth.body <- replace_tailcalls (false, meth.body);
    }
  }
  
  /**
   * Do some optimization on method body.
   *
   * Method is updated in-place.
   */
  internal Optimize (meth : CG_method) : void {
    when (Flags.tail_call_opt)
      tail_call_optimize (meth);
  }
  
}
}
