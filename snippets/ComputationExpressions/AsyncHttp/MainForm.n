using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.ComputationExpressions;
using Nemerle.ComputationExpressions.Async;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.IO;

namespace AsyncHttp
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    public static AsyncGetResponse(this req : WebRequest) : Async[WebResponse]
    {
      Async.FromBeginEnd
        ( req.BeginGetResponse(_, null)
        , req.EndGetResponse(_)
        );
    }

    private mutable guiCtx : ExecutionContext;
    private mutable poolCtx : ExecutionContext;
    public this()
    {
      InitializeComponent();
      Load += (_) =>
      {
        guiCtx = SystemExecutionContexts.FromCurrentSynchronizationContext();
        poolCtx = SystemExecutionContexts.ThreadPool();
      }
    }
  
    private mutable responceBox : System.Windows.Forms.TextBox;
  
    private mutable urlBox : System.Windows.Forms.TextBox;
  
    private mutable button1 : System.Windows.Forms.Button;
  
    private HttpGet(url : string) : Async[string]
    {
      comp async
      {
        def req = WebRequest.Create(url);
        using (defcomp resp = req.AsyncGetResponse())
        using (stream = resp.GetResponseStream())
        using (reader = StreamReader(stream))
          return reader.ReadToEnd();
      }
    }

    private button1_Click (_sender : object,  _e : System.EventArgs) : void
    {
      responceBox.Text = "";
      def receive(url)
      {
        comp async
        {
          def url = url.Trim();
          when (url != "")
          {
            def time = System.Diagnostics.Stopwatch.StartNew();
            try
            {
              defcomp content = HttpGet(url).Start();
              responceBox.Text += $"$url\nTime: $(time.Elapsed)\nContent-Length: $(content.Length)\n\n\n\n";
            }
            catch
            {
              | ex is Exception =>
                responceBox.Text += $"$url\nTime: $(time.Elapsed)\nException: $(ex.Message)\n\n\n\n";
            }
          }
        }
      }
      foreach (url in urlBox.Lines)
        _ = receive(url).Start(guiCtx);
    }
  
    private mutable splitContainer1 : System.Windows.Forms.SplitContainer;
  }
}
