namespace Sioux
{

using Nemerle.Collections;
using Nemerle.Xml;
using System.Xml;
using System.Xml.Xsl;

public class FitApp extends Application
{
  static submissions : Hashtable (string, Submission);
  static mutable list_xsl : XslTransform;
  static mutable list_xml : XmlDocument;
  static secret_password : string;
  
  class Submission 
  {
    values : Hashtable (string, string);

    internal val (name : string) : string
    {
      get_val (values, name)
    }

    generate_id () : void
    {
      def sb = System.Text.StringBuilder (17);
      for (mutable i <- 0; i < 16; i <- i + 1) {
        ignore (sb.Append (((random.Next (24) + ('a' :> int)) :> char)))
      };
      values.Set ("id", sb.ToString ());
    }

    internal store () : void
    {
      lock (submissions)
        submissions.Set (val ("id"), this);
    }

    internal read_post (pv : Hashtable (string, string)) : void
    {
      def old_id = val ("id");
      def read (name) { values.Set (name, get_val (pv, name).Trim ()) };
      iter_all (read);
      when (val ("id") == "")
        values.Set ("id", old_id);
      store ()
    }

    internal serialize (doc : XmlDocument) : XmlNode
    {
      def n = doc.CreateElement ("submission");
      def add_field (name) {
        def n' = doc.CreateElement (name);
        ignore (n.AppendChild (n'));
        ignore (n'.AppendChild (doc.CreateTextNode (val (name))));
      };
      iter_all (add_field);
      n
    }

    internal unserialize (n : XmlNode) : void
    {
      def add_field (n : XmlNode) {
        when (n != null) {
          when (n.NodeType == XmlNodeType.Element) {
            values.Set (n.Name, n.InnerText)
          };
          add_field (n.NextSibling)
        }
      };
      add_field (n.FirstChild)
    }

    iter_all (f : string -> void) : void
    {
      List.Iter (f, text_fields);
      List.Iter (f, bool_fields);
      List.Iter (f, edit_fields);
      f ("id");
    }

    internal dump () : string
    {
      def res = System.Text.StringBuilder ();
      def read (name) { ignore (res.Append (sprintf ("%s='%s'\n", name, val (name)))) };
      iter_all (read);
      res.ToString ()
    }

    internal this ()
    {
      values <- Hashtable ();
      generate_id ();
    }
    
    internal get_form () : XmlTemplate
    {
      def t = XmlTemplate ("fit/submission-form.xml");
      
      List.Iter (fun (name) {
                   t.SetText (name + "/value", val (name))
                 }, "id" :: text_fields);
      t.SetText ("id2/value", val ("id"));
      List.Iter (fun (name) {
                   when (val (name) != "")
                     t.SetText (name + "/checked", "checked")
                 }, bool_fields);
      List.Iter (fun (name) {
                   t.SetText (name, val (name))
                 }, edit_fields);
      
      t
    }

    internal send_confirmation_email (admin_mode : bool, edit_mode : bool) : void
    {
      def m = System.Web.Mail.MailMessage ();
      m.BodyEncoding <- System.Text.Encoding.UTF8;
      m.Subject <- 
        if (edit_mode)
          "Potwierdzenie edycji zgłoszenia uczestnictwa w FIT XVIII"
        else
          "Potwierdzenie zgłoszenia uczestnictwa w FIT XVIII";
      def fit_email = "FIT XVIII <fit18@ii.uni.wroc.pl>";
      if (admin_mode)
        m.To <- fit_email
      else {
        m.To <- sprintf ("%s %s <%s>", val ("first_name"), 
                          val ("last_name"), val ("email"));
        m.Cc <- fit_email;
      };
      m.From <- fit_email;
      m.Body <- 
        (if (edit_mode) 
           "Przyjęto edycję zgłoszenie na FIT XVII.\n\n"
         else 
           "Przyjęto zgłoszenie na FIT XVII.\n\n") +
        "Edycji zgłoszenia można dokonać pod adresem:\n" +
        "  http://lilith.ii.uni.wroc.pl:8000/edit?id=" + val ("id") + "\n\n" +
        "Dane zgłoszenia:\n" + dump ();
      System.Web.Mail.SmtpMail.Send (m)
    }

    internal get_confirm_page (admin_mode : bool, edit_mode : bool) : XmlTemplate
    {
      def t = XmlTemplate ("fit/submission.xml");
      if (admin_mode)
        t.SetText ("email", "FITu")
      else
        t.SetText ("email", val ("email"));
      t.SetText ("dump_here", dump ());
      t.SetText ("edit/href", (if (admin_mode) secret_password else "") 
                              + "/edit?id=" + val ("id"));
      send_confirmation_email (admin_mode, edit_mode);
      
      t
    }

    static text_fields : list (string);
    static bool_fields : list (string);
    static edit_fields : list (string);
    static random : System.Random;

    static this ()
    {
      text_fields <- [
        "first_name",
        "last_name",
        "email",
        "account",
        "university",
        "department",
        "institute"
      ];
      bool_fields <- [
        "vega",
        "treking",
        "single_room"
      ];
      edit_fields <- ["remarks"];
      random <- System.Random ();
    }
  }
  
  static get_val (h : Hashtable (string, string), key : string) : string
  {
    match (h.Get (key)) {
      | Some (res) => res
      | None => ""
    }
  }

  submission_form () : void
  {
    def subm = Submission ();
    FormTemplate <- subm.get_form ();
  }

  submission (edit_mode : bool) : void
  {
    def subm = Submission ();
    subm.read_post (PostVars);
    
    FormTemplate <- subm.get_confirm_page (admin_mode, edit_mode);
  }

  edit () : void
  {
    def res = lock (submissions) submissions.Get (get_val (GetVars, "id"));
    match (res) {
      | Some (subm) =>
        FormTemplate <- subm.get_form ();
        if (admin_mode)
          FormTemplate.SetText ("submission/action", secret_password + "/submission-edit")
        else
          FormTemplate.SetText ("submission/action", "/submission-edit");
      | None =>
        FormTemplate <- XmlTemplate ("fit/error.xml");
        FormTemplate.SetText ("msg", "Zgłoszenie nie istnieje.")
    }
  }

  list_data () : void
  {
    FormTemplate <- XmlTemplate (list_xml);
  }

  main () : void
  {
    FormTemplate <- XmlTemplate ("fit/main.xml");
  }

  remaind () : void
  {
    def email = get_val (PostVars, "email");
    def maybe_add (id, subm : Submission, acc) {
      if (subm.val ("email") == email)
        sprintf ("%s\n%s %s: http://lilith.ii.uni.wroc.pl:8000/edit?id=%s",
                 acc, subm.val ("first_name"), subm.val ("last_name"), id)
      else acc
    };
    def str = submissions.Fold (maybe_add, "");
    if (str == "") {
      FormTemplate <- XmlTemplate ("fit/error.xml");
      FormTemplate.SetText ("msg", sprintf ("Brak adresu '%s' w bazie.", email));
    } else {
      def m = System.Web.Mail.MailMessage ();
      m.BodyEncoding <- System.Text.Encoding.UTF8;
      m.Subject <- "Przypomnienie linku edycji zgłoszenia na FIT";
      m.To <- email;
      m.From <- "FIT XVIII <fit18@ii.uni.wroc.pl>";
      m.Body <- str + "\n\n";
      System.Web.Mail.SmtpMail.Send (m);

      FormTemplate <- XmlTemplate ("fit/message.xml");
      FormTemplate.SetText ("msg", "Przypomnienie wysłano.");
    }
  }

  kill_submission () : void
  {
    if (get_val (PostVars, "kill_it") == "") {
      FormTemplate <- XmlTemplate ("fit/error.xml");
      FormTemplate.SetText ("msg", "Aby usunąć zgłoszenie zaznacz checkbox.");
    } else {
      submissions.Remove (get_val (PostVars, "id2"));
      serialize ();
      FormTemplate <- XmlTemplate ("fit/message.xml");
      FormTemplate.SetText ("msg", "Zgłoszenie usunięto.");
    }
  }

  static cycle_backup () : void
  {
    for (mutable i <- 49; i >= 0; i <- i - 1) {
      try {
        System.IO.File.Delete (sprintf ("fit/data/data.xml.%d", i + 1))
      } catch { _ : System.Exception => () };
      try {
        System.IO.File.Move (sprintf ("fit/data/data.xml.%d", i),
                             sprintf ("fit/data/data.xml.%d", i + 1))
      } catch { _ : System.Exception => () };
    };
    try {
      System.IO.File.Move ("fit/data/data.xml", "fit/data/data.xml.0");
    } catch { _ : System.Exception => () };
  }

  static serialize () : void
  {
    def doc = XmlDocument ();
    def n = doc.CreateElement ("submissions");
    ignore (doc.AppendChild (n));
    def add (_, subm : Submission) {
      ignore (n.AppendChild (subm.serialize (doc)))
    };
    lock (submissions) {
      cycle_backup ();
      submissions.Iter (add);
      doc.Save ("fit/data/data.xml");

      n.SetAttribute ("secret", secret_password);
      def reader = list_xsl.Transform (n, null, (null : XmlResolver));
      def doc' = XmlDocument ();
      doc'.XmlResolver <- null;
      doc'.Load (reader);
      list_xml <- doc';
    }
  }

  static unserialize () : void
  {
    def doc = XmlDocument ();
    doc.Load ("fit/data/data.xml");
    def add (n : XmlNode) {
      when (n != null) {
        when (n.NodeType == XmlNodeType.Element) {
          def subm = Submission ();
          subm.unserialize (n);
          subm.store ();
        };
        add (n.NextSibling)
      }
    };
    add (doc.DocumentElement.FirstChild);
  }

  mutable admin_mode : bool;
  
  override protected virtual Run () : void
  {
    when (PageName.StartsWith (secret_password)) {
      admin_mode <- true;
      PageName <- PageName.Substring (secret_password.Length)
    };

    match (PageName) {
      | "/submission" => submission (false); serialize ()
      | "/submission-edit" => submission (true); serialize ()
      | "/edit" => edit ()
      | "/submission_form" => submission_form ()
      | "/list" when admin_mode => list_data ()
      | "/remaind" => remaind ()
      | "/kill_submission" => kill_submission ()
      | _ => main ()
    }
  }

  static this ()
  {
    list_xsl <- XslTransform ();
    list_xsl.Load ("fit/display-table.xsl", null);

    def f = System.IO.File.OpenText ("fit/password");
    secret_password <- f.ReadLine ();
    f.Close ();
    
    submissions <- Hashtable (1000);
    try {
      unserialize ()
    } catch {
      | _ : System.IO.FileNotFoundException => ()
    };
    
    serialize ();
  }
}


} // end Sioux
