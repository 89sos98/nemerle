open Nemerle.Compiler;
open Nemerle.Compiler.Util;

namespace Nemerle.Compiler {

  class ICE extends System.Exception
    {
      field msg : string;
      method this (m : string) = this#msg <- m;
    }

  class Recovery extends System.Exception
    {
      method this () {}
    }

  class Util 
    {
      value ref current_id : int;
      fun next_id () : int {
        current_id <- current_id + 1;
        current_id
      }

      fun ('a) ice (msg : string) : 'a = raise ICE(msg);
      fun ('a) ice () : 'a = raise ICE("(see backtrace)");

      fun ('a) locate (l : Location, f : void -> 'a) : 'a
        {
          Location_stack.push(l);
          try f() finally Location_stack.pop()
        }
        
    }
  
  class Message 
    {
      fun location_to_string (l : Location) : string =
        if l == null then
          "(no location)"
        else
          l#file + ":" + string_of_int(l#line) + ":" + 
          string_of_int(l#column);

      fun report (l : Location, m : string) : void =
        let l' =
          if l == null then Location_stack.top()
          else l
        in print_endline (Message.location_to_string(l') + ": " + m);

      fun error (l : Location, m : string) : void =
        Message.report (l, "error: " + m);
        
      fun error (m : string) : void =
        Message.report (null, "error: " + m);

      fun ('a) fatal_error (l : Location, m : string) : 'a {
        Message.error(l, m);
        raise Recovery()
      }
      
      fun ('a) fatal_error (m : string) : 'a {
        Message.error(m);
        raise Recovery()
      }

      // FIXME location stack
    }

    class Location_stack
      {
        value ref s : list (Location);
        
        fun push (l : Location) : void =
          if l == null then ice() else
          Location_stack.s <- Cons(l, Location_stack.s);

        fun pop () : void =
          match Location_stack.s with [
            | Nil => Util.ice()
            | Cons(_, ?t) => Location_stack.s <- t
          ];

        fun top () : Location =
          match Location_stack.s with [
            | Nil => Location("?", 0, 0)
            | Cons(?h, _) => h
          ];

        fun this () { Location_stack.s <- Nil(); }
      }
  
}
