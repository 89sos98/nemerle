using Nemerle.Collections.List;
using Nemerle.Utility.NString;
using SC=System.Console;
using System.Text.RegularExpressions.Regex;
  
namespace Nemerle.Evaluation.Interpreter
{
  public module Internals
  {
    interpassembly : string = System.Reflection.Assembly.GetAssembly
                              (typeof (Internals)).Location;

    mutable @using = "";
    mutable usingparsed : list [option [string] * string] = [];
    mutable @ref = "";
    mutable refparsed : list [string] = [interpassembly];
    mutable ps1 = "- ";
    mutable ps2 = "= ";
    mutable prompt : string = ps1;
  
    public Using : string {
      get { @using }
      set { 
        @using = value;
  
        def tmpusing = Split (Replace (@using, @"\s", ""), array [',']);
        def newusing = FoldLeft (tmpusing, [], fun (x, acc) {
          match (Split (x, array ['='])) {
            | [h] => (None (), h) :: acc
            | [h, t] => (Some (h), t) :: acc
            | _ => assert (false)
          }
        });
  
        usingparsed = newusing;
      }
    }
  
    public UsingParsed : list [option [string] * string] {
      get { usingparsed }
    }
  
    public Ref : string {
      get { @ref }
      set { 
        @ref = value;
        refparsed = interpassembly ::
                    Split (Replace (@ref, @"\s", ""), array [',']);
      }
    }
  
    public RefParsed : list [string] {
      get { refparsed }
    }
  
    public PS1 : string {
      get { ps1 }
      set { ps1 = value }
    }
  
    public PS2 : string {
      get { ps2 }
      set { ps2 = value }
    }
  
    public Prompt : string {
      get { prompt }
      set { prompt = value }
    }
  
    public Help : void {
      get { 
        SC.WriteLine ("Help\t-\tPrint this help.");
        SC.WriteLine ("Ref\t-\tLink specified assemblies.\n\t\tex. Ref = "
                      "\"Nemerle.dll, Nemerle.Compiler.dll\"");
        SC.WriteLine ("PS1\t-\tSet primary prompt.\n\t\tex. PS1 = \">>> \"");
        SC.WriteLine ("PS2\t-\tSet secondary prompt.\n\t\tex. PS2 = \"... \"");
        SC.WriteLine ("\nNote: All these properties reside in the\n"
                      "      Nemerle.Evaluation.Interpreter.Internals\n"
                      "      namespace, which is open when using the default\n"
                      "      ~/.nemerlish_profile file.");
        SC.WriteLine ("\nYou can also invoke a command in a subshell with "
                      "\"!command;;\",\nor simply type \"!;;\" to run the "
                      "default shell.\n");
        SC.WriteLine ("Use ^d (ctrl-d) on an empty line to quit.\n")
      }
    }
  }
}
