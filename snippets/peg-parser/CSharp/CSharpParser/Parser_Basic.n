using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Literals

    //nullLiteral    : Literal = "null"S;
    nullLiteral(_null : NToken, _ : NToken) : Literal
    {
      Literal.Null()
    }

    //booleanLiteral : Literal = ("true" / "false")S;
    booleanLiteral(val : NToken, _ : NToken) : Literal
    {
      Literal.Boolean(bool.Parse(val.GetText()))
    }

    //integerTypeSuffix         : string  = "UL" / "ul" / "uL" / "Ul" / "LU" / "lu" / "Lu" / "lU" / "U" / "u" / "L" / "l";
    integerTypeSuffix(suffix : NToken) : string
    {
      suffix.GetText()
    }

    //decimalIntegerLiteral     : Literal = decimalDigit+ integerTypeSuffix?;
    decimalIntegerLiteral(decimalDigits       : SCG.List[NToken],
                          integerTypeSuffix   : option[VToken[string]]) : Literal
    {
      def val = ulong.Parse(decimalDigits.FoldChars()); // TODO: handle exception
      Literal.Integer(val, false, integerTypeSuffix.WithDefault(""))
    }

    //hexadecimalIntegerLiteral : Literal = ("0x" / "0X") hexDigit+ integerTypeSuffix?;
    hexadecimalIntegerLiteral(_0x               : NToken,
                              hexDigits         : SCG.List[NToken],
                              integerTypeSuffix : option[VToken[string]]) : Literal
    {
      def val = ulong.Parse(hexDigits.FoldChars(), System.Globalization.NumberStyles.HexNumber); // TODO: handle exception
      Literal.Integer(val, true, integerTypeSuffix.WithDefault(""))
    }

    //integerLiteral            : Literal = (hexadecimalIntegerLiteral / decimalIntegerLiteral) s;
    integerLiteral(opt : VToken[Literal], _ : NToken) : Literal
    {
      opt.Value
    }

    //realTypeSuffix  : string  = "F" / "f" / "D" / "d" / "M" / "m";
    realTypeSuffix(suffix : NToken) : string
    {
      suffix.GetText()
    }

    //exponentPart    : string  = ("E" / "e") ("-" / "+")? decimalDigit+;
    exponentPart(_e             : NToken,
                 sign           : NToken,
                 decimalDigits  : SCG.List[NToken]) : string
    {
      sign.GetText() + decimalDigits.FoldChars()
    }

    //realLiteral_1   : Literal = decimalDigit* "." decimalDigit+ exponentPart? realTypeSuffix?;
    realLiteral_1(mantissa1       : SCG.List[NToken],
                  _dot            : NToken,
                  mantissa2       : SCG.List[NToken],
                  exponent        : option[VToken[string]],
                  realTypeSuffix  : option[VToken[string]]) : Literal
    {
      def mantissa = mantissa1.FoldChars() + "." + mantissa2.FoldChars();
      def exponent = exponent.WithDefault("");
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(mantissa, exponent, suffix)
    }

    //realLiteral_2   : Literal = decimalDigit+ exponentPart realTypeSuffix?;
    realLiteral_2(mantissa        : SCG.List[NToken],
                  exponent        : VToken[string],
                  realTypeSuffix  : option[VToken[string]]) : Literal
    {
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(mantissa.FoldChars(), exponent.Value, suffix)
    }

    //realLiteral_3   : Literal = decimalDigit+ realTypeSuffix;
    realLiteral_3(mantissa        : SCG.List[NToken],
                  realTypeSuffix  : VToken[string]) : Literal
    {
      Literal.Real(mantissa.FoldChars(), "", realTypeSuffix.Value)
    }

    //realLiteral     : Literal = (realLiteral_1 / realLiteral_2 / realLiteral_3) s;
    realLiteral(opt : VToken[Literal], _ : NToken) : Literal
    {
      opt.Value
    }

    //unicodeEscapeSequence_u   : char  = "\\u" hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_u(_u : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : char
    {
      def x = int.Parse(
        System.Text.StringBuilder()
        .Append(d1.Head())
        .Append(d2.Head())
        .Append(d3.Head())
        .Append(d4.Head())
        .ToString(),
        System.Globalization.NumberStyles.HexNumber);
      x :> char
    }

    //unicodeEscapeSequence_U   : char  = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_U(_U : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken,
                                         d5 : NToken, d6 : NToken, d7 : NToken, d8 : NToken) : char
    {
      def x = int.Parse(
        System.Text.StringBuilder()
        .Append(d1.Head())
        .Append(d2.Head())
        .Append(d3.Head())
        .Append(d4.Head())
        .Append(d5.Head())
        .Append(d6.Head())
        .Append(d7.Head())
        .Append(d8.Head())
        .ToString(),
        System.Globalization.NumberStyles.HexNumber);
      x :> char
    }

    //unicodeEscapeSequence     : char  = unicodeEscapeSequence_u / unicodeEscapeSequence_U;
    unicodeEscapeSequence(opt : VToken[char]) : char
    {
      opt.Value
    }

    //hexadecimalEscapeSequence : char  = "\\x" hexDigit hexDigit? hexDigit? hexDigit?;
    hexadecimalEscapeSequence(_x : NToken, d1 : NToken, d2 : option[NToken], d3 : option[NToken], d4 : option[NToken]) : char
    {
      def x = int.Parse(
        [d2, d3, d4]
          .FoldLeft(
            System.Text.StringBuilder().Append(d1.Head()),
            (item, sb) => match(item) {
              | Some(d) => sb.Append(d.Head())
              | _ => sb
            })
          .ToString(),
        System.Globalization.NumberStyles.HexNumber);
      x :> char
    }

    //simpleEscapeSequence      : char  = "\\'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
    simpleEscapeSequence(seq : NToken) : char
    {
      match(seq.GetText()) {
        | "\\'"     => '\''
        | "\\\""  => '\"'
        | "\\\\"  => '\\'
        | "\\0"   => '\0'
        | "\\a"   => '\a'
        | "\\b"   => '\b'
        | "\\f"   => '\f'
        | "\\n"   => '\n'
        | "\\r"   => '\r'
        | "\\t"   => '\t'
        | "\\v"   => '\v'
        | s => if(s.Length > 0) s[0] else '\0'
      }
    }

    //singleCharacter           : char  = !newLineCharacter !"'" !"\\" any;
    singleCharacter(_NOT_newLineCharacter : NToken,
                    _NOT_q                : NToken,
                    _NOT_slash_slash      : NToken,
                    any                   : NToken) : char
    {
      any.Head()
    }

    //character                 : char  = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleCharacter;
    character(opt : VToken[char]) : char
    {
      opt.Value
    }

    //characterLiteral  : Literal = "'" character "'" s;
    characterLiteral(_lquot : NToken, character : VToken[char], _rquot : NToken, _ : NToken) : Literal
    {
      Literal.Char(character.Value)
    }

    //singleRegularStringLiteralCharacter : char    = !newLineCharacter !"\"" !"\\" any;
    singleRegularStringLiteralCharacter(_NOT_newLineCharacter : NToken,
                                        _NOT_q                : NToken,
                                        _NOT_slash_slash      : NToken,
                                        any                   : NToken) : char
    {
      any.Head()
    }

    //regularStringLiteralCharacter       : char    = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleRegularStringLiteralCharacter;
    regularStringLiteralCharacter(opt : VToken[char]) : char
    {
      opt.Value
    }

    //regularStringLiteral                : Literal = "\"" regularStringLiteralCharacter* "\"";
    regularStringLiteral(_lquot : NToken, chars : SCG.List[VToken[char]], _rquot : NToken) : Literal
    {
      Literal.String(chars.FoldChars(), false)
    }

    //quoteEscapeSequence                   : char    = "\"\"";
    quoteEscapeSequence(_slash_slash : NToken) : char
    {
      '"'
    }

    //singleVerbatimStringLiteralCharacter  : char    = !"\"" any;
    singleVerbatimStringLiteralCharacter(_NOT_slash_q : NToken, any : NToken) : char
    {
      any.Head()
    }

    //verbatimStringLiteralCharacter        : char    = quoteEscapeSequence / singleVerbatimStringLiteralCharacter;
    verbatimStringLiteralCharacter(opt : VToken[char]) : char
    {
      opt.Value
    }

    //verbatimStringLiteral                 : Literal = "@\"" verbatimStringLiteralCharacter* "\"";
    verbatimStringLiteral(_at_lquot : NToken, chars : SCG.List[VToken[char]], _rquot : NToken) : Literal
    {
      Literal.String(chars.FoldChars(), true)
    }

    //stringLiteral                         : Literal = (regularStringLiteral / verbatimStringLiteral) s;
    stringLiteral(opt : VToken[Literal], _ : NToken) : Literal
    {
      opt.Value
    }

    //literal : Literal = booleanLiteral / nullLiteral / realLiteral / integerLiteral  / characterLiteral / stringLiteral;
    literal(opt : VToken[Literal]) : Literal
    {
      opt.Value
    }

    #endregion

    #region Identifiers

    //identifier : Identifier = !keyword "@"? identifierBody s;
    identifier( _keyword        : NToken,
                _at             : NToken,
                identifierBody  : NToken,
                _               : NToken) : Identifier
    {
      Identifier(GetLocation(_at, identifierBody), identifierBody.GetText())
    }

    //qualifiedIdentifier   : Expr        = identifier ("::"s identifier)? typeArgumentList? ("."s identifier typeArgumentList?)*;
    qualifiedIdentifier(identifierOrAlias   : VToken[Identifier],
                        identifier          : option[NToken * NToken * VToken[Identifier]],
                        typeArgumentList    : option[VToken[list[TypeRef]]],
                        tail                : SCG.List[NToken * NToken * VToken[Identifier] * option[VToken[list[TypeRef]]]]) : Expr
    {
      def make_part(id, args) {
        def part = Expr.Ref(id.Value);
        match(args) {
          | Some(args)  => Expr.TypeArguments(part, args.Value)
          | _           => part
        }
      }

      mutable chain = match(identifier) {
        | Some((_, _, identifier)) => Expr.Member(Expr.Alias(identifierOrAlias.Value), make_part(identifier, typeArgumentList))
        | _ => make_part(identifierOrAlias, typeArgumentList)
      }

      foreach((_, _, id, args) in tail)
        chain = Expr.Member(chain, make_part(id, args));

      chain
    }

    #endregion

    #region Types

    //predefinedType : TypeName = ("sbyte" / "byte"   / "short" / "ushort"  / "int"   / "uint"
    //                            / "long" / "ulong"  / "char"  / "decimal" / "void"  / "bool"
    //                            / "string" / "dynamic" / "object" / "float" / "double" )S;
    predefinedType(builtIn : NToken, _ : NToken) : TypeRef
    {
      TypeRef.BuiltIn(builtIn.GetText())
    }

    //typeName       : TypeRef  = qualifiedIdentifier;
    typeName(qualifiedIdentifier : VToken[Expr]) : TypeRef
    {
      TypeRef.Name(qualifiedIdentifier.Value)
    }

    //dimSeparators             : int = (","s)*;
    dimSeparators(commaList : SCG.List[NToken * NToken]) : int
    {
      commaList.Count
    }

    //rankSpecifier             : TypeSpecifier = "["s dimSeparators "]"s;
    rankSpecifier(_lparen       : NToken, _ : NToken,
                  dimSeparators : VToken[int],
                  _rparen       : NToken, _ : NToken) : TypeSpecifier
    {
      TypeSpecifier.Array(dimSeparators.Value + 1)
    }

    //pointerSpecifier          : TypeSpecifier = "*"s;
    pointerSpecifier(_asterisk : NToken, _ : NToken) : TypeSpecifier
    {
      TypeSpecifier.Pointer()
    }

    //genericDimensionSpecifier : int = "<"s dimSeparators ">"s;
    genericDimensionSpecifier(_lparen       : NToken, _ : NToken,
                              dimSeparators : VToken[int],
                              _rparen       : NToken, _ : NToken) : int
    {
      dimSeparators.Value
    }

    //typeSpecifier             : TypeSpecifier = rankSpecifier / pointerSpecifier;
    typeSpecifier(opt : VToken[TypeSpecifier]) : TypeSpecifier
    {
      opt.Value
    }

    //anyNonArrayType           : TypeRef     = (typeName / predefinedType) genericDimensionSpecifier?;
    anyNonArrayType(baseType                  : VToken[TypeRef],
                    genericDimensionSpecifier : option[VToken[int]]) : TypeRef
    {
      match(genericDimensionSpecifier) {
        | Some(genericDimensionSpecifier) => TypeRef.Generic(baseType.Value, genericDimensionSpecifier.Value)
        | _ => baseType.Value
      }
    }

    //anyType                   : TypeRef     = anyNonArrayType typeSpecifier*;
    anyType(anyNonArrayType   : VToken[TypeRef],
            typeSpecifiers    : SCG.List[VToken[TypeSpecifier]]) : TypeRef
    {
      mutable acc = anyNonArrayType.Value;
      foreach(ty_spec in typeSpecifiers) {
        acc = match(ty_spec.Value) {
          | TypeSpecifier.Array(dim)  => TypeRef.Array(acc, dim)
          | TypeSpecifier.Pointer()   => TypeRef.Pointer(acc)
        }
      }
      acc
    }

    //typeArgument              : TypeRef     = anyType;
    typeArgument(opt : VToken[TypeRef]) : TypeRef
    {
      opt.Value
    }

    //typeArguments             : TypeRefList = typeArgument (","s typeArgument)*;
    typeArguments(head : VToken[TypeRef],
                  tail  : SCG.List[NToken * NToken * VToken[TypeRef]]) : TypeRefList
    {
      head.Cons(tail)
    }

    //typeArgumentList          : TypeRefList = "<"s typeArguments ">"s;
    typeArgumentList( _lparen       : NToken, _ : NToken,
                      typeArguments : VToken[TypeRefList],
                      _rparen       : NToken, _ : NToken) : TypeRefList
    {
      typeArguments.Value
    }

    #endregion
  }
}