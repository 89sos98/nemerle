using System;
using System.Collections;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Dom;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Completion2;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public class Resolver : IResolver {

        public Resolve(_expressionResult : ExpressionResult, _parseInfo : ParseInformation, _fileContent : string) : ResolveResult {
            ResolveResult(null, null, null)
        }

        public CtrlSpace(caretLine : int, caretColumn : int, parseInfo : ParseInformation, _fileContent : string, _context : ExpressionContext) : ArrayList {
            def get_completion_data(source) {
                // direct invoke of Completion method can cause dead-lock with main thread
                def async = source.BeginCompletionAsync(caretLine, caretColumn);
                while(!async.IsCompleted) {
                    Application.DoEvents();
                }
                source.EndCompletionAsync(async)
            }

            def convert_completion_data(data) {
                def result = ArrayList();
                def append(x) { _ = result.Add(x); }

                def stub_class = DefaultClass(DefaultCompilationUnit.DummyCompilationUnit, "x");

                foreach(ci in data) {
                    match(ci.GlyphType :> GlyphType) {
                        | GlyphType.Class
                        | GlyphType.Struct
                        | GlyphType.Enum
                        | GlyphType.Variant
                        | GlyphType.VariantOption
                        | GlyphType.Interface =>
                            append(DefaultClass(DefaultCompilationUnit.DummyCompilationUnit, ci.DisplayName))

                        | GlyphType.Field     =>
                            append(DefaultField(stub_class, ci.DisplayName))

                        | GlyphType.Method
                        | GlyphType.Function
                        | GlyphType.Macro 
                        | GlyphType.Operator =>
                            append(DefaultMethod(stub_class, ci.DisplayName))

                        | GlyphType.Property =>
                            append(DefaultProperty(stub_class, ci.DisplayName))

                        | GlyphType.Namespace
                        | _  =>
                            append(ci.ToString())
                    }
                }
                result
            }

            match(parseInfo.MostRecentCompilationUnit) {
                | cu is NemerleCompilationUnit =>
                    def data = get_completion_data(cu.Source);
                    convert_completion_data(data)
                | _ => ArrayList()
            }
        }

    }

}