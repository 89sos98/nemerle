using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;

namespace CSharpParser
{
  public module Utils
  {
    public Head(this t : NToken) : char
    {
      t.Text[t.StartPos]
    }

    public WithDefault[T](this x : option[VToken[T]], defaultValue : T) : T
    {
      match(x) {
        | Some(x) => x.Value
        | _ => defaultValue
      }
    }

    public Cons[T](this head : VToken[T], tail : SCG.List[NToken * NToken * VToken[T]]) : list[T]
    {
      head.Value :: NList.ToList(tail).Map((_, _, x) => x.Value)
    }

    public Cons(this head : VToken[Expr], tail : SCG.List[VToken[Identifier] * VToken[Expr]]) : Expr
    {
      mutable chain = head.Value;
      foreach((op, expr) in tail)
        chain = Expr.BinaryOperator(chain.Location + expr.Value.Location, chain, expr.Value, op.Value);
      chain
    }

    public Values[T](this lst : SCG.List[VToken[T]]) : list[T]
    {
      NList.ToList(lst).Map(_.Value)
    }

    public HexDigit(this t : NToken) : int
    {
      unchecked {
        def c = t.Text[t.StartPos];
        if('0' <= c && c <= '9')
          c :> int - '0' :> int
        else if('a' <= c && c <= 'f')
          c :> int - 'a' :> int + 10
        else if('A' <= c && c <= 'F')
          c :> int - 'A' :> int + 10
        else 
          0
      }
    }
  }
}