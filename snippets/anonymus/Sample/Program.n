using System;
using System.Console;
using Nemerle.Utility;

using Nemerle.Extensions;

namespace Sample {

    module Bar {
        public GetObject(a : string, b : int) : IAnonymous {
            new (a = a, b = b)    
        }
    }

    module Program {
    
        Main() : void {
            //this is syntax:
            def t = new (f1 = "asdasdf", f2 = 10, f3 = array[1.0, 2.0]);
            WriteLine($"t is: $t");
            
            
            //more complex sample
            def h = new (f1 = "qwerqwe", f2 = new(x = "bla"));
            WriteLine($"h is: $h");


            //and more ...
            def g = new (f1 = "qwerqwe", f2 = new(x = 10.0f, f2 = new(x = "bla"), f3 = h));
            WriteLine($"g is: $g");
            
            //trivial form
            def trivial = new ();
            WriteLine($"trivial is $trivial, its type $(trivial.GetType())");
            
            
            //class cache
            def a1 = new (x1 = "qwerqwe", x2 = new(x = "bla"));
            def a2 = new (x1 = "ewdzffs", x2 = new(x = "tydfg"));
            WriteLine($"a1.GetType() == a2.GetType(), true ? $(a1.GetType().Equals(a2.GetType()))");
            WriteLine(a1 == a2);
            WriteLine(a1 != a2);

            //interop with external assembly
            def o1 = Foo.GetObject("str", 10);
            def o2 = Bar.GetObject("str", 10);
            def o3 = Bar.GetObject("str", 11);
            def o4 = Foo.GetObject.[string, int]("str", 10);
            WriteLine($"o1 == o2, true ? $(o1.Equals(o2))");
            WriteLine($"o1 == o3, false ? $(o1.Equals(o3))");
            WriteLine($"o1 == o4, true ? $(o1.Equals(o4))");
            
            // TODO: Fix tuple conversion.
            //def tup = new (t = "asdfsd", h = 123) :> (string * int);
            //WriteLine(tup);

            WriteLine("Press any key...");
            _ = ReadKey(true);
        }
    }

}