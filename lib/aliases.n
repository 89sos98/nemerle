(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

namespace Nemerle.Core
{
  public class Aliases
  {
    public type int = System.Int32;
    public type float = System.Single;
    public type string = System.String;
    public type object = System.Object;
    public type bool = System.Boolean;
    public type char = System.Char;
   
    public static true : bool = extern "true";
    public static false : bool = extern "false";

    public static `+` (x : int, y : int) : int = extern "%op+";
    public static `-` (x : int, y : int) : int = extern "%op-";
    public static `*` (x : int, y : int) : int = extern "%op*";
    public static `%` (x : int, y : int) : int = extern "%op%";
    public static `/` (x : int, y : int) : int = extern "%op/";

    public static `<` (x : int, y : int) : bool = extern "%op<";
    public static `>` (x : int, y : int) : bool = extern "%op>";
    public static 'a `==` (x : 'a, y : 'a) : bool = extern "%op==";
    public static 'a `!=` (x : 'a, y : 'a) : bool = extern "%op!=";
    public static `>=` (x : int, y : int) : bool = extern "%op>=";
    public static `<=` (x : int, y : int) : bool = extern "%op<=";
    
    public static `<` (x : char, y : char) : bool = extern "%op<";
    public static `>` (x : char, y : char) : bool = extern "%op>";
    public static `>=` (x : char, y : char) : bool = extern "%op>=";
    public static `<=` (x : char, y : char) : bool = extern "%op<=";
    
    public static `<` (x : string, y : string) : bool = extern "%op<";
    public static `>` (x : string, y : string) : bool = extern "%op>";
    public static `>=` (x : string, y : string) : bool = extern "%op>=";
    public static `<=` (x : string, y : string) : bool = extern "%op<=";
    
    public static `-` (x : int) : int = extern "%op-";
    public static `!` (x : bool) : bool = extern "%op!";

    public static `+` (x : string, y : string) : string = extern "%op+";

    public static 'a where 'a :> System.Enum `+` (x : 'a, y : 'a) : 'a = extern "%op|";

    public static print_string (s : string) : void = extern "System.Console.Write";
    public static print_endline (s : string) : void = extern "System.Console.WriteLine";
    public static compare_strings (s1 : string, s2 : string) : int 
        = extern "System.String.CompareOrdinal";
    public static string_of_int (_ : int) : string = extern "System.Convert.ToString";

    public static read_char () : int = extern "System.Console.Read";
    public static read_line () : string = extern "System.Console.ReadLine";

    public static 'a ignore (_ : 'a) : void {}
  }
}
