using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpToNemerle
{
  public macro TestMacro()
  {
    <[ () ]>
  }
  
  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Field)]    
  public macro MacroAttribute(tb : TypeBuilder,b : ParsedField)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Property)]    
  public macro MacroAttribute(tb : TypeBuilder,b : ParsedProperty)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Event)]    
  public macro MacroAttribute(tb : TypeBuilder,b : ParsedEvent)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Method)]    
  public macro MacroAttribute(tb : TypeBuilder,b : ParsedMethod)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Class)]    
  public macro MacroAttribute(tb : TypeBuilder)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Parameter)]    
  public macro MacroAttribute(tb : TypeBuilder, b : ParsedParameter)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance,MacroTargets.Class)]    
  public macro MacroAttribute2(tb : TypeBuilder,val : string)
  {
  }
  
}
