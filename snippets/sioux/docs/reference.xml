<?xml version="1.0" encoding="utf-8"?>
<page subtitle="Sioux Reference Manual">

  <section title="1. Introduction" anchor="intro">
    <p>
    This document describes classes from <b>Sioux</b> namespace and <b>Nemerle.Xml</b> namespace.
    </p>
  </section>
  <section title="2. Sioux namespace" anchor="sioux">

  <!-- COOKIE CLASS =========================================================================== -->

    <subsection title="2.1 Cookie class" anchor="cookie">
    <p>
    Creates a cookie, a small amount of information sent by a web application  to a Web browser, saved by the browser, 
    and later sent back to the server.
    </p>
    
    <p>
    <b>Constructors:</b>
    </p>

    <enumerate>
    <enum title="public this (name : string, value : string)">
    constructs a cookie with given name and value
    </enum>
    <enum title="public this (name : string, value : string, expires : DateTime)">
    constructs a cookie with given name, value and expiration date
    </enum>
    </enumerate>
    

    <p>
    <b>Public properties:</b>
    </p>
    

    <enumerate>
    <enum title="public Name : string">
    <b>get</b> - returns the name of the cookie. The name cannot be changed after creation.
    </enum>
    <enum title="public Value : string">
    <b>set</b> - assigns a new value to a cookie after the cookie is created <br/> <b>get</b> - return value of cookie
    </enum>
    <enum title="public Path : string">
    <b>set</b> - setting a virtual path of cookie to which client should return cookie<br/> <b>get</b> - getting a path of cookie 
     to which client should return cookie
    </enum>
    <enum title="public Domain : string">
    <b>set</b> - specifies a path for the cookie to which the client should return the cookie <br/> 
    <b>get</b> - returns the domain name set for this cookie
    </enum>
    <enum title="public Expires : DateTime">
    <b>set</b> - sets the expiration date and time for cookie <br/> 
    <b>get</b> - gets the expiration date and time for cookie 
    </enum>
    <enum title="public Secure : bool">
    <b>set</b> - sets a value indicating the browser whether the cookie should only be sent using a secure protocol, 
        such as HTTPS or SSL. <br/> 
    <b>get</b> - gets ----||---- 
    </enum>
    <enum title="public Header : string * string">
    <b>get</b> - get a header pair representing cookie, where first elem is header name and second is header value
    </enum>
    </enumerate>
    
    <p>
    <b>Public methods:</b>
    </p>    
    <enumerate>
    <enum title="public override ToString() : string">
     Returns string representation of cookie
    </enum>
    </enumerate>
    </subsection> 

  <!-- SESSION CLASS ====================================================================== -->

    <subsection title="2.2 Session class" anchor="session">
    <p>
    Provides a way to identify a user across more than one page request or visit to a Web site and to store 
    information about that user.
    </p>
    
    <p>
    <b>Public properties:</b>
    </p>    
    
    <enumerate>
    <enum title="public SessionID : string">
    <b>get</b> - returns a string containing the unique identifier assigned to this session.
    </enum>

    <enum title="public Timeout : int">
    <b>set</b> - specifies the time, in minutes, between client requests before Sioux will invalidate this session.<br/>
    <b>get</b> - returns the maximum time interval, in minutes, that sioux will keep this session open between 
      client accesses. After this interval, sioux will invalidate the session. A -1 time indicates the session 
      should never timeout.
    </enum>

    <enum title="public CreationTime : DateTime">
    <b>get</b> - returns time when session was created
    </enum>

    <enum title="public LastAccesedTime : string">
    <b>get</b> - returns time when client last sent request associated with session
    </enum>

    <enum title="public IsNew : bool">
    <b>get</b> - returns true when session was created with last client request 
    </enum>

    <enum title="public IsValid : bool">
    <b>get</b> - gets a value indicating if session is stall valid 
    </enum>

    <enum title="public Attributes : list &lt;string * object &gt;">
    <b>get</b> - returns a list of all attributes associated with session, where first element of pair is attribute name, and second 
    is attribute
    </enum>
    </enumerate>

    <p>
    <b>Public methods:</b>
    </p>    
    <enumerate>
    <enum title="public Invalidate() : void">
      Invalidates this session
    </enum>
    
    <enum title="public AddAttribute(name : string,attribute : object) : void">
      Adds attribute to session using specified name
    </enum>

    <enum title="public RemoveAttribute(name : string) : void">
      Removes attribute with specified name from session 
    </enum>

    <enum title="public ContainsAttribute(name : string) : bool">
      Returns true if session contains attribute with given name, else returns false
    </enum>

    <enum title="public GetAttribute(name : string) : option &lt;object&gt;">
      Returns Some(attribute) if session contains attribute with specified name, else returns None
    </enum>

    </enumerate>

    </subsection>    

    <!-- APPLICATION CLASS ====================================================================== -->

    <subsection title="2.3 Application class" anchor="app">
    <p>
    Class describing Nemerle web application.
    </p>

    <p>
    <b>Public methods:</b>
    </p>    
    <enumerate>
    <enum title="public virtual HandleRequest (request : Request , response : Response) : void">
      Handles an HTTP request. Recognizes type of request. Puts get and post variables into hastables, finaly runs application
      (<b> DoPost()</b> or <b>DoGet</b>() method) and writes response.
    </enum>
    
    <enum title="public ReportInternalError &lt;'a&gt; (msg : string) : &lt;'a&gt;">
    Reports internal error and dies.
    </enum>

    </enumerate>
    
    <p>
    <b>Protected methods:</b>
    </p>    
    <enumerate>
    <enum title="protected virtual DoGet()">
    Called by Sioux to handle GET request.
    </enum>

    <enum title="protected virtual DoPost()">
    Called by Sioux to handle POST request.
    </enum>

    </enumerate>

    <p>
    <b>Protected fields:</b>
    </p>    
    <enumerate>
    <enum title="protected mutable PageName : string">
    Name of page that is requested.
    </enum>

    <enum title="protected mutable FormTemplate : option &lt;XmlTemplate&gt;">
    XmlTemplate object to be sent to the response stream.
    </enum>

    </enumerate>

    </subsection>

    <!-- REQUEST CLASS ====================================================================== -->

    <subsection title="2.4 Request class" anchor="request">
    <p>
    Class that parses request stream and provides information about HTTP request.
    </p>

    <p>
    <b>Public properties:</b>
    </p>    
    <enumerate>

    <enum title="public RequestInfo : RequestInfo">
    <b>get</b> - returns request info associated with this instance
    </enum>

    <enum title="public RequestUri : string">
    <b>get</b> - returns request uri as a string
    </enum>

    <enum title="public Cookies : list &lt;Cookie&gt;">
    <b>get</b> - returns list of cookies sent with this request
    </enum>

    <enum title="public Protocol : string">
    <b>get</b> - returns request's protocol
    </enum>

    </enumerate>

    <p>
    <b>Public methods:</b>
    </p>    
    <enumerate>

    <enum title="public GetCookie (name : string) : option &lt;Cookie&gt;">
    Returns Some(Cookie), if browser sent cookie with given name, else returns None.
    </enum>

    <enum title="public GetSession() : Session">
    Return session associated with this request.
    </enum>

    <enum title="public GetSession(create : bool) : Session">
    Return session associated with this request, if create is true creates new session.
    </enum>

    <enum title="public GetHeader(name  : string) : option &lt;string&gt;">
    Returns value of specified header.
    </enum>

    </enumerate>

    </subsection>

    <!-- RSPONSE CLASS ====================================================================== -->

    <subsection title="2.5 Response class" anchor="response">
    <p>
    Class representing HTTP server response.    
    </p>

    <p>
    <b>Public methods:</b>
    </p>    
    <enumerate>

    <enum title="public Write (s : string) : void">
    Writes a string to the response stream.
    </enum>
    
    <enum title="public WriteLine () : void">
    Writes a CR/LF pair to the response stream.
    </enum>

    <enum title="public WriteLine (s : string) : void">
    Writes a string followed by CR/LF pair to the response stream.
    </enum>

    <enum title="public WriteServerName () : void">
    Writes server's name to the response stream.
    </enum>

    <enum title="public WriteRedirect (url : string) : void">
    Redirects browser to given url.
    </enum>

    <enum title="public WriteInvalid () : void">
    Writes an error message concerning an invalid request    
    </enum>

    <enum title="public WriteNotFound () : void">
    Writes an error message concerning not being found.    
    </enum>

    <enum title="public WriteMimeType (file_name : string) : void">
    Writes the MIME content type header to the response stream.
    </enum>

    <enum title="public WriteXml (document : XmlDocument , content_type : string , charset : string) : void">
    Writes the contents of an XML document to the response stream.
    </enum>

    <enum title="public WriteXhtml (document : XmlDocument) : void">
    Writes the contents of an XHTML document to the response stream.
    </enum>

    <enum title="public static CheckUrl(url : string) : string">
    Checks if the url from a request is valid.
    </enum>

    <enum title="public static GetLocalFileName(url : string) : string">
    Converts an URL from request into a local file name with the path relative to the server repository.
    </enum>

    <enum title="public ServeStaticFile(url : string) : void">
    Serves a static file.
    </enum>

    <enum title="public AddHeader(name : string , value : string) : void">
    Adds a response header with given name and value.
    </enum>

    <enum title="public AddCookie(cookie : Cookie) : void">
    Adds the specified cookie to the response. This method can b called multiple times to set more than one cookie.
    </enum>

    </enumerate>
    
    </subsection>


  </section>
  <section title="3. Nemerle.Xml namespace" anchor="xml">
    <p>
    
    </p>
  </section>
</page>