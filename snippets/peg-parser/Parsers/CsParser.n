using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Peg;
using Nemerle.Utility;
using LRPEGCC;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Parsers
{
  [PegGrammar(start,
  grammar
  {  
    any                   = ['\u0000'..'\uFFFF'];
    newLine               = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
    singleLineComment     = "//" (!('\n' / '\r') any)* newLine?; // newLine необезательный так как комментарий может находиться в конце файла
    delimitedComment      = "/*" (!"*/" any)* "*/";
    comment               = singleLineComment / delimitedComment;
    spaces                = (' ' / '\t' / newLine / comment / '\u000B' / '\u000C')*;
    letter                = (['A'..'Z', 'a' .. 'z', 'А' .. 'Я', 'а' .. 'я'] / '_');
    digit                 = ['0'..'9'];
    identifierValue       = '@'? letter (letter / digit)*;
    identifier   : string = identifierValue spaces;
    
    
    //num             : int = digit spaces;
    //unaryMinus      : int = '-' spaces simplExpr;
    //parenthesesExpr : int = '(' spaces sumOrSub ')' spaces;
    //simplExpr       : int = num / parenthesesExpr / unaryMinus;
    //mulOrDiv        : int = simplExpr (('*' / '/') spaces simplExpr)*;
    //sumOrSub        : int = mulOrDiv  (('+' / '-') spaces mulOrDiv )*;
    start       : string = spaces identifier !any;
  })]
  public class CsParser : ParserBase[string]
  {
    private identifier(identifier : NToken, _spaces : NToken) : string
    {
      identifier.GetText()
    }
    
    private start(_ : NToken, identifier : VToken[string], _ : NToken) : string
    {
      identifier.Value
    }
  }
}
