/*
 * Copyright (c) 2003-2005 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.CompileTypedMethod;

using System.Reflection;

namespace Nemerle.Compiler {

module CompileTypedTree
{
  internal make_ref_type (t : System.Type) : System.Type
  {
#if _NET_2_0
    t.MakeByRefType ()
#else  
    def ty = t.Module.GetType (t.FullName + "&");
    assert (ty != null);
    ty
#endif
  }
  
  internal class CTX
  {
    public mutable current_fun : Fun_header;
    public mutable current_fun_or_loop : Fun_header;
    public mutable locals : SystemMap [int, CG_val];
    public mutable current_type : TypeBuilder;

    /** Copy constructor */
    public this (copied : CTX) {
      current_fun = copied.current_fun;
      locals = copied.locals;
      current_type = copied.current_type;
      current_fun_or_loop = copied.current_fun_or_loop
    }

    /** Empty context */
    public this (ti : TypeBuilder) {
      locals = SystemMap ();
      current_type = ti;
    }

    public CurrentSystemType : System.Type
    {
      get { current_type.GetTypeBuilder (); }
    }
  }

  internal store_local (ctx : CTX, d : LocalValue, val : CExpr) : CTX * CG_val
  {
    def var_ty = d.Type.Fix ().GetSystemType ();
    def val =
      match (val) {
        | CExpr.Nop => val
        | _ when val.SystemType.IsValueType && !var_ty.IsValueType => 
          CExpr.Cast (val, var_ty, true)
        | _ => val
      };
    // Message.Debug ($ "store_local: $d $(d.InClosure)");
      def cgv = CG_val (loc = d.loc, 
                        name = d.Name, 
                        ty = var_ty,
                        val = val);
      def ctx' = CTX (ctx);
      ctx'.locals = ctx.locals.Add (d.Id, cgv);
      (ctx', cgv)
  }

  internal box_value (body : CExpr) : CExpr 
  {
#if _GENERICS
    if (body.SystemType.IsGenericParameter || body.SystemType.IsValueType || SystemType.Void.Equals (body.SystemType))
#else  
    if (body.SystemType.IsValueType || SystemType.Void.Equals (body.SystemType))
#endif
      {
          //Message.Debug (body.ToString ());    
      CExpr.Cast (body, SystemType.Object, true)
      }
    else
      body
  }

  global_ref (_ctx : CTX, m : IMember) : CExpr {
    match (m.GetKind ()) {
      | MemberKind.Type 
      | MemberKind.Event => assert (false)

      | MemberKind.Field (f) =>
        assert (!f.IsLiteral, "reference to constant field");
        if (f.IsVolatile)
          CExpr.VolatileGlobalRef (f.GetFieldInfo ())
        else
          CExpr.GlobalRef (f.GetFieldInfo ())

      | MemberKind.Property => Util.ice ()
      | MemberKind.Method => Util.ice ()
    }
  }

  internal local_ref (ctx : CTX, d : LocalValue, _store : bool) : CExpr
  {
    if (ctx.locals.Member (d.Id)) {
      match (d.ValKind) {
        | LocalValue.Kind.FunParm (kind) 
          when kind == ParmKind.Out || kind == ParmKind.Ref =>
          def ty = make_ref_type (d.Type.Fix ().GetSystemType ());
          CExpr.Indirect (CExpr.Ref (ty, ctx.locals.Get (d.Id)))
          
        | _ =>
          CExpr.Ref (ctx.locals.Get (d.Id))
      }
    } else {
      match (d.ValKind) {
        | LocalValue.Kind.ClosurisedThisPointer => CExpr.This (ctx.CurrentSystemType)
        | _ =>
          Message.Warning ($ "undef $d = $(d.Id)");
          assert (false)
      }
    }
  }

  internal maybe_cast (_ctx : CTX, needed_type : System.Type, ex : CExpr) : CExpr
  {
#if _GENERICS
//    if (current_type.IsGenericType && !needed_type.IsGenericType &&
//        needed_type.Equals (SystemType.Object)) {
//      Message.Debug ("converting");
//      CExpr.Cast (needed_type, ex, needed_type, true)
//    }       
//    else
      ex
#else
    assert (needed_type != null);
    def current_type = ex.SystemType;
    assert (current_type != null);

    if (needed_type.Equals (SystemType.Void))
      if (current_type.Equals (SystemType.Void))
        ex
      else
        CExpr.Ignore (needed_type, ex)
    else {
/*    
// bug in MS.NET makes it return false for IField[] and IField[]         
      when (needed_type.Equals (current_type) !=
            (needed_type.FullName == current_type.FullName))
        Message.Debug (ex.loc, needed_type.Assembly.ToString () + " " + needed_type.ToString () + " " + 
                               current_type.Assembly.ToString () + " " + current_type.ToString ());
*/                               
      if (needed_type.FullName == current_type.FullName
          || (needed_type.IsAssignableFrom (current_type) && !current_type.IsValueType))
        ex
      else 
        CExpr.Cast (needed_type, ex, needed_type, true)
    }
#endif    
  }

  /**
   * Properly format list of expression before being passed in a function
   * call -- box value types, and add needed downcasts.
   */
  casted_exprs (ctx : CTX, hd : Fun_header, parms : list [CExpr]) : list [CExpr]
  {
    CompileTypedMethod.compile_parms (hd);
    // Message.Debug ($ "formals : $(hd.parms) params : $parms");
    List.Map2 (hd.parms, parms, 
      fun (v, e) { 
        maybe_cast (ctx, v.cg_val.ty, e) 
      })
  }

  with_cached (expr : CExpr, f : CExpr -> CExpr) : CExpr
  {
    match (expr) {
      | CExpr.Ref
      | CExpr.GlobalRef
      | CExpr.VolatileGlobalRef
      | CExpr.ConstructorRef
      | CExpr.MethodAddress
      | CExpr.Opcode
      | CExpr.Literal
      | CExpr.This
      | CExpr.TypeOf 
      | CExpr.Indirect (CExpr.Ref) => f (expr)

      | _ =>
        def v = CG_val (loc = Location_stack.top (),
                        name = Util.tmpname ("cached"),
                        ty = expr.SystemType,
                        val = expr);
        CExpr.Define (v, f (CExpr.Ref (v)))
    }
  }


  internal emit_delegate_ctor (ctx : CTX, m : IMethod, ps : list [Parm]) : CExpr
  {
    match (ps) {
      | [Parm where (expr = obj), Parm where (expr = TExpr.MethodAddress (meth, is_virt))] =>
        def the_method = meth.GetHandle () :> System.Reflection.MethodInfo;
        CExpr.Call (CExpr.ConstructorRef (m.GetConstructorInfo ()), 
                    [cg_expr (ctx, obj), CExpr.MethodAddress (the_method, is_virt)])
      | _ => Util.ice ()
    }
  }
  

  cg_call (ctx : CTX, is_tail : bool, ret_type : TyVar, 
           f : TExpr, ps : list [Parm]) : CExpr
  {
    def compile_parm (p : Parm) {
      def ex = cg_expr (ctx, p.expr);
      if (p.kind == ParmKind.Out || p.kind == ParmKind.Ref)
        CExpr.Address (ex)
      else
        ex
    };

    def emit_call (hd : Fun_header, callable) {
      def parms = List.Map (ps, compile_parm);
      def callable =
        match (callable) {
          | CExpr.MethodRef (e, meth, notvirt) when e.SystemType.IsValueType && 
                                         !meth.DeclaringType.IsValueType =>
            CExpr.MethodRef (CExpr.Cast (e, meth.DeclaringType, true), meth, notvirt)
          | x => x
        };
      if (hd == null) {
        def t = ret_type.Fix ().GetSystemType ();
        if (is_tail)
          CExpr.TailCall (t, callable, parms)
        else
          CExpr.Call (t, callable, parms)
      } else {
        // Message.Debug ("real casted params for " + hd.name);
        def generate_call (parms) {
          if (is_tail)
            CExpr.TailCall (callable, casted_exprs (ctx, hd, parms))
          else
            CExpr.Call (callable, casted_exprs (ctx, hd, parms))
        };
        
        // XXX!!!
        def call =
          match ((parms, hd.parms)) {
            | ([parm], _ :: _ :: _) =>
              // need to cache it, so casted_parms can untuple it
              with_cached (parm, fun (parm) { generate_call ([parm]) })
            | _ =>
              generate_call (parms)
          };
        maybe_cast (ctx, ret_type.Fix ().GetSystemType (), call)
      }
    };
    def plain_call () {
      def len = List.Length (ps);
      def imeth = get_apply_method (len);
      emit_call (imeth.GetHeader (),
                 CExpr.MethodRef (cg_expr (ctx, f), 
                 imeth.GetMethodInfo (), false))
    };
    def get_instanciated_meth (_fromty : TyVar, member_info)
    {
#if _GENERICS
      def system_ty = _fromty.Fix ().GetSystemType ();
      if (system_ty.HasGenericArguments) {
        Emit.TypeBuilder.GetMethod (system_ty, member_info)
      }
      else member_info
#else                  
      member_info            
#endif                  
    }
    def get_instanciated_cons (_fromty : TyVar, member_info)
    {
#if _GENERICS
      def system_ty = _fromty.Fix ().GetSystemType ();
      Message.Debug (system_ty.ToString ());
      if (system_ty.HasGenericArguments) {
        Emit.TypeBuilder.GetConstructor (system_ty, member_info)
      }
      else member_info
#else                  
      member_info            
#endif                  
    }
 
    match (f) {
      | TExpr.StaticRef (m) =>
        match (m.GetKind ()) {
          | MemberKind.Method (m) =>
            match (m.GetFunKind ()) {
              | FunKind.Constructor =>
                if (m.DeclaringType.IsDelegate) {
                  emit_delegate_ctor (ctx, m, ps)
                } else {
                  def cons = get_instanciated_cons (ret_type, m.GetConstructorInfo ());
                  emit_call (m.GetHeader (), CExpr.ConstructorRef (cons))
                }
                  
              | _ =>
                // GENERICS FIXME: where can I get the instanciated type?
                emit_call (m.GetHeader (), CExpr.GlobalRef (m.GetMethodInfo ()))                  
            }
          | _ => plain_call ()
        }
      | TExpr.OpCode (name) =>
        emit_call (null, CExpr.Opcode (name))
      
      // check for this invisibly coerced to other type -- encoding for base
      // and force nonvirt then
      | TExpr.MethodRef ((TExpr.LocalRef (ty = ty, decl = decl)) as o, m, false) =>
        def notvirt =
          match ((decl.ValKind, decl.Type.Fix (), ty.Fix ())) {
            | (LocalValue.Kind.ClosurisedThisPointer, 
               MType.Class (ti, _), MType.Class (ti', _)) when !ti.Equals (ti') =>
              true
            | _ => false
          }
        def meth = get_instanciated_meth (ty, m.GetMethodInfo ());
        emit_call (m.GetHeader (), CExpr.MethodRef (cg_expr (ctx, o), meth, notvirt))
        
      | TExpr.MethodRef (o, m, notvirt) =>
        def meth = get_instanciated_meth (o.Type, m.GetMethodInfo ());         
        emit_call (m.GetHeader (), CExpr.MethodRef (cg_expr (ctx, o), meth, notvirt))

      | TExpr.Base (m) =>
#if _GENERICS        
        def cons = get_instanciated_cons (ctx.current_type.parent_type,
                                          m.GetConstructorInfo ());
#else                                          
        def cons = m.GetConstructorInfo ();
#endif        
        emit_call (m.GetHeader (), CExpr.BaseCtorRef (cons))
        
      | _ => plain_call ()
    }
  }

  raw_cg_expr (ctx : CTX, inex : TExpr) : CExpr
  {
    //Message.Debug ($"emit{{{: $(inex.GetType ()) $(inex)");
    def self (e : TExpr) : CExpr { cg_expr (ctx, e) };
    //def res=
    match (inex) {
      | TExpr.LocalRef (d) => local_ref (ctx, d, false)

      | TExpr.StaticRef (d) => global_ref (ctx, d)

      | TExpr.FieldMember (o, f) =>
#if _GENERICS
        def system_ty = o.Type.Fix ().GetSystemType ();
        def field_info = 
          if (system_ty.HasGenericArguments)
            Emit.TypeBuilder.GetField (system_ty, f.GetFieldInfo ())
          else
            f.GetFieldInfo ();
#else                  
        def field_info = f.GetFieldInfo ();
#endif        
        def field_ref =
          if (f.IsVolatile)
            CExpr.VolatileFieldRef (self (o), field_info)
          else
            CExpr.FieldRef (self (o), field_info);
            
        maybe_cast (ctx, inex.Type.Fix ().GetSystemType (), field_ref)

      | TExpr.ImplicitValueTypeCtor (t) =>
        CExpr.InitValueType (t.GetSystemType ())

      | TExpr.MethodRef => Util.ice ("MethodRef")
      | TExpr.PropertyMember => Util.ice ("PropertyMember " + PrettyPrint.SprintTyExpr (None (), inex))
      | TExpr.StaticPropertyRef => Util.ice ("StaticPropertyRef")
      | TExpr.EventMember => Util.ice ("EventMember " + PrettyPrint.SprintTyExpr (None (), inex))
      | TExpr.StaticEventRef => Util.ice ("StaticEventRef")
      | TExpr.ConstantObjectRef => Util.ice ("ConstantObjectRef")
      
      | TExpr.TypeOf (t) => CExpr.TypeOf (t.Fix ().GetSystemType ())

      | TExpr.Call (f, ps) =>
        cg_call (ctx, false, inex.ty, f, ps)
       
      | TExpr.TailCall (f, ps) =>
        cg_call (ctx, true, inex.ty, f, ps)

      | TExpr.SelfTailCall => Util.ice ()

      | TExpr.Assign (e1, e2) =>
        def e1 = self (e1);
        def e2 = self (e2);
        def e2 =
          if (e2.SystemType.IsValueType && !e1.SystemType.IsValueType)
            CExpr.Cast (e2, e1.SystemType, true)
          else
            e2;
        CExpr.Assign (e1, e2)

      | TExpr.MultipleAssign (assigns) =>
        def assigns = assigns.Map (fun (target, source) {
          match (local_ref (ctx, target, true)) {
            | CExpr.Ref (val) => (val, self (source))
            | res =>
              Message.Warning ($ "broken expr in multiple assign: $target --> $res");
              assert (false);
          }
        });
        CExpr.MultipleAssign (assigns)

      | TExpr.Label (body, _) as lab =>
        lab.cgexpr_label = CExpr.Label (null, None ());
        lab.cgexpr_label.body = self (body);
        lab.cgexpr_label

      | TExpr.Goto (lab) =>
        assert (lab.cgexpr_label != null);
        CExpr.Goto (lab.cgexpr_label)
        
      | TExpr.Array (initializers, dimensions) =>
        def arrtype = inex.ty.Fix ().GetSystemType ();
        def element_type = arrtype.GetElementType ();
        def elt_is_value = element_type.IsValueType;
        def make_initializer (e) {
          def e = self (e);
          if (!elt_is_value && e.SystemType.IsValueType)
            CExpr.Cast (e, element_type, true)
          else
            e
        };
        CExpr.Array (ty = arrtype, 
                     element_type = element_type, 
                     initializers = List.Map (initializers, make_initializer),
                     dimensions = List.Map (dimensions, self))

      | TExpr.ArrayIndexer (ty, obj, args) =>
        CExpr.ArrayAccess (ty.Fix ().GetSystemType (), self (obj), List.Map (args, self))

      | TExpr.DefValIn (d, v, b) =>
        if (d.EverUsed) {
          def (ctx', cgv) = store_local (ctx, d, self (v));
          CExpr.Define (cgv, cg_expr (ctx', b))
        }
        else
          CExpr.Sequence ([CExpr.Ignore (self (v)), cg_expr (ctx, b)])

      | TExpr.DefFunctionsIn => Util.ice ()

      | TExpr.Match (e, mcs) =>
        with_cached (cg_expr (ctx, e), 
          fun (e) { 
            MatchingCompiler.Run (inex.ty.Fix ().GetSystemType (), ctx, e, mcs)
          });

      | TExpr.Throw (null) => CExpr.Throw (null)
      | TExpr.Throw (e) => CExpr.Throw (cg_expr (ctx, e))

      | TExpr.TryWith (body, exn, handler) =>
        def body = cg_expr (ctx, body);
        // FIXME: this is broken for exn values to go into closure
        def (ctx', v) = store_local (ctx, exn, CExpr.Nop ());
        def handler = cg_expr (ctx', handler);
        CExpr.TryWith (inex.ty.Fix ().GetSystemType (), body, v, handler);

      | TExpr.TryFinally (e1, e2) =>
        CExpr.TryFinally (cg_expr (ctx, e1), cg_expr (ctx, e2))

      | TExpr.Literal (l) => CExpr.Literal (inex.Type.Fix ().GetSystemType (), l)

      | TExpr.MethodAddress => Util.ice ()

      | TExpr.TypeConversion (e, MType.Void, _) =>
        CExpr.Ignore (cg_expr (ctx, e))

      | TExpr.TypeConversion (e, t, ConversionKind.IL (is_checked)) =>
        CExpr.Cast (cg_expr (ctx, e), t.Fix ().GetSystemType (), is_checked)

      | TExpr.TypeConversion (_, t, ConversionKind.MethodCall (meth)) =>
        assert (false, $ "uncatched method call conversion $meth (to $t)");

      | TExpr.TypeConversion (e, t, ConversionKind.IgnoreValue)
      | TExpr.TypeConversion (e, t, ConversionKind.Implicit)
      | TExpr.TypeConversion (e, t, ConversionKind.UpCast) =>
        def e' = cg_expr (ctx, e);
        def t' = t.Fix ().GetSystemType ();
        if (e'.SystemType.IsValueType != t'.IsValueType)
          CExpr.Cast (e', t', true)
        else
          e'

      | TExpr.TypeConversion (e, t, ConversionKind.DownCast) =>
        CExpr.Cast (cg_expr (ctx, e), t.Fix ().GetSystemType (), true)

      | TExpr.TypeConversion (_, _, ConversionKind.Unspecified) =>
        assert (false, "should be handled already")

      | TExpr.TypeConversion (_, _, ConversionKind.Nop)
      | TExpr.TypeConversion (_, _, ConversionKind.Boxing) =>
        assert (false)

      | TExpr.Sequence (e1, e2) =>
        CExpr.Sequence ([cg_expr (ctx, e1), cg_expr (ctx, e2)])

      | TExpr.This =>
        CExpr.This (inex.Type.Fix ().GetSystemType ())

      | TExpr.Tuple (l) =>
        tuple_ctor (List.Map (l, fun (e) { box_value (self (e)) }))

      | TExpr.Base => Util.ice ("stray base")
      | TExpr.OpCode => Util.ice ("stray opcode")

      | TExpr.Delayed => assert (false)
      | TExpr.Error => assert (false)
    }
    //Message.Debug ($"emit}}} $(inex.GetType ()) $(res.GetType())");
    //res
  }

  /** 
   * Flatten given [Typedtree.TExpr] object into [CExpr].
   *
   * <remarks>
   *   As a side-effect few classes for closures and local functions
   *   can be generated and stored in current type builder.
   * </remarks>
   */
  internal cg_expr (ctx : CTX, ex : TExpr) : CExpr
  {
    Util.locate (ex.loc, raw_cg_expr (ctx, ex))
  }
} // end module
} // end ns
