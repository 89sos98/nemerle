using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Assertions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace LRPEGCC
{
  [Record]
  public variant Token[T]
  {
    | TerminalToken
    | NonTerminalToken 
      {           
        [Accessor]
        private mutable _isValueSet : bool = false;
        
        private mutable _computedValue : T;
        
        public this(startPos : int, endPos : int, text : string, name : string)
        {
          base(startPos, endPos, text, name);
        }
        
        public ComputedValue : T
        {
          get 
          {
            when (_isValueSet == false)
              throw InvalidOperationException("_isValueSet == false");
              
            _computedValue;
          }
          
          set
          {
            when (_isValueSet == true)
              throw InvalidOperationException("_isValueSet == true");
              
            _isValueSet    = true;
            _computedValue = value;
          }
        }
        
        public override ToString() : string
        {
          def result = base.ToString();
          
          if (IsValueSet)
            $"$result Value: $(_computedValue)"
          else
            $"$result Value: <not set>"
        }
      }
  
    private _startPos : int;
    private _endPos   : int;
    
    [Accessor]
    private _text     : string;
    [Accessor]
    private _name     : string;   
    
    [RecordIgnore] private mutable _data : string = null;
    
    public Data : string
    {
      get
      {
        when(_data == null)
          _data = GetData();
        
        _data
      }      
    }
    
    private GetData() : string
    {
      _text.Substring(_startPos, _endPos - _startPos)
    }
        
    private static GetTextPoint(_text : string, _pos : int) : TextPoint
    {
      // TODO: Implement
      throw NotImplementedException();
    }
    
    public GetLocation(fileName : string) : Location
    {
      Location(fileName, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public GetLocation(fileIndex : int) : Location
    {
      Location(fileIndex, GetTextPoint(_text, _startPos), GetTextPoint(_text, _endPos))
    }
    
    public override ToString() : string 
    {
      $<#"$_name: Start: $_startPos Len: $(_endPos - _startPos) Data: "$(GetData())"#>;
    }
  }
}
