using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region FROM clause

    //fromClause_1  : QueryExpr = identifier "in"S expression;
    fromClause_1( variable  : VToken[Identifier],
                  _in       : NToken, _ : NToken,
                  expr      : VToken[Expr]) : QueryExpr
    {
      QueryExpr.From(GetLocation(_), variable.Value, null, expr.Value)
    }

    //fromClause_2  : QueryExpr = anyType identifier "in"S expression;
    fromClause_2( variableType  : VToken[TypeRef],
                  variable      : VToken[Identifier],
                  _in           : NToken, _ : NToken,
                  expr          : VToken[Expr]) : QueryExpr
    {
      QueryExpr.From(GetLocation(_), variable.Value, variableType.Value, expr.Value)
    }

    //fromClause    : QueryExpr = "from"S (fromClause_1 / fromClause_2);
    fromClause(_from : NToken, _ : NToken, opt : VToken[QueryExpr]) : QueryExpr
    {
      opt.Value
    }

    #endregion

    #region LET clause

    //letClause     : QueryExpr = "let"S identifier "="s expression;
    letClause(_let      : NToken, _ : NToken,
              variable  : VToken[Identifier],
              _eq       : NToken, _ : NToken,
              expr      : VToken[Expr]) : QueryExpr
    {
      QueryExpr.Let(GetLocation(_), variable.Value, expr.Value)
    }

    #endregion

    #region WHERE clause

    //whereClause   : QueryExpr = "where"S booleanExpression;
    whereClause(_where : NToken, _ : NToken, expr : VToken[Expr]): QueryExpr
    {
      QueryExpr.Where(GetLocation(_), expr.Value)
    }

    #endregion

    #region JOIN clause

    //joinClause_1  : QueryExpr = identifier "in"S expression "on"S expression "equals"S expression ("into"S identifier)?;
    joinClause_1( variable  : VToken[Identifier],
                  _in       : NToken, _ : NToken,
                  expr      : VToken[Expr],
                  _on       : NToken, _ : NToken,
                  lexpr     : VToken[Expr],
                  _equals   : NToken, _ : NToken,
                  rexpr     : VToken[Expr],
                  into      : option[NToken * NToken * VToken[Identifier]]) : QueryExpr
    {
      def loc = GetLocation(_);
      def into = match(into) {
        | Some( (_, _, id) ) => id.Value
        | _ => null
      }
      QueryExpr.Join(
        loc,
        variable.Value,
        null,
        expr.Value,
        lexpr.Value,
        rexpr.Value,
        into)
    }

    //joinClause_2  : QueryExpr = anyType identifier "in"S expression "on"S expression "equals"S expression ("into"S identifier)?;
    joinClause_2( variableType  : VToken[TypeRef],
                  variable      : VToken[Identifier],
                  _in           : NToken, _ : NToken,
                  expr          : VToken[Expr],
                  _on           : NToken, _ : NToken,
                  lexpr         : VToken[Expr],
                  _equals       : NToken, _ : NToken,
                  rexpr         : VToken[Expr],
                  into          : option[NToken * NToken * VToken[Identifier]]) : QueryExpr
    {
      def loc = GetLocation(_);
      def into = match(into) {
        | Some( (_, _, id) ) => id.Value
        | _ => null
      }
      QueryExpr.Join(
        loc,
        variable.Value,
        variableType.Value,
        expr.Value,
        lexpr.Value,
        rexpr.Value,
        into)
    }

    //joinClause    : QueryExpr = "join"S (joinClause_1 / joinClause_2);
    joinClause(_join : NToken, _ : NToken, opt : VToken[QueryExpr]) : QueryExpr 
    {
      opt.Value
    }

    #endregion

    #region ORDERBY clause

    //orderingDirection : OrderDirection    = ("ascending" / "descending")S;
    orderingDirection(keyword : NToken, _ : NToken) : OrderDirection
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "ascending"   => OrderDirection.Asc(loc)
        | "descending"  => OrderDirection.Desc(loc)
        | _ => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //ordering          : QueryOrdering     = expression orderingDirection?;
    ordering(expr : VToken[Expr], direction : option[VToken[OrderDirection]]): Expr * OrderDirection
    {
      (expr.Value, direction.WithDefault(OrderDirection.Default(GetLocation(_))))
    }

    //oderings          : QueryOrderingList = ordering (","s ordering)*;
    oderings( head : VToken[Expr * OrderDirection],  
              tail : SCG.List[NToken * NToken * VToken[Expr * OrderDirection]]) : list[Expr * OrderDirection]
    {
      head.Cons(tail)
    }

    //orderbyClause     : QueryExpr         = "orderby"S oderings;
    orderbyClause(_orderby : NToken, _ : NToken,
                  oderings : VToken[list[Expr * OrderDirection]]): QueryExpr
    {
      QueryExpr.OrderBy(GetLocation(_), oderings.Value)
    }

    #endregion

    #region SELECT and GROUP clauses

    //selectClause        : QueryExpr = "select"S expression;
    selectClause(_select : NToken, _ : NToken, expr : VToken[Expr]): QueryExpr
    {
      QueryExpr.Select(GetLocation(_), expr.Value)
    }

    //groupClause         : QueryExpr = "group"S expression "by"S expression;
    groupClause(_group    : NToken, _ : NToken,
                expr      : VToken[Expr],
                _by       : NToken, _ : NToken,
                partition : VToken[Expr]) : QueryExpr
    {
      QueryExpr.Group(GetLocation(_), expr.Value, partition.Value)
    }

    //selectOrGroupClause : QueryExpr = selectClause
    //                                / groupClause;
    selectOrGroupClause(opt : VToken[QueryExpr]) : QueryExpr
    {
      opt.Value
    }

    #endregion

    #region INTO clause

    //queryContinuation : QueryExpr = "into"S identifier queryBody;
    queryContinuation(_into     : NToken, _ : NToken,
                      variable  : VToken[Identifier],
                      query     : VToken[list[QueryExpr]]) : QueryExpr
    {
      QueryExpr.Into(GetLocation(_), variable.Value, query.Value)
    }

    #endregion

    //queryBodyClause     : QueryExpr     = fromClause
    //                                    / letClause
    //                                    / whereClause
    //                                    / joinClause
    //                                    / orderbyClause;
    queryBodyClause(opt : VToken[QueryExpr]) : QueryExpr
    {
      opt.Value
    }

    //queryBodyClauses    : QueryExprList = queryBodyClause+;
    queryBodyClauses(query : SCG.List[VToken[QueryExpr]]) : list[QueryExpr]
    {
      query.Values()
    }

    //queryBody       : QueryExprList = queryBodyClauses? selectOrGroupClause queryContinuation?;
    queryBody(body          : option[VToken[list[QueryExpr]]],
              selectOrGroup : VToken[QueryExpr],
              into          : option[VToken[QueryExpr]]) : list[QueryExpr]
    {
      body.WithDefault([])
        + [selectOrGroup.Value]
        + match(into) { | Some(into) => [into.Value] | _ => [] }
    }

    //queryExpression : Expr      = fromClause queryBody;
    queryExpression(from : VToken[QueryExpr], body : VToken[list[QueryExpr]]) : Expr
    {
      Expr.Query(GetLocation(_), from.Value :: body.Value)
    }
  }
}