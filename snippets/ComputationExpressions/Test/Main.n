using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.ComputationExpressions;

public class AttemptBuilder
{
  public type Attempt[A] = void -> option[A];
  
  //Bind : Attempt<'a> * ('a -> Attempt<'b>) -> Attempt<'b>
  public Bind[A, B](val : Attempt[A], cont : A -> Attempt[B]) : Attempt[B]
  {
    match (val())
    {
      | None       => () => None();
      | Some (a) => cont(a);
    }
  }

  public Bind[B](val : Attempt[FakeVoid], cont : void -> Attempt[B]) : Attempt[B]
  {
    match (val())
    {
      | None       => () => None();
      | Some (_) => cont ();
    }
  }

  //Delay : (unit -> Attempt<'a>) -> Attempt<'a>
  public Delay[A](cont : void -> Attempt[A]) : Attempt[A]
  {
    cont()
  }

  //Return : 'a -> Attempt<'a>
  public Return[A] (val : A) : Attempt[A]
  {
    () => Some(val)
  }

  public Combine[A, B] (val1 : Attempt[A], val2 : Attempt[B]) : Attempt[B]
  {
    Bind (val1, _ => val2)
  }
  
  public Run[A] (val : Attempt[A]) : Attempt[A]
  {
    val
  }
}

module Program
{
  Main() : void
  {
    def attempt = AttemptBuilder ();

    def f(inp)
    {
      if (inp < 10)
        attempt.Return (inp)
      else
        () => None();
    }

    def fn(inp1, inp2)
    {
      comp attempt
      {
        defcomp n1 : int = f(inp1);
        defcomp n2 = f(inp2);
        def sum = n1 + n2;
        // if (5 == 5) n1; else n2;
        callcomp attempt.Return (FakeVoid.Value);
        // callcomp attempt.Return (0);
        call ();
        if (5 == 5) (); else ();
        mutable index = 0;
        while (index < 10) 
        {
          index ++;
          WriteLine ("index = {0}", index);
          //return 0;
        }
        return sum;
        index = 100;
        return index;
        //if (5 == 5) (); else ();
      }
    }
    
    def g (x)
    {
      comp enumerable
      {
        mutable i = 0;
        while (i < x)
        {
          yield i;
          i ++;
        }
      }
    }
    
    def upTo (n : int) : IEnumerable [int]
    {
      comp enumerable
      {
        mutable i = 0;
        while (i < n)
        {
          i ++;
          yield i
        }
      }
    }

    def manyTimes : IEnumerable [int] =
      comp enumerable
      {
        yieldcomp (upTo (2));   // 1 2
        yield 100;                   // 100
        yieldcomp (upTo (3));   // 1 2 3
        yield 100;                   // 100
        yieldcomp (upTo (10)); // 1 2 3 .. 10
      }
    
    def _testIf (n)
    {
      comp enumerable
      {
        if (n > 5) (); else ();
        if (n > 5) { yield 10; } else ();
        
        when (n > 5) ();
        when (n > 5) yield 10;
        
        unless (n > 5) ();
        unless (n > 5) yield 10;
      }
    }
    
    def _testWhile (n)
    {
      comp enumerable
      {
        mutable i1 = 0;
        mutable i2 = 0;
        
        while (i1 < n) i1 ++;
        while (i2 < n)
        { 
          yield i2; 
          i2 ++; 
          yieldcomp manyTimes 
        }
      }
    }
    
    def _testMatching (n)
    {
      comp enumerable
      {
        match (n)
        {
          | x when x > 5 => ();
          | _ => ();
        }
        match (n)
        {
          | x when x > 5 => yield 10;
          | _ => yield 5;
        }
      }
    }
    
    def _testForeach (coll : IEnumerable[_])
    {
      comp enumerable
      {
        foreach (x in coll)  ignore (x);
        foreach (x in coll)  yield (x + 5)
      }
    }
    
    def _testFor (n)
    {
      comp enumerable
      {
        for (mutable x = 0; x < n; x ++) ignore (x);
        for (mutable x = 0; x < n; x ++) yield (2 * x);
        
        mutable x = 0;
        
        for (; false;) ignore (x);
        for (; false;) yield (2 * x);
      }
    }
    
    def _testRepeat (n)
    {
      comp enumerable
      {
        repeat (n) ();
        repeat (n) yield n;
      }
    }
    
    def _testDo (n)
    {
      comp enumerable
      {
        do { Console.WriteLine ("do-while") } while (false || false);
        do { yield n } while (false);
      }
    }
    
    def _stream (n)
    {
      comp enumerable
      {
        yield n;
        yieldcomp (_stream (n + 1));
      }
    }
    
    def _filesUnderFolder (rootFolder : string)
    {
      comp enumerable
      {
        foreach (file in System.IO.Directory.GetFiles (rootFolder))
          yield file;
        foreach (dir in System.IO.Directory.GetDirectories (rootFolder))
          yieldcomp (_filesUnderFolder (dir))
      }
    }
    
    def _testForeachMatch (coll : IEnumerable [_])
    {
      comp enumerable
      {
        foreach (x in coll)
        {
          | x when x > 0 => yield 1
          | x when x < 0 => yield (-1)
          | _ => yield 0
        }
      }
    }
    
    def _testTryFinally () : IEnumerable[_]
    {
      comp enumerable
      {
        try
        {
          yield 1;
          WriteLine ("write 1");
          throw InvalidOperationException ("Test exception");
          //yield 2;
          //WriteLine ("write 2");
        }
        finally
        {
          WriteLine ("try-finally")
        }
      }
    }
    
    def _testTryCatch () : IEnumerable[_]
    {
      comp enumerable
      {
        try
        {
          yield 1;
          throw Exception ();
        }
        catch
        {
          | _ is InvalidOperationException =>
            WriteLine ("InvalidOperationException")
          | _ is Exception =>
            WriteLine ("777 must follow.");
            yield 777;
        }
        finally
        {
          WriteLine ("The final part.");
        }
      }
    }
    
    def _testUsing ()
    {
      comp list
      {
        using (_file = IO.FileStream ("test", IO.FileMode.Create))
        {
          yield 1;
        }
        
        using (_file1 = IO.FileStream ("test1", IO.FileMode.Create), _file2 = IO.FileStream ("test2", IO.FileMode.Create))
        {
          ()
        }
        
        using (_file1 = IO.FileStream ("test1", IO.FileMode.Create), _file2 = IO.FileStream ("test2", IO.FileMode.Create))
        {
          yield 3;
        } 
        catch
        {
          | _e is InvalidOperationException => () //yield 10;
          | _e is Exception => Console.WriteLine ("error");
        }
      }
    }
    
    def _temp1 = fn (1, 2);
    def _temp2 = g (5);
      
    //~ WriteLine(fn(1, 2)());
    //~ WriteLine(fn(3, 2)());
    //~ WriteLine(fn(1, 22)());
    //~ WriteLine(fn(12, 2)());
    
    // _testFor (10).Iter (WriteLine);
      
    _testTryCatch ().Iter (WriteLine);
  }
}