
using Nemerle.Attributes;

module M {
  mutable i : int;
  
  [Requires (i >= 0 && i < 5)]
  foo () : void {
    def x = array [1,2,3,4];
    Nemerle.IO.printf ("%d\n", x [i])
  }

  [Ensures (i >= 0 && i < 5)]
  boo (x : int) : void {
    i = x;
    Nemerle.IO.printf ("%d\n", x)    
  }

  [Ensures (value > 0)]
  boa (x : int) : int {
    Nemerle.IO.printf ("%d\n", x);
    x
  }
  
  public Main () : void {
    i = 2;
    foo ();
    i = -1;
//    foo ();
//    assert (if (true) { 1 == 2 } else true, "bla");
    try {
      foo ()
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    boo (3);
    try {
      boo (-1)
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
    ignore (boa (3));
    try {
      ignore (boa (-1))
    }
    catch {
      | e : AssertionException =>
        Nemerle.IO.printf ("%s\n", e.Message.Substring (e.Message.LastIndexOf (',')));
    };
  }
}

/*
BEGIN-OUTPUT
3
, line 7:
The ``Requires'' contract has been violated.
3
-1
, line 13:
The ``Ensures'' contract has been violated.
3
-1
, line 19:
The ``Ensures'' contract has been violated.
END-OUTPUT
*/
