
 namespace R {
  using Nemerle.Imperative;

  module RR {
    public to_void (x : bool) : void {
      when (x)
        return;

      Nemerle.IO.printf ("to_void %s\n", x.ToString ());
    }
    public to_int (x : bool) : int {
      when (x)
        return 5;
      6
    }

    public to_string (x : bool) : string {
      when (x) return ("a");
      Nemerle.IO.print ("$x\n");
      return "b";
    }
  }
}

module M {
  public foo (x : bool) : void {
    when (x) {
      Nemerle.Imperative.Return ();
    }
    Nemerle.IO.printf ("a\n");
  }

}

M.foo (true);
M.foo (false);
R.RR.to_void (true);
R.RR.to_void (false);
assert (R.RR.to_int (true) == 5);
assert (R.RR.to_int (false) == 6);
assert (R.RR.to_string (true) == "a");
assert (R.RR.to_string (false) == "b");

/*
BEGIN-OUTPUT
a
to_void False
False
END-OUTPUT
*/
