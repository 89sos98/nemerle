using Nemerle.Collections;

public module foo {

  public Main () : void
  {
    def map = SystemMap ();
    def map = map.Add (1,"1");
    def map = map.Add (2,"2");
    def map = map.Add (3, "2");
    def map = map.Remove (3);
    def map = map.Add (3, "4");
    map.Iter (fun (elem, str) {printf ("%d %s\n", elem, str)});
    printf ("size : %d\n", map.Size ());
    when (! map.Member (3))
      printf ("wrong member\n");
    def map = map.Remove (3);
    match (map.Find (3)) {
    | Some => printf ("wrong get\n")
    | None => printf ("ok\n")
    };
    printf ("size : %d\n", map.Size ());
    def map = map.Add (4, "3");
    def map = map.Replace (4, "4");
    printf ("size : %d\n", map.Size ());
    map.Iter (fun (elem, str) {printf ("%d %s\n", elem, str)});
    match (map.Partition ( fun (x, _) { x>2 })) {
      (ymap, nmap) =>
        printf ("1st part :\n");
        ymap.Iter (fun (elem, str) {printf ("%d %s\n", elem, str)});
        printf ("2nd part :\n");
        nmap.Iter (fun (elem, str) {printf ("%d %s\n", elem, str)})
    }
  }
}

/*
BEGIN-OUTPUT
1 1
2 2
3 4
size : 3
ok
size : 2
size : 3
1 1
2 2
4 4
1st part :
4 4
2nd part :
1 1
2 2
END-OUTPUT
*/
