using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Function arguments

    //argumentName    : Identifier                = identifier ":" !":" s; // avoid conflict with alias
    argumentName( identifier : VToken[Identifier],
                  _colon : NToken, _ : NToken) : Identifier
    {
      identifier.Value
    }

    //argumentModfier : FunctionArgumentModifier  = ("ref" / "out")S;
    argumentModfier(keyword : NToken, _ : NToken) : FunctionArgumentModifier
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "ref" => FunctionArgumentModifier.Ref(loc)
        | "out" => FunctionArgumentModifier.Out(loc)
        | _     => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //argument        : FunctionArgument          = argumentName? argumentModfier? expression;
    argument( argumentName    : option[VToken[Identifier]],
              argumentModfier : option[VToken[FunctionArgumentModifier]],
              expr            : VToken[Expr]) : FunctionArgument
    {
      def loc = GetLocation(_);
      FunctionArgument(
        loc,
        argumentName.WithDefault(null),
        argumentModfier.WithDefault(FunctionArgumentModifier.Normal(loc)),
        expr.Value)
    }

    //argumentList    : FunctionArgumentList      = argument (","s argument)*;
    argumentList( head : VToken[FunctionArgument],
                  tail  : SCG.List[NToken * NToken * VToken[FunctionArgument]]) : list[FunctionArgument]
    {
      head.Cons(tail)
    }

    #endregion

    #region Common expressions

    //expression          : Expr  = lambdaExpression
    //                            / queryExpression
    //                            / assignmentExpression;
    expression(opt : VToken[Expr]) : Expr
    {
      opt.Value
    }

    //expressionList      : ExprList = expression (","s expression)*;
    expressionList( head : VToken[Expr],
                    tail  : SCG.List[NToken * NToken * VToken[Expr]]) : list[Expr]
    {
      head.Cons(tail)
    }

    //constantExpression  : Expr = expression;
    constantExpression(opt : VToken[Expr]) : Expr
    {
      opt.Value
    }

    //booleanExpression  : Expr = expression;
    booleanExpression(opt : VToken[Expr]) : Expr
    {
      opt.Value
    }

    //simpleName        : Expr = identifier ("::"s identifier)? typeArgumentList?;
    simpleName( identifierOrAlias   : VToken[Identifier],
                identifier          : option[NToken * NToken * VToken[Identifier]],
                typeArgumentList    : option[VToken[list[TypeRef]]]) : Expr
    {
      def name = match(identifier) {
        | Some((_, _, id)) =>
          def alias = Expr.Alias(GetLocation(identifierOrAlias), identifierOrAlias.Value);
          def member = Expr.Ref(GetLocation(id), id.Value);
          Expr.Member(alias.Location + member.Location, alias, member)
        | _ =>
          Expr.Ref(GetLocation(identifierOrAlias), identifierOrAlias.Value);
      }
      match(typeArgumentList) {
        | Some(args)  => Expr.TypeArguments(name.Location + GetLocation(args), name, args.Value)
        | _           => name
      }
    }

    //literalExpression : Expr = literal;
    literalExpression(literal : VToken[Literal]) : Expr
    {
      Expr.Literal(GetLocation(_), literal.Value)
    }

    //parenthesizedExpression : Expr = "("s expression ")"s;
    parenthesizedExpression(_lparen : NToken, _ : NToken,
                            expr : VToken[Expr],
                            _rparen : NToken, _ : NToken,) : Expr
    {
      expr.Value
    }

    //thisAccess        : Expr = "this"S;
    thisAccess(_this : NToken, _ : NToken) : Expr
    {
      Expr.This(GetLocation(_))
    }

    //baseAccess        : Expr = "base"S;
    baseAccess(_base : NToken, _ : NToken) : Expr
    {
      Expr.Base(GetLocation(_))
    }

    //predefinedAccess  : Expr = predefinedType;
    predefinedAccess(predefinedType : VToken[TypeRef]) : Expr
    {
      Expr.TypeRef(GetLocation(_), predefinedType.Value)
    }

    //anyTypeAccess     : Expr = anyTypeNonPointer;
    anyTypeAccess(anyType : VToken[TypeRef]) : Expr
    {
      Expr.TypeRef(GetLocation(_), anyType.Value)
    }

    //typeofExpression        : Expr = "typeof"S "("s anyType ")"s;
    typeofExpression( _typeof : NToken, _ : NToken,
                      _lparen : NToken, _ : NToken,
                      typeRef : VToken[TypeRef],
                      _rparen : NToken, _ : NToken) : Expr
    {
      Expr.TypeOf(GetLocation(_), typeRef.Value)
    }

    //checkedExpression       : Expr = "checked"S "("s expression ")"s;
    checkedExpression(_checked  : NToken, _ : NToken,
                      _lparen   : NToken, _ : NToken,
                      expr      : VToken[Expr],
                      _rparen   : NToken, _ : NToken) : Expr
    {
      Expr.Checked(GetLocation(_), expr.Value, true)
    }

    //uncheckedExpression       : Expr = "unchecked"S "("s expression ")"s;
    uncheckedExpression(_unchecked  : NToken, _ : NToken,
                        _lparen     : NToken, _ : NToken,
                        expr        : VToken[Expr],
                        _rparen     : NToken, _ : NToken) : Expr
    {
      Expr.Checked(GetLocation(_), expr.Value, false)
    }

    //defaultValueExpression  : Expr = "default"S "("s anyType ")"s;
    defaultValueExpression( _default  : NToken, _ : NToken,
                            _lparen   : NToken, _ : NToken,
                            typeRef   : VToken[TypeRef],
                            _rparen   : NToken, _ : NToken) : Expr
    {
      Expr.DefaultValue(GetLocation(_), typeRef.Value)
    }

    //sizeofExpression        : Expr = "sizeof"S "("s anyType ")"s;
    sizeofExpression( _sizeof : NToken, _ : NToken,
                      _lparen : NToken, _ : NToken,
                      typeRef : VToken[TypeRef],
                      _rparen : NToken, _ : NToken) : Expr
    {
      Expr.SizeOf(GetLocation(_), typeRef.Value)
    }

    //otherExpression : Expr  = simpleName
    //                        / literalExpression
    //                        / parenthesizedExpression
    //                        / thisAccess
    //                        / baseAccess
    //                        / predefinedAccess
    //                        / newExpression
    //                        / typeofExpression
    //                        / checkedExpression
    //                        / uncheckedExpression
    //                        / defaultValueExpression
    //                        / anonymousMethodExpression
    //                        / sizeofExpression;
    otherExpression(opt : VToken[Expr]) : Expr
    {
      opt.Value
    }

    #endregion 

    #region New object expression

    //newObject_1   : Expr = anyNonArrayType "("s argumentList? ")"s complexInitializer?;
    newObject_1(objType   : VToken[TypeRef],
                _lparen   : NToken, _ : NToken,
                ctorArgs  : option[VToken[list[FunctionArgument]]],
                _rparen   : NToken, _ : NToken,
                init      : option[VToken[VariableInitializer]]) : Expr
    {
      Expr.NewObject(
        GetLocation(_),
        objType.Value,
        ctorArgs.WithDefault([]),
        init.WithDefault(null))
    }

    //newObject_2   : Expr = anyNonArrayType complexInitializer;
    newObject_2(objType   : VToken[TypeRef],
                init      : VToken[VariableInitializer]) : Expr
    {
      Expr.NewObject(
        GetLocation(_),
        objType.Value,
        [],
        init.Value)
    }

    //newArray_1    : Expr = anyNonArrayType "["s expressionList "]"s rankSpecifier* complexInitializer?;
    newArray_1( elementType : VToken[TypeRef],
                _lparen     : NToken, _ : NToken,
                args        : VToken[list[Expr]],
                _rparen     : NToken, _ : NToken,
                ranks       : SCG.List[VToken[TypeSpecifier]],
                init        : option[VToken[VariableInitializer]]) : Expr
    {
      def loc = GetLocation(_);
      mutable finalElementType = elementType.Value;
      mutable arrayType = elementType.Value;
      foreach(rank in ranks) {
        match(rank.Value) {
          | TypeSpecifier.Array(dim) as spec =>
            finalElementType = arrayType;
            arrayType = TypeRef.Array(finalElementType.Location + spec.Location, finalElementType, dim);
          | _ => throw ArgumentOutOfRangeException("ranks")
        }
      }
      Expr.NewArray(
        loc, 
        finalElementType,
        args.Value,
        args.Value.Length,
        init.WithDefault(null))
    }

    //newArray_2    : Expr = anyNonArrayType rankSpecifier+ complexInitializer;
    newArray_2( elementType   : VToken[TypeRef],
                ranks         : SCG.List[VToken[TypeSpecifier]],
                init          : VToken[VariableInitializer]) : Expr
    {
      def loc = GetLocation(_);
      mutable finalElementType = elementType.Value;
      mutable arrayType = elementType.Value;
      mutable finalDim = 0;
      foreach(rank in ranks) {
        match(rank.Value) {
          | TypeSpecifier.Array(dim) as spec =>
            finalElementType = arrayType;
            arrayType = TypeRef.Array(finalElementType.Location + spec.Location, finalElementType, dim);
            finalDim = dim;
          | _ => throw ArgumentOutOfRangeException("ranks")
        }
      }
      Expr.NewArray(
        loc,
        finalElementType,
        [],
        finalDim,
        init.Value)
    }

    //newArray_3    : Expr = rankSpecifier complexInitializer;
    newArray_3(rank : VToken[TypeSpecifier],
               init : VToken[VariableInitializer]) : Expr
    {
      def loc = GetLocation(_);
      match(rank.Value) {
        | TypeSpecifier.Array(dim) =>
          Expr.NewArray(
            loc,
            null,
            [],
            dim,
            init.Value)
        | _ => throw ArgumentOutOfRangeException("rank")
      }
    }

    //newAnonymous  : Expr = complexInitializer;
    newAnonymous(init : VToken[VariableInitializer]) : Expr
    {
      Expr.NewAnonymous(GetLocation(_), init.Value)
    }

    //newExpression : Expr = "new"S (newObject_1 / newArray_1 / newArray_2 / newObject_2 / newArray_3 / newAnonymous);
    newExpression(_new  : NToken, _ : NToken,
                  opt   : VToken[Expr]) : Expr
    {
      opt.Value
    }

    #endregion

    #region Delegate expression

    //explicitAnonymousFunctionParameterModifier  : FormalParameterModifier = ("ref" / "out")S;
    explicitAnonymousFunctionParameterModifier(keyword : NToken, _ : NToken) : FormalParameterModifier
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "ref" => FormalParameterModifier.Ref(loc)
        | "out" => FormalParameterModifier.Out(loc)
        | _     => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //explicitAnonymousFunctionParameter          : FormalParameter         = explicitAnonymousFunctionParameterModifier? anyType identifier;
    explicitAnonymousFunctionParameter( modifier      : option[VToken[FormalParameterModifier]],
                                        parameterType : VToken[TypeRef],
                                        identifier    : VToken[Identifier]) : FormalParameter
    {
      def loc = GetLocation(_);
      FormalParameter(
        loc,
        [],
        identifier.Value, 
        modifier.WithDefault(FormalParameterModifier.Normal(loc)),
        parameterType.Value,
        null)
    }

    //explicitAnonymousFunctionParameterList      : FormalParameterList     = explicitAnonymousFunctionParameter (","s explicitAnonymousFunctionParameter)*;
    explicitAnonymousFunctionParameterList( head : VToken[FormalParameter],
                                            tail  : SCG.List[NToken * NToken * VToken[FormalParameter]]) : list[FormalParameter]
    {
      head.Cons(tail)
    }

    //explicitAnonymousFunctionSignature          : FormalParameterList     = "("s explicitAnonymousFunctionParameterList? ")"s;
    explicitAnonymousFunctionSignature( _lparen : NToken, _ : NToken,
                                        parms   : option[VToken[list[FormalParameter]]],
                                        _rparen : NToken, _ : NToken) : list[FormalParameter]
    {
      parms.WithDefault([])
    }

    //anonymousMethodExpression : Expr = "delegate"S explicitAnonymousFunctionSignature? block;
    anonymousMethodExpression(_delegate : NToken, _ : NToken,
                              signature : option[VToken[list[FormalParameter]]],
                              body      : VToken[Statement]) : Expr
    {
      def loc = GetLocation(_);
      match(signature) {
        | Some(parms) => Expr.Function(loc, parms.Value, false, false, body.Value)
        | _           => Expr.Function(loc, [],          true,  false, body.Value)
      }
    }

    #endregion

    #region Call or indexer

    //indexerArguments        : CallOrIndexerArgumentList = "["s argumentList? "]"s;
    indexerArguments( _lparen : NToken, _ : NToken,
                      argumentList : option[VToken[list[FunctionArgument]]],
                      _rparen : NToken, _ : NToken) : list[FunctionArgument] * bool
    {
      (argumentList.WithDefault([]), false)
    }

    //callArguments           : CallOrIndexerArgumentList = "("s argumentList? ")"s;
    callArguments(_lparen : NToken, _ : NToken,
                  argumentList : option[VToken[list[FunctionArgument]]],
                  _rparen : NToken, _ : NToken) : list[FunctionArgument] * bool
    {
      (argumentList.WithDefault([]), true)
    }

    //callOrIndexerExpression : Expr                      = otherExpression (indexerArguments / callArguments)*;
    callOrIndexerExpression(otherExpression : VToken[Expr], applies : SCG.List[VToken[list[FunctionArgument] * bool]]) : Expr
    {
      mutable chain = otherExpression.Value;
      foreach(apply in applies) {
        def loc = chain.Location + GetLocation(apply);
        chain = match(apply.Value) {
          | (args, true)  => Expr.Call(loc, chain, args)
          | (args, false) => Expr.Indexer(loc, chain, args)
        }
      }
      chain
    }

    #endregion

    #region Member / Pointer access

    //memberOperator    : bool = ("." / "->")s;
    memberOperator(op : NToken, _ : NToken) : bool
    {
      match(op.GetText()) {
        | "."   => true
        | "->"  => false
        | _     => throw ArgumentOutOfRangeException("op")
      }
    }

    //memberExpression  : Expr = callOrIndexerExpression (memberOperator callOrIndexerExpression)*;
    memberExpression(expr : VToken[Expr], applies : SCG.List[VToken[bool] * VToken[Expr]]) : Expr
    {
      mutable chain = expr.Value;
      foreach((memberAccess, valueExpr) in applies) {
        def loc = chain.Location + GetLocation(memberAccess);

        def highjackMemberExpr(e) {
          | Expr.TypeArguments(expr, args) =>
            Expr.TypeArguments(loc + e.Location, highjackMemberExpr(expr), args)

          | Expr.Call(expr, args) =>
            Expr.Call(loc + e.Location, highjackMemberExpr(expr), args)

          | Expr.Indexer(expr, args) =>
            Expr.Indexer(loc + e.Location, highjackMemberExpr(expr), args)

          | expr when memberAccess.Value =>
              Expr.Member(loc, chain, expr)

          | expr =>
              Expr.PointerMember(loc, chain, expr)
        }

        chain = highjackMemberExpr(valueExpr.Value)
      }
      chain
    }

    #endregion

    #region Unary and Cast operators

    //postfixOperator   : Identifier = ("++" / "--")s;
    postfixOperator(op : NToken, _ : NToken) : Identifier
    {
      Identifier(GetLocation(_), op.GetText())
    }

    //postfixExpression : Expr = memberExpression postfixOperator*;
    postfixExpression(expr : VToken[Expr], ops : SCG.List[VToken[Identifier]]) : Expr
    {
      mutable chain = expr.Value;
      foreach(op in ops)
        chain = Expr.UnaryOperator(chain.Location + op.Value.Location, chain, op.Value, false);

      chain
    }

    //prefixOperator    : object = ("++" / "--" / "+" / "-" / "~" / "!" / "&" / "*")s;
    prefixOperator(op : NToken, _ : NToken) : object
    {
      Identifier(GetLocation(_), op.GetText())
    }

    castPredefSuffix(toType : VToken[TypeRef], _ : NToken, _ : NToken) : TypeRef
    {
      toType.Value
    }
    
    castOtherSuffix(toType : VToken[TypeRef], _ : NToken, _ : NToken) : TypeRef
    {
      toType.Value
    }
    
    castOperator(_ : NToken, _ : NToken, toType : VToken[TypeRef]) : object
    {
      toType.Value
    }

    //prefixExpression  : Expr   = (prefixOperator / castOperator)* postfixExpression;
    prefixExpression(ops : SCG.List[VToken[object]], expr : VToken[Expr]) : Expr
    {
      mutable chain = expr.Value;
      foreach(op in ops) {
        def loc = chain.Location + GetLocation(op);
        chain = match(op.Value) {
          | op is Identifier  => Expr.UnaryOperator(loc, chain, op, true)
          | toType is TypeRef => Expr.CastOperator(loc, chain, toType)
          | _ => throw ArgumentOutOfRangeException("ops")
        }
      }
      chain
    }

    #endregion

    #region Binary operators

    //binaryOperator            : BinaryOperatorInfo = ("??" / "||" / "|" / "&&" / "&" / "==" / "!=" / "<=" / "<<" / "<" 
    //                                                  / ">=" / ">>" / ">" / "*" / "/" / "%" / "+" / "-" / "^")s;
    binaryOperator(op : NToken, _ : NToken) : Identifier * int * int
    {
      def opStr = op.GetText();
      def opId = Identifier(GetLocation(_), opStr);
      match(opStr) {
        | "??"  => (opId, 11, 10) // right associative
        | "||"  => (opId, 20, 20)
        | "|"   => (opId, 40, 40)
        | "&&"  => (opId, 30, 30)
        | "&"   => (opId, 60, 60)
        | "=="  => (opId, 70, 70)
        | "!="  => (opId, 70, 70)
        | "<="  => (opId, 80, 80)
        | "<<"  => (opId, 90, 90)
        | "<"   => (opId, 80, 80)
        | ">="  => (opId, 80, 80)
        | ">>"  => (opId, 90, 90)
        | ">"   => (opId, 80, 80)
        | "*"   => (opId, 110, 110)
        | "/"   => (opId, 110, 110)
        | "%"   => (opId, 110, 110)
        | "+"   => (opId, 100, 100)
        | "-"   => (opId, 100, 100)
        | "^"   => (opId, 50, 50)
        | _ => throw ArgumentOutOfRangeException("op")
      }
    }

    //typeTestingOperator       : BinaryOperatorInfo = ("is" / "as")S;
    typeTestingOperator(op : NToken, _ : NToken) : Identifier * int * int
    {
      (Identifier(GetLocation(_), op.GetText()), 70, 200)
    }

    //binaryOperatorExpression  : Expr = prefixExpression ( (binaryOperator prefixExpression) / (typeTestingOperator anyTypeAccess) )*;
    binaryOperatorExpression( head : VToken[Expr],
                              tail : SCG.List[VToken[Identifier * int * int] * VToken[Expr]]) : Expr
    {
      match(tail.Count) {
        | 0 => head.Value

        | 1 =>
          def a = head.Value;
          def (op, b) = tail[0];
          def b = b.Value;
          Expr.BinaryOperator(a.Location + b.Location, a, b, op.Value[0])

        | _ =>
          def opStack = SCG.Stack();
          def exprStack = SCG.Stack();
          exprStack.Push(head.Value);
  
          def evalOperandsOnStack() {
            def b = exprStack.Pop();
            def a = exprStack.Pop();
            exprStack.Push(Expr.BinaryOperator(a.Location + b.Location, a, b, opStack.Pop()[0]));
          }
  
          foreach((op, operand) in tail) {
            def (op, leftPrior, rightPrior) = op.Value;
            when (!opStack.IsEmpty() && opStack.Peek()[1] >= leftPrior)
              evalOperandsOnStack();
            exprStack.Push(operand.Value);
            opStack.Push(op, rightPrior);
          }
  
          while(!opStack.IsEmpty())
            evalOperandsOnStack();
  
          exprStack.Pop() // exprStack becomes empty
      }
    }

    #endregion

    #region Assignment

    //assignmentOperator   : Identifier = ("=" / "+=" / "-=" / "*=" / "/=" / "%=" / "&=" / "|=" / "^=" / "<<=" / ">>=")s;
    assignmentOperator(op : NToken, _ : NToken) : Identifier
    {
      Identifier(GetLocation(_), op.GetText())
    }

    //assignmentExpression : Expr = conditionalExpression (assignmentOperator expression)?;
    assignmentExpression(expr : VToken[Expr], assign : option[VToken[Identifier] * VToken[Expr]]) : Expr
    {
      def loc = GetLocation(_);
      match(assign) {
        | Some( (op, value) ) => Expr.Assign(loc, expr.Value, value.Value, op.Value)
        | _ => expr.Value
      }
    }

    #endregion

    #region Conditional expression

    //conditionalExpression   : Expr    = nullCoalescingExpression ("?"s expression ":"s expression)?;
    conditionalExpression(head  : VToken[Expr],
                          tail  : option[NToken * NToken * VToken[Expr] * NToken * NToken * VToken[Expr]]) : Expr
    {
      match(tail) {
        | Some( (_, _, trueExpr, _, _, falseExpr) ) => Expr.ConditionalOperator(GetLocation(_), head.Value, trueExpr.Value, falseExpr.Value)
        | _ => head.Value
      }
    }

    #endregion

    #region Lambda expression

    //implicitAnonymousFunctionParameter     : FormalParameter      = identifier;
    implicitAnonymousFunctionParameter(id : VToken[Identifier]) : FormalParameter
    {
      def loc = GetLocation(_);
      FormalParameter(
        loc,
        [],
        id.Value,
        FormalParameterModifier.Normal(loc),
        null,
        null)
    }

    //implicitAnonymousFunctionParameterList : FormalParameterList  = implicitAnonymousFunctionParameter (","s implicitAnonymousFunctionParameter)*;
    implicitAnonymousFunctionParameterList( head : VToken[FormalParameter],
                                            tail  : SCG.List[NToken * NToken * VToken[FormalParameter]]) : list[FormalParameter]
    {
      head.Cons(tail)
    }

    //implicitAnonymousFunctionSignature_1  : FormalParameterList = implicitAnonymousFunctionParameter;
    implicitAnonymousFunctionSignature_1(single : VToken[FormalParameter]) : list[FormalParameter]
    {
      [single.Value]
    }

    //implicitAnonymousFunctionSignature_2  : FormalParameterList = "("s implicitAnonymousFunctionParameterList? ")"s;
    implicitAnonymousFunctionSignature_2( _lparen : NToken, _ : NToken,
                                          parms   : option[VToken[list[FormalParameter]]],
                                          _rparen : NToken, _ : NToken) : list[FormalParameter]
    {
      parms.WithDefault([])
    }

    //implicitAnonymousFunctionSignature    : FormalParameterList = implicitAnonymousFunctionSignature_1
    //                                                            / implicitAnonymousFunctionSignature_2;
    implicitAnonymousFunctionSignature(opt : VToken[list[FormalParameter]]) : FormalParameterList
    {
      opt.Value
    }

    //anonymousFunctionSignature  : FormalParameterList = explicitAnonymousFunctionSignature
    //                                                  / implicitAnonymousFunctionSignature;
    anonymousFunctionSignature(opt : VToken[list[FormalParameter]]) : list[FormalParameter]
    {
      opt.Value
    }

    //anonymousFunctionBody_expression  : Statement = expression;
    anonymousFunctionBody_expression(expr : VToken[Expr]) : Statement
    {
      def loc = GetLocation(_);
      Statement.Block(loc, [Statement.Return(loc, expr.Value)])
    }

    //anonymousFunctionBody_block       : Statement = block;
    anonymousFunctionBody_block(block : VToken[Statement]) : Statement
    {
      block.Value
    }

    //anonymousFunctionBody             : Statement = anonymousFunctionBody_expression
    //                                              / anonymousFunctionBody_block;
    anonymousFunctionBody(opt : VToken[Statement]) : Statement
    {
      opt.Value
    }

    //lambdaExpression : Expr = anonymousFunctionSignature "=>"s anonymousFunctionBody;
    lambdaExpression( signature : VToken[list[FormalParameter]],
                      _arrow    : NToken, _ : NToken,
                      body      : VToken[Statement]) : Expr
    {
      Expr.Function(GetLocation(_), signature.Value, false, true, body.Value)
    }

    #endregion
  }
}