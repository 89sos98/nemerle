using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

module Literals
{
  public A1 : float = 1.0f;
  public A2 : float = A1 + 2.0f;
  public A3 : float = A1 + A2;

  public B1 : double = 1.0;
  public B2 : double = B1 + 2.0;
  public B3 : double = B1 + B2;

  public C1 : bool = true;
  public C2 : bool = true && !C1;
  public C3 : bool = !C1 && !C2;
}

module QualifiedLiterals
{
  public A1 : float = 1.0f;
  public A2 : float = QualifiedLiterals.A1 + 2.0f;
  public A3 : float = QualifiedLiterals.A1 + QualifiedLiterals.A2;

  public B1 : double = 1.0;
  public B2 : double = QualifiedLiterals.B1 + 2.0;
  public B3 : double = QualifiedLiterals.B1 + QualifiedLiterals.B2;

  public C1 : bool = true;
  public C2 : bool = true && !QualifiedLiterals.C1;
  public C3 : bool = !QualifiedLiterals.C1 && !QualifiedLiterals.C2;
}

module Decimals
{
  public D1 : decimal = 1m;
  public D2 : decimal = D1 + 2m;
  public D3 : decimal = D1 + D2;
}

module QualifiedDecimals
{
  public D1 : decimal = 1m;
  public D2 : decimal = QualifiedDecimals.D1 + 2m;
  public D3 : decimal = QualifiedDecimals.D1 + QualifiedDecimals.D2;
}

module Program
{  
  Main() : void
  {
    def checkConstant(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsLiteral)
          Console.WriteLine($"$(field.Name) is not a constant");
      }
    }
    
    def checkReadOnly(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsInitOnly)
          Console.WriteLine($"$(field.Name) is not readonly");

       def attrs = field.GetCustomAttributes(typeof(DecimalConstantAttribute), true);
       when (attrs.Length == 0)
         Console.WriteLine($"$(field.Name) doesn't have DecimalConstant attribute");
      }
    }  
    
    // Read only
    checkConstant(typeof(Literals));
    checkConstant(typeof(QualifiedLiterals));
    
    // Decimal
    checkReadOnly(typeof(Decimals));
    checkReadOnly(typeof(QualifiedDecimals));
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/
