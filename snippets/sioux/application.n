namespace Sioux
{

using Nemerle.Collections;
using Nemerle.Xml;
using System.Net.Sockets;

public class DieException extends System.Exception
{
  public this () {}
}

public class Application
{
  protected virtual Run () : void
  {
  }

  protected GetVars : Hashtable (string, string);
  protected PostVars : Hashtable (string, string);
  protected PostVarsBytes : Hashtable (string, array (System.Byte));
  protected mutable PageName : string;
  protected mutable Client : Socket;
  protected mutable SockStream : NetworkStream;
  protected mutable FormTemplate : XmlTemplate;

  public this ()
  {
    GetVars <- Hashtable (10);
    PostVars <- Hashtable (10);
    PostVarsBytes <- Hashtable (10);
    PageName <- "";
  }

  split_at (sep : char, s : string) : string * string
  {
    def pos = s.IndexOf (sep);
    if (pos != -1)
      (s.Substring (0, pos), s.Substring (pos + 1))
    else
      (s, "")
  }

  set_get_vars (fname : string) : void
  {
    def (p, qs) = split_at ('?', fname);
    PageName <- p;
    when (qs != "") {
      List.Iter (fun (s : string) {
        def (n, v) = split_at ('=', s);
        def decode (s : string) { 
          System.Web.HttpUtility.UrlDecode (s, System.Text.Encoding.UTF8)
        };
        GetVars.Set (decode (n), decode (v));
      }, List.FromArray (qs.Split (array ['&'])))
    }
  }

  read_line () : string
  {
    def sb = System.Text.StringBuilder ();
    def loop () {
      def ich = SockStream.ReadByte ();
      def ch = (ich :> char);
      if (ich == -1 || ch == '\n') ()
      else if (ch == '\r') loop ()
      else {
        ignore (sb.Append (ch));
        loop ()
      }
    };
    
    loop ();
    sb.ToString ()
  }

  mutable post_length : int;

  read_headers () : void
  {
    post_length <- -1;
    
    def loop () {
      match (read_line ()) {
        | "" => ()
        | line =>
          def (name, val) = split_at (':', line);
          //printf ("%s : %s\n", name, val);
          match (name.ToLower ().Trim ()) {
            | "content-length" =>
              post_length <- int.Parse (val);
              when (post_length > 500000)
                ReportInternalError ("Posted content length exceeded 500000 bytes.")
            | _ => ()
          };
          loop ();
      }
    };

    loop ();
  }

  set_post_vars () : void
  {
    when (post_length > 0) {
      def buf = array (post_length);
      def read_exactly (pos) {
        when (post_length > pos) {
          def res = SockStream.Read (buf, pos, post_length - pos);
          read_exactly (pos + res)
        }
      };
      read_exactly (0);
      def get_field (name, start, pos) {
        if (pos >= buf.Length ||
            buf[pos] == ('&' :> System.Byte) || 
            (name && buf[pos] == ('=' :> System.Byte))) {
          // System.Web.HttpUtility.UrlDecodeToBytes is br0ken in mono
          def enc = System.Text.Encoding.GetEncoding ("iso_8859_1");
          def str = enc.GetString (buf, start, pos - start);
          def bytes = enc.GetBytes (System.Web.HttpUtility.UrlDecode (str));
          (pos + 1, bytes)
        } else
          get_field (name, start, pos + 1)
      };
      def loop (start) {
        when (start < buf.Length) {
          def (start, name) = get_field (true, start, start);
          def (start, val) = 
            if (start >= buf.Length)
              (start, array (0))
            else
              get_field (false, start, start);
          def name = System.Text.Encoding.UTF8.GetString (name);
          PostVarsBytes.Set (name, val);
          def val = System.Text.Encoding.UTF8.GetString (val);
          PostVars.Set (name, val);
          loop (start)
        }
      };
      loop (0)
    }
  }
    
  public HandleRequest (fname : string, client : Socket, 
                        stream : NetworkStream, was_post : bool) : void
  {
    try {
      Client <- client;
      SockStream <- stream;
      read_headers ();
      set_get_vars (fname);
      when (was_post)
        set_post_vars ();
      Run ();
      maybe_send_response ();
    } catch {
      | _ : DieException => ()
      | exn : System.Exception =>
        try {
          ReportInternalError ("got fatal exception " + exn.ToString () + 
                               "\n\n" + exn.StackTrace)
        } catch {
          | _ : DieException => ()
        }
    }
  }

  protected virtual Write (s : string) : void
  {
    def buf = System.Text.Encoding.UTF8.GetBytes (s);
    SockStream.Write (buf, 0, buf.Length)
  }

  protected virtual 'a ReportInternalError (msg : string) : 'a
  {
    Write (
      "HTTP/1.0 500 Server Error\r\n" +
      "Content-type: text/plain\r\n" +
      "\r\n" +
      msg);
    throw DieException ();
  }

  maybe_send_response () : void
  {
    when (FormTemplate != null) {
      Write (
        "HTTP/1.0 200 OK\r\n" +
        "Content-type: text/html; charset=utf-8\r\n" +
        "\r\n");
      
      FormTemplate.GetDocument ().Save (SockStream);
    }
  }
}


} // end Sioux
