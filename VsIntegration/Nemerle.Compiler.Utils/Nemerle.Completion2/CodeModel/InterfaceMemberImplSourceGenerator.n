using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;
using Nemerle.Assertions;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  public class InterfaceMemberImplSourceGenerator : SourceGenerator
  {
    _explicit   : bool;
    _accessMods : string;
    _implName   : string;
    _ty         : MType.Class;
  
    public this(fileIndex : int, writer : TextWriter, ty : MType.Class, explicit : bool, accessMods : string, implName : string)
    {
      base(fileIndex, writer, null);
      
      assert(!explicit || implName != null);
      
      _explicit   = explicit;
      _accessMods = accessMods;
      _implName   = implName;
      _ty         = ty;
    }
            
    public override WriteParameterDeclarations([NotNull] value : IMethod) : void
    {
      def (from, to) = 
        match (_ty.TypeOfMember(value).Hint)
        {
          | Some(MType.Fun(MType.Tuple(from), to)) => (from, to)
          | Some(MType.Fun(from, to)) => ([from], to)
          | Some(MType.Fun(MType.Void, to)) => ([], to)
          | _ => assert(false);
        };
        
      def parms = value.GetParameters().ZipLazy(from);
    
      if (value.IsVarArgs)
      {
        def (till_last, last) = value.GetParameters().DivideLast();

        WriteList(till_last, WriteParameterDeclaration);
        Write(", params ");
        WriteParameterDeclaration(last);
      }
      else
        WriteList(value.GetParameters(), WriteParameterDeclaration);
    }

    public override WriteName(value : IMember) : void
    {
      if (_explicit)
        Write(_implName);
      else
        base.WriteName(value);
    }

    public override WriteAttributes(_member : IMember) : void
    {
      if (_explicit)
        when (_accessMods != null)
          Write(_accessMods + " ");
      else
        Write("public ");
    }

    WriteNoImplBlock([NotNull] value : IMethod) : void
    {
      BeginBlock();
        def parms = value.GetParameters();
        unless (parms.IsEmpty)
        {
          def init = value.GetParameters().Map(p => $"_ = $(p.Name)");
          WriteLine($<#..$(init; "; ");#>);
        }
        
        WriteLine("throw System.NotImplementedException()");
      EndBlock();
    }

    WriteImplements(member : IMember) : void
    {
      when(_explicit)
      {
        WriteLine();
        Write($" implements $(member.DeclaringType.Name).$(member.Name)");
      }
    }

    public override WriteMethodBody([NotNull] value : IMethod) : void
    {
      WriteImplements(value);
      WriteNoImplBlock(value);
    }

    public override WritePropertyBoby(value : IProperty) : void
    {
      WriteImplements(value);

      def getMethod = value.GetGetter();
      def setMethod = value.GetSetter();

      BeginBlock();
      
      unless (getMethod == null)
        WritePropertyGetter(value, getMethod);
      unless (setMethod == null)
        WritePropertySetter(value, setMethod);
        
      EndBlock();
    }

    public override WritePropertyGetter(_property : IProperty, getMethod : IMethod) : void
    {
      Write("get");
      WriteNoImplBlock(getMethod);
    }

    public override WritePropertySetter(_property : IProperty, setMethod : IMethod) : void
    {
      Write("set");
      WriteNoImplBlock(setMethod);
    }
  }
}