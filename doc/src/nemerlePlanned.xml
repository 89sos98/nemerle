<?xml version='1.0' encoding='UTF-8' ?>
<!--
  Copyright (c) 2003 The University of Wroclaw.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
     3. The name of the University may not be used to endorse or promote
        products derived from this software without specific prior
        written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
  NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Nemerle Planned Features</title>
  <section id="intro">
    <title>Intro</title>    
    <body>
      <p>
        This is a description of what is planned to appear in the full version
	of Nemerle language. Several things are still to be designed but we are
	sure about the general direction we want to take.
      </p>
    </body>
  </section>
  <section id="syntaxExt">
    <title>Syntax Extensions</title>
      <body>
        <p>
          Our syntax extensions will share concepts with camlp4,
          macro preprocessors (like CPP and M4), C++ templates and
          various source-to-source translators, that can for example
          create XML i/o routines or SQL tables for types described in
          source language.
        </p>
        <p>
          At basic level it shouldn't be difficult to program such
          language extensions. However I personally wouldn't be surprised
          if language extensions were itself Turing-complete.
        </p>
	For more detailed description of concepts see the 
	<a ref="nemerleExtensions.html">extenstions design</a>.
    </body>
  </section>
  <section id="commenting">
    <title>Commenting Convention</title>
      <body>
        <p>
	  We are planning to design a convention for commenting code.
	  It should be possible to generate documentation directly from
	  code comments and to access specific parts of code inside the
	  comments. We will try to incorporate ideas from javadoc, monodoc
	  and ocamldoc to make code documenting efficient.
	</p>
      </body>
  </section>
  <section id="stdlib">
    <title>Standard Library</title>
      <body>
        <p>
	  Adjacent to libraries designed for .NET we will build a library of
	  functions direct in Nemerle. This library will be well commented and
	  described. Using our commenting convention should be enough to allow
	  users to search through the library for specific algorithm, data
	  structures, methods and types. The library will also contain
	  assertions about implemented function, later possibly with proofs and
	  well described examples. We will encourage users to add their code
	  to the library but the code will be inspected and tested before.
	</p>
      </body>
  </section>
  <section id="tools">
    <title>Logic Tools for Nemerle</title>
      <body>
        <p>
	  We are planning to design a set of tools to facilitate the analysis
	  of programs written in Nemerle. We want to include formal
	  reasoning tools and statistical anaysis and profiling programs.
	  We will also make semi automated testing tool based on similar
	  random testing tools written for Haskell.
	</p>
      </body>
  </section>
</document>
