/*
 * Copyright (c) 2010  David Sorokin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Author: David Sorokin <david.sorokin@gmail.com>
 */

using Nemerle;

using System;
using System.Collections.Generic;

namespace Nemerle.ComputationExpressions
{
  public sealed class ComputationVoid
  {
    public static Value : ComputationVoid = ComputationVoid ()
  }
}

namespace Nemerle.ComputationExpressions.Internal
{
  public module EnumerableHelper
  {
    public Empty[T] () : IEnumerable[T] {
      EmptyEnumerable ()
    }
    
    public Singleton[T] (t : T) : IEnumerable[T]
    {
      yield t
    }
    
    public Append[T] (ts1 :IEnumerable[T], ts2 : IEnumerable[T]) : IEnumerable[T]
    {
      foreach (t in ts1)  yield t;
      foreach (t in ts2)  yield t;
    }
    
    public Delay[T] (cont : void -> IEnumerable[T]) : IEnumerable[T]
    {
      foreach (t in cont ())  yield t
    }
    
    public While[T] (pred : void -> bool, body : IEnumerable[T]) : IEnumerable[T]
    {
      while (pred ())
      {
        foreach (t in body)  yield t;
      }
    }
    
    public ForEach[T1, T2] (coll : IEnumerable[T1], cont : T1 -> IEnumerable[T2]) : IEnumerable[T2]
    {
      foreach (x in coll)
      {
        foreach (t in cont (x))  yield t
      }
    }
    
    private class EmptyEnumerable[T] : IEnumerable[T]
    {
      public this () {}
      
      public GetEnumerator () : IEnumerator[T]
      {
        EmptyEnumerator ()
      }
    }
    
    private class EmptyEnumerator[T] : IEnumerator[T]
    {
      public this () {}
      
      public MoveNext () : bool
      { 
        false 
      }
      
      public Current : T 
      { 
        get { throw InvalidOperationException () }
      }
      
      public Reset () : void {}
      
      public Dispose () : void {}
    }
  }
  
  public variant LazyStream[T]
  {
    | Nil;
    | Cons { value : T; cont : void -> LazyStream[T] }
    
    public ToEnumerable () : IEnumerable[T]
    {
      mutable stream = this;
      mutable flag = true;
      
      while (flag)
      {
        match (stream)
        {
          | Nil => 
            flag = false;
          
          | Cons (value, cont) =>
            yield value;
            stream = cont ();
        }
      }
    }
  }
  
  public variant FakeVoid
  {
    | FakeVoid
  }
}
