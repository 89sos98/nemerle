using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.WUI.Reactive
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder)
  {
    ViewModelImpl.DoTransformBeforeInheritance(tb, Macros.ImplicitCTX())
  }
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder) 
  {
    ViewModelImpl.DoTransform1(tb, Macros.ImplicitCTX())
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder) 
  {
    ViewModelImpl.DoTransform(tb, Macros.ImplicitCTX())
  }
  
  module ViewModelImpl
  {
    public DoTransformBeforeInheritance(tb : TypeBuilder, typer : Typer) : void
    {
      //assert2(false);
      Macros.DefineCTX(typer);
      def vmInterface = <[ ttype: Nemerle.WUI.Reactive.IViewModel ]>;
      def superTypes = tb.GetDirectSuperTypes();
      
      unless (superTypes != null && superTypes.Exists(t => t.Equals(vmInterface)))
        tb.AddImplementedInterface(<[ Nemerle.WUI.Reactive.IViewModel ]>)
    }
    
    public DoTransformExpr(tb : TypeBuilder, typer : Typer, expr : PExpr) : string
    {
      Macros.DefineCTX(typer);
      def doExpr : PExpr -> string = DoTransformExpr(tb, typer, _);
      def convertTi = typer.Manager.LookupTypeInfo("System.Convert", 0);
      def isToStr(m : object) : bool
      {
        | TExpr.StaticRef(mem=m) => m.DeclaringType.Equals(convertTi) && m.Name == "ToString"
        | _ => false
      }
      def isThisAccess(m : object) : bool
      {
        | TExpr.PropertyMember(obj, _) => obj is TExpr.This
        | _ => false
      }
      def isBinOperator(op : PExpr) : bool
      {
        match (op.ToString())
        {
          | ">" | "<" | ">=" | "<=" | "==" | "!=" | "%" | "+" | "-" 
          | "/" | "*" | "^"
          => true
          
          | _ => false
        }
      }
      match (expr)
      {
        | PExpr.Literal => expr.ToString()
        | PExpr.Sequence([e]) => DoTransformExpr(tb, typer, e)
        | <[ string.Concat(..$args) ]> =>
          //assert2(false);
          def removeToString(e : PExpr) : PExpr
          {
            | <[ $func($e2) ]> when isToStr(func.TypedObject) => removeToString(e2)
            | <[ $e2 : $t ]> when t.TypedObject != null && t.TypedObject.Equals(typer.InternalType.String) => removeToString(e2)
            | _ => e
          }
          def args2 = args.Map(removeToString);
          $<#"".concat(..$(args2; ", "; doExpr))#>
          //<#this.FirstName() + " " + this.LastName()#>
          
        | null => ""
        | <[ this.$(name : name) ]> when isThisAccess(expr.TypedObject)
        | <[ $(name : name) ]> when isThisAccess(expr.TypedObject) => $"this.$name()"
        | <[ $op($e1, $e2) ]> when isBinOperator(op) => $"($(doExpr(e1)) $op $(doExpr(e2)))"
        //| <[ $op($e) ]> when isBinOperator(op) => $"($(doExpr(e1)) $op $(doExpr(e2)))"
        | <[ ++ $e ]> when isThisAccess(e.TypedObject)
        | <[ $e ++ ]> when isThisAccess(e.TypedObject)
          =>
            //assert2(false); 
            $"this.$e(this.$e() + 1)"

        | <[ $_($_) ]> when expr.TypedObject is TExpr.MacroEnvelope =>
          def m = expr.TypedObject :> TExpr.MacroEnvelope;
          DoTransformExpr(tb, typer, m.expandedPExpr)
          
        | _ =>
          //assert2(false);
          def ty = expr.GetType().Name;
          Message.Warning(expr.Location, $"JavaScript translator: no convertion for '$expr' PExpr.$ty.");
          expr.ToString()
      }
    }
    
    public DoTransform1(tb : TypeBuilder, typer : Typer) : void
    {
      //assert2(false);
      
      def processMember(member : ClassMember) : void
      {
        | Field(ty=ty) as field =>
          match (ty)
          {
            | <[ VMArray[..$args] ]> when args.Length > 1 => 
              //assert2(false);
              field.ty = MakeNestedViewModel(tb, typer, field.Name, args);
              
            | _ => ()
          }
          
        | _ => ()
      }
      
      match (tb.Ast)
      {
        | TopDeclaration.Class(decls=decls) => foreach (d in decls) processMember(d)
        | _ => ()
      }
    }
    
    public DoTransform(tb : TypeBuilder, typer : Typer) : void
    {
      Macros.DefineCTX(typer);
      
      def convertMethod(name : string, meth : MethodBuilder, isDependent = true) : PExpr
      {
        #region Type method body
        def typer = typer;
        def body = meth.Body;
        def oldEmitDebug = typer.Manager.Options.EmitDebug;
        typer.Manager.Options.EmitDebug = false;
        def methodTyper = Typer(tb, null, meth, meth.Env);
        methodTyper.RunFullTyping();
        typer.Manager.Options.EmitDebug = oldEmitDebug;
        #endregion
        def bodyScript = DoTransformExpr(tb, typer, body);
        meth.Body = body;
        
        def code = 
          if (isDependent)
          $<#
viewModel.$name = ko.dependentObservable(
  function()
  {
    return $bodyScript;
  }, viewModel);#>
          else
$<#
viewModel.$name =
  function()
  {
    return $bodyScript;
  };#>;
        <[ $(code : string) ]>
      }
      
      def convertMember(member : IMember) : PExpr
      {
        | meth is MethodBuilder when meth.Name.StartsWith("get_") || meth.Name.StartsWith("set_") => null //TODO: Add property IMethod.IsAccessor
        | meth is MethodBuilder when meth.IsConstructor => null
        | meth is MethodBuilder when meth.ReturnType is FixedType.Void =>
          convertMethod(meth.Name, meth, false)
        
        | prop is PropertyBuilder when prop.AutoPropertyField.IsSome => 
          def prefix = $<#viewModel.$(prop.Name) = ko.observable(#>;
          <[ $(prefix : string) 
            + Nemerle.WUI.Reactive.Utils.Esc(this.$(prop.Ast.name))
            + $(<#);#> : string) ]>
          
        | prop is PropertyBuilder when prop.CanRead && !prop.CanWrite => 
          convertMethod(prop.Name, prop.GetGetter() :> MethodBuilder)

        | meth is MethodBuilder when meth.Header.ParametersDeclarations.Length == 0 =>
          convertMethod(meth.Name, meth)
          
        | _ => Message.Error(member.Location, "Unsupported member"); null
          
      }
      
      def members = tb.GetMembers(BF.DeclaredOnly | BF.Instance | BF.Public);
      def exprs1 = members.RevMap(convertMember).RevFilter(_ != null);
      def exprs2 = exprs1.Map(e => <[ _ = sb.AppendLine($e) ]>);
      
      def member = tb.DefineWithSource(<[ decl:
        public GetViewModelScript() : string
        {
          def sb = System.Text.StringBuilder();
          _ = sb.AppendLine("var viewModel = { };");
          { ..$exprs2 }
          _ = sb.AppendLine("ko.applyBindings(viewModel);");
          sb.ToString()
        }
        ]>);

      _ = member;
    }
    
    /// Create nested type with given properties and return name of created type.
    public MakeNestedViewModel(tb : TypeBuilder, typer : Typer, typeName : string, props : list[PExpr]) : PExpr
    {
      //assert2(false);
      typer.Manager.MacroColors.PushUseSiteColor();
      
      try
      {
        def makeProp(propDef : PExpr) : ClassMember
        {
          | <[ $(name : name) : $ty ]> => <[ decl: public $(name : name) : $ty { get; set; } ]>
          | _ => Message.FatalError(propDef.Location, "Incorrect format of property defenition. Use: Name : type")
        }
        def name = "T" + typeName;
        def props2 = props.Map(makeProp);
        
        def nested = tb.DefineNestedType(<[ decl:
          [Nemerle.Core.Record, Nemerle.WUI.Reactive.ViewModel]
          public class $(name : dyn) : Nemerle.WUI.Reactive.IViewModel
          {
            ..$props2
          }
          ]>);
          
        nested.Compile();
          
        <[ Nemerle.WUI.Reactive.VMArray[$(tb.Ast.PName : name).$(name : dyn)] ]>
      }
      finally { typer.Manager.MacroColors.PopColor(); }
    }
  }
}
