using Nemerle.IO;

class A { public this () {} }
class B : A {
  public this () {}
  public b () : void { printf ("b\n"); }
}
class C : A {
  public this () {}
  public c () : void { printf ("c\n"); }
}

module M {
  f (a : A) : void
  {
    match (a) {
      | (x : B) => x.b ()
      | (x : C) => x.c ()
      | _ => printf ("miss\n")
    }
  }

  g (c : C) : void
  {
    match (c) {
      | (_ : A) => ()
      | _ => () // W: unused
    }
  }
  
  public Main () : void
  {
    f (A ());
    f (B ());
    f (C ());
  }
}

/*
BEGIN-OUTPUT
miss
b
c
END-OUTPUT
*/
