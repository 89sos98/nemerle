/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler {

public module SystemType 
{
  public mutable Boolean : System.Type;
  public mutable Byte : System.Type;
  public mutable Char : System.Type;
  public mutable Decimal : System.Type;
  public mutable Double : System.Type;
  public mutable Enum : System.Type;
  public mutable FlagsAttribute : System.Type;
  public mutable Int16 : System.Type;
  public mutable Int32 : System.Type;
  public mutable Int64 : System.Type;
  public mutable IntPtr : System.Type;
  public mutable MulticastDelegate : System.Type;
  public mutable Object : System.Type;
  public mutable Reflection_FieldInfo : System.Type;
  public mutable Reflection_PropertyInfo : System.Type;
  public mutable SByte : System.Type;
  public mutable Single : System.Type;
  public mutable String : System.Type;
  public mutable Type : System.Type;
  public mutable UInt16 : System.Type;
  public mutable UInt32 : System.Type;
  public mutable UInt64 : System.Type;
  public mutable Void : System.Type;

  /**
   * Reflects a type using GlobalEnv
   */
  public Reflect (type_name : string) : System.Type
  {
    match (GlobalEnv.LookupExactType (type_name)) {
      | Some (tc) =>
        tc.GetSystemType ()
      | _ =>
        Util.ice ("cannot reflect `" + type_name + "'")
    }
  }

  internal Init () : void
  {
    Boolean <- Reflect ("System.Boolean");
    Byte <- Reflect ("System.Byte");
    Char <- Reflect ("System.Char");
    Decimal <- Reflect ("System.Decimal");
    Double <- Reflect ("System.Double");
    Enum <- Reflect ("System.Enum");
    FlagsAttribute <- Reflect ("System.FlagsAttribute");
    Int16 <- Reflect ("System.Int16");
    Int32 <- Reflect ("System.Int32");
    Int64 <- Reflect ("System.Int64");
    IntPtr <- Reflect ("System.IntPtr");
    MulticastDelegate <- Reflect ("System.MulticastDelegate");
    Object <- Reflect ("System.Object");
    Reflection_FieldInfo <- Reflect ("System.Reflection.FieldInfo");
    Reflection_PropertyInfo <- Reflect ("System.Reflection.PropertyInfo");
    SByte <- Reflect ("System.SByte");
    Single <- Reflect ("System.Single");
    String <- Reflect ("System.String");
    SystemType.Type <- Reflect ("System.Type");
    UInt16 <- Reflect ("System.UInt16");
    UInt32 <- Reflect ("System.UInt32");
    UInt64 <- Reflect ("System.UInt64");
    Void <- Reflect ("System.Void");
  }
}


public module InternalType
{
  public mutable Array_tc : Tycon;
  public mutable Attribute_tc : Tycon;
  public mutable Boolean_tc : Tycon;
  public mutable Byte_tc : Tycon;
  public mutable Char_tc : Tycon;
  public mutable Decimal_tc : Tycon;
  public mutable Delegate_tc : Tycon;
  public mutable Double_tc : Tycon;
  public mutable Enum_tc : Tycon;
  public mutable Exception_tc : Tycon;
  public mutable Int16_tc : Tycon;
  public mutable Int32_tc : Tycon;
  public mutable Int64_tc : Tycon;
  public mutable Object_tc : Tycon;
  public mutable SByte_tc : Tycon;
  public mutable Single_tc : Tycon;
  public mutable String_tc : Tycon;
  public mutable Type_tc : Tycon;
  public mutable UInt16_tc : Tycon;
  public mutable UInt32_tc : Tycon;
  public mutable UInt64_tc : Tycon;
  public mutable MatchFailureException_tc : Tycon;

  public mutable Array : Type;
  public mutable Attribute : Type;
  public mutable Boolean : Type;
  public mutable Byte : Type;
  public mutable Char : Type;
  public mutable Decimal : Type;
  public mutable Delegate : Type;
  public mutable Double : Type;
  public mutable Enum : Type;
  public mutable Exception : Type;
  public mutable Int16 : Type;
  public mutable Int32 : Type;
  public mutable Int64 : Type;
  public mutable Object : Type;
  public mutable SByte : Type;
  public mutable Single : Type;
  public mutable String : Type;
  public mutable Type : Type;
  public mutable UInt16 : Type;
  public mutable UInt32 : Type;
  public mutable UInt64 : Type;
  public mutable MatchFailureException : Type;

  lookup (type_name : string) : Tycon
  {
    match (GlobalEnv.LookupExactType (type_name)) {
      | Some (t) => t
      | None =>
        Util.ice ("internal type " + type_name + " not found")
    }
  }
    
  internal InitSystemTypes () : void
  {
    Array_tc <- lookup ("System.Array"); Array <- T_app (Array_tc, []);
    Attribute_tc <- lookup ("System.Attribute"); Attribute <- T_app (Attribute_tc, []);
    Boolean_tc <- lookup ("System.Boolean"); Boolean <- T_app (Boolean_tc, []);
    Byte_tc <- lookup ("System.Byte"); Byte <- T_app (Byte_tc, []);
    Char_tc <- lookup ("System.Char"); Char <- T_app (Char_tc, []);
    Decimal_tc <- lookup ("System.Decimal"); Decimal <- T_app (Decimal_tc, []);
    Delegate_tc <- lookup ("System.Delegate"); Delegate <- T_app (Delegate_tc, []);
    Double_tc <- lookup ("System.Double"); Double <- T_app (Double_tc, []);
    Enum_tc <- lookup ("System.Enum"); Enum <- T_app (Enum_tc, []);
    Exception_tc <- lookup ("System.Exception"); Exception <- T_app (Exception_tc, []);
    Int16_tc <- lookup ("System.Int16"); Int16 <- T_app (Int16_tc, []);
    Int32_tc <- lookup ("System.Int32"); Int32 <- T_app (Int32_tc, []);
    Int64_tc <- lookup ("System.Int64"); Int64 <- T_app (Int64_tc, []);
    Object_tc <- lookup ("System.Object"); Object <- T_app (Object_tc, []);
    SByte_tc <- lookup ("System.SByte"); SByte <- T_app (SByte_tc, []);
    Single_tc <- lookup ("System.Single"); Single <- T_app (Single_tc, []);
    String_tc <- lookup ("System.String"); String <- T_app (String_tc, []);
    Type_tc <- lookup ("System.Type"); InternalType.Type <- T_app (Type_tc, []);
    UInt16_tc <- lookup ("System.UInt16"); UInt16 <- T_app (UInt16_tc, []);
    UInt32_tc <- lookup ("System.UInt32"); UInt32 <- T_app (UInt32_tc, []);
    UInt64_tc <- lookup ("System.UInt64"); UInt64 <- T_app (UInt64_tc, []);
  }

  // to be called after scan_globals (think about compiling nemerle.dll)
  internal InitNemerleTypes () : void
  {
    InternalType.MatchFailureException_tc <- lookup ("Nemerle.Core.MatchFailureException"); 
    InternalType.MatchFailureException <- T_app (InternalType.MatchFailureException_tc, []);
  }
}

} // end ns
