using System;
using System.IO;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;

namespace CSharpParser.Tests
{
  macro GetTestCases(fileMask : string)
  {
    if(Manager().IsIntelliSenseMode)
    {
      <[ [] ]>
    }
    else
    {
      def fileMask = Path.Combine(Path.GetDirectoryName(Manager().Options.ProjectPath), fileMask);
      TestsImpl.MakeTests(Manager(), fileMask)
    }
  }

  module TestsImpl
  {
    public MakeTests(manager : ManagerClass, fileMask : string) : PT.PExpr
    {
      def maskFileName = Path.GetFileName(fileMask);
      def maskFileDir = Path.GetDirectoryName(fileMask);
      def fileNames =
        if(fileMask.IndexOfAny(array['*', '?']) >= 0)
          Directory.GetFiles(maskFileDir, maskFileName, SearchOption.TopDirectoryOnly)
        else
          Directory.GetFiles(maskFileDir, maskFileName);

      def className =  Macros.NewSymbol("TestCases");

      def tb = manager.CoreEnv.Define(<[ decl: internal module $(className : name) { } ]>);
      mutable testCases = [];
      foreach(fileName in fileNames)
      {
        def parserInput =
          using(file = IO.FileStream(fileName, IO.FileMode.Open, IO.FileAccess.Read))
          using(reader  = IO.StreamReader(file, Text.Encoding.ASCII, true))
            reader.ReadToEnd();

        def testCase = MakeTest(fileName, parserInput);

        def validatorName = Macros.NewSymbol("__AST_VALIDATOR__" + fileName);

        tb.Define(<[ decl:
          private $(validatorName : name)(unit : CSharpParser.CompilationUnit) : bool
          {
            $(testCase.ValidateAst)
          }
        ]>);

        testCases ::= <[
          CSharpParser.Tests.TestCase(
            $(testCase.FileName : string),
            Nemerle.Peg.SourceSnapshot($(testCase.Source : string)),
            [..$(testCase.ErrorLines.Map(line => <[ $(line : int) ]>))],
            $(validatorName : name))
        ]>
      }
      otherwise
        Message.Warning($"no files matching `$fileMask' found");

      tb.Define(<[ decl:
        public GetTestCases() : list[CSharpParser.Tests.TestCase]
        {
          [..$(testCases.Rev())]
        }
      ]>);

      tb.Compile();

      <[ $(className : name).GetTestCases() ]>
    }

    [Record]
    private class TestCaseCreateInfo
    {
      [Accessor] fileName : string;
      [Accessor] source : string;
      [Accessor] errorLines : list[int];
      [Accessor] validateAst : PT.PExpr;
    }

    private nodeTypeNamePattern : Regex = Regex(@"//\s*NODE\s*:\s*(?<nodeTypeNameStr>.*?)\s*$",   RegexOptions.Compiled);
    private nodePatternPattern  : Regex = Regex(@"//\s*PATTERN\s*:\s*(?<nodePatternStr>.*?)\s*$", RegexOptions.Compiled);
    private errorLinePattern    : Regex = Regex(@"//\s*E\s*:?\s*",                                RegexOptions.Compiled);

    private MakeTest(fileName : string, parserInput : string) : TestCaseCreateInfo
    {
      mutable nodeTypeName = null;
      mutable nodePattern = null;
      mutable errorLines = [];

      def csharpParserNamespace = ManagerClass.Instance.CoreEnv.EnterIntoNamespace([ "CSharpParser" ]);
      def fileIndex = Location.GetFileIndex(fileName);

      foreach(line in parserInput.Split(array[ "\r\n", "\n" ], StringSplitOptions.None) with lineIndex)
      {
        def matchobj = nodeTypeNamePattern.Match(line);
        when(matchobj.Success)
        {
          def group = matchobj.Groups["nodeTypeNameStr"];
          def loc = Location(fileIndex, lineIndex + 1, group.Index + 1);

          if(null == nodeTypeName)
            nodeTypeName = MainParser.ParseExpr(csharpParserNamespace, group.Value, loc);
          else
            Message.Error(loc, "AST node type directive can be specified only once");

          Nemerle.Imperative.Continue();
        }

        def matchobj = nodePatternPattern.Match(line);
        when(matchobj.Success)
        {
          def group = matchobj.Groups["nodePatternStr"];
          def loc = Location(fileIndex, lineIndex + 1, group.Index + 1);

          if(null == nodePattern)
            nodePattern = MainParser.ParseExpr(csharpParserNamespace, group.Value, loc);
          else
            Message.Error(loc, "AST node pattern directive can be specified only once");

          Nemerle.Imperative.Continue();
        }

        def matchobj = errorLinePattern.Match(line);
        when(matchobj.Success)
        {
          errorLines ::= lineIndex + 1;

          Nemerle.Imperative.Continue();
        }
      }

      TestCaseCreateInfo(
        Path.GetFileName(fileName),
        parserInput,
        errorLines.Rev(),
        if(null == nodeTypeName)
          <[ _ = unit; true ]>
        else
          <[ LRPEGCC.AstUtils.ValidateAst(unit, $nodeTypeName, $nodePattern) ]>)
    }
  }
}