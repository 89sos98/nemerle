//using Nemerle.Collections;

using System.Console;
using System.Collections.Generic;
using SCG = System.Collections.Generic;

public module Program
{
  public Foo() : IEnumerable[int]
  {
    def f()
    {
      foreach(_ in [] : IEnumerable[int]) //error
        (); 
      //try { /*yield 2;*/ def _try_var = 1; }
      //finally { def _finally_var = 2; }
      1
    }
    repeat(3)
      yield f();
  }
  
  public Main() : void
  {
    foreach (x in Foo().NToArray())
      WriteLine(x);

    def res = [1, 2].MapLazy(x => (x * x).ToString()).NToArray();

    foreach (x in res)
      WriteLine(x);
  }

  public MapLazy[From, To](
    this source : IEnumerable[From],
    convert : From -> To
  )
    : IEnumerable[To]
  {
    foreach(elem in source)
      yield convert(elem)
  }

  public NToArray[T](this source : IEnumerable[T]) : array[T]
  {
    def dest = SCG.List();

    foreach (elem in source)
      dest.Add(elem);

    dest.ToArray()
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/