using System;

namespace Nemerle.ComputationExpressions.Async
{
  public module AcyncBuilder
  {
    public Return[A](value : A) : Async[A]
    {
      AsyncReturn(value);
    }

    public Bind[A, B](async : Async[A], f : A -> Async[B]) : Async[B]
    {
      AsyncBind(async, f);
    }

    public Bind[A, B](async : Async[A], f : void -> Async[B]) : Async[B]
    {
      AsyncBindVoid(async, f);
    }

    public While[A](pred : void -> bool, body : void -> Async[FakeVoid]) : Async[FakeVoid]
    {
      AsyncWhile(pred, body);
    }

    public Delay[A](cont : void -> Async[A]) : Async[A]
    {
      AsyncDelay(cont);
    }

    public TryFinally[A](body : Async[A], handler : void -> void) : Async[A]
    {
      AsyncTryFinally(body, handler);
    }

    public TryCatch[A](body : Async[A], handler : Exception -> Async[A]) : Async[A]
    {
      AsyncTryCatch(body, handler);
    }

    public Using[A, B] (resource : A, cont : A -> Async[B]) : Async[B]
      where A : IDisposable
    {
      TryFinally(Delay(() => cont(resource)), () =>
        {
          def resource = resource : IDisposable;
          when (resource != null) 
            resource.Dispose()
        })
    }
  }
}
