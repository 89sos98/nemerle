using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using System.Collections.Generic;

partial class RsdnMl
{
  static _rxParseSubPart : Regex = Regex(@"(.*?):\s*(.*)\s*", RegexOptions.Compiled);
  
  static _hendlers : Hashtable[string, (string * string * string -> XElement) * string] = Hashtable(
    array[("Версия",          (ParsePart,     "VERSION")),
          ("Дата",            (ParsePart,     "DATE")),
          ("Автор",           (ParseAuthor,   "AUTHOR")), 
          ("Переводчик",      (ParseAuthor,   "TRANSLATOR")), 
          ("Источник",        (ParsePart,     "SOURCE")),
          ("Предоставил(и)",  (ParseAuthor,   "CONTRIBUTOR"))
          ]);

  static _personHendlers : Hashtable[string, string * string] = Hashtable(
    array[("ФИО",                       ("",                    "")),
          ("E-Mail",                    ("href",                "")), //mailto:
          ("Номер профиля на rsdn.ru",  ("rsdn-profile",        "")), //http:://
          ("Телефон",                   ("phone",               "")), 
          ("Адрес",                     ("address",             "")),
          ("Место работы",              ("place-of-employment", "")),
          ("Должность",                 ("job",                 "")),
          ("Место учебы",               ("place-of-study",      "")),
          ("Научная степень",           ("scientific-degree",   "")),
          ("Научное звание",            ("Scientific-rank",     "")),
          ]);
          
  static ParsePartStr(prefix : string, part : string) : string
  {
    assert2(part.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase));
    assert2(part[prefix.Length] == ':');
    part.Substring(prefix.Length + 1).Trim()
  }
  
  static ParsePart(prefix : string, tagName : string, part : string) : XElement
  {
    XElement(tagName, ParsePartStr(prefix, part))
  }
  
  static ParseAuthor(prefix : string, tagName : string, metadata : string) : XElement
  {
    def metadata = ParsePartStr(prefix, metadata);
    def all = metadata + ";";
    def parts = all.Split(array[';'], StringSplitOptions.RemoveEmptyEntries)
                   .MapToArray(x => x.TrimStart());
    def elem = XElement(tagName);
                   
    foreach (part in parts)
    {
      def (prefix, value) = SplitPrefix(part);
      mutable attrInfo;
      
      if (_personHendlers.TryGetValue(prefix, out attrInfo))
      {
        def (attrName, attrPrefix) = attrInfo;
        
        if (attrName == "")
          elem.Add(value);
        else
          elem.Add(XAttribute(attrName, $"$attrPrefix$value"));
      }
      else
      {
        /*def xx = "Номер профиля на rsdn.ru";
        when (xx.Length == prefix.Length)
          for (mutable i = 0; i < xx.Length; i++)
            unless (xx[i] == prefix[i])
              assert(true);*/
              
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine($<#Префикс "$prefix" не найден!"#>);
        Console.ResetColor();
      }
    }
    
    elem
  }
  
  ParseMetadata(metadata : string) : array[XElement]
  {
    def metadata = metadata.Replace("\r\n", "\n").Replace("\r", "\n");
    def parts    = metadata.Split(array['\n'], StringSplitOptions.RemoveEmptyEntries)
                           .MapToArray(x => x.Trim());
    def elems = List();
                        
    foreach (part in parts)
    {
      def prefix = ParsePrefix(part);
      mutable info;
      
      when (_hendlers.TryGetValue(prefix, out info))
      {
        def (func, tagName) = info;
        def elem = func(prefix, tagName, part);
        elems.Add(elem);
      }
    }
      
    //_ = Console.ReadLine();
    elems.NToArray()
  }
  
  static SplitPrefix(str : string) : string * string
  {
    def m = _rxParseSubPart.Match(str);
    
    if (m.Success) (Normalize(m.Groups[1].Value), m.Groups[2].Value)
    else           ("", "")
  }
  
  static ParsePrefix(str : string) : string
  {
    def index = str.IndexOf(':');
    if (index <= 0) ""
    else Normalize(str.Substring(0, index));
  }

  static Normalize(str : string) : string
  {
    def removeUnnecessarySpaces(str : string) : string
    {
      def len = str.Length;
      def newStr = str.Replace("  ", " ");
      if (len == newStr.Length) newStr
      else                      removeUnnecessarySpaces(newStr)
    }

    removeUnnecessarySpaces(str.Replace('\u00A0', ' '));
  }
}
