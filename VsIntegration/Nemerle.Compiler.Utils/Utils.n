using System.Diagnostics;
using System.Reflection;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Completion2;
using Nemerle.Imperative;
using System;
using System.Globalization;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;
using SCG   = System.Collections.Generic;
using Nemerle.Collections;

namespace Nemerle.Compiler.Utils
{
  public module Utils
  {
    InvariantCultureCompareInfo : CompareInfo = CultureInfo.InvariantCulture.CompareInfo;

    public GetLast[T](this source : SCG.IList[T]) : T
    {
      source[source.Count - 1]
    }

    public GetLast[T](this source : array[T]) : T
    {
      source[source.Length - 1]
    }

    public GetLast[T](this source : SCG.IList[T], aDefault : T) : T
    {
      if (source.Count > 0) source[source.Count - 1]
      else                  aDefault
    }

    public GetLast[T](this source : array[T], aDefault : T) : T
    {
      if (source.Length > 0) source[source.Length - 1]
      else                   aDefault
    }

    // For debug purposes, brief output
    public Brief(this output : string, maximalLength : int = 100) : string
    {
      def ellipsis = "...";
      def s = output.Replace('\n', ' ');
      if (s.Length > maximalLength)
        s.Substring(0, maximalLength - ellipsis.Length) + ellipsis;
      else
        s
    }
    
    /// Fast find index of substing.
    public OrdinalIndexOf(this source : string, value : string, startIndex : int) : int
    {
      InvariantCultureCompareInfo.IndexOf(source, value, 
        startIndex, CompareOptions.Ordinal);
    }

    public StartsWithIgnoreCase(this source : string, value : string) : bool
    {
      InvariantCultureCompareInfo.IsPrefix(source, value, CompareOptions.IgnoreCase)
    }

    public OrdinalStartsWith(this source : string, value : string) : bool
    {
      source.StartsWith(value, StringComparison.Ordinal)
    }

    public IsNullOrEmpty(this value : string) : bool
    {
      if (value == null) true else value.Length == 0
    }

    public IsNullOrEmpty[T](this value : list[T]) : bool
    {
      if (value == null) true else value.IsEmpty
    }

    public IsVariantType(sysType : Type) : bool
    {
      sysType.GetCustomAttributes(Const.VariantType, false).Length == 1
    }

    public IsVariantOptionType(sysType : Type) : bool
    {
      sysType.GetCustomAttributes(Const.VariantOptionType, false).Length == 1
    }

    public GetGlyphIndex(this typeInfoCache : NamespaceTree.TypeInfoCache) : GlyphType
    {
      // TypeInfo loaded or parsed
      | Cached(ty)               => ty.GetTydecl().GetGlyphIndex()
      // ambiguous TypeInfo loaded or parsed
      | CachedAmbiguous          => GlyphType.Snippet
      // TypeInfo of external type not yet loaded
      | NotLoaded(extType)       => extType.SystemType.GetGlyphIndex()
      | NotLoadedList(_extTypes) => GlyphType.Snippet
      | NamespaceReference       => GlyphType.Namespace
      | MacroCall                => GlyphType.Macro
      | No                       => GlyphType.Snippet
    }

    public GetGlyphIndex(this sysType : Type) : GlyphType
    {
      if (sysType.IsInterface)                           GlyphType.Interface
      else if (sysType.IsEnum )                          GlyphType.Enum 
      else if (sysType.IsSubclassOf(Const.DelegateType)) GlyphType.Delegate
      else if (IsVariantType(sysType))                   GlyphType.Variant
      else if (IsVariantOptionType(sysType))             GlyphType.VariantOption
      else                                               GlyphType.Class;
    }

    public GetGlyphIndex(this typeDecl : Typedtree.TypeDeclaration) : GlyphType
    {
        | Class         => GlyphType.Class
        | Alias(ty)     => ty.TypeInfo.GetTydecl().GetGlyphIndex()
        | Interface     => GlyphType.Interface
        | Variant       => GlyphType.Variant //{ members : list [TypeInfo]; }
        | VariantOption => GlyphType.VariantOption
        | Enum          => GlyphType.Enum
    }

    public GetTypeKindName(this typeDecl : Typedtree.TypeDeclaration) : string
    {
      | Class         => "class "
      | Alias(ty)     => "alias: " + GetTypeKindName(ty.TypeInfo.GetTydecl())
      | Interface     => "interface "
      | Variant       => "variant "
      | VariantOption => "variant option "
      | Enum          => "enum "
    }

    public static IsSpecialConstraint(ty : PExpr) : bool
    {
    | PExpr.Ref(name) =>
      match (name.Id)
      {
      | "new"
      | "class"
      | "struct"
      | "+"
      | "-" => true
      | _   => false
      }
    | _   => false
    }

    public static ToMethodDefinitionString(this t : TyVar) : string
    {
      | MType.Fun(parms, to) =>
        def parmsStr = match (parms)
        {
          | MType.Tuple as tuple => tuple.args.Map(ToDisplayString).ToString(", ")
          | _                    => parms.ToDisplayString()
        }

        "(" + (if (parmsStr == "void") "" else parmsStr) + ") : " + to.ToDisplayString()

      | _ => " : " + t.ToDisplayString()
    }

    public static GetFullName(this member: IMember) : string
    {
      match (member)
      {
        | ti is TypeInfo => ti.FullName
        | _ =>
          if (member.DeclaringType is null)
            member.Name
          else
            member.DeclaringType.FullName + "." + member.Name
      }
    }

    public static ToDisplayString(this t : TyVar) : string
    {
      ToDisplayString(t, SCG.Dictionary())
    }

    public static ToDisplayString(this t : MType) : string
    {
      ToDisplayString(t, SCG.Dictionary())
    }

    public static GetNameFromType (t : TyVar) : string
    {
      GetNameFromType(t, SCG.Dictionary())
    }

    public static GetNameFromType (t : MType) : string
    {
      GetNameFromType(t, SCG.Dictionary())
    }

    private static ToDisplayString(t : TyVar, types : SCG.Dictionary[MType,int]) : string
    {
      GetNameFromType(t, types);
    }

    private static ToDisplayString(t : MType, types : SCG.Dictionary[MType,int]) : string
    {
      GetNameFromType(t, types);
    }

    private static GetNameFromType (t : TyVar, types : SCG.Dictionary[MType,int]) : string
    {
      match (t)
      {
        | mType is MType => GetNameFromType(mType, types)
        | x => 
          match (x.UpperBound)
          {
            | Some(mType) => GetNameFromType(mType, types)
            | _ => "<unknown>"
          }
      }
    }

    private static GetNameFromType (t : MType, types : SCG.Dictionary[MType,int]) : string
    {
      when (types.ContainsKey(t))
        return "<error: cyclic type found>";

      types.Add(t, 0);

      try
      {
        match (t)
        {
          | Class as c => 
            mutable name = Completion.ReplaceSpecialName(c.tycon.FrameworkTypeName);

            when (c.args.Length > 0)
            {
              name += "[";
              
              foreach (x in c.args)
                name += GetNameFromType (x, types) + ", ";

              name = name.Trim(',', ' ') + "]";
            }
            name
              
          | TyVarRef as r => r.tyvar.Name
          | Fun as f =>
            def fromTy = f.from.Fix();
            def toTy   = f.to.Fix();
            if (fromTy : object == t || toTy : object == t)
              "<error: cyclic type found>"
            else
              GetNameFromType(fromTy) + " -> " + GetNameFromType(toTy, types)

          | Tuple as tuple => tuple.args.Map(ToDisplayString(_, types)).ToString(" * ")
          | Array as a => "array[" + GetNameFromType(a.t.Fix(), types) + "]"
          | Void => "void"
          | Ref as rf => "ref " + GetNameFromType (rf.t.Fix(), types)
          | Out as ut => "out " + GetNameFromType (ut.t.Fix(), types)
          | Intersection(types) => $"one of $types"
        }
      }
      finally { _ = types.Remove(t); }
    }

    public static GetGlyphIndex(this member : IMember) : int
    {
      def glyphType = match (member.MemberKind)
      {
        | Field                 => GlyphType.Field
        | Method                => GlyphType.Method
        | Constructor           => GlyphType.Class
        | Property              => GlyphType.Property
        | TypeInfo | NestedType => GlyphType.Class
        | Event                 => GlyphType.Event
        | _                     => GlyphType.Class
      };

      glyphType :> int;
    }

    public GetMemberByLocation(
      this typeBuilder : TypeBuilder,
      fileIndex        : int,
      line             : int,
      col              : int
    )
      : IMember
    {
      def find(members : list[IMember]) 
      {
      | member :: tail => 

        match (member)
        {
        | tb is TypeBuilder     => 

          if (tb.Location.Contains(fileIndex, line, col))
            GetMemberByLocation(tb, fileIndex, line, col) ?? tb;
          else
            find(tail)

        //| pb is PropertyBuilder =>

        //  def mb = find([pb.GetGetter(), pb.GetSetter()]);

        //  if (mb != null)
        //    mb
        //  else if (!pb.IsGenerated && pb.Location.Contains(fileIndex, line, col))
        //    pb
        //  else
        //    null

        //| fb is FieldBuilder    => 

        //  def name = fb.Ast.name;

        //  if (!name.Location.IsGenerated && name.Location.Contains(fileIndex, line, col))
        //    fb
        //  else
        //    find(tail);

        | mb is MethodBuilder   => 

          if (!mb.IsGenerated &&
              (mb.Location.Contains(fileIndex, line, col) ||
               mb.BodyLocation.Contains(fileIndex, line, col)))
            mb
          else
            find(tail)

        | mb is MemberBuilder
          when !mb.IsGenerated && mb.Location.Contains(fileIndex, line, col) => 

            mb

        | _ => find(tail)
        }

      | [] => null
      }

      def members = typeBuilder.GetMembers(
        BindingFlags.Static %| BindingFlags.Instance  %|
        BindingFlags.Public %| BindingFlags.NonPublic %|
        BindingFlags.DeclaredOnly);

      find(members)
    }

    public GetLocalPath(this asm : Assembly) : string
    {
       Uri(asm.CodeBase).LocalPath;
    }

    public IndexOf ['a] (this l : list ['a], a : 'a) : int
    {
      def loop(l, a, idx)
      {
        match (l)
        {
        | h :: t  =>
          if (h.Equals (a))
            idx
          else
            loop (t, a, idx + 1)
        | [] => -1
        }
      }

      loop(l, a, 0)
    }

    public FindIndexOf ['a] (this l : list ['a], pred : 'a -> bool) : int
    {
      def loop(l, pred, idx)
      {
        match (l)
        {
        | h :: t  =>
          if (pred(h))
            idx
          else
            loop (t, pred, idx + 1)
        | [] => -1
        }
      }

      loop(l, pred, 0)
    }

    /// The 'lst' must be ordered. This function test only first and last elements.
    public static OrderedContains[TT](this lst : list[TT], testLine : int, testCol : int) : bool
      where TT : Located
    {
      Debug.Assert(lst.IsOrdered((x, y) => x.Location.CompareTo(y.Location) > 0));
  
      if (lst.IsEmpty)
        false
      else
        (lst.Head.Location + lst.Last.Location).Contains(testLine, testCol)
    }

    public ReadAllTokens(this lex : LexerBase) : array[Token]
    {
      def lst = SCG.List();
      def safeGetToken(lexer : LexerBase)
      {
        try { lexer.GetToken() }
        catch
        {
          | _ is LexerBase.Error => Token.EndOfFile(); // Ignore lexer errors (VladD2: maybe add warning?)
          | _ => throw
        }
      }
      def scan(tok : Token)
      {
        | EndOfFile | null => lst
        | _                => lst.Add(tok); scan(safeGetToken(lex));
      }

      scan(safeGetToken(lex)).ToArray();
    }

    public Clear[T](this ary : array[T]) : void
    {
      Array.Clear(ary, 0, ary.Length);
    }

    /// Retrieve full namespace path and names of all outer types.
    /// list[string] - namespace path.
    /// list[string * int]:
    ///      string - name of type
    ///      int - type parametrs count.
    public static MakeFullName(this topDecl : TopDeclaration)
      : list[string] * list[string * int]
    {
      def makeFullName(topDecl : TopDeclaration, typeInfs)
      {
        def typeParamCount = topDecl.typarms.tyvars.Length;

        if (topDecl.DefinedIn == null)
          (topDecl.ParsedName.context.CurrentNamespace.FullName, 
           ((topDecl.Name, typeParamCount) :: typeInfs))
        else
          makeFullName(topDecl.DefinedIn, (topDecl.Name, typeParamCount) :: typeInfs)
      }

      makeFullName(topDecl, [])
    }
    
    public static GetLocation(obj : object) : Location
    {
      | obj is Located => obj.Location
      | obj is IMember => obj.Location
      | obj is Decl    => obj.Location
      | _              => Location.Default;      
    }
    
    /// Return nonoverlapping list of 'overlappingRanges'
    public RemoveOverlapping[TValue, TPoint](
      overlappingRanges : list[TValue * TPoint * TPoint],
      increment : TPoint -> TPoint,
      decrement : TPoint -> TPoint
    )
      : list[TValue * TPoint * TPoint]
      where TPoint: System.IComparable[TPoint]
    {
      RemoveOverlapping(overlappingRanges, _.CompareTo(_), increment, decrement)
    }
    
    /// Return nonoverlapping list of 'overlappingRanges'
    public RemoveOverlapping[TValue, TPoint](
      overlappingRanges : list[TValue * TPoint * TPoint],
      compare : TPoint * TPoint -> int,
      increment : TPoint -> TPoint,
      decrement : TPoint -> TPoint
    )
      : list[TValue * TPoint * TPoint]
    {
      def (entries, _) = overlappingRanges.FoldLeft(([], 0), fun((value, start, end), (acc, i)) 
        { ((value, start, 1, i) :: (value, increment(end), 0, i) :: acc, i + 1) });
        
      //WriteLine(entries);

      def entriesSorted = entries.Sort(fun((_, p1, _, i1), (_, p2, _, i2)) 
        { def res = compare(p1, p2); if (res == 0) i1 - i2 else res } );
        
      //WriteLine(entriesSorted);

      def result = entriesSorted.FoldLeft(([(Nemerle.Extensions.DefaultValue(TValue), -1)], []),
        fun((value, pos, start, i), (stack, res))
        {
          def newStack = if (start != 0) (value, i) :: stack else stack.Remove(value, i);
          def (topValue, topIndex) = newStack.Head;
          (newStack, (topValue, topIndex, pos) :: res)
        });
        
      def ranges = result[1].Rev();
        
      //WriteLine(ranges);
      
      def rangesFiltered = ranges.Tail.FoldLeft((ranges.Head, []), 
        fun((_, nextIndex, nextPos) as next, ((value, index, pos) as curr, acc))
        {
          assert2(compare(pos, nextPos) <= 0); assert2(index >= 0); assert2(nextIndex >= -1);
          if (index == nextIndex) (curr, acc)
          else (next, if (compare(pos, nextPos) == 0) acc
                      else (value, pos, decrement(nextPos)) :: acc)
        });
      
      def result = rangesFiltered[1].Rev();
      
      result
    }

    public static CallForAllRelated[T](this mb : MemberBuilder, func : MethodBuilder -> T) : T
    {
      match (mb.Related)
      {
        | RefTo.Method(method) => func(method)
        | RefTo.Methods(methods) => methods.Map(func).Head;
        | RefTo.Type(t) => t.GetMethods().Map(m => func(m :> MethodBuilder)).Head;
        | RefTo.Types(ts) => ts.Fold([], (t, acc) => t.GetMethods() + acc).Map(m => func(m :> MethodBuilder)).Head;
        | RefTo.None => Nemerle.Extensions.DefaultValue(T);
      }
    }

    public static GetAllRelated(this mb : MemberBuilder) : SCG.IEnumerable[MethodBuilder]
    {
      match (mb.Related)
      {
        | RefTo.Method(method) => yield method;
        | RefTo.Methods(methods) =>
          foreach (method in methods)
            yield method;
            
        | RefTo.Type(t) =>
          foreach (method :> MethodBuilder in t.GetMethods())
            yield method;
            
        | RefTo.Types(ts) =>
          foreach (t in ts)
            foreach (method :> MethodBuilder in t.GetMethods())
              yield method;
              
        | RefTo.None => ()
      }
    }
    
    private MakeTyParamsToTyArgsMap(
      tyParams : list[StaticTyVar], 
      tyArgs   : list[TyVar], 
      tyMap    : Hashtable[string, TyVar]
    )          : Hashtable[string, TyVar]
    {
      List.FoldLeft2(tyParams, tyArgs, tyMap, 
        fun(tyParam, tyArg, tyMap){ tyMap[tyParam.Name] = tyArg; tyMap });
    }
      
    public MakeTextForType(ti : TypeInfo, tyArgs : list[TyVar]) : string * string * string
    {
      def tyMap = MakeTyParamsToTyArgsMap(ti.Typarms, tyArgs, Hashtable());
      def tyToStr(tyParamBame : string)
      {
        tyMap[tyParamBame].ToString()
      }

      def makeStrForType(ti : TypeInfo) : string * string * string * _
      {
        def (prefix1, prefix2, prefix3, usedTyParams) = 
          if (ti.DeclaringType != null) makeStrForType(ti.DeclaringType)
          else 
          {
            def ns = ti.NamespaceNode.Parent.GetDisplayName();
            (ns, ns, ns, [])
          };
        def tyParmsNames : list[string] = ti.Typarms.Map(_.Name);
        def unusdTyParams = tyParmsNames.ExcludeLazy(usedTyParams).ToList();
        def newUsedTyParams = usedTyParams + tyParmsNames;
        def name = ti.Name;
        def (str1, str2, str3) = 
          if (unusdTyParams.IsEmpty()) (name, name, name)
          else ($<#$name[..$(unusdTyParams; ", "; tyToStr)]#>, $<#$name[..$unusdTyParams]#>, name);

        if (prefix1.IsNullOrEmpty()) 
          (str1, str2, str3, newUsedTyParams)
        else 
          ($"$prefix1.$str1", $"$prefix2.$str2", $"$prefix3.$str3", newUsedTyParams)
      }
      
      def (str1, str2, str3, _) = makeStrForType(ti);
      
      (str1, str2, str3)
    }

    public MakeTextHintForTExprStaticRef(
      expr    : TExpr, 
      ti      : TypeInfo, 
      tyArgs1 : list[TyVar],
      method  : IMethod,
      tyArgs2 : list[TyVar]
    ) : string
    {
      def tyParams = ti.Typarms + method.Header.typarms;
      def makeTyParamsInfo()
      {
        def makeTyParamsToTyArgsMap()
        {
          def tyMap = MakeTyParamsToTyArgsMap(ti.Typarms, tyArgs1, Hashtable());
          MakeTyParamsToTyArgsMap(method.Header.typarms, tyArgs2, tyMap);
        }

        def tyMap = makeTyParamsToTyArgsMap();
        $<#..$(tyParams; "\n"; p => $"  $p is $(tyMap[p.ToString()])")#>
      }
      def tyParamsInfo = makeTyParamsInfo();

      def parms = method.Header.parms;
      def (argsTypes, retType) = expr.ty.FixedValue.FunReturnTypeAndParms(method);
      def argsStrs  = parms.Map2Lazy(argsTypes, (a, t) => $"$(a.Name) : $t");
      def name  = method.Name;
      def isCtor = name.Contains(".ctor");
      def (tyStr1, tyStr2, tyStr3) = MakeTextForType(ti, tyArgs1);
      def tyStr1 = if (isCtor || parms.IsEmpty) tyStr1 else tyStr3;
      def methodTyParams = if (method.Header.typarms.IsEmpty) "" 
                           else $<#[..$(method.Header.typarms)]#>;
      def ext = if (method.IsExtension) "this " else "";

      def NL  = "\n  ";
      def NLS = ",\n  ";
      def methodType = $<#$tyStr2.$name$methodTyParams($ext..$parms) : $(method.ReturnType)#>;
      def methodType = 
        if (methodType.Length > 100 && parms.Length > 0)
          $<#$tyStr2.$name$methodTyParams($NL$ext..$(parms; NLS)$NLS) : $(method.ReturnType)#>
        else methodType;
      def callType   = $<#$tyStr1.$name($ext..$argsStrs) : $retType#>;
      def callType   = 
        if (callType.Length > 100 && parms.Length > 0)
          $<#$tyStr1.$name($NL$ext..$(argsStrs; NLS)$NLS) : $retType#>;
        else callType;

      def methodInfo = if (tyParams.IsEmpty) "The static method call:\n" + methodType
                       else "The generic static method call. Source method type is:\n" 
                       + methodType + "\n\nInferred type:\n" + callType + "\n\nType parameters info:\n" 
                       + tyParamsInfo.Replace("-", "").Replace("+", "");
      (methodInfo + GetDocText(method, method.Location)).Trim()
    }
 
    public MakeTextHintForTExprMethodRef(
      expr       : TExpr, 
      obj        : TExpr, 
      method     : IMethod, 
      typeArgs   : list [TyVar], 
      notvirtual : bool
    ) : string
    {
      def name  = method.Name;
      def parms = method.Header.parms;
      def (argsTypes, retType) = expr.ty.FixedValue.FunReturnTypeAndParms(method);
      def argsStrs  = parms.Map2Lazy(argsTypes, (a, t) => $"$(a.Name) : $t");
      $"$(obj.ty).$name(..$argsStrs) : $retType"
    }
    
    
    

    public MakeTextHintForReferenceTExpr(expr : TExpr) : string
    {
      def makeText(expr : TExpr)
      {
        //| TExpr.ConstantObjectRef(_, _o)
        //| TExpr.StaticPropertyRef(_, _o)
        //| TExpr.FieldMember      (_, _o)
        //| TExpr.PropertyMember   (_, _o)
        | TExpr.MethodRef(obj, method, typeArgs, notvirtual) => 
          MakeTextHintForTExprMethodRef(expr, obj, method, typeArgs, notvirtual)
          
        //| TExpr.LocalFunRef         (_o, _)
        //| TExpr.StaticRef(MType.Class(ti, tyArgs1), method is IField, tyArgs2) =>
        //| TExpr.StaticRef(MType.Class(ti, tyArgs1), method is IProperty, tyArgs2) =>
        | TExpr.StaticRef(MType.Class(ti, tyArgs1), method is IMethod, tyArgs2) =>
          MakeTextHintForTExprStaticRef(expr, ti, tyArgs1, method, tyArgs2)
          
        | _ => expr.ToString()
      }
      
      makeText(expr)
    }

    //private static GetDocText(mtype : MType, location : Location) : string
    //{
    //  def info = XmlDocReader.GetInfo(mtype.TypeInfo, location);

    //  if (info != null) "\n" + info.GetText() else ""
    //}

    private static GetDocText(member : IMember, location : Location) : string
    {
      def info = XmlDocReader.GetInfo(member, location);

      if (info != null) "\n" + info.GetText() else ""
    }
  } // End of Utils module
} // End of namespace