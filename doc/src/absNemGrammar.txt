expr:
	STRING
		String constructor.
	"(" ")"
		Unit value.
	ID
		Value reference.
	"{" { [ "ref" ] ID "=" ID ";" } "}"
		Object (record) construction.
	ID "." ID
		Object field access.
	ID ".*" ID
		Object field access, but second ID is value holding string that
		is field name. This is going to be needed only in tymatch translation.
	ID "(" [ ID { "," ID } ] ")"
		Function call.
	ID "." ID "<-" ID
		Assigment to object member.
	ID ".*" ID "<-" ID
		Ditto, but indirect access.
	"let" ID "=" expr "in" expr
		Bind name to given value.
	"fun" fun_def { "and" fun_def } "in" expr
		Bind functions to given names. Functions can be mutually recursive.
	"match" ID "with" "[" { "|" STRING "->" expr } "|" "_" "->" expr "]"
		Check which of specified values ID has.
	"raise" ID
		Raise exception with value specified by ID (which is name bound in "let",
		not exception constructor).
	"try" expr "catch" "(" "?" ID ")" expr
		Try compute expression. If exception is raised -- catch it.
		Exception value is then bound to specified ID.

fun_def:
	ID "(" [ ID { "," ID } ] ")" "=" expr
		Function definition.

# vim: ai ft=conf ts=4
