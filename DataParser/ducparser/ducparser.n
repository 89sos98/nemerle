namespace DucatiEnv
{

  variant vStatement
  {
    | LampPole {z : float; count : int; interval : float}
    | Corner   {z : float; count : int; interval : float}
    | Fence    {z : float; count : int; interval : float}
    | Error
  }

  public class DataParser
  {
    static mutable index : int;
    static mutable data : string;
    static mutable length : int;
    static mutable lineNumber : int;

    static private getSimple(blank : bool) : string
    {
      if(index >= length)
      {
        match(blank)
        {
          | false => "";
          | true => "DATAEND";
        }
      }
      else
      {
        def c = data[index];
        index++;
        match(c)
        {
          | ';' => if(blank) getSimple(true); else "";
          | '=' => if(blank) "="; else {index--; ""; };
          | '\n' => if(blank) "LINEEND"; else {index--; ""; };
          | _ => if(c <= ' ')
                 {
                   if(blank) getSimple(true); else "";
                 }
                 else c.ToString() + getSimple(false);
        }
      }
    }

    static private getToken() : string
    {
      getSimple(true);
    }

    static private getItem(z : float, count : int, interval : float, f : float * int * float -> vStatement) : vStatement
    {
      def a = getToken();
      match(a)
      {
        | "z"        => when(getToken() != "=") { throw System.Exception($"Expecteed =; line $lineNumber") };
                        def zs = float.Parse(getToken());
                        getItem(zs, count, interval, f);
        | "count"    => when(getToken() != "=") { throw System.Exception($"Expecteed =; line $lineNumber") };
                        def counts = int.Parse(getToken());
                        getItem(z, counts, interval, f);
        | "interval" => when(getToken() != "=") { throw System.Exception($"Expecteed =; line $lineNumber") };
                        def aaa = getToken();
                        def intervals = float.Parse(aaa);
                        getItem(z, count, intervals, f);
        | "LINEEND"  => lineNumber++; f(z, count, interval);
        | "DATAEND"  => f(z, count, interval);
        | _          => throw System.Exception($"Unknow error; line $lineNumber");
      }
    }

    static private getStatement() : list[vStatement]
    {
      def a = getToken();
      def buildLampPole(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.LampPole(z, count, interval);
      }
      def buildFence(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.Fence(z, count, interval);
      }
      def buildCorner(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.Corner(z, count, interval);
      }
      match(a)
      {
        | "LampPole" => getItem(0, 0, 0, buildLampPole)::getStatement();
        | "Fence" => getItem(0, 0, 0, buildFence)::getStatement();
        | "Corner" => getItem(0, 0, 0, buildCorner)::getStatement();
        | _ => [];
      }
    }

    static private toStr(val : vStatement, str : string) : string
    {
      match(val)
      {
        | vStatement.LampPole(z, count, interval) => str + "LampPole;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | vStatement.Corner(z, count, interval) => str + "Corner;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | vStatement.Fence(z, count, interval) => str + "Corner;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | _ => str + "error";
      }
    }

    static public getData(text : string) : string
    { 
      def initParser = fun() {index = 0; data = text; length = data.Length; lineNumber = 1; };
      initParser();
      def items = getStatement();
      items.FoldLeft("", toStr);
     }
  }
}
