using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;

namespace Nemerle.Compiler.Utils
{
  module Ast
  {
    DeclarationBaseEqualsStruct(first : DeclarationBase, second : DeclarationBase) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;
      
      def res1 = first.Name == second.Name;
      def res2 = EqualsStruct(first.modifiers, second.modifiers);
      res1 && res2
    }

    ForAllEx[T](first : list[T], second : list[T], eq : T * T -> bool) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;
        
      def res1 = if (first.IsEmpty) second.IsEmpty else first.ForAll2(second, eq);
      res1
    }
    
    public EqualsStruct(first : Modifiers, second : Modifiers) : bool
    {
      if (first == null) second == null
      else
      {
        def res1 = EqualsStruct(first.ParsedCustomAttributes, second.ParsedCustomAttributes);
        def res2 = first.ParsedModifiers == second.ParsedModifiers;
        res1 && res2
      }
    }
    
    public EqualsStruct(first : TopDeclaration, second : TopDeclaration) : bool
    {
      def res1 = 
        if (!DeclarationBaseEqualsStruct(first, second))
          false
        else match (first, second)
        {
          | (Alias(ty1),                  Alias(ty2)) => EqualsStruct(ty1, ty2)
          | (VariantOption      (decls1), VariantOption      (decls2)) =>
            decls1.ForAll2(decls2, EqualsStruct)
            
          | (Class    (extends1, decls1), Class    (extends2, decls2))
          | (Enum     (extends1, decls1), Enum     (extends2, decls2))
          | (Interface(extends1, decls1), Interface(extends2, decls2))
          | (Variant  (extends1, decls1), Variant  (extends2, decls2)) => 
            ForAllEx(extends1, extends2, EqualsStruct) && decls1.ForAll2(decls2, EqualsStruct)
            
          | (Macro(header1, synt1, _expr1), Macro(header2, synt2, _expr2)) => 
            EqualsStruct(header1, header2) && ForAllEx(synt1, synt2, EqualsStruct)
            
          | (Delegate(header1), Delegate(header2)) => EqualsStruct(header1, header2)
          | _                                    => false
        };
      
      res1
    }

    public static EqualsStruct(first : option[ClassMember], second : option[ClassMember]) : bool
    {
      | (Some(x), Some(y)) => EqualsStruct(x, y)
      | (None,       None) => true
      | _                  => false
    }
    
    public static EqualsStruct(first : Fun_header, second : Fun_header) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      //&& ForAllEx(first.typarms, second.typarms, (x, y) => x.ToString() == y.ToString())
      //first.name
      def res1 = first.ToString() == second.ToString();  //TODO: реализовать полностью!
      res1
    }
    
    public static EqualsStruct(first : Fun_parm, second : Fun_parm) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = first.ToString() == second.ToString();  //TODO: реализовать полностью!
      res1
    }
    
    public EqualsStruct(first : list[PExpr], second : list[PExpr]) : bool
    {
      ForAllEx(first, second, EqualsStruct)
    }
    
    public EqualsStruct(first : list[Fun_parm], second : list[Fun_parm]) : bool
    {
      ForAllEx(first, second, EqualsStruct)
    }
    
    public EqualsStruct(first : ClassMember, second : ClassMember) : bool
    {
      def res1 = 
        if (!DeclarationBaseEqualsStruct(first, second))
          false
        else match (first, second)
        {
          | (TypeDeclaration(td1), TypeDeclaration(td2)) => EqualsStruct(td1, td2)
          | (Field(ty1), Field(ty2)) => EqualsStruct(ty1, ty2)
          | (Function(header1, impl1, _body1), Function(header2, impl2, _body2)) =>
            EqualsStruct(header1, header2) && EqualsStruct(impl1, impl2)
            
          | (Property(ty1, pty1, dims1, get1, set1), Property(ty2, pty2, dims2, get2, set2)) =>
            EqualsStruct(ty1, ty2) && EqualsStruct(pty1, pty2) && EqualsStruct(dims1, dims2)
            && EqualsStruct(get1, get2) && EqualsStruct(set1, set2)
            
          | (Event(ty1, field1, add1, remove1), Event(ty2, field2, add2, remove2)) =>
            EqualsStruct(ty1, ty2) && EqualsStruct(field1, field2)
            && EqualsStruct(add1, add2) && EqualsStruct(remove1, remove2)
          
          | (EnumOption(None),         EnumOption(None))         => true
          | (EnumOption(Some(value1)), EnumOption(Some(value2))) => EqualsStruct(value1, value2)
          | (_, _) => false
        };
        
      res1
    }
    
    public static EqualsStruct(first : PExpr, second : PExpr) : bool
    {
      when (first : object == second)
        return true;
        
      when (first == null || second == null)
        return false;

      def res1 = first.ToString() == second.ToString();
      res1
    }
  } // end of Ast module
} // end of Nemerle.Compiler.Utils namespace