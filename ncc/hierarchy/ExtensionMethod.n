/*
 * Copyright (c) 2006 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.SolverMacros;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  class ExtensionMethod : BuiltinMethod
  {
    
    internal this (parent : TypeInfo,
                   impl : IMethod)
    {
      base (parent, BuiltinMethodKind.ExtensionMethod (impl));
      //Message.Debug ($"adding extension method $impl to $parent");
      def h = impl.GetHeader ();
      assert (h != null);
      assert (h.parms != null);
      when (impl.DeclaringType.TyparmsCount != 0)
        Message.Error ("cannot define extension methods in generic types");
      match (h.parms) {
        | first_parm :: rest_of_parms =>
          match (first_parm.ty.Fix ()) {
            | MType.Class (tc, tcparms)
            | MType.Array (t, n) with (tc = InternalType.GetArrayType (n),
                                       tcparms = [t]) =>
              assert (parent.Equals (tc));
              if (tcparms.Length > h.typarms.Length ||
                  List.Exists2 (tcparms, h.typarms.FirstN (tcparms.Length),
                                fun (x, y) { ! x.Equals (MType.TyVarRef (y)) })) {
                 Message.Error ("type parameters of first parameter of extension "
                                "methods should be prefix of type parameters of the "
                                "method itself");
                 Message.HintOnce ("for example: public static foo[A,B,C,D] "
                                   "(this a : Qux[A,B], b : list [C * D]) : int");
              } else {
                def our_typarms = h.typarms.ChopFirstN (tcparms.Length);
                def tosubst = h.typarms.FirstN (tcparms.Length);
                def forward_sub = Subst ();
                List.Iter2 (tosubst, parent.Typarms, fun (meth, typ) {
                  forward_sub.Add (meth, MType.TyVarRef (typ));
                });
                def parms = rest_of_parms.Map (fun (tp) {
                  def tp = tp.Clone ();
                  tp.ty = forward_sub.Apply (tp.ty.Fix ());
                  tp
                });
                // tenv is not important I guess
                header = Fun_header (h.loc, h.name, 
                                     forward_sub.Apply (h.ret_type.Fix ()),
                                     parms, our_typarms, h.tenv);
              }
            | _ => Util.ice ()
          }
        | [] => Util.ice ()
      }
    }
    
    public override Attributes : NemerleAttributes {
      get { 
        NemerleAttributes.Public
      }
    }

    public override IsStatic : bool
    { 
      get { false } 
    }
  }
}
