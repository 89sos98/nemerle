using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public abstract class AsyncJobBase
  {
    public enum JobState
    {
      | Ready
      | SwitchContext
      | Wait
      | Canceled
    }

    public ExecutionContext : ExecutionContext { get; set; }
    public State : JobState { get; set; }
    internal mutable NextJob : AsyncJobBase = null;

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (State == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }

    public abstract Start() : void;
  }

  internal class AsyncJob[A] : AsyncJobBase
  {
    private mutable async : Async[A];

    [Accessor]
    private result : AsyncPromise[A] = AsyncPromise();
    public RunCache : void -> void;

    public this(executionContext : ExecutionContext, async : Async[A])
    {
      this.async = async;
      ExecutionContext = executionContext;
      State = JobState.Ready;
      RunCache = Run;
    }

    public override Start() : void
    {
      ExecutionContext.Execute(RunCache);
    }

    private syncRoot : object = object();
    private Run() : void
    {
      lock (syncRoot)
      {
        mutable res;
        State = JobState.Ready;
        try
        {
          async = ExecWhileReady(async, ref res);
        }
        catch
        {
          | ex is Exception =>
            result.SetException(ex);
            return;
        }
        match (State)
        {
          | Ready         =>
            assert2(async == null);
            result.SetValue(res);

          | SwitchContext =>
            Start();
            Console.Error.WriteLine($"Context switch. Thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

          | Wait          =>
            Console.Error.WriteLine($"Async operation wait. Thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

          | Canceled      =>
            throw NotImplementedException();
        }
      }
    }
  }
}
