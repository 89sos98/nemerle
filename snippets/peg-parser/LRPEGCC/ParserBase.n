using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.Text;
using System;
using SCG = System.Collections.Generic;
using Nemerle.Imperative;

namespace LRPEGCC
{
  // TODO: refactoring
  // TODO: recognize unnamed terminal symbols - they can be met in right part of grammar
  
  public class CaptureNode
  {
    [Accessor]
    private _capture : Capture;
    [Accessor]
    private _childCaptures  : System.Collections.Generic.List[CaptureNode] = System.Collections.Generic.List();
    
    public this(capture : Capture)
    {
      _capture = capture;
    }
  }
  
  public class TerminalCaptureNode : CaptureNode
  {
    public this(capture : Capture)
    {
      base(capture);
    }
  }
  
  /// <summary>
  /// 
  /// 'T - Type of parsing result (i.e. AST)
  /// </summary>
  public abstract class ParserBase[RetExprType]
  {
    protected _text : string;
    
    // It is unused
    //[Accessor(flags = Protected)]
    //private _cache : System.Collections.Generic.Dictionary[int, int] = System.Collections.Generic.Dictionary();
    
    // TODO: not to store this tree - call handlers immediatly as it is parsed. (probably)
    [Accessor(flags = Protected)]
    public _captureTree: CaptureNode = CaptureNode(null);    
   
    // it is a hack to build CaptureTree
    protected mutable currentCaptureNode: CaptureNode;    
    // TODO: end todo 
    
    private mutable _result : RetExprType;
    private mutable _parsedSymbolsCount : int;
    private mutable _isParsed : bool = false;    
    
    public Result : RetExprType
    {
      get
      {
        unless(_isParsed)
          Parse();
          
        _result
      }
    }
    
    public ParsedSymbolsCount : int
    {
      get
      {
        unless(_isParsed)
          Parse();
            
        _parsedSymbolsCount
      }
    }
    
    public this(text : string)
    {
      _text = text;
      currentCaptureNode = CaptureTree;
    }
    
    protected GetChar(pos : int) : char
    {
      _text[pos];
    }
    
    protected CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }   
    
    private Parse() : void
    {
      unless(_isParsed)
      {
        // phase1 : generate AST(CaptureTree) of parsed text
        _parsedSymbolsCount = DoParse();
      
        // phase2: generate result (int, binaries, PExpr, etc)
        _result = GenerateResult();
        _isParsed = true;
      }
    }
    
    private GenerateResult() : RetExprType 
    {    
      def generate(cn : CaptureNode) : RetExprType
      {
        mutable nonTerminalSymbols : list[RetExprType] = [];
        mutable terminalSymbols : list[string] = [];
        
        mutable prevStartPos = cn.Capture.StartPos;      
                  
        foreach(n in cn.ChildCaptures)
        {        
          if(n is TerminalCaptureNode)
          {
            def newTs = _text.Substring(n.Capture.StartPos, n.Capture.EndPos - n.Capture.StartPos);
            terminalSymbols = terminalSymbols + [newTs];
          }          
          else 
          {
            def s = generate(n);
            nonTerminalSymbols = nonTerminalSymbols + [s];
          }
        }
        
        DoGenerateResult(cn.Capture.Name, nonTerminalSymbols, terminalSymbols);  
      }
      
      //top of the tree doesn't contain handler      
      generate(_captureTree.ChildCaptures[0]);
    }
    
    protected abstract DoParse() : int;   
    
    // TODO: replace string by TokenInfo in terminalSymbols type parametr
    // TODO: replace 'ruleName : string' by 'rule : LRPEGCC.Rule'
    protected abstract DoGenerateResult(ruleName : string, nonTerminalSymbols : list[RetExprType], terminalSymbols : list[string]) : RetExprType; 
  }
}
