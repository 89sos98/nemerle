using System;

module M {
  handler (_ : object, _ : EventArgs) : void
  {
    System.Console.WriteLine ("handler called");
  }

  handler2 (_ : object, _ : EventArgs) : void
  {
    System.Console.WriteLine ("handler2");
  }

  handler3 (_ : object, _ : EventArgs) : void
  {
    System.Console.WriteLine ("handler3");
  }

  Main () : void
  {
    AppDomain.CurrentDomain.ProcessExit += EventHandler (handler2);
    AppDomain.CurrentDomain.ProcessExit += handler;
    // this adds instead of removing, but this is mono (mcs) bug
    // AppDomain.CurrentDomain.ProcessExit -= EventHandler (handler2);
    System.Console.WriteLine ("main");
    mutable foo <- EventHandler (handler2);
    foo += handler3;
    foo += EventHandler (handler3);
    foo.Invoke (null, null);
    System.Console.WriteLine ("---");
    foo -= handler2;
    foo.Invoke (null, null);
    System.Console.WriteLine ("---");
  }
}

/*
BEGIN-OUTPUT
main
handler2
handler3
handler3
---
handler3
handler3
---
handler2
handler called
END-OUTPUT
*/
