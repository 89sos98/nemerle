using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class DeclPrinter 
  {
    mutable writer : LocatableTextWriter;
    [Accessor(flags = WantSetter)]
    mutable compiler : ManagerClass;

    public Writer : LocatableTextWriter
    {
      get
      {
        writer
      }
      set
      {
        writer = value;
        indenter.Writer = value
      }
    }

    [Nemerle.InternalMacros.StaticInitializer(Indenter())]
    indenter : Indenter;

    mutable line_pos : int;
    CurPos : int
    {
      get
      {
        writer.Sbuilder.Length
      }
    }

    BeginWrite() : void 
    {
      line_pos = CurPos
    }

    CurText : string
    {
      get
      {
        writer.Sbuilder.ToString()
      }
    }

    IsOnOneLine() : bool
    {
      match ((line_pos != -1 : bool))
        {
        | true => 
          
          {
            def text = writer.Sbuilder.ToString(line_pos, CurPos - line_pos);
            def lines = text.Count(fun  (x : _ ) : _  
    x == '\n');
            lines == 0
          }
        | _  => 
          false
      }
    }

    Write(str : string) : void 
    {
      indenter.Write(str)
    }

    WriteIndent(func : void  -> void ) : void 
    {
      indenter.WriteWithIndent(func)
    }

    WriteBlockTop(func : void  -> void ) : void 
    {
      is_on_one_line = true;
      Write("\n{\n");
      WriteIndent(func);
      Write("\n}")
    }

    WriteBlock(func : void  -> void ) : void 
    {
      is_on_one_line = true;
      def pos_beg1 = CurPos;
      Write("\n{\n");
      def pos_beg = CurPos;
      WriteIndent(func);
      def pos_end = CurPos;
      Write("\n}");
      def pos_end1 = CurPos;
      def str = writer.Sbuilder.ToString(pos_beg, pos_end - pos_beg);
      def line_count = str.Count(fun  (x : _ ) : _  
    x == '\n');
      match ((line_count == 0 : bool))
        {
        | true => 
          (
          {
            def str = writer.Sbuilder.ToString(pos_beg, pos_end - pos_beg);
            def str = str.Trim();
            _  = writer.Sbuilder.Remove(pos_beg1, pos_end1 - pos_beg1);
            writer.Write(string.Concat(" {", (Convert.ToString(str) : string), "}"))
          } : void )
        | _  => 
          ()
      }
    }

    InitWrite() : void 
    {
      line_pos = -1;
      is_on_one_line = true
    }

    [Nemerle.InternalMacros.StaticInitializer(Hashtable())]
    name_tree : Hashtable[string, list[TopDeclaration]];

    SortTree(td : list[TopDeclaration]) : void 
    {
      def get_namespace (t : _ )  
      {
        def idx = t.FullQualifiedName.IndexOf(t.Name);
        match ((idx != -1 : bool))
            {
          | true => 
            t.FullQualifiedName.Substring(0, idx - 1)
          | _  => 
            "[top]"
        }
      } : _ ;
      def add (map : _ , key : _ , item : _ )  
      {
        match ((map.ContainsKey(key) : bool))
            {
          | true => 
            
            {
              def val = map[key];
              def app = item :: val;
              map[key] = app
            }
          | _  => 
            
            {
              map.Add(key, [item])
            }
        }
      } : _ ;
      name_tree.Clear();
      td.Iter(fun  (x : _ ) : _  
    add(name_tree, get_namespace(x), x))
    }

    PrintFileHeader(location : Location) : void 
    {
      def tree = compiler.NameTree.GetReferencedNamespaces();
      def tree = 
      {
        mutable head = null;
        mutable tail = null;
        TExpr.Delayed(delayed macro);
        match ((head == null : bool))
            {
          | true => 
            []
          | _  => 
            head
        }
      }.Flatten();
      def usings = tree.Map(fun  (x : _ ) : _  
    string.Concat("using ", string.Join(".", NCollectionsExtensions.MapToArray.[_ , string]((x.FullName : SCG.IEnumerable[_ ]), fun  (x : _ ) : _  
    System.Convert.ToString(x))), ";", Environment.NewLine));
      def file_space = name_tree.First();
      def nspace = file_space.Key;
      usings.Iter(writer.Write);
      writer.Write(string.Concat(Environment.NewLine, "namespace ", (Convert.ToString(nspace) : string)))
    }

    public PrintFile(td : ParseResult, writer : LocatableTextWriter) : void 
    {
      Writer = writer;
      def ty = td.TopDeclarations;
      SortTree(ty);
      PrintFileHeader(td.Location);
      WriteBlockTop(fun  () : _  
    ty.Iter(PrintTopDecl))
    }

    PrintTopDecl(td : TopDeclaration) : void 
    {
      PrintTop(td);
      Write("\n\n");
      InitWrite()
    }

    public Print(td : list[TopDeclaration], writer : LocatableTextWriter) : void 
    {
      Writer = writer;
      InitWrite();
      SortTree(td);
      td.Iter(PrintTopDecl)
    }

    public Print(td : TopDeclaration) : void 
    {
      InitWrite();
      PrintTop(td, NemerleAttributes.None)
    }

    mutable is_on_one_line : bool;

    PrintClassBody(decls : list[ClassMember], remove_mods : NemerleAttributes) : void 
    {
      def solid_decl (decl : _ )  match (decl)
        {
        | ClassMember.TypeDeclaration(TopDeclaration.Class)
        | TypeDeclaration(TopDeclaration.Interface)
        | TypeDeclaration(TopDeclaration.Variant)
        | Function
        | TypeDeclaration(TopDeclaration.Enum) => 
          true
        | _  => 
          false
      } : _ ;
      def check_one_line_decl (decl : _ )  
      {
        match ((match ((match ((!is_on_one_line : bool))
            {
          | true => 
            true
          | _  => 
            solid_decl(decl)
        } : bool))
            {
          | true => 
            decls.Length > 1
          | _  => 
            false
        } : bool))
            {
          | true => 
            (Write("\n") : void )
          | _  => 
            ()
        }
      } : _ ;
      def print_class_member (decls : list[ClassMember])  
      {
        match (decls)
            {
          | head :: [] => 
            
            {
              check_one_line_decl(head);
              PrintClassMember(head, remove_mods)
            }
          | head :: tail => 
            
            {
              check_one_line_decl(head);
              BeginWrite();
              PrintClassMember(head, remove_mods);
              is_on_one_line = IsOnOneLine();
              Write("\n");
              print_class_member(tail)
            }
          | _  => 
            ()
        }
      } : _ ;
      print_class_member(decls)
    }
  }


}