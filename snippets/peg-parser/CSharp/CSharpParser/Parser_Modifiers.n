using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    //modifier  : Modifier      = ("new" / "public" / "protected" / "internal" / "private" / "partial" / "virtual"
    //                            / "volatile" / "static" / "sealed" / "override" / "abstract" / "extern" / "unsafe")S;
    modifier(keyword : NToken, _ : NToken) : Modifier
    {
      def loc = GetLocation(_);
      match(keyword.GetText()) {
        | "new"       => Modifier.New(loc)
        | "public"    => Modifier.Public(loc)
        | "protected" => Modifier.Protected(loc)
        | "internal"  => Modifier.Internal(loc)
        | "private"   => Modifier.Private(loc)
        | "partial"   => Modifier.Partial(loc)
        | "virtual"   => Modifier.Virtual(loc)
        | "volatile"  => Modifier.Volatile(loc)
        | "static"    => Modifier.Static(loc)
        | "sealed"    => Modifier.Sealed(loc)
        | "override"  => Modifier.Override(loc)
        | "abstract"  => Modifier.Abstract(loc)
        | "extern"    => Modifier.Extern(loc)
        | "unsafe"    => Modifier.Unsafe(loc)
        | "readonly"  => Modifier.Readonly(loc)
        | _ => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //modifiers : ModifierList  = modifier+;
    modifiers(modifiers : SCG.List[VToken[Modifier]]) : list[Modifier]
    {
      modifiers.Values()
    }
  }
}