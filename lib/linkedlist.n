/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Collections {
  using Nemerle.Assertions;

  // LinkedList class, implementing some interfaces for better interaction with .NET code
  public class LinkedList ['a] : ICollection ['a]
  {
    // Node class - not visible outside. Client code should use Enumerator for
    // list operations.
    [Record]
    variant Node ['a]
    {
      | Body {
        mutable prev : Node ['a];
        mutable next : Node ['a];
        mutable data : 'a;
      }
      | Head { // head guard - convenient for Enumerator
        mutable first : Node ['a];
      }
      | Tail { // tail guard - as above
        mutable last : Node ['a];
      }

        [Nemerle.OverrideObjectEquals]
        public Equals (obj : Node ['a]) : bool
        {
          System.Object.ReferenceEquals (this, obj);
        }

        public Next : Node ['a]
        {
          get {
            match (this) {
              | Node.Head (first) => first
              | Node.Body (_, next, _) => next
              | Node.Tail => null
            }
          }
          set {
            match (this) {
              | (Node.Head) as hd => hd.first = value
              | (Node.Body) as bd => bd.next = value
              | Node.Tail => assert (false)
            }
          }
        }

        public Prev : Node ['a]
        {
          get {
            match (this) {
              | Node.Head => null
              | Node.Body (prev, _, _) => prev
              | Node.Tail (last) => last
            }
          }
          set {
            match (this) {
              | Node.Head => assert (false)
              | (Node.Body) as bd => bd.prev = value
              | (Node.Tail) as tl => tl.last = value
            }
          }
        }

        public IsBody : bool
        {
          get {
            match (this) {
              | Node.Body => true
              | _ => false
            }
          }
        }

    }

    // beginning and end of the list for fast access to those
    mutable begin : Node.Head ['a];
    mutable end : Node.Tail ['a];

    public this (some_list : list ['a])
    {
      // Note, that empty list contains two nodes - the guards for Enumerator
      // In such case the first node is the tail guard, and the last node is
      // the head guard.
      begin = Node.Head (null);
      end = Node.Tail (begin);
      begin.first = end;
      
      unless (some_list == null)
        foreach (item in some_list) 
          Insert (end, item);
    }

    public this ()
    {
      begin = Node.Head (null);
      end = Node.Tail (begin);
      begin.first = end;
    }

    concat_helper (separator : string, sb : System.Text.StringBuilder) : void
    {
      unless (IsEmpty) {
        def e = Enumerator (this);
        _ = e.MoveNext ();
        _ = sb.Append (e.Current);
        while (e.MoveNext ()) {
          _ = sb.Append (separator);
          _ = sb.Append (e.Current);
        }
      }
    }

    public override ToString () : string
    {
      def sb = System.Text.StringBuilder ("[ ");
      concat_helper (", ", sb);
      sb.Append (" ]").ToString ();
    }

    public ToString (separator : string) : string
    {
      def sb = System.Text.StringBuilder ();
      concat_helper (separator, sb);
      sb.ToString ();
    }        

    [Nemerle.OverrideObjectEquals]
    public Equals (another_list : LinkedList ['a]) : bool
    {
      def e = Enumerator (this);
      def f = Enumerator (another_list);

      def compare () : bool {
        def rete = e.MoveNext ();
        def retf = f.MoveNext ();
        if (rete != retf)
          false;
        else
          if (rete == true) // there is something to compare
            if (e.Current.Equals (f.Current))
              compare ();
            else
              false;
          else // everything has been compared
            true;
      }

      compare ();      
    }

    // Reverse the elements of the list in place. 
    public Reverse () : void
    {
      unless (IsEmpty) {
        mutable first = null;
        mutable last = null;

        def reverse_node (node : Node ['a]) : void {
          | (Node.Head) as hd => 
            first = hd.first;
            reverse_node (hd.first);
          | (Node.Body) as bd =>
            bd.prev <-> bd.next;
            reverse_node (bd.prev);
          | (Node.Tail) as tl => 
            last = tl.last;
        }

        reverse_node (begin);

        // Exchange head with tail
        end.last = first;
        begin.first = last;
        // Now - inform border nodes about change
        first.Next = end;
        last.Prev = begin;
      } // non-empty
    }

    // Inserts item d after position pos. If pos is head, inserts at the beginning.
    // In case pos is tail, inserts item at the end (so not really after pos..)
    Insert ([NotNull] pos : Node ['a], d : 'a) : void
    {
      match (pos) {
        | (Node.Tail) as tl => // insert at the end of the list
          def node = Node.Body (tl.last, pos, d);
          tl.last.Next = node;
          tl.last = node;
        | _ => // anything else
          def node = Node.Body (pos, pos.Next, d);
          pos.Next.Prev = node;
          pos.Next = node;
      }
    }

    // Insert list l after position pos
    Insert ([NotNull] pos : Node ['a], l : LinkedList ['a]) : void
    {
      unless (l.IsEmpty) {
        match (pos) {
          | (Node.Tail) as tl => // another way of adding at the end
            tl.last.Next = l.begin.first;
            l.begin.first.Prev = tl.last;
            l.end.last.Next = tl;
            tl.last = l.end.last;
          | _ => // anything else (there is some place after current position)
            pos.Next.Prev = l.end.last;
            l.end.last.Next = pos.Next;
            pos.Next = l.begin.first;
            pos.Next.Prev = pos;
        }

        l.Clear();             
      } // l is not empty
        
    } // Insert list   

    public Prepend (item : 'a) : void
    {
      Insert (begin, item);
    }

    public Prepend ([NotNull] l : LinkedList ['a]) : void
    {
      Insert (begin, l);
    }

    public Append (item : 'a) : void
    {
      Insert (end, item);
    }

    // Append another list to an end. LinkedList l will be no longer valid (and thus empty).
    public Append ([NotNull] l : LinkedList ['a]) : void
    {
      Insert (end, l);
    }

    // Removes given position. It should not be any of the guards.
    Remove ([NotNull] pos : Node ['a]) : void
    {
      | Node.Head =>
        throw System.ArgumentException ("Unable to remove head of the list!");
      | Node.Tail =>
        throw System.ArgumentException ("Unable to remove tail of the list!");
      | (Node.Body) as body =>
        body.prev.Next = body.next;
        body.next.Prev = body.prev;
    }

    // Enumerator for traversing through the list and modifying it.
    // You should perhaps think of it as a kind of cursor...
    public class Enumerator ['a] : IEnumerator ['a]
    {
      mutable current : Node ['a]; // current position
      mutable coll : LinkedList ['a]; // corresponding list

      public this (l : LinkedList ['a]) {
        coll = l;
        current = coll.begin; // place the cursor before the sequence
      }

      public Current : 'a 
      {
        get { // get current value
          match (current) {
            | (Node.Body) as body =>
              body.data;
            | _ => throw System.ArgumentException ("Unable to read outside the list!");
          }
        }
        set { // write at current position
          match (current) {
            | (Node.Body) as body =>
              body.data = value;
            | _ => throw System.ArgumentException ("Unable to write outside the list!");
          }
        }
      }

      // Move to the next position. This is exactly what you would expect from
      // .NET Enumerator.
      public MoveNext () : bool 
      {
        current = current.Next;
        current.IsBody;
      }

      // Same as above, but moves in opposite direction.
      public MovePrev () : bool
      {
        current = current.Prev;
        current.IsBody;
      }

      // Reset position to the beginning
      public Reset () : void
      {
        current = coll.begin;
      }

      // Reset position to the end - intended for use with MovePrev().
      public ResetEnd () : void
      {
        current = coll.end;
      }

      // Inserts element d after the current position of the enumerator.
      // If enumerator points past the end of the sequence, item is appended
      // at the end.
      public Insert (d : 'a) : void
      {
        coll.Insert (current, d);
      }

      public Insert ([NotNull] l : LinkedList ['a]) : void
      {
        coll.Insert (current, l);
      }

      // Removes item from the list. Enumerator must point valid position
      // in the sequence! After removal, Enumerator proceedes to the next
      // position (which may be past the end of the list, when it returns
      // false).
      public Remove () : bool
      {
        match (current) {
          | Node.Body => // valid position
            def to_delete = current;
            def retval = MoveNext();
            coll.Remove (to_delete);
            retval;
          | _ => // invalid
            throw System.ArgumentException ("Trying to remove inproper item!");
        }
      }

      // Returns the underlying list
      public Collection : LinkedList ['a]
      {
        get { coll; }
      }

    } // Enumerator

    // This is one is to satisfy N.C.IEnumerable
    public GetEnumerator () : Enumerator ['a]
    {
      Enumerator (this);
    }

    // Now the ICollection['a] interface implementation

    // Count the elements of the list. 
    public Count : int {
      get {
        mutable lp = 0;
        def count_them (pos : Node ['a]) : void {
          | Node.Head (first) => count_them (first);
          | (Node.Body) as body => lp += 1; count_them (body.next);
          | Node.Tail => ();
        }

        count_them (begin);
        lp;
      }
    }

    // Checks for an empty list
    public IsEmpty : bool
    {
      get {
        begin.first.Equals(end);
      }
    }

    public Add (item : 'a) : void
    {
      Prepend (item);
    }

    // Remove all occurrences of an item
    public Remove (item : 'a) : void
    {
      def e = Enumerator (this);

      while (e.MoveNext ())
        when (e.Current.Equals (item)) {
          _ = e.Remove ();
          _ = e.MovePrev ();
        }        
    }

    // Clears the list
    public Clear() : void
    {
      begin.first = end;
      end.last = begin;
    }

    public First () : option ['a]
    {
      match (begin.first) {
        | Node.Tail => None ()
        | (Node.Body) as bd => Some (bd.data)
        | Node.Head => assert (false)
      }
    }

    public Contains (item : 'a) : bool
    {
      def e = Enumerator (this);

      def member () : bool {
        if (e.MoveNext ())
          if (e.Current.Equals (item))
            true;
          else
            member ();
        else
          false;
      }

      member ();
    }

    public Clone () : LinkedList ['a]
    {
      def l = LinkedList ();
      foreach (item in this)
        l.Append (item);
      l;
    }

    public Fold ['b] (f : 'a * 'b -> 'b, x : 'b) : 'b
    {
      mutable retval = x;
      foreach (item in this)
        retval = f (item, retval);
      retval;
    }

    public Map ['b] (f : 'a -> 'b) : LinkedList ['b]
    {
      def l = LinkedList();
      foreach (item in this)
        l.Append (f (item));
      l;
    }

    public Iter (f : 'a -> void) : void
    {
      foreach (item in this)
        f (item);
    }

    public ForAll (f : 'a -> bool) : bool
    {
      def e = Enumerator (this);
      def check () : bool {
        if (e.MoveNext())
          if (f (e.Current))
            check ();
          else
            false;
        else
          true;
      }
      check ();
    }

    public Exists (f : 'a -> bool) : bool
    {
      def e = Enumerator (this);
      def check () : bool {
        if (e.MoveNext())
          if (f (e.Current))
            true;
          else
            check ();
        else
          false;
      }
      check ();
    }

    public Filter (f : 'a -> bool) : void
    {
      def e = Enumerator (this);
      def filter () : void {
        if (f (e.Current))
          when (e.MoveNext ())
            filter ();
        else
          when (e.Remove ())
            filter();
      }

      when (e.MoveNext ())
        filter();
    }

    public Partition (f : 'a -> bool) : LinkedList ['a] * LinkedList ['a]
    {
      def does = LinkedList ();
      def donot = LinkedList ();
      foreach (item in this)
        if (f (item))
          does.Append (item);
        else
          donot.Append (item);
      (does, donot);
    }

  } // LinkedList
} // namespace 
