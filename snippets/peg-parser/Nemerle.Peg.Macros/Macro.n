using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace Nemerle.Peg
{
  macro Grammar (_rules : Token)
  syntax ("grammar", _rules)
  {
    <[ () ]>
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, startRule, rules)
  {
    try
    {
      def startRuleName = NameRef(startRule.Location, startRule.ToString());
      tb.UserData[typeof(Grammar)] = Grammar(startRuleName);

      def parsedGrammar = Parsing.ParseRules(Macros.ImplicitCTX(), startRuleName, rules);
      GrammarTyper.Check(parsedGrammar);
      tb.UserData[typeof(Grammar)] = parsedGrammar;
    }
    catch
    {
      | e is GrammarException =>
        def loc = if (e.Location != Location.Default) e.Location else tb.Location;
        Message.Error(loc,  e.Message);
      | _ is CriticalUnexpectedException => ()
      | e is Exception =>
        assert2(false, e.ToString());
        Message.Error(tb.Location,  $"Exception $e");
    }
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, _startRule, _rules)
  {
    try
    {
      GrammarImpl.MakeParser(Macros.ImplicitCTX(), tb);
    }
    catch
    {
      | e is GrammarException =>
        def loc = if (e.Location != Location.Default) e.Location else tb.Location;
        Message.Error(loc,  e.Message);
      | _ is CriticalUnexpectedException => ()
      | e is Exception =>
        assert2(false, e.ToString());
        Message.Error(tb.Location,  $"Exception $e");
    }
  }

  internal module GrammarImpl
  {
    public MakeParser(typer : Typer, tb : TypeBuilder) : void
    {
      def compiler = RuleCompiler(typer, tb);
      def parsedGrammar = tb.UserData[typeof(Grammar)] :> Grammar;
      when (parsedGrammar == null)
        Message.FatalError(tb.Location, "PEG Grammar not parsed.");

      def typedGrammar  = GrammarTyper.AddArgumentCaptures(parsedGrammar);

      CreateStartParseMethods(parsedGrammar, compiler, typer, tb);

      if (typer.Manager.IsIntelliSenseMode)
      {
        IntelliSenseSupport.AddIntelliSenseSupport(parsedGrammar, typer, tb);
        _ = tb.DefineWithSource(
          <[decl:
            public GetMaxRollbackPosAndIds() : int * System.Collections.Generic.List[int]
            {
              mutable res; res;
            }
          ]>);
        _ = tb.DefineWithSource(
          <[decl:
            public GetMaxRollbackPosAndNames() : int * System.Collections.Generic.List[string]
            {
              mutable res; res;
            }
          ]>);
        _ = tb.DefineWithSource(
          <[decl:
            public GetRuleName(_ : int) : string
            {
              mutable res; res;
            }
          ]>);
      }
      else
        compiler.CompileGrammar(typedGrammar);

      //RuleCompiler.CalcRulesStartSymbols(parsedGrammar).Iter((name, chars) => Message.Hint(name.Location, $"$name -> $chars"));

      foreach (name in typedGrammar.Names)
        CheckRuleMethodHandler(name, typedGrammar, tb, typer);
    }

    private CreateStartParseMethods(parsedGrammar : Grammar, compiler : RuleCompiler, typer : Typer, tb : TypeBuilder) : void
    {
      def tyParam =
        match (parsedGrammar.GetRule(parsedGrammar.StartRuleName).ResultType)
        {
          | Some(RuleType.NType(ty)) => <[ $(ty : typed) ]>
          | _ =>
            Message.Error(tb.Location,  "Start rule must be a capture rule");
            <[ object ]>
        };

      tb.Define(<[decl: mutable _parsingSource : Nemerle.Peg.SourceSnapshot; ]>);
      tb.Define(<[decl:
        public ParsingSource : Nemerle.Peg.SourceSnapshot
        {
          get { _parsingSource }
        }
      ]>);

      _ = tb.DefineWithSource(<[decl:
        public TryParse(text : string) : int * $tyParam
        {
          TryParse(Nemerle.Peg.SourceSnapshot(text))
        }
      ]>);

      if (typer.Manager.IsIntelliSenseMode)
      {
        _ = tb.DefineWithSource(<[decl:
          public TryParse([Nemerle.Assertions.NotNull] source : Nemerle.Peg.SourceSnapshot) : int * $tyParam
          {
            _parsingSource = source;
            mutable res;
            res;
          }
        ]>);
      }
      else
      {
        _ = tb.DefineWithSource(<[decl:
          public TryParse([Nemerle.Assertions.NotNull] source : Nemerle.Peg.SourceSnapshot) : int * $tyParam
          {
            ResetMemoization();
            _parsingSource = source;

            mutable result;
            def pos = $(compiler.DecorateRuleName(parsedGrammar.StartRuleName.Id) : dyn)(0, ref result, _parsingSource.Text);

            (pos, result)
          }
        ]>);
      }

      _ = tb.DefineWithSource(<[decl:
        public Parse(text : string) : option[$tyParam]
        {
          def (pos, res) = TryParse(text);

          if (pos < 0) None() else Some(res)
        }
      ]>);

      _ = tb.DefineWithSource(<[decl:
        public Parse(source : Nemerle.Peg.SourceSnapshot) : option[$tyParam]
        {
          def (pos, res) = TryParse(source);

          if (pos < 0) None() else Some(res)
        }
      ]>);

      tb.Define(<[decl:
        private mutable _maxRollbackPos : int = -1;
      ]>);

      tb.Define(<[decl:
        public MaxRollbackPos : int
        {
          get { _maxRollbackPos }
        }
      ]>);

      _ = tb.DefineWithSource(<[decl:
        // should it be macro?
        protected GetText(tok : Nemerle.Peg.NToken) : string
        {
          _parsingSource.OriginalText.Substring(tok.StartPos, tok.EndPos - tok.StartPos)
        }
      ]>);

      _ = tb.DefineWithSource(<[decl:
        // should it be macro?
        protected GetLocation(tok : Nemerle.Peg.NToken) : Nemerle.Peg.Location
        {
          Nemerle.Peg.Location(_parsingSource, tok.StartPos, tok.EndPos)
        }
      ]>);
    }

    private CheckRuleMethodHandler(ruleName : NameRef, grammar : Grammar, tb : TypeBuilder, typer : Typer) : void
    {
      def gotoMap = IntelliSenseSupport.GetGotoMap(tb);
      def mems = tb.GetParsedMembers(true).Filter(m => m.Name == ruleName.Id);

      match (grammar.GetRule(ruleName).Rule)
      {   // Capture with defined type. User must define handler for it!
        | Some(Rule.Capture(Handler(name, argType, NType(ty)), _)) =>
          when (ty.Equals(tb.InternalType.Void))
            return;

          def methods = mems.MapFiltered(_ is ClassMember.Function, _ :> ClassMember.Function);
          def types   = match (argType)
          {
            | Tuple(types) => types.MapFiltered(ty => !(ty is RuleType.Void), ty => GrammarTyper.RuleTypeToNType(ty, typer));
            | ty           => [GrammarTyper.RuleTypeToNType(ty, typer)];
          }

          def errorMsg(ruleName, types, tTy)
          {
            //assert2(false);
            $<#You need define method-handler for "$ruleName" rule with signature: $ruleName(_ : ..$(types; ", _ : ")) : $tTy#>
          }
          match (methods)
          {
            | [m] => 
              when (typer.Manager.IsIntelliSenseMode)
              {
                gotoMap[name.Location]  = m.NameLocation;
                gotoMap[m.NameLocation] = name.Location;
              }

              def parms = m.header.Parameters;
              if (parms.Length == types.Length)
              {
                foreach ((need, p) in types.ZipLazy(parms))
                {
                  def real = typer.BindFixedType(p.Type);

                  unless (need.TryUnify(real))
                  {
                    //assert2(false);
                    Message.Error(p.Location, $<#The parameter "$(p.Name)" has wrong type $real (need type $need).#>);
                    Message.Error(p.Location, errorMsg(ruleName, types, ty));
                    break;
                  }
                }
              }
              else
                Message.Error(m.Location, $<#The method-handler of rule "$ruleName" must have $(types.Length) parameters. $(errorMsg(ruleName, types, ty))#>)

            | m :: _ => Message.Error(m.Location, "Overloading not supported for rule method-handler");
            | []     => Message.Error(ruleName.Location, errorMsg(ruleName, types, ty));
          }
          
        | _ => ()
      }
    }

  }
}
