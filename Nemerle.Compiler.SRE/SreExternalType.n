using System;
using Nemerle.Assertions;

namespace Nemerle.Compiler.Sre
{
  public sealed class SreExternalType : ExternalType
  {
    public this([NotNull] library : LibraryReference, [NotNull] systemType : Type)
    {
      Library = library;
      SystemType = systemType;
    }

    public Library : LibraryReference { get; }

    public SystemType : Type { get; }

    public override Assembly : string
    {
      get { SystemType.Assembly.ToString() }
    }

    public override FullName : string
    {
      get { SystemType.TypeFullName() }
    }

    public override GenericArgumentsCount : int
    {
      get { SystemType.GetGenericArguments().Length }
    }

    protected override ConstructTypeInfo(node : NamespaceTree.Node, fixNode : bool) : void
    {
      when (Type == null)
        Type = Library.ConstructTypeInfo(SystemType, node);
      when (fixNode)
        node.Value = NamespaceTree.TypeInfoCache.Cached(Type);
    }
  }
}