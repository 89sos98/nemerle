using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System.Collections.Generic;
using System.Xml.Linq;
using L = System.Xml.Linq;
using X = Nemerle.Xml;
using NColl = Nemerle.Collections.NCollectionsExtensions;

namespace Nemerle.Xml
{
  class XmlAstToXLinq
  {
    _typer  : Typer;
    _parser : XmlQuotParser;
    
    public this(typer : Typer, parser : XmlQuotParser)
    {
      _typer  = typer;
      _parser = parser;
    }
          
    public ToLocation(node : PegLocated) : Location
    {
      _parser.ToLocation(node)
    }
    
    Parse(loc : Location, code : string) : PExpr
    {
      _typer.Manager.MacroColors.PushUseSiteColor();
      def pExpr = try     { MainParser.ParseExpr(_typer.Env, code, loc, false); }
                  finally { _typer.Manager.MacroColors.PopColor(); };
      pExpr
    }

    SplicablePExprName(value : X.Splicable, nsVars : Set[string]) : PExpr
    {
      match (value)
      {
        | Splicable.PrefiedName(ns, name) => DefineXmlnsImpl.MakeXNameFieldRef(_typer, ToLocation(value), ns, name, nsVars)
        | Splicable.Value(value)          => <[ L.XName.Get($(value : string)) ]>
        | Splicable.Expr(expr)            => Parse(ToLocation(value), expr)
        | Splicable.ListExpr              => Message.FatalError(<#The "..$" not supportend in name context.#>);
      }
    }
    
    SplicablePExprStr(value : X.Splicable) : PExpr
    {
      match (value)
      {
        | Splicable.PrefiedName     => Message.FatalError(<#A value can't be a prefixed name.#>);
        | Splicable.Value(value)    => <[ $(value : string) ]>
        | Splicable.Expr(expr)      => Parse(ToLocation(value), expr)          
        | Splicable.ListExpr(_expr) => Message.FatalError(<#The "..$" not supportend in name context.#>);
      }
    }
    public Transform(xmlAst : XmlAst, nsVars : Set[string]) : PExpr
    {
      Util.locate(ToLocation(xmlAst), TransformImpl(xmlAst, nsVars))
    }
    
    public TransformImpl(xmlAst : XmlAst, nsVars : Set[string]) : PExpr
    {
      match (xmlAst)
      {
        | Attr(name, Splicable.Expr as value)             => 
          def name1   = SplicablePExprName(name, nsVars);
          def value1  = SplicablePExprStr(value);
          
          <[  { // If value of expression is null we return null which cause ignorin the attribute
                def value = $value1 : object;
                if (value == null) null else L.XAttribute($name1, value) 
              } ]>

        | Attr(name, value)             => 
          def name1   = SplicablePExprName(name, nsVars);
          def value1  = SplicablePExprStr(value);
          
          <[ L.XAttribute($name1, $value1) ]>
          
        | Text(Splicable.Value(value))  => <[ L.XText($(value : string)) ]>
        | Text(_)  => assert(false);
        | Tag(name, content)            => 
          mutable nsVars2 = nsVars;
          def (nsAttrDef, cont, xmlNsVars) = content.Fold(([], [], []), (x, (nsAttrDef, cont, nsVarsDef)) => 
            match (x)
            {
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", name) as attr, Splicable.Value(val)) => 
                // Util.tmpname(
                nsVars2 = nsVars2.Add(name);
                Util.locate(ToLocation(attr), 
                  {
                    def nsVar = <[ def $(name : usesite) : L.XNamespace = L.XNamespace.Get($(val : string)); ]>;
                    def x = <[ L.XAttribute(L.XNamespace.Xmlns.GetName($(name : string)), $(val : string)) ]>;
                    (x :: nsAttrDef, cont, nsVar :: nsVarsDef)
                  });
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", _), _) => 
                Message.Error(<#An embedded expression cannot be used here.#>);
                (nsAttrDef, cont, nsVarsDef)
                
              | _ => (nsAttrDef, x :: cont, nsVarsDef)
            });

          def name = SplicablePExprName(name, nsVars2);
          def cont = nsAttrDef + cont.Map(x => <[ $(Transform(x, nsVars2)) : object ]>);
          def expr = xmlNsVars + [<[ L.XElement($name, array[..$cont]); ]>];
          <[ { ..$expr } ]>
          
        | TagSplice(expr, false)        => 
          def expr = Parse(ToLocation(xmlAst), expr);
          def tExpr = _typer.TypeExpr(expr);
          _ = _typer.DelayMacro(_ => 
            match (tExpr.Type.Hint)
            {
              | Some(ty) => 
                //def tExpr = tExpr;
                Macros.DefineCTX(_typer);
                def attrTy = <[ ttype: System.Xml.Linq.XAttribute ]>;
                
                when (ty.TryRequire(attrTy))
                  Message.Error(expr.Location, $"The content of XML elementd can't have $attrTy type");

                Some(expr)
                
              | None => None()
            });
            
          expr
          
        | TagSplice(expr, true)         => <[ NColl.NToArray($(Parse(ToLocation(xmlAst), expr))) ]>
        | AttrSplice(expr, false)       => <[ $(Parse(ToLocation(xmlAst), expr)) : L.XAttribute ]>
        | AttrSplice(expr, true)        => 
          def x = Parse(ToLocation(xmlAst), expr);
          //assert2(false);
          <[ NColl.NToArray.[L.XAttribute]($(x) : IEnumerable[L.XAttribute]) ]> 
      }
    }
  }
}
