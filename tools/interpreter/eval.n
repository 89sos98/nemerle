
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

public class Evaluator
{
  public static mutable Locals : list [string * PExpr];
  public static mutable code : string;
 
  public this () {
    Evaluator.Locals = [];
    Message.InitOutput (System.Console.Out);         

    Options.Sources = [""];
    Options.CompileToMemory = true;
    Options.ProgressBar = false;
    Options.IgnoreConfusion = true;
    Options.IgnoredValueWarnings = false;

    Passes.LexingPipeline = fun (_) { null };
    Passes.ParsingPipeline = fun (_) { [null] };
    Passes.ScanningPipeline = DoTheStuff;
  }

  public Eval (refr: list [string], _ns: list [string], code: string): object {
    def prev = (array ["f" : object]) : array [object];
    Locals = [("p1", <[ System.String ]>)];
//    Locals = [];
    Evaluator.code = code;
    Options.ReferencedLibraries = refr;

    Passes.Run ();
    
    def ass = Passes.GeneratedAssembly;
    def meth = ass.GetTypes()[0].GetMethod("Run");
    def ret = meth.Invoke (null, array [prev : object]) :> array [object];
    def result = ret[0];
    def locals = ret[1] :> array [object];

    def l = List.FromArray (locals);
    match ((Locals, l)) {
      | (_, []) | ([], _) => ()
      | _ => List.Iter2 (l, Locals, fun (x: object, y: string*PExpr) { 
                                      def (y1, y2) = y;
                                      when (y1 != "_N_prevs") {
                                        System.Console.WriteLine (y1 + " = " +
                                        x.ToString () + " : " + 
                                        PrettyPrint.SprintExpr (None (), y2));
                                      }
                                    });
    }

    result
  }

  static DoTheStuff (_tdecl : Parsetree.TopDeclaration) : void {
    MacroRegistry.register_macro (StagedMacro ());
    def env = GlobalEnv.Core;

    TypingContext.PushNewColor (-1, env);

    def cname = Macros.NewSymbol ();
    def tb = GlobalEnv.DefineExact (<[ decl: public class $(cname : name) { } ]>);

    def body = MainParser.ParseExpr (env, "{" + Evaluator.code + "} "); 
    
    def whole = inject (body);

    mutable i = -1;    
    def inits = List.FoldLeft (Evaluator.Locals, [], fun (x, acc) {
      match (x) {
        | (name, ty) =>
          ++i;          
          <[ def $(name : usesite) = _N_prevs [$(i : int)] :> $ty ]> :: acc;
      }
    });
    def whole = <[ {.. $(inits + [whole]) } ]>;

//        PrettyPrint.PrintExpr (None (), whole);
    
    tb.Define (<[ decl:
                 public static Run (_N_prevs : array [System.Object]) : array [System.Object]
                 { $whole }
               ]>);
    tb.Compile ();

    TypingContext.PopColor ();
  }

  // analyze given expression and return the new one with
  // our macro's call at the end
  static inject (body : PExpr) : PExpr {
    match (body) {
      | <[ {..$seq } ]> =>
        def (beg, last) = List.DivideLast (seq);
        def last = 
          match (last) {
            // if the last expression in sequence is definition,
            // it must be before our macro and also return value is void then
            | <[ def $_ = $_ ]> | <[ mutable $_ = $_ ]> =>
              <[ $last; $("stagedmacro" : usesite) (()) ]>
            // pass last expression (return value) to our macro
            | _ => <[ $("stagedmacro" : usesite) ($last) ]>
          }
        // return enchanced sequence, with our macro as the last expression
        <[ {..$ (beg + [last]) } ]>
      | _ => <[ $("stagedmacro" : usesite) ($body) ]>
    }
  }

  class StagedMacro : IMacro 
  {
    public Run (_ctx : TypingContext, val : list [SyntaxElement]) : PExpr {
      match (val) {
        | [SyntaxElement.Expression (expr)] =>
          Evaluator.Locals = [];
          
          def locals = _ctx.GetLocals ();
          def values = locals.Fold (fun (n : Name, loc : LocalValue, acc) {
            Evaluator.Locals = (loc.name, PrettyPrint.TypedTypeToParseTree (loc.ty)) :: Evaluator.Locals;
            <[ ($(n : name) : System.Object) :: $acc ]>
          }, <[ [] ]>);
          <[ array [$expr : System.Object, array $values] ]>

        | _ => Util.ice ()
      }
    }

    // not interesting macro stuff (will disappear)
    public CallTransform (l : list [PExpr]) : list [SyntaxElement]
    { List.Map (l, SyntaxElement.Expression); }
    public SyntaxExtension () : string * list [GrammarElement] * list [int]
    { ("", [], []) }
    public IsTailRecursionTransparent : bool { get { false } }
    public GetName () : string { "stagedmacro" }
    public GetNamespace () : string { "" }
    // not interesting macro stuff
  }
}
