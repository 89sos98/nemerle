using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;
using Nemerle.Compiler;

using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public abstract class LocationConverter
  {
    public abstract Convert(loc : PEG.Location) : Location;

    public static Default : LocationConverter = DefaultLocationConverter();
  }

  public sealed class DefaultLocationConverter : LocationConverter
  {
    public override Convert(loc : PEG.Location) : Location
    {
      def (startLine, startCol) = loc.StartLineColumn;
      def (endLine, endCol) = loc.EndLineColumn;
      Location(loc.Source.FileIndex, startLine, startCol, endLine, endCol)
    }
  }

  public sealed class DirectiveLocationConverter : LocationConverter
  {
    public this(lineHints : SCG.IEnumerable[CS.Directive])
    {
      def lines = SCG.List();
      def handlers = SCG.List();

      def registerHandler(line, handler)
      {
        lines.Add(line);
        handlers.Add(handler);
      }

      registerHandler(0, LocationConverter.Default.Convert);

      foreach(hint in lineHints)
      {
        | LineNumber(num, null)
        | LineNumber(num, "") =>
          def directiveLine = hint.Location.StartLineColumn[0];
          registerHandler(directiveLine, fun(loc)
          {
            def (startLine, startCol) = loc.StartLineColumn;
            def (endLine, endCol) = loc.EndLineColumn;
            Location(
              loc.Source.FileIndex,
              num + (startLine - directiveLine - 1),
              startCol,
              num + (endLine - directiveLine - 1),
              endCol)
          });

        | LineNumber(num, fileName) =>
          def directiveLine = hint.Location.StartLineColumn[0];
          registerHandler(directiveLine, fun(loc)
          {
            def (startLine, startCol) = loc.StartLineColumn;
            def (endLine, endCol) = loc.EndLineColumn;
            Location(
              Location.GetFileIndex(fileName),
              num + (startLine - directiveLine - 1),
              startCol,
              num + (endLine - directiveLine - 1),
              endCol)
          });

        | LineDefault =>
          registerHandler(hint.Location.StartLineColumn[0], LocationConverter.Default.Convert);

        | LineHidden =>
          registerHandler(hint.Location.StartLineColumn[0], _ => Location.Default);

        | _ => ()
      }

      this.lines = lines.ToArray();
      this.handlers = handlers.ToArray();
    }

    lines : array[int];
    handlers : array[PEG.Location -> Location];

    [Memoize]
    private GetHandler(line : int) : PEG.Location -> Location
    {
      match(Array.BinarySearch(lines, line))
      {
        | index when index < 0 =>
          handlers[~index - 1]

        | index =>
          handlers[index]
      }
    }

    public override Convert(loc : PEG.Location) : Location
    {
      def handler = GetHandler(loc.StartLineColumn[0]);
      handler(loc)
    }
  }
}