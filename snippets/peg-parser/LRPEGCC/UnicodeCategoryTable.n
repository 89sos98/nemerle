using System;
using System.Globalization;
using System.Globalization.UnicodeCategory;
using SCG = System.Collections.Generic;

using Nemerle.Collections;

namespace LRPEGCC
{
  public module UnicodeCategoryTable
  {
    private _nameToCategoryTable : Hashtable[string, UnicodeCategory] = Hashtable();
    private _categoryToNameTable : Hashtable[UnicodeCategory, string] = Hashtable();
    private _categoryToRangeSetTable : Hashtable[UnicodeCategory, RangeSet] = Hashtable();

    this()
    {
      def classes =
      [
        ("Lu", UppercaseLetter),
        ("Ll", LowercaseLetter),
        ("Lt", TitlecaseLetter),
        ("Lm", ModifierLetter),
        ("Lo", OtherLetter),
        ("Mn", NonSpacingMark),
        ("Mc", SpacingCombiningMark),
        ("Me", EnclosingMark),
        ("Nd", DecimalDigitNumber),
        ("Nl", LetterNumber),
        ("No", OtherNumber),
        ("Zs", SpaceSeparator),
        ("Zl", LineSeparator),
        ("Zp", ParagraphSeparator),
        ("Cc", Control),
        ("Cf", Format),
        ("Cs", Surrogate),
        ("Co", PrivateUse),
        ("Pc", ConnectorPunctuation),
        ("Pd", DashPunctuation),
        ("Ps", OpenPunctuation),
        ("Pe", ClosePunctuation),
        ("Pi", InitialQuotePunctuation),
        ("Pf", FinalQuotePunctuation),
        ("Po", OtherPunctuation),
        ("Sm", MathSymbol),
        ("Sc", CurrencySymbol),
        ("Sk", ModifierSymbol),
        ("So", OtherSymbol),
        ("Cn", OtherNotAssigned)
      ];

      def makeRangeSet(cat)
      {
        mutable i = char.MaxValue : int;
        mutable set = RangeSet();
        while (i >= 0)
        {
          while (i >= 0 && char.GetUnicodeCategory(i :> char) != cat) --i;
          def end = i;
          while (i >= 0 && char.GetUnicodeCategory(i :> char) == cat) --i;
          def start = i + 1;
          when (end >= 0)
            set = set.AddRange(start :> char, end :> char);
        }
        set
      }

      foreach((str, cat) in classes)
      {
        _nameToCategoryTable[str] = cat;
        _categoryToNameTable[cat] = str;
        _categoryToRangeSetTable[cat] = makeRangeSet(cat);
      }
    }

    public StrToUnicodeCategory(x : string) : option[UnicodeCategory]
    {
      match (_nameToCategoryTable.TryGetValue(x))
      {
        | (cat, true) => Some(cat)
        | _ => None()
      }
    }

    public UnicodeCategoryToStr(cat : UnicodeCategory) : string
    {
      match (_categoryToNameTable.TryGetValue(cat))
      {
        | (s, true) => s
        | _ => "[Unknown unicode class]"
      }
    }

    public UnicodeCategoryToRangeSet(cat : UnicodeCategory) : RangeSet
    {
      match (_categoryToRangeSetTable.TryGetValue(cat))
      {
        | (s, true) => s
        | _ => throw ArgumentException("Unknown unicode class.", "cat");
      }
    }
  }
}