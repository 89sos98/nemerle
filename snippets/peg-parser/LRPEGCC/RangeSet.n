using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  public class RangeSet
  {
    [Record]
    public struct Range
    {
      public from : char;
      public to : char;
      public override ToString() : string
      {
        $"[$from:$to]";
      }
    }

    [Accessor]
    private _ranges : list[Range] = [];

    public this()
    {}

    private this(ranges : list[Range])
    {
      _ranges = ranges;
    }

    public AddRange(from : char, to : char) : RangeSet
    {
      AddRange(Range(from, to));
    }

    public AddRange(range : Range) : RangeSet
    {
      unless (range.from <= range.to)
        throw ArgumentException();

      def add(ranges, range)
      {
        match (ranges)
        {
        | [] => [range];
        | firstRange :: ranges =>
          if (firstRange.to + 1 < range.from)
            firstRange :: add(ranges, range);
          else if (range.to + 1 < firstRange.from)
            range :: firstRange :: ranges;
          else
            add(ranges, Range(Math.Min(range.from, firstRange.from) :> char, Math.Max(range.to, firstRange.to) :> char));
        }
      }
      RangeSet(add(_ranges, range));
    }

    public Sum(that : RangeSet) : RangeSet
    {
      Ranges.Fold(that, (range, that) => that.AddRange(range));
    }

    public override ToString() : string
    {
      _ranges.ToString();
    }

    public override GetHashCode() : int
    {
      _ranges.Fold(0, (range, hash) => ((hash + range.from) ^ range.to) + 0x22529323);
    }

    public override Equals(_ : object) : bool
    {
    | that is RangeSet => that._ranges.Equals(_ranges, (range1, range2) => range1.from == range2.from && range1.to == range2.to);
    | _                => false;
    }
  }
}
