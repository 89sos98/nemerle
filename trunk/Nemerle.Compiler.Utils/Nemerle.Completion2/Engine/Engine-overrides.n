using System;
using System.Diagnostics;

using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;

namespace Nemerle.Completion2
{
  public partial class Engine
  {
    protected override CreateComponentsFactory () : CompilerComponentsFactory
    {
      // Provide Abstract Factory to MethodBuilder and other compiler classes.
      Factories.IntelliSenseModeCompilerComponentsFactory ()
    }

    internal SetCompiletMessages (messages : SCG.List[CompilerMessage]) : void
    {
      _currentMessages = messages;
    }

    /// Return true if 'method' is extension method.
    protected override IsExtensionMethod (method : IMethod, tyVar : TyVar) : bool
    {
      match (method.GetFreshType())
      {
        | (MType.Fun(from, _), _) => 
          match (from.Fix().GetFunctionArguments())
          {
            | paramMType :: _ => 
              def res = paramMType.TryProvide(tyVar);
              assert(true);
              res
              
            | _ => false
          }
        | _ => false
      }
    }
  
    protected override FullResetNamespaceTree() : void
    {
      base.FullResetNamespaceTree();
      ResetNamespaceTree();
    }

    public override ToString() : string { "Engine: prj=" + _callback.ProjectName }
  }
}