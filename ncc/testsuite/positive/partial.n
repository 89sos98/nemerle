
using Nemerle.IO;

partial class A {
  public class I { }
  public B : int = 1;
}

[System.Flags]
partial class A {
  public class J { }
  public H : int = 2;

}

namespace N {
  partial class A {
    class I { }
    public B : int = 3;
  }

  [System.Flags]
  partial class A {
    class J { }
    public H : int = 4;
  }
}

namespace PartialParts {
  namespace Foo
  {
    public class Hello
    {
      public static mutable World : int = 8;
    }
  }

  namespace Bar
  {
    public class Hello
    {
      public static mutable World : int = 9;
    }
  }

  namespace X
  {
    using PartialParts.Foo;

    public partial class Test
    {
      public static FooWorld () : int
      {
        Hello.World;
      }
    }
  }

  namespace X
  {
    using PartialParts.Bar;
    
    public partial class Test
    {
      public static BarWorld () : int
      {
        Hello.World;
      }
    }
  }
}

class U {
  static TestParts () : void
  {
    printf ("--------- test parts ------------\n");
    if (PartialParts.X.Test.FooWorld () != 8)
      System.Console.WriteLine ( 1);
    else  {
      if (PartialParts.X.Test.BarWorld () != 9)
        System.Console.WriteLine ( 2);
      else
        System.Console.WriteLine ( 0);
    }
  }
  
  static Main () : void {
    def x = A ();
    print ($"$(x.B)\n");
    print ($"$(x.H)\n");
    def x = N.A ();
    print ($"$(x.B)\n");
    print ($"$(x.H)\n");
    def f = typeof (A).GetCustomAttributes (true);
    foreach (a in f) 
      when (a.ToString ().IndexOf ("Flags") != -1)
            print ("Flags\n");
    print ($"$(typeof(A.I)) $(typeof(A.J))\n");
    TestParts ();
  }
}

/*
BEGIN-OUTPUT
1
2
3
4
Flags
A+I A+J
--------- test parts ------------
0
END-OUTPUT
*/
