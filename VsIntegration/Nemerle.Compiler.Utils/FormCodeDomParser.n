using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;

using Nemerle.Assertions;
using NC = Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.Compiler.Utils
{
  // now CodeDomParser only parses files from Project.CompileUnits
  // it is not thread-safe at the moment!
  public class FormCodeDomParser : NemerleCodeParser
  {
    mutable _project   : Project;

    mutable _mainFileIndex : int;
    mutable _designerFileIndex : int;

    mutable _formCodeInfo : FormCodeInfo = FormCodeInfo(-1,-1);

    /*
      methods and fields in generated CodeCompileUnit contain 
      typeof(Location) - indicates that this member is already in file
      and 
      typeof(Point) - is required by Designer
      data in UserData

      CodeCompileUnit itself contains typeof(FormCodeInfo) in UserData
    */
    public CreateCodeCompileUnit(project : Project, mainFileIndex : int, designerFileIndex : int) : CodeCompileUnit
    {
      // Initialization
      _project = project;
      base._manager = _project.Engine;

      _mainFileIndex     = mainFileIndex;
      _designerFileIndex = designerFileIndex;

      //// TODO: new object vs Clear
      //cachedObjs = NC.Hashtable();

      // Processing
      def unit = CodeCompileUnit();

      def globalImports = List();

      foreach(decl in project.CompileUnits.GetTopNamespace(_designerFileIndex).Decls)
      {
        | Decl.Namespace as nsDecl => _ = unit.Namespaces.Add(ProcessNamespace(nsDecl));
            
        | Decl.Using as usDecl     => 
            globalImports.Add(usDecl.Name.ToString("."));
            //unit.Imports.Add(CodeNamespaceImport());
            
        | d with(bodyLoc = project.CompileUnits.GetTopNamespace(_mainFileIndex).BodyLocation) =>
          //TODO: VladD2: Какая-то чушь...
          throw CodeDomSerializerException($"Assumed root Declaration of CompileUnit is Decl.Namespace, got $d",
                                            CodeLinePragma(bodyLoc.File,bodyLoc.Line)); 
      }

      foreach(import in globalImports)
        _ = unit.ReferencedAssemblies.Add(import);

      // Add FormCodeInfo
      when (_designerFileIndex != -1)
        assert(_formCodeInfo.newMethodInsertionLine != -1 && _formCodeInfo.newFieldInsertionLine != -1,
               "Don't know where generated fields and methods should be placed");

      //TODO: VladD2: Какая-то чушь...
      unit.UserData.Add(typeof(FormCodeInfo), _formCodeInfo);

      /*
      Debug.Write(CodeDomHelper.ToString(unit,
                  NemerleCodeGenerator()));
      Debug.Write(CodeDomHelper.ToString(unit,
                  Microsoft.CSharp.CSharpCodeProvider().CreateGenerator()));
      */

      unit
    }

    private ProcessNamespace(decl: Decl.Namespace) : CodeNamespace
    {
      def res = CodeNamespace(decl.Name.ToString("."));

      foreach(decl in decl.Decls)
        match(decl)
        {
          | Decl.Type(ast) => 
              assert(res.Types.Count < 2, "Form files should not contain more than one top class declaration");
              //Debug.Write(typeDecl.Ast);
        
              InitFormCodeInfo(ast.TypeBuilder);

              _ = res.Types.Add(ProcessTypeDeclaration(ast));

          | Decl.Using as usDecl     =>
            res.Imports.Add(CodeNamespaceImport(usDecl.Name.ToString(".")));

          | Decl.Namespace(BodyLocation = bodyLoc) => 
            //TODO: VladD2: Какая-то чушь... Счего бы это нельзя иметь вложенных пространств имен?
            throw CodeDomSerializerException("Namespace declarations cannot contain inner namespace declarations",
                                             CodeLinePragma(bodyLoc.File,bodyLoc.Line)); 

          | _ => () // Ignored
        }

      res
    }
/*
    protected override ProcessClassMembers(members: list[IMember], classDecl: CodeTypeDeclaration) : void
    {
      foreach (m in members)
      {
        | m is TypeBuilder => 
          _ = classDecl.Members.Add(CreateClass(m));

        | m is MemberBuilder when (!m.Name.OrdinalStartsWith("_N_field_initialiser")) =>
          _ = classDecl.Members.Add(CreateMember(m));

        | _ =>
          () //Debug.Print($"Declaration of external member $m ignored");
      }
    }

    protected override CreateMember(member: MemberBuilder) : CodeTypeMember
    {
      def memberDecl = base.CreateMember(member);
      memberDecl.UserData["Name"] = member.Name;
      memberDecl
    }

    protected override CreateField(field: FieldBuilder) : CodeMemberField
    {
      when (field.Location.FileIndex == _designerFileIndex)
      {
        def lineAfterEnd = field.Location.EndLine+1;
        when (lineAfterEnd > _formCodeInfo.newFieldInsertionLine)
          _formCodeInfo.newFieldInsertionLine = lineAfterEnd;
      }

      base.CreateField(field);
    }

    protected override CreateMethod(method: MethodBuilder) : CodeMemberMethod
    {
      def methodDecl = base.CreateMethod(method);

      if (method.Location.FileIndex == _mainFileIndex)
      {
        def lineAfterEnd = method.Location.EndLine+1;
        when (lineAfterEnd > _formCodeInfo.newMethodInsertionLine)
          _formCodeInfo.newMethodInsertionLine = lineAfterEnd;

        // TODO: correct positioning
        methodDecl.UserData.Add(typeof(Point),
          Point( 1+ method.BodyTyped.Location.Column,
                 method.BodyTyped.Location.Line));
      }
      else when (method.Name == "InitializeComponent") 
      {
        // TODO: correct region handling
        // TODO: do we need extra space?
        def lineAfterEnd = method.Location.EndLine+1;
        when (lineAfterEnd > _formCodeInfo.newFieldInsertionLine)
          _formCodeInfo.newFieldInsertionLine = lineAfterEnd;
      }

      methodDecl
    }
*/
    private InitFormCodeInfo(typeBuilder: TypeBuilder) : void
    {
      // Make sure at least main and designer files are included in PartsLocation

      // TODO: quite a brute approach
      
      mutable partsLocations = typeBuilder.PartsLocation;
      assert (partsLocations.Length == 2, "Form class declaration must reside in two files: main and designer's");

      when (partsLocations.Head.FileIndex == _designerFileIndex)
        partsLocations = partsLocations.Reverse();// TODO

      assert (partsLocations.Head.FileIndex == _mainFileIndex &&
              partsLocations.Last.FileIndex == _designerFileIndex,
              "Main class is located in the wrong files!");

      // TODO
      _formCodeInfo.newMethodInsertionLine = partsLocations.Head.Line + 1;
      _formCodeInfo.newFieldInsertionLine = partsLocations.Last.Line + 1;
    }

    // process cached objects because form designer doesn't understand 'em
    //#region Cached objects related
    //
    //protected mutable cachedObjs : NC.Hashtable[string,CodeExpression];
    //
    //#endregion
  }
}
