/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  /**
   * This part of TypesManages is responsible for generation of System.Reflection.Emit structures 
   * composing program hierarchy. It executes emission of all classes and their members.
   */
  [ManagerAccess]
  public abstract partial class TypesManager : System.IDisposable
  {
    protected this(man : ManagerClass)
    {
      Manager = man;
    }

    public virtual Dispose() : void { }

    protected internal abstract IsEmitting : bool { get; }

    protected internal abstract CreateAssembly () : void;

    protected internal abstract EmitAuxDecls () : void;

    protected internal abstract EmitDecls () : void;

    protected internal abstract SaveAssembly () : void;

    protected internal abstract EnsureEmitProgress (ti : TypeBuilder) : void;

    public abstract MaybeCompile (ti : TypeBuilder, mem : MemberBuilder) : void
  }

  public abstract partial class TypeBuilder : TypeInfo  
  {
    public abstract CreateEmitBuilder () : void;

    public abstract CreateEmitDeclarations() : void;

    public abstract EmitImplementation() : void;

    public abstract UpdateEmittedInheritance () : void;
  }
}
