using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace LRPEGCC
{
  [Record]
  public class Capture
  {
    public Name : string;
    public StartPos : int;
    public mutable EndPos : int;
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, startRule, rules)
  {
    GrammarImpl.MakeParser(tb, startRule, rules);
  }

  internal module GrammarImpl
  {
    ReportUnexpected(expr : PExpr, expected : string) : void
    {
      Message.Error(expr.Location, $"expected $expected but found $expr ($(expr.GetType().Name))");
    }

    ReportUnexpected[T](expr : PExpr, expected : string, defaultVal : T) : T
    {
      ReportUnexpected(expr, expected);
      defaultVal
    }

    ReportCriticalUnexpected[T](expr : PExpr, expected : string) : T
    {
      ReportUnexpected(expr, expected);
      throw ArgumentException()
    }
  
    public ParseRules(startRule : string, rules : PExpr) : Grammar
    {
      def rules = match (rules)
      {
      | Sequence(rules) => rules
      | rule            => ReportCriticalUnexpected(rule, "exprssions")
      }
      def toInt(expr : PExpr) : int
      {
      | <[ $(val : int) ]> => val
      | _                  => ReportUnexpected(expr, "character literal", 0)
      }
      def toChar(expr : PExpr) : char
      {
      | <[ $(val : char) ]> => val;
      | _                   => ReportUnexpected(expr, "character literal", '\0')
      }
      def transformRule(_ : PExpr) : Rule
      {
      | <[ And($rule) ]>                => Rule.And(transformRule(rule))
      | <[ Not($rule) ]>                => Rule.Not(transformRule(rule))
      | <[ $(str : string) ]>           => Rule.Chars(str.Map(ch => RangeSet().AddRange(ch, ch)))
      | <[ $(ch  : char) ]>             => Rule.Chars([RangeSet().AddRange(ch, ch)])
      | <[ Range($from, $to) ]>         => Rule.Chars([RangeSet().AddRange(toChar(from), toChar(to))])
      | <[ OneOrMany($rule) ]>          => Rule.RepeatMin(1, transformRule(rule))
      | <[ ZeroOrMany($rule) ]>         => Rule.RepeatMin(0, transformRule(rule))
      | <[ AtLeast($from, $rule) ]>     => Rule.RepeatMin(toInt(from), transformRule(rule))
      | <[ ZeroOrOne($rule) ]>          => Rule.RepeatMinMax(0, 1, transformRule(rule))
      | <[ FromTo($from, $to, $rule) ]> => Rule.RepeatMinMax(toInt(from), toInt(to), transformRule(rule))
      | <[ Seq(..$rules) ]>             => Rule.Sequence(rules.Map(transformRule))
      | <[ Or(..$rules) ]>              => Rule.Choice(rules.Map(transformRule))
      | <[ $name(..$rules) ]>           => Rule.Capture(name.ToString(), Rule.Sequence(rules.Map(transformRule)))
      | Ref(name)                       => Rule.Call(name.Id)
      | rule                            => ReportCriticalUnexpected(rule, "rule")
      }
      
      rules.Fold(Grammar(startRule), fun(rule, grammar)
      {
        match (rule)
        {
        | <[ def $name = $rule; ]> =>
          grammar.Add(name.ToString(), transformRule(rule));
        | rule => ReportCriticalUnexpected(rule, "def x = rule;")
        }
      });
    }

    public MakeParser(tb : TypeBuilder, startRule : PExpr, rules : PExpr) : void
    {
      def compiler = RuleCompiler();
      compiler.GetCharName = "GetChar";
      compiler.CheckTextLengthName = "CheckTextLength";

      def grammar = ParseRules(startRule.ToString(), rules);
      def grammar = Optimizer.OptimizeGrammar(grammar);

      mutable str = "";
      
      foreach (name in grammar.Names)
      {
        def rule = grammar.GetRule(name);
        def body = compiler.CompileRule(rule, grammar);
        def method = <[decl:
          private $(compiler.DecorateRuleName(name) : dyn)(pos : int) : int
          {
            $(body);
          }
        ]>;
        tb.Define(method);
        str = str + method.ToString() + "\n" + body.ToString() + "\n\n";
      }
      tb.Define(<[decl:
          private $(compiler.CacheName : dyn) : System.Collections.Generic.Dictionary[int, int] = System.Collections.Generic.Dictionary();
      ]>);
      tb.Define(<[decl:
          private $(compiler.CapturesName : dyn) : System.Collections.Generic.List[LRPEGCC.Capture] = System.Collections.Generic.List();
      ]>);
      tb.Define(<[decl:
          public Captures : System.Collections.Generic.List[LRPEGCC.Capture] { get { $(compiler.CapturesName : dyn) } }
      ]>);
      tb.Define(<[decl:
        public Start() : int
        {
          $(compiler.DecorateRuleName(grammar.StartRuleName) : dyn)(0);
        }
      ]>);
      tb.Define(<[decl:
        public override ToString() : string
        {
          $(str : string);
        }
      ]>);
    }
  }
}
