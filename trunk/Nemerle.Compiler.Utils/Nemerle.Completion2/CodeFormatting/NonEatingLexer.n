using System;
using Nemerle;
using Nemerle.Compiler;
using System.Collections.Generic;

namespace Nemerle.Completion2.CodeFormatting
{
  // The only purpose of this class is to leave whitespace and comments in the output stream
  class NonEatingLexer : LexerString
  {
    public this (manager : ManagerClass, code : string, loc : Location)
    {
      base (manager, code, loc);
      Keywords = manager.CoreEnv.Keywords;
    }
    
    protected override do_get_token() : Token
    {
      def ch = 
        if (isPendingChar) 
        {
          isPendingChar = false;
          pendingChar
        }
        else 
        {
          try { read () }
          catch { _ is LexerBase.Error => ' ' }
        }
      match (ch) 
      {
        | '"' => get_string ('"', false)

        | '\'' => get_id ('\'')

        | '.' => 
          def next = peek_or_white ();
          if (Char.IsDigit (next))
            get_number (ch)
          else if (next == '.') {
            _ = read ();
            Token.Operator ("..")
          } else
            Token.Operator (".")

        | '{' => Token.BeginBrace (generated = false)
        | '}' => Token.EndBrace (generated = false)
        | '[' => Token.BeginSquare ()
        | ']' =>
          if (peek_or_white () == '>') 
          {
            ignore (read ());
            Token.EndQuote ()
          }
          else
            Token.EndSquare ()
        | '(' => Token.BeginRound ()
        | ')' => Token.EndRound ()
        | ',' => Token.Comma ()
        | ';' => Token.Semicolon (generated = false)

        | '<' when peek_or_white () == '[' => ignore (read ()); Token.BeginQuote ()
          
        | '@' =>
          def next = read ();
          if (next == '#') // Completion token.
            Token.IdentifierToComplete ("")
          else if (IsOperatorChar (next))
            match (get_op (next)) 
            {
              | Token.Operator (s) => Token.Identifier (s)
              | _ => Util.ice ()
            }
          else if (IsIdBeginning (next))
            match (get_id (next)) 
            {
              | Token.Identifier (x)
              | Token.Keyword (x) => Token.QuotedIdentifier (x)
              | _ => Util.ice ()
            }
          else if (next == '"')
            get_monkey_string ()
          else
            throw Error ("expecting operator, identifier or string literal after '@'")
        
        | '*' =>
          if (peek_or_white () == '*')
            get_op (ch)
          else
            get_op (ch)

        | '/' =>
          get_op (ch)
                                
        | '%' | '\\'
          => get_op (ch)

        | '-' =>
          if (peek_or_white () != '.') get_op (ch) 
          else Token.Operator ("-")

        | '+'  
          =>
             if (peek_or_white () != '.') get_op (ch) 
             else Token.Operator ("+")

        | '$' =>
          //Fake();
          def startLine = this.Location.Line;
          def startCol  = this.Location.Column;

          if (eat_whitespace () && (peek_or_white () == '"' || peek_or_white () == '@')) 
          {
            // we will not warn about $ in string literal in this mode
            def strStartLoc = this.Location;
            def c = read ();
            
            def str =
              if (c == '"')
                get_string (c, true)
              else 
              {
                unless (read () == '"')
                  Message.Error (this.Location, "expected string literal after @");
            
                get_monkey_string ()
              }

            def dolLoc = Location(strStartLoc.FileIndex, startLine, startCol - 1, startLine, startCol);
            str.Location = strStartLoc + str.Location;
            def groupLok = dolLoc + str.Location;
            def dolTok = Token.Operator (dolLoc, "$");
            dolTok.Next = str;
            Token.RoundGroup (groupLok, Token.LooseGroup (groupLok, dolTok))
          }
          else get_op (ch)
                                
        | '^' | '~' | '?' | '#'
          => get_op (ch)
          
        | '=' | '<' | '>' | '!' 
          => get_op (ch)
          
        | '&' => get_op (ch)
        | '|' => get_op (ch)
        | ':' => get_op (ch)

        | ' ' => Token.WhiteSpace (" ")
        | '\t' => Token.Indent ("\t");
        | '\n' => Token.NewLine("\n");
        | '\r' => // All three new line styles: Windows, Unix, MacOS
          if(peek_or_white() == '\n')
          {
            ignore(read());
            Token.NewLine("\r\n");
          }
          else
            Token.NewLine("\r");

        | '\0' => Token.EndOfFile ()

        | _ =>
          if (Char.IsDigit (ch))
            get_number (ch)
          else
            if (IsIdBeginning (ch))
              get_id (ch)  // '
            else
              throw Error ($"invalid character: '$ch'")
      }
    }
    
    public override GetToken() : Token
    {
      if (tok_pending != null) 
      {
        def tok = tok_pending;
        tok_pending = null;
        tok
      } 
      else 
      {
        //unless (isPendingChar)
          //_ = eat_whitespace ();
        //
        if (insert_indent) 
        {
          insert_indent = false;
          Token.Indent (insert_location, indent_string)
        } 
        else 
        {
          def last_line = line;
          def last_col = col;
          def tok = do_get_token ();

          // IT: making last_line & last_col as class fields could be a better solution.
          if (tok.Location.FileIndex == 0)
            tok.Location = Location (file_idx, last_line, last_col, line, col);
          else
            tok.Location = Location (file_idx, last_line, last_col, tok.Location.EndLine, tok.Location.EndColumn);
          tok
        }
      }
    }
  }
  
}
