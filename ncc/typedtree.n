(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open Nemerle.Compiler;
open Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Typedtree {

public class Decl_base extends Located
  {
    public mutable name : string;
    public mutable modifiers : list (Modifier);
    public mutable id : int;
    public mutable tyinfo : Tyinfo;

    public this () { this.id <- Util.next_id(); }
  }

public class Constraint
  {
    public tyvar : string;
    public ty : Type;
  }

public variant Type_decl
  {
    | TD_class
    | TD_alias { ty : Type; }
    | TD_external { extern_name : string; }
    | TD_interface
    | TD_variant
    | TD_variant_option
    | TD_macro
  }

public variant Class_member extends Decl_base
  {
    | M_value { ty : Type; is_ref : bool; kind : Val_kind; }
    | M_field { ty : Type; is_ref : bool; }
    | M_function { 
        header : Fun_header;
        mutable kind : Fun_kind;
        mutable body : Fun_body;
      }
    | M_property { ty : Type; mutable reader : option (Fun_body); mutable writer : option (Fun_body); } 
  }

public class Type_base
  {
    public as_string () : string 
      { Tyutil.string_of_type (Tyvar.global_expand ((this :> Type))) }
  }
  
public variant Type extends Type_base
  {
    | T_app {
        tycon : Tyinfo;
        args : list (Type);
      }
    | T_var { tyvar : Tyvar.T; }
    | T_ref { t : Type; }
    | T_out { t : Type; }
    | T_fun { from : Type; to : Type; }
    | T_void
    | T_prod { args : list (Type); }
    | T_array { t : Type; }
  }

public class Fun_parm
  {
    public loc : Location;
    public name : string;
    public ty : Type;
    public mutable decl : Decl;
  }
  
public class Fun_header
  {
    public loc : Location;
    public mutable name : string;
    public id : int;
    public ret_type : Type;
    public mutable parms : list (Fun_parm);
    public typarms : list (Tyvar.T);
    public tenv : Tyvar.TEnv;
    
    public mutable closure_vars : list (Decl);
  }

public class Function_decl
  {
    public decl : Decl;
    public body : Expr;
  }

public class Named_pattern
  {
    public name : M_field;
    public pat : Pattern;
  }

public class Pattern_base extends Located
  {
    public mutable ty : Type;
  }
  
public variant Pattern extends Pattern_base
  {
    | P_underscore
    | P_variable { decl : Decl; }
    | P_tuple { args : list (Pattern); }
    | P_record { args : list (Named_pattern); }
    | P_cons { name : Tyinfo; arg : Pattern; }
    | P_literal { lit : Literal; }
  }
  
public class Match_case
  {
    public loc : Location;
    public pattern : Pattern;
    public body : Expr;
  }
  
public class Expr_base extends Located
  {
    public mutable expr_ty : Type;
  }

public variant Expr extends Expr_base 
  { 
    | E_ref { decl : Decl; }
    | E_field_ref { obj : Expr; fld : M_field; }
    | E_property_ref { obj : Expr; prop : M_property; }
    | E_method_ref { obj : Expr; meth : M_function; }
    | E_call { func : Expr; parms : list (Parm); }
    | E_assign { target : Expr; source : Expr; }
    | E_let { name : Decl; val : Expr; body : Expr; }
    | E_letfun { funs : list (Function_decl); body : Expr; }
    | E_match { expr : Expr; cases : list (Match_case); }
    | E_raise { exn : Expr; }
    | E_if { cond : Expr; e_then : Expr; e_else : Expr; }
    | E_try_with { body : Expr; exn : Decl; handler : Expr; }
    | E_try_finally { body : Expr; handler : Expr; }
    | E_literal { val : Literal; }
    | E_this
    | E_type_conversion { expr : Expr; ty : Type; }  // (expr :> ty)
    | E_type_enforcement { expr : Expr; ty : Type; } // (expr : ty)
    | E_sequence { e1 : Expr; e2 : Expr; }
    | E_tuple { args : list (Expr); }
    | E_mkarray { args : list (Expr); }
    | E_indexer { obj : Expr; args : list (Expr); }
  }

public class Parm
  {
    public is_ref : bool;
    public expr : Expr;
    public name : string;  // "" if no name given
  }

 
} // Nemerle.Compiler.Typedtree
