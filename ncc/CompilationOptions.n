/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
 
namespace Nemerle.Compiler 
{
  public module Options
  {
    public mutable OutputFileName : string               = "out.exe";
    public mutable XmlDoc : bool                         = false;
    public mutable DumpTypedTree : bool                  = false;
    public mutable TargetIsLibrary : bool                = false;
    public mutable TargetIsWinexe : bool                 = false;
    public mutable IgnoreConfusion : bool                = false;
    public mutable ThrowOnError : bool                   = false;
    public mutable GeneralTailCallOpt : bool             = false;
    public mutable ProgressBar : bool                    = true;
    public mutable ConstantBooleanMatchingOpt : bool     = true;
    public mutable ConstantOrdinalMatchingOpt : bool     = false;
    public mutable ConstantStringMatchingOpt : bool      = false;
    public mutable ColorMessages : bool                  = true;
    public mutable UseLoadedCorlib : bool                = false;
    public mutable DoNotLoadMacros : bool                = false;
    public mutable DoNotLoadStdlib : bool                = false;
    public mutable EmitDebug : bool                      = false;
    public mutable CompileToMemory : bool                = false;    
    public mutable EarlyExit : bool                      = false;    

    public mutable LinkedResources : list [string]       = [];
    public mutable EmbeddedResources : list [string]     = [];
    public mutable ReferencedLibraries : list [string]   = [];
    public mutable Sources : list [string]               = [];

    internal Validate () : void {
      when (System.IO.Path.GetExtension (OutputFileName) == "")
        OutputFileName +=
          (if (Options.TargetIsLibrary) ".dll" else ".exe");
    }
  }

  /** Module used to enumerate and filter warnings emitted by compiler
   */
  public module WarningOptions
  {
    public Level : int
    {
      mutable cur_level : int;

      get { cur_level }
      set {
        when (value >= 0 && value <= 4) {
          cur_level = value;
          currently_enabled = Hashtable ();
          for (mutable lev = 0; lev <= value; lev++) {
            foreach (x in levels [lev])
              unless (disabled.Contains (x))
                currently_enabled.Add (x, null);
          }
          enabled.Iter (fun (x, _) {
            unless (currently_enabled.Contains (x))
              currently_enabled.Add (x, null)
          });
        }
      }
    }

    mutable currently_enabled : Hashtable [int, object];
    mutable enabled : Hashtable [int, object] = Hashtable ();
    mutable disabled : Hashtable [int, object] = Hashtable ();

    this () { Level = 4; }
    
    /** Gives information if warning with given number should be emited by
        compiler.

        It depends on currently set warning level and enabled / disabled
        particular warnings.
     */
    public IsEnabled (nr : int) : bool
    {
      currently_enabled.Contains (nr)
    }

    public Enable (nr : int) : void
    {
      if (disabled.Contains (nr))
        Message.Warning ($"warning N$nr is already explicitly disabled, thus it cannot be enabled");
      else {
        unless (currently_enabled.Contains (nr))
          currently_enabled.Add (nr, null);
        unless (enabled.Contains (nr))
          enabled.Add (nr, null)
      }
    }

    public Disable (nr : int) : void
    {
      if (enabled.Contains (nr))
        Message.Warning ($"warning N$nr is already explicitly enabled, thus it cannot be disabled");
      else {
        when (currently_enabled.Contains (nr))
          currently_enabled.Remove (nr);
        unless (disabled.Contains (nr))
          disabled.Add (nr, null)
      }        
    }
    
    levels : array [array [int]] = array [
      array [], // level 0
      array [183, 184, 602, 626, 5000], // level 1

      // level 2
      array [108, 114, 162, 251, 252, 253, 618], 

      // level 3
      array [67, 105, 168, 169, 219], 

      // level 4
      array [28, 78, 109, 628, 649,
             10001, 10003, 10004, 10005],

      array [10002]  
    ];


    /* warnings reference:
       from C#
    
      0028 - 'function declaration' has the wrong signature to be an entry point
      0067 - The event 'event' is never used. An event was declared but never
             used in the class in which it was declared.
      0078 - The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity
+     0105 - The using directive for 'namespace' appeared previously in this namespace
      0108 - The keyword new is required on 'member1' because it hides inherited member 'member2'
      0109 - The member 'member' does not hide an inherited member. The new keyword is not required
+     0114 - 'function1' hides inherited member 'function2'. To make the current
             method override that implementation, add the override keyword.
             Otherwise add the new keyword.
      0162 - Unreachable code detected
+     0168 - The variable 'var' is declared but never used
      0169 - The private field 'class member' is never used
      0183 - The given expression is always of the provided ('type') type
      0184 - The given expression is never of the provided ('type') type
      0219 - The variable 'variable' is assigned but never used
      0251 - Indexing an array with a negative index (array indices always start at zero)
      0252 - Possible unintended reference comparison; to get a value comparison, cast
             the left hand side to type 'type'
      0253 - Possible unintended reference comparison; to get a value comparison, cast
             the right hand side to type 'type'
      0602 - The feature 'old_feature' is deprecated. Please use 'new_feature' instead
      0618 - A class member was marked with the Obsolete attribute, such that a warning
             will be issued when the class member is referenced.
      0626 - Method, operator, or accessor 'method' is marked external and has no
             attributes on it. Consider adding a DllImport attribute to specify the external implementation
      0628 - 'member' : new protected member declared in sealed class
      0649 - Field 'field' is never assigned to, and will always have its default value 'value
      ...
      5000 - Unknown compiler option '/option'

      Nemerle unique:
      10001 - Cast is unnecessary
      10002 - Enable some pedantic checks for illegal characters in input stream
      10003 - Other global unused member warnings
      10004 - warnings about usage of bit operations on enums without correct attribute
      10005 - warnings about ignoring computed values",
    */
  }
}





















