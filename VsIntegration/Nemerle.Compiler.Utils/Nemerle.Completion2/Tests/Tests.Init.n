using System;
using System.Console;
using System.IO;
using System.Reflection;
using System.Text;

using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Text;

using NUnit.Framework;

using Nemerle.Completion2;
using Nemerle.Compiler.Utils;

namespace Tests
{
  public partial class Test1
  {
    [SetUp]
    public Init() : void
    {
      def pm = ProjectManager();
      def callback = EngineCallbackStub(
        "mscorlib",
        "System",
        "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
        "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
        "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      );
      _engine = Engine(callback, pm, TraceWriter());
      pm.Engine = _engine;

      def addSource(source)
      {
        _engine.Sources.AddOrUpdate(source, File.ReadAllText(source));
      }

      addSource(FilePath1);
      Assert.AreEqual(1, _engine.Sources.Count, "Expected Failure.");

      addSource(FileQuickTip2);
      Assert.AreEqual(2, _engine.Sources.Count, "Expected Failure.");

      addSource(FilePath3);
      Assert.AreEqual(3, _engine.Sources.Count, "Expected Failure.");

      addSource(FilePath2);
      Assert.AreEqual(4, _engine.Sources.Count, "Expected Failure.");

      addSource(FileQuickTip);
      Assert.AreEqual(5, _engine.Sources.Count, "Expected Failure.");

      addSource(FileMethodTip);
      Assert.AreEqual(6, _engine.Sources.Count, "Expected Failure.");

      _project = _engine.Project;
      Assert.IsNotNull(_project, "_project is null");
    }

    FilePath1     = @"Nemerle.Completion2\Tests\Content\Class1.n";
    FilePath2     = @"Nemerle.Completion2\Tests\Content\Class1-2.n";
    FilePath3     = @"Nemerle.Completion2\Tests\Content\Class1-3.n";
    FileQuickTip  = @"Nemerle.Completion2\Tests\Content\QuickTip.n";
    FileQuickTip2 = @"Nemerle.Completion2\Tests\Content\QuickTip2.n";
    FileMethodTip = @"Nemerle.Completion2\Tests\Content\MethodTip.n";

    mutable _project : Project;
    mutable _engine  : Engine;

    CheckType(decl : Decl, fullName : string) : void
    {
      match (decl)
      {
        | Decl.Type(ast) => Assert.AreEqual(fullName, ast.TypeBuilder.FullName);
        | _ => Assert.Fail("decl is Decl.Type Failure.");
      }
    }

    CheckUsing(decl : Decl, @namespace : string) : void
    {
      match (decl)
      {
        | Decl.Using as us => Assert.AreEqual(@namespace, us.Name.ToString("."));
        | _ => Assert.Fail("decl is Decl.Using Failure.");
      }
    }

    CheckMethod(member : IMember, name : string) : void
    {
      match (member)
      {
        | method is MethodBuilder => Assert.AreEqual(name, method.Name);
        | _ => Assert.Fail("member is MethodBuilder Failure.");
      }
    }

    CheckProperty(member : IMember, name : string) : void
    {
      match (member)
      {
        | prop is PropertyBuilder => Assert.AreEqual(name, prop.Name);
        | _ => Assert.Fail("member is PropertyBuilder Failure.");
      }
    }

    /// Находит тег и возвращает его координаты (строка, колонка).
    /// формат тега /*Тега*/ или /*Тега:+сдвиг*/ или /*Тега:-сдвиг*/
    /// Сдвиг позволяет задать колонку с относительным сдвигом.
    ReadLocation(filePath : string, tagName : string) : int * int
    {
      def tagName = "/*" + tagName;
      def lines = File.ReadAllLines(filePath);
      for (mutable i = 0; i < lines.Length; i++)
      {
        def line = lines[i];
        def index = line.IndexOf(tagName);
        when (index >= 0)
        {
          def str = line.Substring(index + tagName.Length);
          mutable isNegative = false;
          def offset = regexp match (str)
          {
            | @":\+{0,1}(?<offset : int>\d+)\*/.*" => offset
            | @":\-(?<offset : int>\d+)\*/.*"      => isNegative = true; -offset
            | _                                    => 0
          }
          def len = str.IndexOf("*/");
          assert(len >= 0);

          def col = if (isNegative)
            index + offset;
          else
            index + len + 2 + offset + tagName.Length;

          return (i + 1, col + 1);
        }
      }

      throw System.Exception("Tag not found.");
    }

    GetSource(filePath : string) : ISource
    {
      ProjectManager.SimpleSourceTextManager(
        Location.GetFileIndex(filePath), File.ReadAllText(filePath))
    }

    private class TestSourceTextManager : ISource
    {
      public this(filePath : string)
      {
        _filePath = filePath;
      }

      _filePath : string;

      public FileIndex : int { get { Location.GetFileIndex(_filePath) } }

      public GetRegion(line : int, col : int, lineEnd : int, colEnd : int) : string
      {
        def line = line - 1; def col = col - 1; def lineEnd = lineEnd - 1; def colEnd = colEnd - 1;
        def lines = File.ReadAllLines(_filePath);
        def builder = StringBuilder();

        if (line == lineEnd)
          ignore(builder.Append(lines[line].Substring(col, colEnd - col)));
        else
        {
          ignore(builder.AppendLine(lines[line].Substring(col)));

          for (mutable i = line + 1; i < lineEnd; i++)
            ignore(builder.AppendLine(lines[i]));

          ignore(builder.Append(lines[lineEnd].Substring(0, colEnd)));
        }

        builder.ToString();
      }

      public GetText() : string { File.ReadAllText(_filePath) }

      public GetRegion(loc : Location) : string
      {
        GetRegion(loc.Line, loc.Column, loc.EndLine, loc.EndColumn)
      }

      public GetLine(line : int) : string
      {
        File.ReadAllLines(_filePath)[line - 1];
      }

      public GetPositionOfLineIndex(_line : int, _col : int) : int
      {
        throw NotImplementedException();
      }

      public GetLineIndexOfPosition(_pos : int) : int * int
      {
        throw NotImplementedException();
      }

      public LineCount : int
      {
        get { File.ReadAllLines(_filePath).Length }
      }
    }
  }
}
