using System;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Completion2
{
  [Record]
	public class CompileUnit
	{
	  public TopNamespace          : Decl.Namespace         { get; private set; }
	  public TopDeclarations       : list[TopDeclaration]   { get; private set; }
	  public Regions               : list[Region]           { get; private set; }
    public ParseCompilerMessages : array[CompilerMessage] { get; private set; }
    /// First element have a fake line (this array indexed at 1).
    public LinesLengths          : array[int]             { get; private set; }
    public SourceVersion         : int                    { get; private set; }
    public FileIndex             : int                    { get; private set; }
    public LinesCount            : int                    { get { LinesLengths.Length - 1 } }

    public override ToString() : string
    {
      def file = IO.Path.GetFileName(Location.GetFileName(FileIndex));
      $"$(GetType().Name) $file"
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at fileIndex, line, and col.
    public GetActiveDecl(fileIndex : int, line : int, col : int) : Decl
    {
      TopNamespace.GetActiveDecl(fileIndex, line, col)
    }

    public GetMatchingBraces(fileIndex : int, line : int, col : int, first : out Location, last : out Location) : bool
    {
        def reg = this.Regions.FindObject(r => r.Location.Line == line || r.Location.EndLine == line);

        if (reg != null) // region...
        {
          def loc = reg.Location;

          first = Location(FileIndex, loc.Line, loc.Column, loc.Line, loc.Column + 1);

          // #endregion
          //def text = GetLine(loc.EndLine);
          //def col = text.IndexOf('#') + 1;
          
          //if (col < 1)
          //  col = loc.EndColumn;

          last = Location(FileIndex, loc.EndLine, loc.Column - 10, loc.EndLine, loc.Column);
          true
        }
        else
        {
          match (this.GetActiveDecl(fileIndex, line, col))
          {
            | Decl.Namespace as n when n.BodyLocation != Location.Default =>
              def loc = n.BodyLocation;
              
              if (loc.Line    == line &&  (loc.Column == col    || loc.Column   - 1 == col)
               || loc.EndLine == line &&  (loc.EndColumn == col || loc.EndColumn + 1 == col))
              {
                first = Location(FileIndex, loc.Line, loc.Column - 1, loc.Line, loc.Column);
                last  = Location(FileIndex, loc.EndLine, loc.EndColumn, loc.EndLine, loc.EndColumn + 1);
                true
              }
              else false

            //| Decl.Type(td) when td.BodyLocation != Location.Default => topDecl
            | _ => false
          }
        }
    }
	}
}
