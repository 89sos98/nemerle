/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Nemerle.Internal
{
  public interface Func0 : Func1
  {
    apply () : object;
  }

  public interface Func1
  {
    apply (_ : object) : object;
  }

  public interface Func2 : Func1
  {
    apply (_ : object, _ : object) : object;
  }

  public interface Func3 : Func1
  {
    apply (_ : object, _ : object, _ : object) : object;
  }

  public interface Func4 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object) : object;
  }

  public interface Func5 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object) : object;
  }

  public interface Func6 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object) : object;
  }

  public interface Func7 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object) : object;
  }

  public interface Func8 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object) : object;
  }

  public interface Func9 : Func1
  {
    apply (_ : object, _ : object, _ : object, _ : object, _ : object,
           _ : object, _ : object, _ : object) : object;
  }

  [Record]
  public class Tuple2
  {
    public field1 : object;
    public field2 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple2);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple3
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple3);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple4
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple4);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple5
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ", "
          + field5.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple5);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
        && field5.Equals (t.field5)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple6
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ", "
          + field5.ToString () + ", "
          + field6.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple6);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
        && field5.Equals (t.field5)
        && field6.Equals (t.field6)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple7
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
    public field7 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ", "
          + field5.ToString () + ", "
          + field6.ToString () + ", "
          + field7.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple7);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
        && field5.Equals (t.field5)
        && field6.Equals (t.field6)
        && field7.Equals (t.field7)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple8
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
    public field7 : object;
    public field8 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ", "
          + field5.ToString () + ", "
          + field6.ToString () + ", "
          + field7.ToString () + ", "
          + field8.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple8);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
        && field5.Equals (t.field5)
        && field6.Equals (t.field6)
        && field7.Equals (t.field7)
        && field8.Equals (t.field8)
      }
      else
        false
    }
  }

  [Record]
  public class Tuple9
  {
    public field1 : object;
    public field2 : object;
    public field3 : object;
    public field4 : object;
    public field5 : object;
    public field6 : object;
    public field7 : object;
    public field8 : object;
    public field9 : object;

    public override ToString () : string
    {
      "(" + field1.ToString () + ", "
          + field2.ToString () + ", "
          + field3.ToString () + ", "
          + field4.ToString () + ", "
          + field5.ToString () + ", "
          + field6.ToString () + ", "
          + field7.ToString () + ", "
          + field8.ToString () + ", "
          + field9.ToString () + ")"
    }

    public override Equals (o : System.Object) : bool
    {
      if (o.GetType () == GetType ()){
        def t = (o :> Tuple9);
        field1.Equals (t.field1)
        && field2.Equals (t.field2)
        && field3.Equals (t.field3)
        && field4.Equals (t.field4)
        && field5.Equals (t.field5)
        && field6.Equals (t.field6)
        && field7.Equals (t.field7)
        && field8.Equals (t.field8)
        && field9.Equals (t.field9)
      }
      else
        false
    }
  }
}
