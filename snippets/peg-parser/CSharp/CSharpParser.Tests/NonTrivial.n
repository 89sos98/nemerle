using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;

using NUnit.Framework;

using CSharpParser.TestMacros;

namespace CSharpParser.Tests {

  [
    TestFixture,
    Accepts("case 1",
    <#
// so we begin!
extern alias BlaBla;

using System;
using System.Text;

[assembly: One, Two]
[assembly: Three]

namespace Sample.Foo {

    public sealed class Bar<K,[Sample]T> : BlaBla::System.Collections.Generic.List<int>
        where T: IDisposable, new()
        where K: T, System.IComparable<K>, new()
    {
        [Obsolete] event global::System.EventHandler X, Y, Z;
        public event EventHandler X { add {} remove {} }
    };

    
    public abstract class XXX : IDisposable {
        public abstract Bar<K,T> GetBar<K,T>()
            where T: IDisposable, new()
            where K: T, System.IComparable<K>, new();

        public System.String Str { [Description1("asfsf")][Description2()] get; set; }

        public void IDisposable.Dispose() {
        }
    }
}

[type: BlaBla::MainClass]
internal static class Program {

    class F {
       public System.Int32 this[int a, [FF] string b, params int[] c] { get {} set {} }
    }

    const object X = null;
    public string S = "Su\u0070er!"; // Super!


    static void Main(string[] args) {
    }
}
//EOF
    #>)
  ]
  public class NonTrivial { }

}