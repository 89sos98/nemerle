/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

namespace Sioux.Fit
{
  using Nemerle.Collections;
  using Nemerle.Xml;

  using System.Xml;
  using System.Xml.Xsl;

  using Sioux;

  /**
   * The FIT web application
   */
  public class Fit : Application
  {        
    public static get_val (h : Hashtable <string, string>, key : string) : string
    {
      match (h.Get (key)) {
        | Some (res) => res
        | None => ""
      }
    }

    submission_form () : void
    {
      def subm = Submission ();
      FormTemplate <- Some (subm.get_form ());
    }

    submission (edit_mode : bool) : void
    {
      def subm = Submission ();
      subm.read_post (PostVars);
      
      FormTemplate <- Some (subm.get_confirm_page (admin_mode, edit_mode));
    }

    edit () : void
    {
      def res = lock (submissions) submissions.Get (get_val (GetVars, "id"));
      match (res) {
        | Some (subm) =>
          def template = subm.get_form ();
          if (admin_mode)
            template.SetText ("submission/action", secret_password + "/submission-edit")
          else
            template.SetText ("submission/action", "/submission-edit");
          FormTemplate <- Some (template)
        | None =>
          def template = XmlTemplate ("fit/error.xml");
          template.SetText ("msg", "Zgłoszenie nie istnieje.");
          FormTemplate <- Some (template)
      }
    }

    list_data () : void
    {
      FormTemplate <- Some (XmlTemplate (list_xml));
    }

    apply_fit_template (document_file_name : string) : XmlDocument
    {
      def document = XmlDocument ();
      def reader = XmlTextReader (document_file_name);
      reader.XmlResolver <- null;
      document.Load (reader); 
      def reader = fit_xsl.Transform (document, null, (null : XmlResolver));
      def document = XmlDocument ();
      document.XmlResolver <- null;
      document.Load (reader);
      document
    }

    register () : void
    {    
      FormTemplate <- Some (XmlTemplate (apply_fit_template ("fit/register.xml")));
    }

    index () : void
    {    
      FormTemplate <- Some (XmlTemplate (apply_fit_template ("fit/index.xml")));
    }

    remind () : void
    {
      def email = get_val (PostVars, "email");
      def maybe_add (id, subm : Submission, acc) {
        if (subm.val ("email") == email)
          sprintf ("%s\n%s %s: http://lilith.ii.uni.wroc.pl:8000/edit?id=%s",
                  acc, subm.val ("first_name"), subm.val ("last_name"), id)
        else acc
      };
      def str = submissions.Fold (maybe_add, "");
      if (str == "") {
        def template = XmlTemplate ("fit/error.xml");
        template.SetText ("msg", sprintf ("Brak adresu '%s' w bazie.", email));
        FormTemplate <- Some (template)
      } else {
        def m = System.Web.Mail.MailMessage ();
        m.BodyEncoding <- System.Text.Encoding.UTF8;
        m.Subject <- "Przypomnienie linku edycji zgłoszenia na FIT";
        m.To <- email;
        m.From <- "FIT XVIII <fit18@ii.uni.wroc.pl>";
        m.Body <- str + "\n\n";
        
        // System.Web.Mail.SmtpMail.Send (m);

        def template = XmlTemplate ("fit/message.xml");
        template.SetText ("msg", "Przypomnienie wysłano.");
        FormTemplate <- Some (template)
      }
    }

    kill_submission () : void
    {
      if (get_val (PostVars, "kill_it") == "") {
        def template = XmlTemplate ("fit/error.xml");
        template.SetText ("msg", "Aby usunąć zgłoszenie zaznacz checkbox.");
        FormTemplate <- Some (template)
      } else {
        submissions.Remove (get_val (PostVars, "id2"));
        serialize ();
        def template = XmlTemplate ("fit/message.xml");
        template.SetText ("msg", "Zgłoszenie usunięto.");
        FormTemplate <- Some (template)
      }
    }

    static cycle_backup () : void
    {
      for (mutable i <- 49; i >= 0; i <- i - 1) {
        try {
          System.IO.File.Delete (sprintf ("fit/data/data.xml.%d", i + 1))
        } catch { _ : System.Exception => () };
        try {
          System.IO.File.Move (sprintf ("fit/data/data.xml.%d", i),
                              sprintf ("fit/data/data.xml.%d", i + 1))
        } catch { _ : System.Exception => () };
      };
      try {
        System.IO.File.Move ("fit/data/data.xml", "fit/data/data.xml.0");
      } catch { _ : System.Exception => () };
    }

    static serialize () : void
    {
      def doc = XmlDocument ();
      def n = doc.CreateElement ("submissions");
      ignore (doc.AppendChild (n));
      def add (_, subm : Submission) {
        ignore (n.AppendChild (subm.serialize (doc)))
      };
      lock (submissions) {
        cycle_backup ();
        submissions.Iter (add);
        doc.Save ("fit/data/data.xml");

        n.SetAttribute ("secret", secret_password);
        def reader = list_xsl.Transform (n, null, (null : XmlResolver));
        def doc' = XmlDocument ();
        doc'.XmlResolver <- null;
        doc'.Load (reader);
        list_xml <- doc';
      }
    }

    static unserialize () : void
    {
      def doc = XmlDocument ();
      doc.Load ("fit/data/data.xml");
      def add (n : XmlNode) {
        when (n != null) {
          when (n.NodeType == XmlNodeType.Element) {
            def subm = Submission ();
            subm.unserialize (n);
            subm.store ();
          };
          add (n.NextSibling)
        }
      };
      add (doc.DocumentElement.FirstChild);
    }

    mutable admin_mode : bool;
    
    override protected virtual Run () : void
    {
      when (PageName.StartsWith (secret_password)) {
        admin_mode <- true;
        PageName <- PageName.Substring (secret_password.Length)
      };

      match (PageName) {
        | "/submission.xml" => submission (false); serialize ()
        | "/submission-edit.xml" => submission (true); serialize ()
        | "/edit.xml" => edit ()
        | "/submission-form.xml" => submission_form ()
        | "/list.xml" when admin_mode => list_data ()
        | "/remind.xml" => remind ()
        | "/kill_submission.xml" => kill_submission ()
        | "/register.xml" => register ()
        | _ => index ()
      }
    }

    static this ()
    {
      fit_xsl <- XslTransform ();
      fit_xsl.Load ("fit/fit.xsl", null);
      
      list_xsl <- XslTransform ();
      list_xsl.Load ("fit/display-table.xsl", null);

      def f = System.IO.File.OpenText ("fit/password");
      secret_password <- f.ReadLine ();
      f.Close ();
      
      submissions <- Hashtable (1000);
      try {
        unserialize ()
      } catch {
        | _ : System.IO.FileNotFoundException => ()
      };
      
      serialize ();
    }


    /* -- INTERNAL FIELDS -------------------------------------------------- */
    
    internal static submissions : Hashtable <string, Submission>;
    internal static secret_password : string;


    /* -- PRIVATE FIELDS --------------------------------------------------- */

    private static mutable fit_xsl : XslTransform;
    private static mutable list_xsl : XslTransform;
    private static mutable list_xml : XmlDocument;
  }
}
