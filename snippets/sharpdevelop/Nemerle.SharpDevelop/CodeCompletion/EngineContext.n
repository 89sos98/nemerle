using System;
using System.IO;
using System.Windows.Forms;
using SCG = System.Collections.Generic;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public sealed class EngineContext : IIdeProject, IDisposable {

        internal this([NotNull] project : IProject) {
            this.project = project;
            this.engine = EngineFactory.Create(this, TraceWriter(), false);

            ProjectService.ProjectItemAdded += OnProjectItemAdded;
            ProjectService.ProjectItemRemoved += OnProjectItemRemoved;
            Application.Idle += OnApplicationIdle;
            match(project) {
                | project is AbstractProject =>
                    project.ActiveConfigurationChanged += OnActiveConfigurationChanged;
                | _ => ();
            }

            Reload();
        }

        [Accessor] engine : IEngine;

        [Accessor] sync_root : object = object();

        [Accessor] project : IProject;

        source_map : SCG.Dictionary[int, Source] = SCG.Dictionary();

        private FindSource(item : FileProjectItem) : bool * Source {
            foreach(source in source_map.Values) {
                when(ReferenceEquals(source.Item, item))
                    Nemerle.Imperative.Return( (true, source) )
            }
            (false, null)
        }

        private AddSourceNoCheck(item : FileProjectItem) : ISource {
            def source = Source(this, item);
            source_map.Add(source.FileIndex, source);
            source
        }

        private AddSource(item : FileProjectItem) : ISource {
            match(FindSource(item)) {
                | (true, source) => source
                | (false, _) =>
                    def source = AddSourceNoCheck(item);
                    engine.RequestOnBuildTypesTree();
                    source
            }
        }

        private RemoveSource(item : FileProjectItem) : bool {
            match(FindSource(item)) {
                | (true, source) =>
                    _ = source_map.Remove(source.FileIndex);
                    engine.RequestOnBuildTypesTree();
                    true

                | (false, _) =>
                    false
            }
        }

        private Clear() : void {
            foreach(source in source_map.Values) {
                source.Dispose();
            }
            source_map.Clear();
        }

        mutable reload_project_async : AsyncRequest = null;

        public Reload() : void  {
            lock(sync_root) {
                when(null == reload_project_async || reload_project_async.IsCompleted) {
                    Clear();
                    foreach(item is FileProjectItem in project.GetItemsOfType(ItemType.Compile)) {
                        _ = AddSourceNoCheck(item)
                    }
                    reload_project_async = engine.BeginReloadProject();
                }
            }
        }

        #region IIdeProject

        public GetAssemblyReferences() : SCG.IEnumerable[string] {
            foreach(item is ReferenceProjectItem in project.GetItemsOfType(ItemType.Reference)) {
                yield item.AssemblyName.FullName
            }
            foreach(item is ProjectReferenceProjectItem in project.GetItemsOfType(ItemType.ProjectReference)) {
                def project = item.ReferencedProject;
                unless(null == project) {
                    def output_assembly = project.OutputAssemblyFullPath;
                    when(null != output_assembly && File.Exists(output_assembly))
                        yield output_assembly;
                }
            }
        }

        public GetMacroAssemblyReferences() : SCG.IEnumerable[string] {
            foreach(item is MacroReferenceProjectItem in project.GetItemsOfType(ItemTypeExt.MacroReference)) {
                yield item.AssemblyName.FullName
            }
            foreach(item is MacroProjectReferenceProjectItem in project.GetItemsOfType(ItemTypeExt.MacroProjectReference)) {
                def project = item.ReferencedProject;
                unless(null == project) {
                    def output_assembly = project.OutputAssemblyFullPath;
                    when(null != output_assembly && File.Exists(output_assembly))
                        yield output_assembly;
                }
            }
        }

        public GetOptions() : CompilationOptions {
            def opt = CompilationOptions();

            opt.GreedyReferences = false;
            opt.ColorMessages    = false;
            opt.IgnoreConfusion  = true;

            match(project) {
                | project is MSBuildBasedProject =>
                    def read(name, f) {
                        def value = project.GetProperty("", "", name);
                        unless(string.IsNullOrEmpty(value))
                            f(value);
                    }
                    def as_strings(value) {
                        NString.Split(value, ';', ' ').Filter(s => !string.IsNullOrEmpty(s))
                    }
                    def as_ints(value) {
                        as_strings(value).FoldRight([], fun(s, acc) {
                            mutable i;
                            if(int.TryParse(s, out i)) i :: acc else acc
                        })
                    }
                    def as_flag(value, f) {
                        mutable flag;
                        when(bool.TryParse(value, out flag))
                            f(flag);
                    }

                    read("DefineConstants",
                        v => as_strings(v).Iter(opt.DefineConstant));

                    read("RootNamespace",
                        v => opt.RootNamespace = v);

                    read("PlatformTarget",
                        v => opt.Platform = v);

                    read("NoStdLib",
                        v => as_flag(v, f => opt.DoNotLoadStdlib = f));

                    read("NoStdMacros",
                        v => as_flag(v, f => opt.DoNotLoadMacros = f));

                    read("TreatWarningsAsErrors",
                        v => as_flag(v, f => opt.Warnings.TreatWarningsAsErrors = f));

                    read("DisabledWarnings",
                        v => as_ints(v).Iter(opt.Warnings.Disable));

                    read("EnabledWarnings",
                        v => as_ints(v).Iter(opt.Warnings.Enable));

                    read("IndentationSyntax",
                        v => as_flag(v, f => opt.IndentationSyntax = f));

                | _ => ();
            }

            opt
        }

        public GetSource(fileIndex : int) : ISource {
            lock(sync_root) {
                mutable source;
                if(source_map.TryGetValue(fileIndex, out source))
                    source
                else
                    null
            }
        }

        public GetSource(fileName : string) : Source {
            lock(sync_root) {
                mutable source;
                if(source_map.TryGetValue(Location.GetFileIndex(fileName), out source))
                    source
                else
                    null
            }
        }

        public GetSources() : SCG.IEnumerable[ISource] {
            lock(sync_root) {
                def sources = array(source_map.Count);
                source_map.Values.CopyTo(sources, 0);
                sources
            }
        }

        public ClearAllCompilerMessages() : void {
        }

        public SetCompilerMessageForCompileUnit(_compileUnit : CompileUnit) : void {
        }

        public SetMethodCompilerMessages(_member : MemberBuilder, _messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public SetStatusText(text : string) : void {
            StatusBarService.SetMessage(text);
        }

        public SetTopLevelCompilerMessages(_messages : SCG.IEnumerable[CompilerMessage]) : void {
        }

        public ShowMessage(message : string, messageType : MessageType) : void {
            match(messageType) {
                | Error     => MessageService.ShowError(message)
                | Warning   => MessageService.ShowWarning(message)
                | Hint | Info | _  => MessageService.ShowMessage(message)
            }
        }

        public LookupLocationsFromDebugInformation(_info : GotoInfo) : array[GotoInfo] {
            array(0)
        }

        public SetHighlights(_source : ISource, _highlights : SCG.IEnumerable[GotoInfo]) : void {
        }

        public AddUnimplementedMembers(_source : ISource, _ty : TypeBuilder, _unimplementedMembers : SCG.IEnumerable[IMember]) : void {
        }

        public AddOverrideMembers(_source : ISource, _ty : TypeBuilder, _notOverriden : SCG.IEnumerable[IMember]) : void {
        }

        public TypesTreeCreated() : void {
        }

        #endregion


        #region File load/unload handlers

        internal NotifyFileOpened(fileName : string, document : IDocument) : void {
            lock(sync_root) {
                foreach(source in source_map.Values) {
                    when(source.Item.FileName == fileName)
                        source.Document = document;
                }
            }
        }

        internal NotifyFileClosed(document : IDocument) : void {
            lock(sync_root) {
                foreach(source in source_map.Values) {
                    when(ReferenceEquals(source.Document, document))
                        source.Document = null;
                }
            }
        }

        #endregion


        #region Event handlers

        private OnActiveConfigurationChanged(_ : object, _ : EventArgs) : void {
            Reload();
        }

        private OnProjectItemAdded(_ : object, e : ProjectItemEventArgs) : void {
            when(ReferenceEquals(e.ProjectItem.Project, project)) {
                if(ItemType.Compile == e.ProjectItem.ItemType)
                    match(e.ProjectItem) {
                        | item is FileProjectItem =>
                            lock(sync_root) {
                                _ = AddSource(item);
                            }
                        | _ => ();
                    }
                else
                    ReloadEngineOnReferenceChange(e.ProjectItem);
            }
        }

        private OnProjectItemRemoved(_ : object, e : ProjectItemEventArgs) : void {
            when(ReferenceEquals(e.ProjectItem.Project, project)) {
                if(ItemType.Compile == e.ProjectItem.ItemType)
                    match(e.ProjectItem) {
                        | item is FileProjectItem =>
                            lock(sync_root) {
                                _ = RemoveSource(item);
                            }
                        | _ => ();
                    }
                else
                    ReloadEngineOnReferenceChange(e.ProjectItem);
            }
        }

        private ReloadEngineOnReferenceChange(item : ProjectItem) : void {
            when(ItemType.Reference == item.ItemType
                || ItemType.ProjectReference == item.ItemType
                || ItemTypeExt.MacroReference == item.ItemType
                || ItemTypeExt.MacroProjectReference == item.ItemType) {
                _ = engine.BeginReloadProject();
            }
        }

        private OnApplicationIdle(_ : object, _ : EventArgs) : void {
            engine.OnIdle();
        }

        #endregion


        #region Disposable

        [Accessor] mutable disposed : bool = false;

        public Dispose() : void {
            lock(sync_root) {
                unless(disposed) {
                    try {
                        unless(null == engine)
                            engine.Close();
                    } finally {
                        Clear();

                        ProjectService.ProjectItemAdded -= OnProjectItemAdded;
                        ProjectService.ProjectItemRemoved -= OnProjectItemRemoved;
                        Application.Idle -= OnApplicationIdle;
                        match(project) {
                            | project is AbstractProject =>
                                project.ActiveConfigurationChanged -= OnActiveConfigurationChanged;
                            | _ => ();
                        }

                        disposed = true;
                        GC.SuppressFinalize(this);
                    }
                }
            }
        }

        protected override Finalize() : void {
            Dispose();
        }

        #endregion

    }


}