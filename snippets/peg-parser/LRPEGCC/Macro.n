using System;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

namespace LRPEGCC
{
  [Record]
  public class Capture
  {
    public Name : string;
    public StartPos : int;
    public mutable EndPos : int;
  }

  macro Gramar (_rules : Token)
  syntax ("grammar", _rules)
  {
    //GrammarImpl.MakeParser(tb, startRule, rules);
    <[ () ]>
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, startRule, rules)
  {
    GrammarImpl.MakeParser(Macros.ImplicitCTX(), tb, startRule, rules);
  }

  internal module GrammarImpl
  {
    public MakeParser(_typer : Typer, tb : TypeBuilder, startRule : PExpr, rules : PExpr) : void
    {
      def compiler = RuleCompiler();
      compiler.GetCharName = "GetChar";
      compiler.CheckTextLengthName = "CheckTextLength";

      def grammar1 = Parsing.ParseRules(startRule.ToString(), rules);
      def grammar = Optimizer.OptimizeGrammar(grammar1);

      mutable str = "";
      
      foreach (name in grammar.Names)
      {
        def rule = grammar.GetRule(name);
        def body = compiler.CompileRule(rule, grammar);
        def method = <[decl:
          private $(compiler.DecorateRuleName(name) : dyn)(pos : int) : int
          {
            $(body);
          }
        ]>;
        tb.Define(method);
        str = str + method.ToString() + "\n" + body.ToString() + "\n\n";
      }
      tb.Define(<[decl:
          private $(compiler.CacheName : dyn) : System.Collections.Generic.Dictionary[int, int] = System.Collections.Generic.Dictionary();
      ]>);
      tb.Define(<[decl:
          private $(compiler.CapturesName : dyn) : System.Collections.Generic.List[LRPEGCC.Capture] = System.Collections.Generic.List();
      ]>);
      tb.Define(<[decl:
          public Captures : System.Collections.Generic.List[LRPEGCC.Capture] { get { $(compiler.CapturesName : dyn) } }
      ]>);
      tb.Define(<[decl:
        public Start() : int
        {
          $(compiler.DecorateRuleName(grammar.StartRuleName) : dyn)(0);
        }
      ]>);
      tb.Define(<[decl:
        public override ToString() : string
        {
          $(str : string);
        }
      ]>);
    }
  }
}
