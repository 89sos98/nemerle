using System;
using SCG = System.Collections.Generic;

using ICSharpCode.SharpDevelop.Gui;
using ICSharpCode.TextEditor;
using ICSharpCode.TextEditor.Document;

using Nemerle.Assertions;
using Nemerle.Completion2;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop.CodeCompletion {

    public sealed class DocumentNemerleSource : ISource {

        public this([NotNull] source : Source, [NotNull] document : IDocument) {
            this.source = source;
            this.document = document;
            this.document.DocumentChanged += OnDocumentChanged;
        }

        source : Source;

        [Accessor] document : IDocument;

        [Accessor] relocation_requests_queue : SCG.List[RelocationRequest] = SCG.List();

        [Accessor] mutable current_version : int = 0;

        public CompileUnit : CompileUnit {
            get;
            set;
        }

        public FileIndex : int {
            get { source.FileIndex }
        }

        public LineCount : int {
            get {
                WorkbenchSingleton.SafeThreadFunction(fun() {
                    document.TotalNumberOfLines
                })
            }
        }

        public LockWrite() : void { }

        public UnlockWrite() : void { }

        public LockReadWrite() : void { }

        public UnlocReadkWrite() : void { }

        public GetTextCurrentVersionAndFileIndex() : string * int * int {
            LockWrite();
            try {
                (GetText(), CurrentVersion, FileIndex)
            } finally {
                UnlockWrite();
            }
        }

        public SetRegions(_regions : SCG.IList[RegionInfo], _sourceVersion : int) : void { }

        public SetTopDeclarations(_topDeclarations : array[TopDeclaration]) : void { }

        public GetText() : string {
            WorkbenchSingleton.SafeThreadFunction(fun() {
                document.TextContent
            })
        }

        public GetRegion(lineStart : int, colStart : int, lineEnd : int, colEnd : int) : string {
            WorkbenchSingleton.SafeThreadFunction(fun() {
                def start = document.PositionToOffset(TextLocation(colStart - 1, lineStart - 1));
                def end   = document.PositionToOffset(TextLocation(colEnd - 1,   lineEnd - 1));
                document.GetText(start, end - start)
            })
        }

        public GetRegion(location : Location) : string {
            GetRegion(location.Line, location.Column, location.EndLine, location.EndColumn)
        }

        public GetLine(line : int) : string {
            WorkbenchSingleton.SafeThreadFunction(fun() {
                def segment = document.GetLineSegment(line);
                document.GetText(segment)
            })
        }

        public GetPositionOfLineIndex(line : int, col : int) : int {
            WorkbenchSingleton.SafeThreadFunction(fun() {
                document.PositionToOffset(TextLocation(col - 1, line - 1))
            })
        }

        public GetLineIndexOfPosition(pos : int) : int * int {
            WorkbenchSingleton.SafeThreadFunction(fun() {
                def loc = document.OffsetToPosition(pos);
                (loc.Line + 1, loc.Column + 1)
            })
        }

        private OnDocumentChanged(_ : object, _ : DocumentEventArgs) : void {
            current_version += 1;
            source.UpdateCompileUnit();
        }

    }

}