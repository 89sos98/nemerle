using System;
using System.Collections.Generic;
using System.Text;

using System.Diagnostics;
using System.Runtime.CompilerServices;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;
using Nemerle.Logging;
using Nemerle.Imperative;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public partial class Project
  {
    public GetDefinition([NotNull] filePath : string, line : int, col : int) : array [GotoInfo]
    {
      def fileIndex = _compileUnits.GetFileIndex(filePath);
      def declaration = GetActiveDecl(fileIndex, line, col);

      match (declaration)
      {
      | Using as us => this.Engine.GetUsingGoto(us, fileIndex, line, col).ToArray();
      | Type  as tp => GetDefinitionInsideType(tp, fileIndex, line, col).ToArray();
      | _           => null
      }
    }

    public CanInlineExpressionAt(info : GotoInfo) : bool
    {
      def (_, typedObj) = InlineCore(info);
      match(typedObj)
      {
        | lv is LocalValue when lv.ValKind is LocalValue.Kind.Plain => true
        | _ => false
      }
    }
    
    public GetReplacementStringForInline(info : GotoInfo) : Location * Location * bool
    {
      def (parsedObj, _) = InlineCore(info);
      
      def isComplexExpr(expr)
      {
      // KLiss: how to indicate that there's a list of parameters and
      // still ignore them?
      | <[ $func (.. $_parms) ]> =>
          match (func) 
          {
          | <[ $(x : name) ]> when LexerBase.IsOperator (x.Id) => true
          | _ => false
          }
      | _ => false      
      }
      
      match(parsedObj)
      {
        | PExpr.Define(_, PExpr.TypeEnforcement(init, _)) as pexpr
        | PExpr.Define(_, init) as pexpr => (pexpr.Location, init.Location, isComplexExpr(init))
        | _ => (Location.Default, Location.Default, false)
      }
    }
    
    /// returns PExpr * TypedObject
    private InlineCore(info : GotoInfo) : object * object
    {
      def loc = info.Location;
      def declaration = GetActiveDecl(info.FileIndex, loc.Line, loc.Column);
      
      match (declaration)
      {
        | Type  as tp => 
             def (_, pObj, tObj) = FindObject(tp, info.FileIndex, loc.Line, loc.Column);
             (pObj, tObj)
        | _           => (null, null)
      }
    }

    public GetUsages([NotNull] filePath : string, line : int, col : int) : array [GotoInfo]
    {
      def fileIndex = _compileUnits.GetFileIndex(filePath);
      def decl      = GetActiveDecl(fileIndex, line, col);

      match (decl)
      {
      | Type as ty => FindUsages(ty, fileIndex, line, col).ToArray();
      | _          => null
      }
    }
        
    public GetInheritors([NotNull]filePath : string, line : int, col : int) : array [GotoInfo]
    {
      def fileIndex = _compileUnits.GetFileIndex(filePath);
      GetInheritors(fileIndex, line, col);
    }
    
    public GetInheritors(fileIndex : int, line : int, col : int) : array [GotoInfo]
    {
      def getTokenAtCursor()
      {
        def src = this.Engine.Sources[fileIndex];
        def lexer = LexerString(this.Engine, src, Location(fileIndex, 1, 1));
        lexer.Keywords = this.Engine.CoreEnv.Keywords;

        def tokenFinder = TokenStreamHandler(lexer.ReadAllTokens());
        tokenFinder.FindAt(line, col);
      }

      def (activeEnv, activeBuilder, _, _) = this.Engine.Project.GetActiveEnv(fileIndex, line);
      def tok = getTokenAtCursor();
      match(tok)
      {
      | Token.Identifier(name) => 
              match (activeEnv.LookupType([name], activeBuilder, -1))
              {
              | Some(ti) => FindInheritors(ti);
              | None => array[];
              }
      | _ => array[]
      }
    }
    

    public HighlightUsages([NotNull] lexer : ScanLexer, 
                             [NotNull] filePath : string, 
                             line : int, 
                             col : int,
                             isPermanent : bool) : void
    {
      HighlightUsages(lexer, 
              _compileUnits.GetFileIndex(filePath),
              line, 
              col, 
              isPermanent);
    }

    public FindAllPExpr(loc : Location) : list[PExpr]
    {
      unless (CompileUnits.IsFileInProject(loc))
        return [];
        
      def decl = GetActiveDecl(loc.FileIndex, loc.Line, loc.Column);
      
      match (decl)
      {
        | Type as ty => FindPExprs(ty, loc)
        | _ => []
      }
    }

    public HighlightUsages([NotNull] lexer : ScanLexer, 
                           [NotNull] fileIndex : int, 
                           line : int, 
                           col : int,
                           isPermanent : bool) : void
    {
      def decl      = GetActiveDecl(fileIndex, line, col);
      
      match (decl)
      {
      | Type as ty =>
        def highlights = FindUsages(ty, fileIndex, line, col, true)
          // Bugbug: There is a problem with partial types and ExprWalker.
          .Filter(goto => goto.Location.FileIndex == fileIndex)
          .Map(goto =>
            {
              match(goto.UsageType)
              {
                | UsageType.Usage => (goto.Location, 0)
                | _ => (goto.Location, 1)
              }
            });
        if(isPermanent)
          lexer.AddHighlighting(highlights);
        else
          lexer.SetHoverHighlights(highlights);
      | _          => ()
      }
    }

    public RemoveLastHighlighting([NotNull] lexer : ScanLexer) : void
    {
      lexer.RemoveLastHighlighting();
    }

    private GetDefinitionInsideType(typeDecl : Decl.Type, fileIndex : int, line : int, column : int) : list [GotoInfo]
    {
      def (_, _, tObj) = FindObject(typeDecl, fileIndex, line, column);

      def getTypeGotoInfo(tv : TyVar) 
      {
      | mType is MType =>
        match (mType)
        {
        | MType.Class(ty is TypeBuilder, _) => ty.AstParts.Map(p => GotoInfo(p.name.Location));
        | MType.Class(ty, _)                => [GotoInfo(ty)]
        | _                                 => []
        }
      | _                                   => []
      }

      match (tObj)
      {
        | me is TExpr.MacroEnvelope         => [GotoInfo(me)]
        | lv is LocalValue                  => [GotoInfo(lv)]
        | tc is TExpr.ImplicitValueTypeCtor => getTypeGotoInfo(tc.ty)
        | tv is TyVar                       => getTypeGotoInfo(tv)
        | mb is MethodBuilder               =>
          if (mb.Name == ".ctor" && mb.Ast.name.Location.IsGenerated)
            mb.DeclaringType.AstParts.Map(GotoInfo);
          else
            [GotoInfo(mb)]

        // This code should be used instead of the code above.
        // | mb is MethodBuilder when mb.Name == ".ctor" && mb.Ast.name.Location.IsGenerated with tb = mb.DeclaringType
        | tb is TypeBuilder                 => tb.AstParts.Map(GotoInfo);
        | fh is Typedtree.Fun_header        => [GotoInfo(fh)]
        | fp is Typedtree.Fun_parm          => [GotoInfo(fp)]
        | m  is IMember                     => [GotoInfo(m)]
        | p  is Pattern.Enum                => [GotoInfo(p.fld)]
        | _                                 => []
      }
    }

    // TODO: implement get usages behaviour, this is a stub yet
    // Примерное описание алгоритма поиска члена класса:
    // 1. Находим все ссылки на данный член в дереве типов.
    //    Это можно сделать просканировав TypeBuilder-ы.
    //    Получить все TypeBuilder-ы проекта можно с помощью
    //    метода NamespaceTree.GetTypeBuilders().

    // 1. Find all entry in type tree. It will be done by scan TypeBuilders.
    //    Get all TypeBuilders you may by NamespaceTree.GetTypeBuilders().

    // 2. Далее сканируем файлы пытаясь найти возможные вхождения имени 
    //    искомого члена (тупо ищем подстроки в исходниках).
    //    То как это делать я изобразил в findPossibleUsages().
    //    Этот шаг должен сформировать список локешонов сгрупироанный
    //    по индексам файлов (для этого тупо получаем плоский список и
    //    потом рассовываем локешоны по группам с исползованием хэш-таблицы).

    // 2. Scan files for find possible usages (simple text entries).
    //    It stem must make locations lists grouped by file index.

    // 3. Сканируем методы в файлах индексы которых получены на предыдущем шеге,
    //    и ищем те методы которые пересекаются с найденными локешонами.
    //    Если есть локешноы в этом методе, то ищем вхождения в этом методе.
    //    Код поиска вхождения должен совпадать с кодом поиска локальной 
    //    переменной. Так что имеет смысл попробовать унифицировать эти методы.

    // 3. Scan methods in files which contains entries (files from file 
    //    indecis list which you make in step 2).
    //    (It may be done by GetAllMetodsDefinedInFile(fileIndex : int) : SCG.List[MethodBuilder])
    //    If locations from step 2 intersect with method try find entries
    //    in it method.
    private FindUsages(inType : Decl.Type, fileIndex : int, line : int, column : int, onlyThisFile : bool = false) : list [GotoInfo]
    {
      //def (_, _, declarationObject) = FindObjectEverywhere(inType, fileIndex, line, column);
      def (_, _, declarationObject) = FindObject(inType, fileIndex, line, column);
      def xxx = declarationObject;
      _ = xxx;

      // TODO: for rename refactoring, we should know all usages, including generated
      // however, this implementation neglects generated usages
      def findPossibleUsages(name, onlyThisFile)
      {
        mutable entries = [];
        def sources = Engine.ProjectSources;
        def filesToSearchThrough =
          if (onlyThisFile)
            array[fileIndex]
          else
            Engine.Sources.GetFileIndices();
        foreach (fileIndex in filesToSearchThrough)
        {
          def source = sources.GetSource(fileIndex);
          def code = source.GetText();
          def findEntry(startPos)
          {
            def position = code.OrdinalIndexOf(name, startPos);
            unless (position < 0)
            {
              def (line, column) = source.GetLineIndexOfPosition(position);
              def location = Location(fileIndex, line, column, line, column + name.Length);
              entries ::= location;
              findEntry(position + name.Length);
            }
          }
          findEntry(0);
        }
        entries.Reverse()
      }

      def debug(method)
      {
          ignore(method);
          #if phantom
          Debug.WriteLine("parsed tree:");
          when (method.BodyLocation.FileIndex > 0)
            Debug.WriteLine(PrettyPrint.SprintExpr(None(), method.BodyParsed));
          Debug.WriteLine("typed tree:");
          Debug.WriteLine(PrettyPrint.SprintTyExpr(method.BodyTyped));
          #endif
      }
      
      def findLocalValueReferences(localValue)
      {
        def member = inType.Builder.GetMemberByLocation(fileIndex, line, column);
        match (member)
        {
          | method is MethodBuilder when method.IsBodyCompilable =>
            debug(method);
            Analyser().FindLocalValueEntries(method.BodyTyped, localValue);
          | _ => []
        }
      }

      // TODO: remove code duplication
      def findFunctionParameterReferences(functionParameter)
      { // TODO: 1. Добавить поиск по Related-методу. 2. Переписать все это дело 
        match (functionParameter.decl.DefinedIn.body)
        {
          | FunBody.Typed(tExpr) =>
            Analyser().FindFunctionParameterEntries(tExpr, functionParameter);
          | _ => []
        }
      }
      
      def makeUsage(location : Location, declarationLocation : Location)
      {
        if (location == declarationLocation)
          GotoInfo(location, UsageType.Definition)
        else
          GotoInfo(location, UsageType.Usage)
      }
      
      def usageIsReal(locToCheck : Location, usage : GotoInfo)
      {
        if (usage.UsageType == UsageType.Definition)
          true
        else
        {
          //Debug.WriteLine($"checking usage $usage for consistency");
          //Debug.WriteLine($"Loc to check: $locToCheck");
          // phantom: strange, why it doesn't catch exception on christianity.n, any interface member?
          try
          {
            def decl = GetActiveDecl(usage.FileIndex, usage.Line, usage.Column);

            match (decl)
            {
              | @type is Decl.Type =>
                match (@type.Builder.GetMemberByLocation(usage.FileIndex, usage.Line, usage.Column))
                {
                  | method is MethodBuilder when method.IsBodyCompilable =>
                    debug(method);
                    def findInMethod(method, recursion = 0)
                    {
                      def (_, _, usageTypedExpression) =
                        ExprFinder().FindExact(method.BodyParsed, method.BodyTyped, usage.Location);
                        
                      //Debug.WriteLine($"Expression Finder found such an expression of a usage: $usageTypedExpression");
                      def checkTypedExpr(usageTypedExpression : object)
                      {
                        | locd is Located with foundLoc = locd.Location
                        | member is IMember with foundLoc = member.Location => 
                            locToCheck == foundLoc
                        | _ => //Debug.WriteLine("Not known IMember type! Perhaps, should be added to isReal function"); 
                               false
                      }
                      
                      if (usageTypedExpression == null)
                        match (method.Related)
                        {
                          | RefTo.Method(relatedMethod) => 
                            if (recursion > 20)
                            {
                              //Debug.WriteLine("Recursive Related methods."); 
                              false
                            }
                            else findInMethod(relatedMethod, recursion + 1)
                          | _ => false
                        }
                      else checkTypedExpr(usageTypedExpression)
                    }
                    
                    findInMethod(method)
                  | _ => false
                }
              | _ =>  false
            }
          }
          catch
          {
            | _ => false  // somewhere tree is not consistent
          }
        }
      }

      match (declarationObject)
      {
        | fh is Typedtree.Fun_header with localValue = fh.decl 
        | localValue is LocalValue => findLocalValueReferences(localValue)
        | functionParameter is Nemerle.Compiler.Typedtree.Fun_parm =>
          GotoInfo(functionParameter.NameLocation) :: findFunctionParameterReferences(functionParameter)
        
        | MType.Class(typeinfo, _) with info = typeinfo
        | typeBuilder is TypeBuilder with info = typeBuilder
        | memBuilder is MemberBuilder when memBuilder.Name == ".ctor" with info = memBuilder.DeclaringType =>
          def decls = findPossibleUsages(info.Name, onlyThisFile).Map(usage => GetActiveDecl(usage.FileIndex, usage.Line, usage.Column));
          Analyser().FindTypeUsages(decls, info);
  
        | mb is MemberBuilder with (name = mb.Name, loc = mb.Ast.name.Location)
        | m is IMember        with (name = m.Name,  loc = m.Location) =>
          def possibleUsages1 = findPossibleUsages(name, onlyThisFile);
          def possibleUsages2 = possibleUsages1.Map(makeUsage(_, loc));
          def possibleUsages3 = possibleUsages2.Filter(usageIsReal(Utils.GetLocation(declarationObject), _));
          possibleUsages3

        | _ => [] //TODO: May be it wrong!
      }
    }
  
    private GetChainOfEnclosingLocations(fileIndex : int, line : int, column : int) : list[Location]
    {
      def source = Engine.ProjectSources.GetSource(fileIndex);
      def (lastLine, lastColumn) = source.GetLineIndexOfPosition(source.GetText().Length);
      def wholeFile = Location(fileIndex, 1, 1, lastLine, lastColumn);
      
      def lineLocation =
        if (line < wholeFile.EndLine)
          Location(fileIndex, line, 1, line + 1, 1);
        else
          Location(fileIndex, wholeFile.EndLine, 1, wholeFile.EndLine, wholeFile.EndColumn);
      def withLineLocation(chain, accumulator = [], added = false)
      {
        match (chain)
        {
          | head :: tail =>
            if (head.Contains(lineLocation))
              withLineLocation(tail, head :: accumulator, false)
            else
              withLineLocation(tail, head :: lineLocation :: accumulator, true)
          | [] =>
            if (added)
              accumulator.Reverse()
            else
              withLineLocation([], lineLocation :: accumulator, true);
        }
      }

      def chainInside(topDeclaration : Decl)
      {
        | GlobalAttribute => System.Diagnostics.Debug.Assert(false, "Got GlobalAttribute in a match, implement!"); []
        | Using as Using => chainInsideUsing(Using)
        | Namespace => [] // could be only the top implied namespace in a file
        | Type(builder) => chainInsideType(builder)
        | _ => []
      }
      and chainInsideUsing(Using)
      {
        match (Using.NameLocations.Find(_.Contains(line, column)))
        {
          | Some(location) => [location]  // TODO: token instead of this (or in addition) // TODO: not choose a dot
          | None => []
        }
      }
      and chainInsideType(typeBuilder)
      {
        def member = typeBuilder.GetMemberByLocation(fileIndex, line, column);
        member.Location :: chainInsideMember(typeBuilder.GetMemberByLocation(fileIndex, line, column));
      }
      and chainInsideMember(member : IMember)
      {
        | method is MethodBuilder when method.IsBodyCompilable =>
          if (method.BodyLocation.Contains(line, column))
            Analyser().GetChainOfEnclosingLocations(method.BodyTokens, line, column)
          else
          {
            //Debug.WriteLine($"line: $line, column: $column, method: $(method.Location), body: $(method.BodyLocation)");
            []
          }
        | null => []
        | _ => Debug.Assert(false, $"// TODO: implement chainInsideMember for IMember type $(member.GetType())"); []
      }

      def topDeclaration = GetActiveDecl(fileIndex, line, column);
      def topLocation = topDeclaration.Location;
      // HACK: because of hack in Engine.ParseEvents.EndParseFile()
      def topLocation = if (topLocation.EndLine == Engine.VeryBigNumber) wholeFile else topLocation;
      log(phantom, $"top declaration: $topDeclaration");
      def namespaces = GetActiveNamespaces(fileIndex, line, column);
      withLineLocation(wholeFile :: namespaces.Map(_.Location) + (topLocation :: chainInside(topDeclaration)))
    }
    
    public GetEnclosingLocationsChain(location : Location) : list[Location]
    {
      def leftChain = GetChainOfEnclosingLocations(location.FileIndex, location.Line, location.Column);
      def rightChain = GetChainOfEnclosingLocations(location.FileIndex, location.EndLine, location.EndColumn);

      def purify(one, two)
      {
        def compare(one, two)
        {
          if (one == two)
            0
          else if (one.Contains(two))
            -1
          else
            1
        }
        def (one, two) = (one.Sort(compare).RemoveDuplicates(), two.Sort(compare).RemoveDuplicates());
        def n = Math.Min(one.Length, two.Length);
        (one.FirstN(n), two.FirstN(n))
      }
      def (leftChain, rightChain) = purify(leftChain, rightChain);

      def chain = List.Map2(leftChain, rightChain, (one, two) => if (one == two) one else Location.Default);
      chain
    }
    
    private FindInheritors(ofInfo : TypeInfo) : array[GotoInfo]
    {
      def result = SCG.List();
      
      def isInheritorOf(possibleInheritor, ourBase)
      {
        def checkParents(ty)
        {
          | tb is TypeBuilder =>  
            tb.BaseType : object == ourBase 
            || tb.InterfacesToImplement().Contains(ourBase)
            || (tb.BaseType :: tb.InterfacesToImplement())
                .Exists(isInheritorOf(_, ourBase))

          | ti : TypeInfo =>
            ti.BaseType : object == ourBase || isInheritorOf(ti.BaseType, ourBase)
        }

        possibleInheritor != null && checkParents(possibleInheritor);
      }
      
      foreach(builder : TypeBuilder in NamespaceTree.GetTypeBuilders())
        when(!object.ReferenceEquals(builder, ofInfo) && isInheritorOf(builder, ofInfo))
          result.Add(builder);
      
      result.Sort((x, y) => x.Ast.Name.CompareTo(y.Ast.Name));
      result.MapToArray(builder => GotoInfo(builder.Ast.name.Location))
    }
  }
}