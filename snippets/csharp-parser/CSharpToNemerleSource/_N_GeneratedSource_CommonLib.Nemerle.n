public StateНенужноСохранение : State.НенужноСохранение

public StateСохранен : State.Сохранен

public StateОжидание : State.Ожидание

public StateНужноСохранение : State.НужноСохранение

public StateНовый : State.Новый

public StateИзмененный : State.Измененный

mutable mutable cur_state : State

none StateTop : State

public .ctor() : void this() : void 
{
{
  StateTop = State(this, 0);
  
  {
    StateНенужноСохранение = State.НенужноСохранение(this);
    StateСохранен = State.Сохранен(this);
    StateОжидание = State.Ожидание(this);
    StateНужноСохранение = State.НужноСохранение(this);
    StateНовый = State.Новый(this);
    StateИзмененный = State.Измененный(this)
  };
  Init()
}
}

none Switch(st : State) : void Switch(st : State) : void 
{
{
  when (st != null) cur_state = st
}
}

public Initiate() : void Initiate() : void 
{
{
  
  {
    OnОжиданиеEntry();
    OnСохранениеКакВыклAction();
    OnНадписьНазваниеПрограммыAction();
    OnОжиданиеEntry();
    OnСохранениеКакВыклAction();
    OnНадписьНазваниеПрограммыAction()
  };
  cur_state = StateОжидание
}
}

public class State

public virtual Изменение() : StateИзменение() : State
{
{
  null
}
}

public virtual НовыйФайл() : StateНовыйФайл() : State
{
{
  null
}
}

public virtual ОткрытФайл() : StateОткрытФайл() : State
{
{
  null
}
}

public virtual Сохранение() : StateСохранение() : State
{
{
  null
}
}

public class НенужноСохранение

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionНенужноСохранениеToНужноСохранениеByНовыйФайл()
}
}

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionНенужноСохранениеToНенужноСохранениеByОткрытФайл()
}
}

public class Сохранен

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionСохраненToНенужноСохранениеByОткрытФайл()
}
}

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionСохраненToНужноСохранениеByНовыйФайл()
}
}

public override Сохранение() : StateСохранение() : State
{
{
  fsm.TransitionСохраненToСохраненByСохранение()
}
}

public override Изменение() : StateИзменение() : State
{
{
  fsm.TransitionСохраненToИзмененныйByИзменение()
}
}

public class Ожидание

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionОжиданиеToНенужноСохранениеByОткрытФайл()
}
}

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionОжиданиеToНужноСохранениеByНовыйФайл()
}
}

public class НужноСохранение

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionНужноСохранениеToНенужноСохранениеByОткрытФайл()
}
}

public override Сохранение() : StateСохранение() : State
{
{
  fsm.TransitionНужноСохранениеToНенужноСохранениеByСохранение()
}
}

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionНужноСохранениеToНужноСохранениеByНовыйФайл()
}
}

public class Новый

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionНовыйToНужноСохранениеByНовыйФайл()
}
}

public override Сохранение() : StateСохранение() : State
{
{
  fsm.TransitionНовыйToНенужноСохранениеByСохранение()
}
}

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionНовыйToНенужноСохранениеByОткрытФайл()
}
}

public class Измененный

public override НовыйФайл() : StateНовыйФайл() : State
{
{
  fsm.TransitionИзмененныйToНужноСохранениеByНовыйФайл()
}
}

public override Сохранение() : StateСохранение() : State
{
{
  fsm.TransitionИзмененныйToНенужноСохранениеByСохранение()
}
}

public override ОткрытФайл() : StateОткрытФайл() : State
{
{
  fsm.TransitionИзмененныйToНенужноСохранениеByОткрытФайл()
}
}

public IsInState(st : State) : boolIsInState(st : State) : bool
{
{
  cur_state.id %&& st.id
}
}

public enum Event

public Изменение() : void Изменение() : void 
{
{
  Switch(cur_state.Изменение())
}
}

public НовыйФайл() : void НовыйФайл() : void 
{
{
  Switch(cur_state.НовыйФайл())
}
}

private ОткрытФайл() : void ОткрытФайл() : void 
{
{
  Switch(cur_state.ОткрытФайл())
}
}

private Сохранение() : void Сохранение() : void 
{
{
  Switch(cur_state.Сохранение())
}
}

public RunEvent(evt : Event) : void RunEvent(evt : Event) : void 
{
{
  match (evt)
    {
    | Изменение => 
      Изменение()
    | НовыйФайл => 
      НовыйФайл()
    | Открыть => 
      Открыть()
    | Сохранить => 
      Сохранить()
    | _  => 
      ()
  }
}
}

none OnLastFileCurAction() : void OnLastFileCurAction() : void 
{
{
  
  {
    def temp = LastFileCurAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnLastFileEmptyAction() : void OnLastFileEmptyAction() : void 
{
{
  
  {
    def temp = LastFileEmptyAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnИзмененныйEntry() : void OnИзмененныйEntry() : void 
{
{
  
  {
    def temp = ИзмененныйEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnНадписьИзмененAction() : void OnНадписьИзмененAction() : void 
{
{
  
  {
    def temp = НадписьИзмененAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnНадписьИмяФайлаAction() : void OnНадписьИмяФайлаAction() : void 
{
{
  
  {
    def temp = НадписьИмяФайлаAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnНадписьНазваниеПрограммыAction() : void OnНадписьНазваниеПрограммыAction() : void 
{
{
  
  {
    def temp = НадписьНазваниеПрограммыAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnНадписьФайлAction() : void OnНадписьФайлAction() : void 
{
{
  
  {
    def temp = НадписьФайлAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnНенужноСохранениеEntry() : void OnНенужноСохранениеEntry() : void 
{
{
  
  {
    def temp = НенужноСохранениеEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnНовыйEntry() : void OnНовыйEntry() : void 
{
{
  
  {
    def temp = НовыйEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnНужноСохранениеEntry() : void OnНужноСохранениеEntry() : void 
{
{
  
  {
    def temp = НужноСохранениеEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnОжиданиеEntry() : void OnОжиданиеEntry() : void 
{
{
  
  {
    def temp = ОжиданиеEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnОжиданиеExit() : void OnОжиданиеExit() : void 
{
{
  
  {
    def temp = ОжиданиеExit;
    when (temp != null) temp(this, null)
  }
}
}

none OnСохраненEntry() : void OnСохраненEntry() : void 
{
{
  
  {
    def temp = СохраненEntry;
    when (temp != null) temp(this, null)
  }
}
}

none OnСохранениеВклAction() : void OnСохранениеВклAction() : void 
{
{
  
  {
    def temp = СохранениеВклAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnСохранениеВыклAction() : void OnСохранениеВыклAction() : void 
{
{
  
  {
    def temp = СохранениеВыклAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnСохранениеКакВклAction() : void OnСохранениеКакВклAction() : void 
{
{
  
  {
    def temp = СохранениеКакВклAction;
    when (temp != null) temp(this, null)
  }
}
}

none OnСохранениеКакВыклAction() : void OnСохранениеКакВыклAction() : void 
{
{
  
  {
    def temp = СохранениеКакВыклAction;
    when (temp != null) temp(this, null)
  }
}
}

public LastFileCurAction : EventHandler

public LastFileEmptyAction : EventHandler

public ИзмененныйEntry : EventHandler

public НадписьИзмененAction : EventHandler

public НадписьИмяФайлаAction : EventHandler

public НадписьНазваниеПрограммыAction : EventHandler

public НадписьФайлAction : EventHandler

public НенужноСохранениеEntry : EventHandler

public НовыйEntry : EventHandler

public НужноСохранениеEntry : EventHandler

public ОжиданиеEntry : EventHandler

public ОжиданиеExit : EventHandler

public СохраненEntry : EventHandler

public СохранениеВклAction : EventHandler

public СохранениеВыклAction : EventHandler

public СохранениеКакВклAction : EventHandler

public СохранениеКакВыклAction : EventHandler

none TransitionИзмененныйToНенужноСохранениеByОткрытФайл() : StateTransitionИзмененныйToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionИзмененныйToНенужноСохранениеByСохранение() : StateTransitionИзмененныйToНенужноСохранениеByСохранение() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionИзмененныйToНужноСохранениеByНовыйФайл() : StateTransitionИзмененныйToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionНенужноСохранениеToНенужноСохранениеByОткрытФайл() : StateTransitionНенужноСохранениеToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionНенужноСохранениеToНужноСохранениеByНовыйФайл() : StateTransitionНенужноСохранениеToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionНовыйToНенужноСохранениеByОткрытФайл() : StateTransitionНовыйToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionНовыйToНенужноСохранениеByСохранение() : StateTransitionНовыйToНенужноСохранениеByСохранение() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionНовыйToНужноСохранениеByНовыйФайл() : StateTransitionНовыйToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionНужноСохранениеToНенужноСохранениеByОткрытФайл() : StateTransitionНужноСохранениеToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionНужноСохранениеToНенужноСохранениеByСохранение() : StateTransitionНужноСохранениеToНенужноСохранениеByСохранение() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionНужноСохранениеToНужноСохранениеByНовыйФайл() : StateTransitionНужноСохранениеToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionОжиданиеToНенужноСохранениеByОткрытФайл() : StateTransitionОжиданиеToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnОжиданиеExit();
        OnСохранениеКакВклAction();
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionОжиданиеToНужноСохранениеByНовыйФайл() : StateTransitionОжиданиеToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnОжиданиеExit();
        OnСохранениеКакВклAction();
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionСохраненToИзмененныйByИзменение() : StateTransitionСохраненToИзмененныйByИзменение() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnИзмененныйEntry();
        OnНадписьИзмененAction()
      }
    };
    
    {
      StateИзмененный
    }
  }
}
}

none TransitionСохраненToНенужноСохранениеByОткрытФайл() : StateTransitionСохраненToНенужноСохранениеByОткрытФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНенужноСохранениеEntry();
        OnСохранениеВыклAction();
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

none TransitionСохраненToНужноСохранениеByНовыйФайл() : StateTransitionСохраненToНужноСохранениеByНовыйФайл() : State
{
{
  
  {
    
    {
      
      {
        OnНужноСохранениеEntry();
        OnСохранениеВклAction();
        OnНовыйEntry();
        OnLastFileEmptyAction();
        OnНадписьФайлAction()
      }
    };
    
    {
      StateНовый
    }
  }
}
}

none TransitionСохраненToСохраненByСохранение() : StateTransitionСохраненToСохраненByСохранение() : State
{
{
  
  {
    
    {
      
      {
        OnСохраненEntry();
        OnLastFileCurAction();
        OnНадписьИмяФайлаAction()
      }
    };
    
    {
      StateСохранен
    }
  }
}
}

