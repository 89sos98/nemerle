using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;

namespace CSharpParser
{
  public variant Expr
  {
    | Alias   { id : Identifier; }
    | Ref     { id : Identifier; }
    | Member  { expr : Expr; member : Expr; }
    | PointerMember { expr : Expr; member : Expr; }
    | TypeArguments { expr : Expr; args : list[TypeRef]; }
    | Literal { literal : CSharpParser.Literal; }
    | This
    | Base
    | Predefined { predefinedType : TypeRef; }
    | TypeOf  { typeRef : TypeRef; }
    | Checked { expr : Expr; is_checked : bool; }
    | DefaultValue { typeRef : TypeRef; }
    | SizeOf { typeRef : TypeRef; }
    | Function {  formalParameter : list[FormalParameter];
                  automaticParams : bool;
                  is_lambda : bool;
                  body : Statement; }
    | Call    { expr : Expr;
                arguments : list[FunctionArgument]; }
    | Indexer { expr : Expr;
                arguments : list[FunctionArgument]; }
    | UnaryOperator  {  expr : Expr;
                        op : string;
                        is_prefix : bool; }
    | BinaryOperator {  left : Expr;
                        right : Expr;
                        op : string; }
    | ConditionalOperator { cond : Expr;
                            trueExpr : Expr;
                            falseExpr : Expr; }
    | CastOperator  { expr : Expr;
                      toType : TypeRef; }
    | Assign {  to : Expr;
                value : Expr;
                op : string; }
    | NewObject { objType : TypeRef;
                  args : list[FunctionArgument];
                  init : VariableInitializer; }
    | NewArray { elementType : TypeRef;
                 args : list[Expr];
                 rank : int;
                 init : VariableInitializer; }
    | NewAnonymous { init : VariableInitializer; }
    | Query { query : list[QueryExpr]; }
  }
}