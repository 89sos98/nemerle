using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

module Literals
{
  public A1 : float = 1.0f;
  public A2 : float = A1 + 2.0f;
  public A3 : float = A1 + A2;
  public A4 : float = A1 - A2;
  public A5 : float = A1 * A2;
  public A6 : float = A1 / A2;
  public A7 : float = A1 % A2;

  public B1 : double = 1.0;
  public B2 : double = B1 + 2.0;
  public B3 : double = B1 + B2;
  public B4 : double = B1 - B2;
  public B5 : double = B1 * B2;
  public B6 : double = B1 / B2;
  public B7 : double = B1 % B2;

  public C1 : bool = true;
  public C2 : bool = true && !C1;
  public C3 : bool = !C1 && !C2;
  public C4 : bool = !C1 || !C2;
  
  public D1  : int = 1;
  public D2  : int = D1 + 2;
  public D3  : int = D1 + D2;
  public D4  : int = D1 - D2;
  public D5  : int = D1 * D2;
  public D6  : int = D1 / D2;
  public D7  : int = D1 % D2;
  public D8  : int = D1 & D2;
  public D9  : int = D1 | D2;
  public D10 : int = D1 ^ D2;
  public D11 : int = D1 %| D2;
  public D12 : int = D1 %& D2;
  
  public E1  : long = 1L;
  public E2  : long = E1 + 2L;
  public E3  : long = E1 + E2;
  public E4  : long = E1 - E2;
  public E5  : long = E1 * E2;
  public E6  : long = E1 / E2;
  public E7  : long = E1 % E2;
  public E8  : long = E1 & E2;
  public E9  : long = E1 | E2;
  public E10 : long = E1 ^ E2;
  public E11 : long = E1 %| E2;
  public E12 : long = E1 %& E2;
}

module QualifiedLiterals
{
  public A1 : float = 1.0f;
  public A2 : float = QualifiedLiterals.A1 + 2.0f;
  public A3 : float = QualifiedLiterals.A1 + QualifiedLiterals.A2;
  public A4 : float = QualifiedLiterals.A1 - QualifiedLiterals.A2;
  public A5 : float = QualifiedLiterals.A1 * QualifiedLiterals.A2;
  public A6 : float = QualifiedLiterals.A1 / QualifiedLiterals.A2;
  public A7 : float = QualifiedLiterals.A1 % QualifiedLiterals.A2;

  public B1 : double = 1.0;
  public B2 : double = QualifiedLiterals.B1 + 2.0;
  public B3 : double = QualifiedLiterals.B1 + QualifiedLiterals.B2;
  public B4 : double = QualifiedLiterals.B1 - QualifiedLiterals.B2;
  public B5 : double = QualifiedLiterals.B1 * QualifiedLiterals.B2;
  public B6 : double = QualifiedLiterals.B1 / QualifiedLiterals.B2;
  public B7 : double = QualifiedLiterals.B1 % QualifiedLiterals.B2;

  public C1 : bool = true;
  public C2 : bool = true && !QualifiedLiterals.C1;
  public C3 : bool = !QualifiedLiterals.C1 && !QualifiedLiterals.C2;
  public C4 : bool = !QualifiedLiterals.C1 || !QualifiedLiterals.C2;  
  
  public D1  : int = 1;
  public D2  : int = QualifiedLiterals.D1 + 2;
  public D3  : int = QualifiedLiterals.D1 + QualifiedLiterals.D2;
  public D4  : int = QualifiedLiterals.D1 - QualifiedLiterals.D2;
  public D5  : int = QualifiedLiterals.D1 * QualifiedLiterals.D2;
  public D6  : int = QualifiedLiterals.D1 / QualifiedLiterals.D2;
  public D7  : int = QualifiedLiterals.D1 % QualifiedLiterals.D2;
  public D8  : int = QualifiedLiterals.D1 & QualifiedLiterals.D2;
  public D9  : int = QualifiedLiterals.D1 | QualifiedLiterals.D2;
  public D10 : int = QualifiedLiterals.D1 ^ QualifiedLiterals.D2;
  public D11 : int = QualifiedLiterals.D1 %| QualifiedLiterals.D2;
  public D12 : int = QualifiedLiterals.D1 %& QualifiedLiterals.D2;
  
  public E1  : long = 1L;
  public E2  : long = QualifiedLiterals.E1 + 2L;
  public E3  : long = QualifiedLiterals.E1 + QualifiedLiterals.E2;
  public E4  : long = QualifiedLiterals.E1 - QualifiedLiterals.E2;
  public E5  : long = QualifiedLiterals.E1 * QualifiedLiterals.E2;
  public E6  : long = QualifiedLiterals.E1 / QualifiedLiterals.E2;
  public E7  : long = QualifiedLiterals.E1 % QualifiedLiterals.E2;
  public E8  : long = QualifiedLiterals.E1 & QualifiedLiterals.E2;
  public E9  : long = QualifiedLiterals.E1 | QualifiedLiterals.E2;
  public E10 : long = QualifiedLiterals.E1 ^ QualifiedLiterals.E2;
  public E11 : long = QualifiedLiterals.E1 %| QualifiedLiterals.E2;
  public E12 : long = QualifiedLiterals.E1 %& QualifiedLiterals.E2;
}

module Decimals
{
  public Dec1 : decimal = 1m;
  public Dec2 : decimal = Dec1 + 2m;
  public Dec3 : decimal = Dec1 + Dec2;
}

module QualifiedDecimals
{
  public Dec1 : decimal = 1m;
  public Dec2 : decimal = QualifiedDecimals.Dec1 + 2m;
  public Dec3 : decimal = QualifiedDecimals.Dec1 + QualifiedDecimals.Dec2;
}

module Program
{  
  Main() : void
  {
    def checkConstant(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsLiteral)
          Console.WriteLine($"$(field.Name) is not a constant");
      }
    }
    
    def checkReadOnly(t)
    {
      foreach (field in t.GetFields())
      {
        when (!field.IsInitOnly)
          Console.WriteLine($"$(field.Name) is not readonly");

       def attrs = field.GetCustomAttributes(typeof(DecimalConstantAttribute), true);
       when (attrs.Length == 0)
         Console.WriteLine($"$(field.Name) doesn't have DecimalConstant attribute");
      }
    }  
    
    // Read only
    checkConstant(typeof(Literals));
    checkConstant(typeof(QualifiedLiterals));
    
    // Decimal
    checkReadOnly(typeof(Decimals));
    checkReadOnly(typeof(QualifiedDecimals));
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/
