using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.ComputationExpressions.Async
{
  public enum JobState
  {
    | Ready
    | SwitchContext
    | Wait
    | Canceled
  }

  [Record]
  public class AsyncJobBase
  {
    public ExecutionContext : ExecutionContext { get; set; }
    public State : JobState { get; set; }

    public ExecWhileReady[A](mutable async : Async[A], res : ref A) : Async[A]
    {
      while (State == JobState.Ready && async != null)
        async = async.Exec(this, ref res);
      async;
    }
  }

  public variant AsyncResult[A]
  {
    | Value { value : A }
    | Exeption { ex : Exception }

    public override ToString() : string
    {
      match (this)
      {
        | Value(value) => $"Value($value)"
        | Exeption(ex) => $"Exception($(ex.GetType().FullName))"
      }
    }
  }

  public abstract class Async[A]
  {
    /// <summary>
    /// Implementation detail. DO NOT USE!
    /// </summary>
    public abstract Exec(job : AsyncJobBase, res : ref A) : Async[A];

    public Start() : Async[A]
    {
      Start(SystemThreadPoolExecutionContext.Instance);
    }

    public virtual Start(executionContext : ExecutionContext) : Async[A]
    {
      def res = AsyncJobResult();
      def job = AsyncJob(executionContext, JobState.Ready, this, res);
      executionContext.Execute(job.RunCache);
      res;
    }

    public virtual GetResult() : AsyncResult[A]
    {
      throw NotSupportedException();
    }

    public static SwitchTo(executionContext : ExecutionContext) : Async[FakeVoid]
    {
      AsyncSwitchExecutionContext(executionContext);
    }

    public static Yield() : Async[FakeVoid]
    {
      AsyncYield.Instance;
    }
  }

  [Record]
  internal class AsyncJob[A] : AsyncJobBase
  {
    private mutable async : Async[A];
    private result : AsyncJobResult[A];

    [RecordIgnore]
    public RunCache : void -> void = () => Run();

    private Run() : void
    {
      mutable res;
      State = JobState.Ready;
      try
      {
        async = ExecWhileReady(async, ref res);
      }
      catch
      {
        | ex is Exception =>
          result.SetResult(AsyncResult.Exeption(ex));
          return;
      }
      match (State)
      {
        | Ready         =>
          result.SetResult(AsyncResult.Value(res));

        | SwitchContext =>
          ExecutionContext.Execute(RunCache);
          Console.Error.WriteLine($"Context switched thread id = $(Threading.Thread.CurrentThread.ManagedThreadId)");

        | Wait          =>
          throw NotImplementedException();

        | Canceled      =>
          throw NotImplementedException();
      }
    }
  }

  internal class AsyncJobResult[A] : Async[A]
  {
    private mutable _result : AsyncResult[A] = null;
    public SetResult(result : AsyncResult[A]) : void
    {
      lock (_syncRoot)
      {
        _result = result;
        Threading.Monitor.PulseAll(_syncRoot);
      }
    }
    private _syncRoot : object = object();

    public override GetResult() : AsyncResult[A]
    {
      lock (_syncRoot)
      {
        when (_result == null)
          _ = Threading.Monitor.Wait(_syncRoot);
        _result;
      }
    }

    public override Exec(_job : AsyncJobBase, _res : ref A) : Async[A]
    {
      throw NotSupportedException();
    }

    public override Start(_executionContext : ExecutionContext) : Async[A]
    {
      throw NotSupportedException();
    }
  }

  [Record]
  internal class AsyncSwitchExecutionContext : Async[FakeVoid]
  {
    private executionContext : ExecutionContext;
    public override Exec(job : AsyncJobBase, _res : ref FakeVoid) : Async[FakeVoid]
    {
      when (!object.ReferenceEquals(job.ExecutionContext, executionContext))
      {
        job.ExecutionContext = executionContext;
        job.State = JobState.SwitchContext;
      }
      null;
    }
  }

  internal class AsyncYield : Async[FakeVoid]
  {
    public static Instance : AsyncYield = AsyncYield();
    public override Exec(job : AsyncJobBase, _res : ref FakeVoid) : Async[FakeVoid]
    {
      job.State = JobState.SwitchContext;
      null;
    }
  }
}
