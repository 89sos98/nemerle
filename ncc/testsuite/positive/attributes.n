using System;
using Nemerle.IO;
using Nemerle.Collections;
using System.Reflection;
using System.Runtime.CompilerServices;

[assembly: AssemblyTitle("Attributes Test")]

[AttributeUsage(AttributeTargets.Assembly %| AttributeTargets.Class,
                AllowMultiple = true)]
class MyAttribute : Attribute
{
  f1 : string;
  public mutable f2 : string;
  public this () { f1 = "def"; }
  public this (f : string) { f1 = f; }
  public override ToString () : string
  {
    f1 + " " + f2
  }
}

public class B : System.Attribute {
  public this () { }
}

public class C : B {
  public this (_x : string) {  }
}
  
[type: B]
public class A {

  [B]
  public delegate MyPrintDelegate (s : string) : void;

  [B]
  f () : void { }

  [method: B]
  f1 () : void { }
  
  g ([B] _x : int, [param: B] _y : int) : void { }

  public this () { }

  gg : int {
    [method: B]
    get {
      0
    }
    [method: B]
    [param: B]
    set {
      ignore (value);
    }
  }
}

[My, My ("foo", f2 = "bar")]
public class Foo { public this () {} }

module M {
  Main () : void
  {
    def x = MyAttribute ();
    def attrs = x.GetType ().GetCustomAttributes (typeof (AttributeUsageAttribute), false);
    def attr = attrs[0] :> AttributeUsageAttribute;
    printf ("attrs %d %d %s\n", attrs.Length, 
        (attr.ValidOn :> int),
        if (attr.AllowMultiple) "true" else "false");
    def foo = Foo ();
    def lst = List.FromArray (foo.GetType ().GetCustomAttributes (false));
    def attrs = List.Sort (List.Map (lst, fun (x : object) { x.ToString (); }), 
                                fun (a,b) {String.CompareOrdinal(a,b)});
    printf ("%s\n", attrs.ToString ());
  }
}

  public class WithConstructorAttr {
        [System.Obsolete("Don't use this Constructor")]
        public this () {
        }

        [method: System.Obsolete("Don't use this Constructor")]
        public this (_x : int) {
        }
  }     

  public class WithEventAttr {
       [System.Obsolete("Don't use this Constructor")]
       public event Foo : System.EventHandler;
  }     


/*
BEGIN-OUTPUT
attrs 1 5 true
[Nemerle.Internal.TypeAttribute, def , foo bar]
END-OUTPUT
*/
