using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;

using NUnit.Framework;

using CSharpParser.TestMacros;

namespace CSharpParser.Tests {

  [
    TestFixture,

    Accepts("typeof 1",
    <#
    class Foo {
      void X() {
        var v1 = typeof(global::SCG.List<>).FullName[0].ToLower();
        var v2 = typeof(SCG.Dictionary<,>);
      }
    }#>),
    
    Accepts("anonymous 1",
    <#
    class Foo {
      void X() {
        var v1 = new {};
        var v2 = new { a, b.X, c.Z, }.ToString();
        var v3 = new { x = foo(), y = bar(10) };
      }
    }#>),

    Accepts("literal 1",
    <#
    class Foo {
      void X() {
        var v1 = 10;
        var v2 = "10";
        var v3 = 10.0e1d;
        var v4 = 10f;
        var v5 = 10UL;
      }
    }#>),

    Accepts("delegate 1",
    <#
    class Foo {
      void X() {
        var v1 = delegate {  };
        var v2 = delegate(string s) {  };
        var v2 = delegate(string s, ref int i) {  };
      }
    }#>),

    Accepts("new 1",
    <#
    class Foo {
      void X() {
        var v1 = new T(1,2,3);
        var v2 = new T { x, y, z, 7, 8, 9 }; // collection
        var v2 = new T(a, b) { x, y, z, 7, 8, 9 }; 
      }
    }#>),

    Accepts("new 2",
    <#
    class Foo {
      void X() {
        var v2 = new T() {  };
        var v2 = new T(1, 2, 3) { A = x().y, B = y[1]()[1].s };
        var v3 = new T { A = x(), B = y(), }; 
      }
    }#>),

  ]
  public class Expressions { }

}