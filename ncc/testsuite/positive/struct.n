
using Nemerle.IO;

[Record]
public struct TestStruct
{
  public mutable x : int;
  public mutable y : int;
}

interface AI {
  Think (knowledge : string) : bool;
}

struct Neuromancer : AI {
  public tape : list <bool>;

  public Think (knowledge : string) : bool
  {
    knowledge == "42"
  }
}


struct K : System.IDisposable {
  public x : int;

  public Dispose () : void { }
}

class Singularity : AI {
  disk : list <bool>;

  public Think (knowledge : string) : bool
  {
    knowledge == "42"
  }

  [Nemerle.NotImplemented]
  public f (x : int) : int;
}

public module Test
{
  test_passing_around (s : TestStruct) : void
  {
    printf ("%i %i\n", s.x, s.y);
    ++s.x;
  }

  f (s : AI) : void
  {
    when (s.Think ("42") && !s.Think ("7 * 8"))
      printf ("ok\n")
  }
  
  Main () : void
  {
    def s = TestStruct (10, 20);
    
    test_passing_around (s);
    test_passing_around (s);

    f (Neuromancer ());
    f (Singularity ());

    printf ("%i\n", s.x)
  }
}

/*
BEGIN-OUTPUT
10 20
10 20
ok
ok
10
END-OUTPUT
*/
