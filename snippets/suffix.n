open Nemerle.Collections;

class SuffixTrees {

  class node {
    public mutable childs : Hashtable (char, node); 
    public suffNr : int; 
    public mutable link : node;

    public this (childs : Hashtable (char, node), suffNr : int, link : node) {
      this.childs <- childs;
      this.suffNr <- suffNr;
      this.link <- link;
    }

    public HasChild (c : char) : bool {
      if (this.childs != null)
        this.childs.Contains (c)
      else
        false
    }

    public GetChild (c : char) : node {
      match (this.childs.Get (c)) {
        | Some (n) => n
        | None => raise System.Exception ()
      }
    }
  }

  static OnLineTrie (str : string) : node {
    def n = str.Length;

    if (n >= 1) {
      def root = node (Hashtable (), 0, null);
      root.link <- root;
      mutable v <- node (null, 1, root);
      root.childs.Add (str[0], v);
      mutable prev <- (null : node);
      
      for (mutable i <- 1; i < 2; i <- i + 1) {
        mutable a <- str[i];
        mutable w <- v;

        while (!w.HasChild (a)) {
          def newNode = node (null, w.suffNr + 1, null);

          when (w.childs == null) { w.childs <- Hashtable(); };
          w.childs.Add (a, newNode);

          unless (prev == null) { prev.link <- newNode; };
          prev <- newNode;

          when (v == w) { v <- newNode; };

          w <- w.link;
          printf("add %c %d\n", str[i], i);
          when (w == root) { printf("root\n"); };
          when (w == w.link && i == 2) { raise System.Exception() };
        };
        prev.link <- w.GetChild (a);
      };
      root
    }
    else
      node (Hashtable (), 0, null)
  }

  public static Main() : void {
    def str = "abbaaba";
    
    def sufftree = OnLineTrie (str);

    def print_trie (nd : node, empty : string) : void {
      def print_child (cha : char, n : node) : void {
        printf ("%s%c\n", empty, cha);
        print_trie (n, empty + "  ");
      };

      printf ("%sNode\n", empty);
      when (nd.childs != null) {
        nd.childs.Iter (print_child);
      }
    };

    print_trie (sufftree, "");
  }
}
