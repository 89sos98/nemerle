using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace LRPEGCC
{
  partial internal class RuleCompiler
  {
    public CompileGrammar(typedGrammar : Grammar) : void
    {
      def untypedGrammar          = GrammarTyper.RemoveAllCaptures(typedGrammar);
      def optimizedTypedGrammar   = if(_isDebug) typedGrammar   else Optimizer.OptimizeGrammar(typedGrammar);
      def optimizedUntypedGrammar = if(_isDebug) untypedGrammar else Optimizer.OptimizeGrammar(untypedGrammar);

      def calledRules = Hashtable();
      def rulesToCall = Stack();
      def callRule(name, useResult)
      {
        def key = (name, useResult);
        when (!calledRules.Contains(key))
        {
          calledRules.Add(key, 0);
          rulesToCall.Push(key);
        }
      }
      def definedMemoize = Hashtable();
      def defineMemoize(name : RuleRef, ty : PExpr)
      {
        match (definedMemoize.Get(name))
        {
          | Some(res) => res;
          | None =>
            def memPos    = $"__GENERATED_PEG__Memeoize_Pos__$(name.Id)__";
            def memNewPos = $"__GENERATED_PEG__Memeoize_End__$(name.Id)__";
            def memResult = $"__GENERATED_PEG__Memeoize_Res__$(name.Id)__";
            _ = _tb.DefineWithSource(<[ decl:
              private mutable $(memPos : dyn) : int = -1;
            ]>);
            _ = _tb.DefineWithSource(<[ decl:
              private mutable $(memNewPos : dyn) : int = -1;
            ]>);
            _ = _tb.DefineWithSource(<[ decl:
              private mutable $(memResult : dyn) : $ty;
            ]>);
            def res = (memPos, memNewPos, memResult);
            definedMemoize.Add(name, res);
            res;
        }
      }
      callRule(optimizedTypedGrammar.StartRuleName, true);
      while (rulesToCall.Count > 0)
      {
        def (name, useResult) = rulesToCall.Pop();
        def rule = if (useResult) optimizedTypedGrammar.GetRule(name);
                   else           optimizedUntypedGrammar.GetRule(name);

        def body =
          try
          {
            CompileRule(rule, useResult, callRule, defineMemoize);
          }
          catch
          {
            | ex =>
              Message.Error(ex.Message);
              PExpr.Error();
          }

        def method = if (useResult)
        {
          def ty = match (rule)
          {
            | Rule.Capture(Handler(retType = RuleType.NType(ty)), _) => ty

            | Rule.Capture as c =>
              Message.Error($"PEG implementation error. Wrong Capture '$(c)'");
              PExpr.Error();

            | _ =>
              Message.Error("PEG implementation error.");
              PExpr.Error();
          };

          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, result : ref $ty, text : string) : int
            {
              $body;
            }
          ]>
        }
        else
        {
          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, text : string) : int
            {
              $body;
            }
          ]>
        }

        _ = _tb.DefineWithSource(method);
      }
    }

    /*public static CalcRulesStartSymbols(grammar : Grammar) : Map[RuleRef, RangeSet]
    {
      def getRuleStartSymbols(name : RuleRef, symbols : Map[RuleRef, RangeSet]) : RangeSet * Map[RuleRef, RangeSet]
      {
        def calc(symbols, rule)
        {
          match (rule : Rule)
          {
            | Call(name)               =>
              getRuleStartSymbols(name, symbols);

            | Choice(rules)            =>
              def fn(rule, (chars1, symbols))
              {
                def (chars2, symbols) = calc(symbols, rule);
                (chars1.Sum(chars2), symbols);
              }

              rules.Fold((RangeSet(), symbols), fn);

            | RepeatMin(0, _)
            | RepeatMinMax(0, _, _)
            | Chars([])
            | Sequence([])             =>
              (RangeSet().AddRange(char.MinValue, char.MaxValue), symbols);

            | RepeatMin(_, rule)
            | RepeatMinMax(_, _, rule)
            | And(rule)
            | Scope(_, rule)
            | Capture(_, rule)         =>
              calc(symbols, rule);

            | Not(rule)                =>
              def (chars, symbols) = calc(symbols, rule);
              (chars.Invert(), symbols)

            | Sequence(rules)      =>
              def loop(symbols, rules : list[Rule])
              {
                match (rules)
                {
                  | And as rule :: rules
                  | Not as rule :: rules
                    =>
                    def (chars1, symbols) = loop(symbols, rules);
                    def (chars2, symbols) = calc(symbols, rule);
                    (chars1.Intersect(chars2), symbols);
                  | rule :: _ => calc(symbols, rule)
                  | []        => (RangeSet().AddRange(char.MinValue, char.MaxValue), symbols)
                }
                
              }
              loop(symbols, rules)

            | Chars(chars :: _)        =>
              (chars, symbols)

            | Fsm(fsm)                 =>
              def chars = fsm.Transitions
                .MapFiltered(t => t.From == fsm.StartState && t is Transition.Symbol, _ :> Transition.Symbol)
                .Fold(RangeSet(), (t, chars) => chars.Sum(t.Chars));
              (chars, symbols)

            | ExtensionPoint           =>
              assert(false);
          }
        }

        if (symbols.Contains(name))
        {
          (symbols.Get(name), symbols)
        }
        else
        {
          def symbols = symbols.Add(name, RangeSet());
          def rule = grammar.GetRule(name);
          def (chars, symbols) = calc(symbols, rule);
          (chars, symbols.Replace(name, chars))
        }
      }
      grammar.Names.Fold(Map(), (name, symbols) =>
      {
        def (chars, symbols) = getRuleStartSymbols(name, symbols);
        symbols.Replace(name, chars);
      });
    }*/
  }
}
