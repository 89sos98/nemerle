using System;

[AttributeUsage(AttributeTargets.Property)]
class SpecialAttribute : Attribute { }

interface ISome
{
  StringGetSet : string { get; set; }
  StringGet : string { get; }
}

abstract class Base
{
  public virtual PublicIntGetSet : int { get; set; } 
  public abstract PublicIntGet : int { get; }

  internal virtual InternalIntGetSet : int { get; set; } 
  protected abstract ProtectedIntGet : int { get; }
}

class Derived : Base, ISome
{
  #region ISome
  
  [Special] public StringGetSet : string { get; set; }
  
  public StringGet : string { get; }
  
  #endregion
    
  #region Base
  
  [Special] public override PublicIntGetSet : int { get; set; }  
  public override PublicIntGet : int { get; }
  
  internal new InternalIntGetSet : int { get; set; }  
  protected override ProtectedIntGet : int { get; }
  
  #endregion
  
  #region Derived
  
  public virtual OtherProp : int { get; }
  
  #endregion
  
  public this()
  {
    fieldof(StringGetSet) = "a";
    
    fieldof(StringGet) = ""; // TODO: Remove, issue 1302
    InitValueOut(out fieldof(StringGet), "b");
      
    fieldof(PublicIntGetSet) = 1;
    fieldof(PublicIntGet) = 0; // TODO: Remove, issue 1302
    InitValueRef(ref fieldof(PublicIntGet), 2);
    fieldof(InternalIntGetSet) = 3;
    fieldof(ProtectedIntGet) = 0; // TODO: Remove, issue 1302
    InitValueOut(out fieldof(ProtectedIntGet), 4);
    
    fieldof(OtherProp) = 10;
  }
  
  public this(stringGetSet : string,
              stringGet : string,
              publicIntGetSet : int,
              publicIntGet : int,
              internalIntGetSet : int,
              protectedIntGet : int,
              otherProp : int)
  {
    fieldof(StringGetSet) = stringGetSet;
    fieldof(StringGet) = stringGet;
    fieldof(PublicIntGetSet) = publicIntGetSet;
    fieldof(PublicIntGet) = publicIntGet;
    fieldof(InternalIntGetSet) = internalIntGetSet;
    fieldof(ProtectedIntGet) = protectedIntGet;
    fieldof(OtherProp) = otherProp;
  }
  
  public override ToString() : string
  {
    $"$StringGetSet $StringGet $PublicIntGetSet " +
    $"$PublicIntGet $InternalIntGetSet $ProtectedIntGet $OtherProp"
  }
  
  static InitValueRef[T](s : ref T, value : T) : void { s = value; }  
  static InitValueOut[T](s : out T, value : T) : void { s = value; }
}

module Program
{
    Main() : void
    {
        def d1 = Derived();
        Console.WriteLine(d1.ToString());
        
        def d2 = Derived("x", "y", 10, 20, 30, 40, 50);
        Console.WriteLine(d2.ToString());
    }
}
/*
BEGIN-OUTPUT
a b 1 2 3 4 10
x y 10 20 30 40 50
END-OUTPUT
*/