using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser {

  [PegGrammar(
    start,
    grammar {
      any = ['\u0000'..'\uFFFF'];

      #region Line terminators

      newLineCharacter = '\n'
                        / '\r'
                        / '\u2028'    /*  line separator       */
                        / '\u2029';   /*  paragraph separator  */
      newLine   = "\r\n" / newLineCharacter;

      #endregion

      #region White space

      whitespace = [Zs]
                / '\t'
                / '\v'        /*  vertial tab          */
                / '\f';       /*  form feed            */

      #endregion

      #region Comments

      singleLineComment = "//" (!newLineCharacter any)*;
      delimitedComment = "/*" (!"*/" any)* "*/";
      comment = singleLineComment / delimitedComment;

      #endregion

      #region Spacer

      s = (comment / whitespace / newLineCharacter)*;

      #endregion

      #region Identifiers

      letterCharacter       = [Lu, Ll, Lt, Lm, Lo, Nl];
      combiningCharacter    = [Mn, Mc];
      decimalDigitCharacter = [Nd];
      connectingCharacter   = [Pc];
      formattingCharacter   = [Cf];

      identifierStartCharacter  = letterCharacter / "_";
      identifierPartCharacters  = letterCharacter / decimalDigitCharacter / connectingCharacter / combiningCharacter / formattingCharacter;
      identifier                = "@"? identifierStartCharacter identifierPartCharacters* s;

      #endregion

      #region Literals

      booleanLiteral = "true" / "false";

      nullLiteral = "null";

      decimalDigit = ['0'..'9'];
      integerTypeSuffix = "UL" / "ul" / "uL" / "Ul" / "LU" / "lu" / "Lu" / "lU" / "U" / "u" / "L" / "l";
      decimalIntegerLiteral = decimalDigit+ integerTypeSuffix?;
      hexDigit     = ['0'..'9', 'a'..'f', 'A'..'F'];
      hexadecimalIntegerLiteral = ("0x" / "0X") hexDigit+ integerTypeSuffix?;
      integerLiteral = hexadecimalIntegerLiteral / decimalIntegerLiteral;

      realTypeSuffix = "F" / "f" / "D" / "d" / "M" / "m";
      exponentPart = ("E" / "e") ("-" / "+")? decimalDigit+;
      realLiteral_1 = decimalDigit* "." decimalDigit+ exponentPart? realTypeSuffix?;
      realLiteral_2 = decimalDigit+ exponentPart realTypeSuffix?;
      realLiteral_3 = decimalDigit+ realTypeSuffix;
      realLiteral = realLiteral_1 / realLiteral_2 / realLiteral_3;

      unicodeEscapeSequence_u = "\\u" hexDigit hexDigit hexDigit hexDigit;
      unicodeEscapeSequence_U = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit;
      unicodeEscapeSequence   = unicodeEscapeSequence_u / unicodeEscapeSequence_U;
      hexadecimalEscapeSequence = "\\x" hexDigit hexDigit? hexDigit? hexDigit?;
      simpleEscapeSequence = "'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
      singleCharacter = !newLineCharacter !"'" !"\\" any;
      character = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleCharacter;
      characterLiteral = "'" character "'";

      singleRegularStringLiteralCharacter = !newLineCharacter !"\"" !"\\" any;
      regularStringLiteralCharacter = unicodeEscapeSequence / hexadecimalEscapeSequence / simpleEscapeSequence / singleRegularStringLiteralCharacter;
      regularStringLiteral = "\"" regularStringLiteralCharacter* "\"";
      quoteEscapeSequence = "\"\"";
      singleVerbatimStringLiteralCharacter = !"\"" any;
      verbatimStringLiteralCharacter = quoteEscapeSequence / singleVerbatimStringLiteralCharacter;
      verbatimStringLiteral = "@\"" verbatimStringLiteralCharacter* "\"";
      stringLiteral = regularStringLiteral / verbatimStringLiteral;

      literal      = booleanLiteral / nullLiteral / realLiteral / integerLiteral  / characterLiteral / stringLiteral s;

      #endregion

      #region Basic concepts

      namespaceOrTypeName = (identifier "::"s)? identifier typeArgumentList? ("."s identifier typeArgumentList?)*;
      namespaceName = namespaceOrTypeName;
      typeName = namespaceOrTypeName;

      #endregion

      #region Types

      dimSeparators = (","s)*;
      rankSpecifier = "["s dimSeparators "]"s;
      compoundName = typeName rankSpecifier*;
      anyType = compoundName;
      typeArgument = anyType;
      typeArguments = typeArgument ("," typeArgument)*;
      typeArgumentList = "<"s typeArguments ">"s;
      typeDeclaration = classDeclaration
                      / structDeclaration
                      / interfaceDeclaration
                      / enumDeclaration
                      / delegateDeclaration;

      integralType = ("sbyte" / "byte" / "short" / "ushort" / "int" / "uint" / "long" / "ulong" / "char")s;

      #endregion

      #region Namespaces

      externAliasDirective = "extern"s "alias"s identifier ";"s;
      externAliasDirectives = externAliasDirective*;
      usingAliasDirective = "using"s identifier "="s namespaceOrTypeName ";"s;
      usingNamespaceDirective = "using"s namespaceName ";"s;
      usingDirective = usingAliasDirective / usingNamespaceDirective;
      usingDirectives = usingDirective*;
      qualifiedIdentifier = identifier ("."s identifier)*;
      namespaceBody = "{"s externAliasDirectives usingDirectives namespaceMemberDeclarations "}"s;
      namespaceDeclaration = "namespace"s qualifiedIdentifier namespaceBody (";"s)?;
      namespaceMemberDeclaration = namespaceDeclaration / typeDeclaration;
      namespaceMemberDeclarations = namespaceMemberDeclaration*;
      compilationUnit = s externAliasDirectives usingDirectives globalAttributes namespaceMemberDeclarations;

      #endregion

      #region Variables

      variableReference = expression;

      #endregion

      #region Expressions

      argumentName = identifier ":"s;
      argumentValue_1 = ("ref" / "out" variableReference);
      argumentValue_2 = expression;
      argumentValue = argumentValue_1 / argumentValue_2;
      argument = argumentName? argumentValue;
      argumentList = argument (","s argument)*;

      expression = literal / identifier;
      constantExpression = literal;
      variableInitializer = expression /*/ arrayInitializer */ ;

      #endregion

      #region Statements

      block = "{"s "}"s;

      #endregion

      #region Class

      typeParameter = attributes? identifier;
      typeParameterList = "<"s typeParameter (","s typeParameter)* ">"s;

      typeParameterConstraint_ctor = "new"s "("s ")"s;
      typeParameterConstraint_type = ("class" / "struct")s;
      typeParameterConstraint_base = anyType;
      typeParameterConstraint   = typeParameterConstraint_ctor
                                / typeParameterConstraint_type
                                / typeParameterConstraint_base;
      typeParameterConstraints = typeParameterConstraint (","s typeParameterConstraint)*;
      typeParameterConstraintsClause =  "where"s identifier ":"s typeParameterConstraints;
      typeParameterConstraintsClauses = typeParameterConstraintsClause+;

      constantDeclarator = identifier "="s constantExpression;
      constantDeclarators = constantDeclarator (","s constantDeclarator)*;
      constantModifier = ("new" / "public" / "protected" / "internal" / "private")s;
      constantModifiers = constantModifier+;
      constantDeclaration = attributes? constantModifiers? "const"s anyType constantDeclarators ";"s;

      variableDeclarator = identifier ("="s variableInitializer)?;
      variableDeclarators = variableDeclarator (","s variableDeclarator)*;
      fieldModifier  = ("new" / "public" / "protected" / "internal" / "private" / "static" / "readonly" / "volatile")s;
      fieldModifiers = fieldModifier+;
      fieldDeclaration = attributes? fieldModifiers? anyType variableDeclarators ";"s;

      memberName = compoundName;

      parameterModifier = ("ref" / "out" / "this" / "params")s;
      defaultArgument = "="s expression;
      formalParameter = attributes? parameterModifier? anyType identifier defaultArgument?;
      formalParameterList = formalParameter (","s formalParameter)*;

      methodModifier = ("new" / "public" / "protected" / "internal" / "private" / "static" / "virtual" / "sealed" / "override" / "abstract" / "extern")s;
      methodModifiers = methodModifier+;
      methodHeader = attributes? methodModifiers? ("partial"s)? anyType memberName typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses?;
      methodBody_empty = (";"s);
      methodBody_block = block;
      methodBody = methodBody_empty / methodBody_block;
      methodDeclaration = methodHeader methodBody;

      accessorModifier = ("protected" / "internal" / "private")s;
      accessorModifiers = accessorModifier+;
      getAccessorDeclaration = attributes? accessorModifiers? "get"s methodBody;
      setAccessorDeclaration = attributes? accessorModifiers? "set"s methodBody;
      accessorDeclarations_1 = getAccessorDeclaration setAccessorDeclaration?;
      accessorDeclarations_2 = setAccessorDeclaration getAccessorDeclaration?;
      accessorDeclarations = accessorDeclarations_1 / accessorDeclarations_2;
      propertyModifiers = methodModifiers;
      propertyDeclaration = attributes? propertyModifiers? anyType memberName "{"s accessorDeclarations "}"s;

      addAccessorDeclaration = attributes? "add"s block;
      removeAccessorDeclaration = attributes? "remove"s block;
      eventAccessorDeclarations_1 = addAccessorDeclaration removeAccessorDeclaration;
      eventAccessorDeclarations_2 = removeAccessorDeclaration addAccessorDeclaration;
      eventAccessorDeclarations = eventAccessorDeclarations_1 / eventAccessorDeclarations_2;
      eventModifiers = methodModifiers;
      eventDeclaration_1 = attributes? eventModifiers? "event"s anyType memberName "{"s eventAccessorDeclarations "}"s;
      eventDeclaration_2 = attributes? eventModifiers? "event"s anyType variableDeclarators ";"s;
      eventDeclaration = eventDeclaration_1 / eventDeclaration_2;

      indexerModifiers = methodModifiers;
      indexerDeclarator = anyType compoundName "["s formalParameterList "]"s;
      indexerDeclaration = attributes? indexerModifiers? indexerDeclarator "{"s accessorDeclarations "}"s;

      conversionOperatorDeclarator = ("implicit" / "explicit")s "operator"s anyType "("s anyType identifier ")"s;
      overloadableUnaryOperator = ("++" / "--" / "+" / "-" / "!" / "~" / "true" / "false")s;
      unaryOperatorDeclarator = anyType "operator"s overloadableUnaryOperator "("s anyType identifier ")"s;
      overloadableBinaryOperator = ("+" / "-" / "*" / "/" / "%" / "&" / "|" / "^" / "<<" / ">>" / "==" / "!=" / ">" / "<" / ">=" / "<=")s;
      binaryOperatorDeclarator = anyType "operator"s overloadableBinaryOperator "("s anyType identifier ","s anyType identifier ")"s;
      operatorDeclarator  = conversionOperatorDeclarator
                          / unaryOperatorDeclarator
                          / binaryOperatorDeclarator;
      operatorModifier = ("public" / "static" / "extern")s;
      operatorModifiers = operatorModifier+;
      operatorDeclaration = attributes? operatorModifiers? operatorDeclarator methodBody;

      constructorModifier = ("public" / "protected" / "internal" / "private" / "static" / "extern")s;
      constructorModifiers = constructorModifier+;
      constructorInitializer = ":"s ("this" / "base")s "("s argumentList? ")"s;
      constructorDeclarator = identifier "("s formalParameterList? ")"s constructorInitializer?;
      constructorBody = methodBody;
      constructorDeclaration = attributes? constructorModifiers? constructorDeclarator constructorBody;

      destructorModifier = "extern"s;
      destructorModifiers = destructorModifier+;
      destructorDeclarator = "~"s identifier "("s ")"s;
      destructorBody = methodBody;
      destructorDeclaration = attributes? destructorModifiers? destructorDeclarator destructorBody;

      classMemberDeclaration = constantDeclaration
                              / eventDeclaration
                              / indexerDeclaration 
                              / fieldDeclaration
                              / methodDeclaration
                              / propertyDeclaration 
                              / operatorDeclaration
                              / constructorDeclaration
                              / destructorDeclaration
                              / typeDeclaration;
      classMemberDeclarations = classMemberDeclaration*;

      classModifier = ("new" / "public" / "protected" / "internal" / "private" / "abstract" / "sealed" / "static")s;
      classModifiers = classModifier+;
      classBase = ":"s anyType (","s anyType)*;
      classBody = "{"s classMemberDeclarations "}"s;
      classDeclaration = attributes? classModifiers? ("partial"s)? "class"s identifier typeParameterList? classBase? typeParameterConstraintsClauses? classBody (";"s)?;

      #endregion

      #region Struct

      structMemberDeclarations = classMemberDeclarations;
      structModifier = ("new" / "public" / "protected" / "internal" / "private")s;
      structModifiers = structModifier+;
      structBase = classBase;
      structBody = "{"s structMemberDeclarations "}"s;
      structDeclaration = attributes? structModifiers? ("partial"s)? "struct"s identifier typeParameterList? structBase? typeParameterConstraintsClauses? structBody (";"s)?;

      #endregion

      #region Interface
      
      varianceAnnotation = ("in" / "out")s;
      variantTypeParameter = attributes? varianceAnnotation? identifier;
      variantTypeParameters = variantTypeParameter (","s variantTypeParameter)*;
      variantTypeParameterList = "<"s variantTypeParameters ">"s;

      interfaceMemberModifier = "new"s;
      interfaceMemberModifiers = interfaceMemberModifier+;

      interfaceMethodDeclaration = attributes? interfaceMemberModifiers? anyType identifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? ";"s;

      interfaceGetAccessorDeclaration = attributes? "get"s ";"s;
      interfaceSetAccessorDeclaration = attributes? "set"s ";"s;
      interfaceAccessorDeclarations_1 = interfaceGetAccessorDeclaration interfaceSetAccessorDeclaration?;
      interfaceAccessorDeclarations_2 = interfaceSetAccessorDeclaration interfaceGetAccessorDeclaration?;
      interfaceAccessors = interfaceAccessorDeclarations_1 / interfaceAccessorDeclarations_2;
      interfacePropertyDeclaration = attributes? interfaceMemberModifiers? anyType identifier "{"s interfaceAccessors "}"s;

      interfaceEventDeclaration = attributes? interfaceMemberModifiers? "event"s anyType identifier ";"s;

      interfaceIndexerDeclaration = attributes? interfaceMemberModifiers? anyType "this"s "["s formalParameterList "]"s "{"s interfaceAccessors "}"s;

      interfaceMemberDeclaration  = interfaceEventDeclaration
                                  / interfaceIndexerDeclaration
                                  / interfaceMethodDeclaration
                                  / interfacePropertyDeclaration;
      interfaceMemberDeclarations = interfaceMemberDeclaration*;
      interfaceBody = "{"s interfaceMemberDeclarations "}"s;

      interfaceModifier = ("new" / "public" / "protected" / "internal" / "private")s;
      interfaceModifiers = interfaceModifier+;
      interfaceBase = classBase;
      interfaceDeclaration = attributes? interfaceModifiers? ("partial"s)? "interface"s identifier variantTypeParameterList? interfaceBase? typeParameterConstraintsClauses? interfaceBody (";"s)?;
      
      #endregion

      #region Enum

      enumBase = ":"s integralType;

      enumMemberDeclaration = attributes? identifier ("="s constantExpression)?;
      enumMemberDeclarations = enumMemberDeclaration (","s enumMemberDeclaration)* (","s)?;
      enumBody = "{"s enumMemberDeclarations? "}"s;

      enumModifier = ("new" / "public" / "protected" / "internal" / "private")s;
      enumModifiers = enumModifier+;
      enumDeclaration = attributes? enumModifiers? "enum"s identifier enumBase? enumBody (";"s)?;

      #endregion

      #region Delegate

      delegateModifier = ("new" / "public" / "protected" / "internal" / "private")s;
      delegateModifiers = delegateModifier+;
      delegateDeclaration = attributes? delegateModifiers? "delegate"s anyType identifier variantTypeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? ";"s;

      #endregion

      #region Attributes

      attributeArgumentExpression = expression;
      positionalArgument = argumentName? attributeArgumentExpression !"="; // don't allow '=' because of namedArgument
      positionalArgumentList = positionalArgument (","s positionalArgument)*;
      namedArgument = identifier "="s attributeArgumentExpression;
      namedArgumentList = namedArgument (","s namedArgument)*;
      attributeArgumentList_all = positionalArgumentList (","s namedArgumentList)?;
      attributeArgumentList_named = namedArgumentList;
      attributeArgumentList = attributeArgumentList_all / attributeArgumentList_named;
      attributeArguments = "("s attributeArgumentList? ")"s;
      attributeName = typeName;
      attribute = attributeName attributeArguments?;
      attributeList = attribute (","s attribute)*;

      globalAttributeTarget = ("assembly" / "module")s;
      globalAttributeTargetSpecifier = globalAttributeTarget ":"s;
      globalAttributeSection = "["s globalAttributeTargetSpecifier attributeList (","s)? "]"s;
      globalAttributes = globalAttributeSection*;

      attributeTarget = ("field" / "event" / "method" / "param" / "property" / "return" / "type")s;
      attributeTargetSpecifier = attributeTarget ":"s;
      attributeSection = "["s attributeTargetSpecifier? attributeList (","s)? "]"s;
      attributes = attributeSection+;

      #endregion

      start : object = compilationUnit !any;
    }
  )]
  public partial class Parser {
    start(x : NToken, _ : NToken) : object {
      x.GetText()
    }
  }

}