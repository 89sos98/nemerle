using System;
using System.IO;
using System.Console;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Peg;
using Nemerle.Utility;

namespace csparser
{
  module Program
  {
    Main(fileMasks : array[string]) : void
    {
      def timer = Diagnostics.Stopwatch.StartNew();
      mutable totalFiles = 0;
      mutable totalFails = 0;
      foreach(nextMask in fileMasks)
      {
        def (nextFiles, nextFails) = ProcessFiles(nextMask);
        totalFiles += nextFiles;
        totalFails += nextFails;
      }
      def elapsedTime = timer.Elapsed;
      if(totalFiles > 0)
        if(totalFails == 0)
          WriteLine($"Successfully parsed $totalFiles files in $elapsedTime.");
        else
          WriteLine($"Failed to parse $totalFails of $totalFiles files in $elapsedTime.");
      else
        WriteLine("No files to parse.");
    }

    ProcessFiles(fileMask : string) : int * int
    {
      mutable files = 0;
      mutable fails = 0;

      def maskFileDir =
        match(Path.GetDirectoryName(fileMask))
        {
          | "" => Environment.CurrentDirectory
          | x => x
        }
      def maskFileName = Path.GetFileName(fileMask);
      def fileNames =
        if(fileMask.IndexOfAny(array['*', '?']) >= 0)
          Directory.GetFiles(maskFileDir, maskFileName, SearchOption.AllDirectories)
        else
          Directory.GetFiles(maskFileDir, maskFileName);

      foreach(fileName in fileNames)
      {
        files += 1;
        try
        {
          def parser = CSharpParser.Parser();
          def source = SourceSnapshot(File.ReadAllText(fileName), 1, fileName);
          when(parser.Parse(source) is None())
          {
            fails += 1;

            def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
            def errorLocation = source.GetSourceLine(errorPos);
            def line = errorLocation.StartLineColumn[0];
            def col = errorPos - errorLocation.StartPos + 1;
            WriteLine($"Failed to parse file `$fileName'");
            WriteLine($"[$line:$col]:");
            WriteLine(errorLocation.GetText().TrimEnd(array['\r', '\n', '\u2028', '\u2029']));
            repeat(col - 1)
              Write('-');
            WriteLine('^'); // error pointer
          }
        }
        catch
        {
          | e is Exception =>
            fails += 1;
            WriteLine($"Failed to parse file `$fileName'");
            WriteLine(e);
        }
      }

      (files, fails)
    }
  }
}