using Nemerle.Collections;
using System.Collections.Generic;

class SchemePointBase {}
class SchemePoint : SchemePointBase {}

interface ISchemeGlyph
{
  Points : IEnumerable[SchemePointBase] {get;}
}

class SchemeItemList[T] : List[T] {}

class PointList : SchemeItemList[SchemePoint] {}
class GlyphList : SchemeItemList[ISchemeGlyph] {}

class Scheme
{
  public Glyphs : GlyphList { get; set; }
  public Points : PointList { get; set; }
}

public module Program
{
  public static Concat[TSource](this first : IEnumerable[TSource], second : IEnumerable[TSource]) : IEnumerable[TSource]
  {
    foreach (x in first)
      yield x;

    foreach (x in second)
      yield x;
  }

  Main() : void
  {
    def scheme = Scheme();
    _ = scheme.Points.Concat(scheme.Glyphs.MapLazy(_.Points).Flatten()); // E: none of the overloads of Points is possible
  }
}