using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.Text.RegularExpressions;

partial class RsdnMl
{
  _rxParseSubPart : Regex = Regex("(\w+)\:\s*([;]*);", RegexOptions.Compiled);
  
  _hendlers : Hashtable[string, (string * string -> string)] = Hashtable(
    array[("Версия",          ParsePart),
          ("Дата",            ParsePart), 
          ("Автор",           ParseAuthor), 
          ("Переводчик",      ParseAuthor), 
          ("Источник",        ParsePart),
          ("Предоставил(и)",  ParseAuthor)]);
          
  ParsePart(prefix : string, part : string) : string
  {
    assert2(part.StartsWith(prefix, StringComparison.InvariantCultureIgnoreCase));
    assert2(part[prefix.Length] == ':');
    part.Substring(prefix.Length + 1).Trim()
  }
  
  ParseAuthor(prefix : string, metadata : string) : string
  {
    def metadata = ParsePart(prefix, metadata);
    def prefixes = array["ФИО", "E-Mail", "Номер профиля на rsdn.ru", "Телефон", 
      "Адрес", "Место работы", "Должность", "Место учебы", "Научная степень", "Звание"];
    def all = metadata + ";";
    def parts = all.Split(array[';'], StringSplitOptions.RemoveEmptyEntries)
                   .MapToArray(x => x.TrimStart());
                   
    foreach (part in parts)
    {
      def m = _rxParseSubPart.Match(part);
      when (m.Success)
      {
        def pref = m.Groups[1];
        def body = m.Groups[2];
      }
    }
    
    parts.ToString(" -- ")
  }
  
  ParseMetadata(metadata : string) : string
  {
    def metadata = metadata.Replace("\r\n", "\n").Replace("\r", "\n");
    def parts    = metadata.Split(array['\n'], StringSplitOptions.RemoveEmptyEntries)
                        .MapToArray(x => x.Trim());
  }
}
