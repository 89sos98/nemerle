using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  internal variant Rule
  {
  | Choice { rules : list[Rule]; }
  | Sequence { rules : list[Rule]; }
  | Call { name : string; }
  | RepeatMin { minCount : int; rule : Rule; }
  | RepeatMinMax { minCount : int; maxCount : int; rule : Rule; }
  | Chars { chars : list[RangeSet]; }
  | Not { rule : Rule; }
  | And { rule : Rule; }
  | Capture { name : string; rules : Rule; }
  | ExtensionPoint { name : string; }
  }

  module RuleUtil
  {
    public GetHashCode(rule : Rule) : int
    {
      unchecked
      {
        def hash = match (rule)
        {
        | Choice(rules)            => 0x32455423 + rules.Fold(0x38139107, (rule, hash) => ((hash + GetHashCode(rule)) ^ 0x12521825) + hash)
        | Sequence(rules)          => 0x78345143 + rules.Fold(0x71374640, (rule, hash) => ((hash + GetHashCode(rule)) ^ 0x71238134) + hash)
        | Call(name)               => 0x67345897 + name.GetHashCode()
        | RepeatMin(n, rule)       => 0x12347825 + GetHashCode(rule) + n
        | RepeatMinMax(n, x, rule) => 0x54310854 + ((GetHashCode(rule) + x) ^ n)
        | Chars(rset)              => 0x13545901 + rset.GetHashCode();
        | Not(rule)                => 0x54697813 + GetHashCode(rule)
        | And(rule)                => 0x45897144 + GetHashCode(rule)
        | ExtensionPoint(name)     => 0x62424534 + name.GetHashCode()
        | Capture(name, rule)      => 0x78092346 + name.GetHashCode() + GetHashCode(rule)
        }
        (hash >> 7) + hash;
      }
    }

    public Equals(l : Rule, r : Rule) : bool
    {
    | (Choice(rules1)              , Choice(rules2)              ) => rules1.Equals(rules2, Equals)
    | (Sequence(rules1)            , Sequence(rules2)            ) => rules1.Equals(rules2, Equals)
    | (Call(name1)                 , Call(name2)                 ) => name1.Equals(name2)
    | (RepeatMin(n1, rule1)        , RepeatMin(n2, rule2)        ) => n1 == n2 && Equals(rule1, rule2)
    | (RepeatMinMax(n1, x1, rule1) , RepeatMinMax(n2, x2, rule2) ) => n1 == n2 && x1 == x2 && Equals(rule1, rule2)
    | (Chars(rset1)                , Chars(rset2)                ) => rset1.Equals(rset2);
    | (Not(rule1)                  , Not(rule2)                  ) => Equals(rule1, rule2)
    | (And(rule1)                  , And(rule2)                  ) => Equals(rule1, rule2)
    | (ExtensionPoint(name1)       , ExtensionPoint(name2)       ) => name1.Equals(name2)
    | (Capture(name1, rule1)       , Capture(name2, rule2)       ) => Equals(rule1, rule2) && name1.Equals(name2)
    | _                                                            => false
    }
  }
}
