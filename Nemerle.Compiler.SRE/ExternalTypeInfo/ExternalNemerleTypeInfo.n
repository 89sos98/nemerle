/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler.Sre
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    private class ExternalNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl          : TypeDeclaration;
      constant_object : IField;

      public this (lib : LibraryReference, h : System.Type, ns_node : NamespaceTree.Node)
      {
        base(lib, h, ns_node);

        mutable isVariant;
        mutable variantOptionNames;
        foreach(attr in CustomAttributeUtils.GetAttribute(system_type, "Nemerle.Internal.VariantAttribute", false))
        {
          variantOptionNames = NString.Split(late(attr.VariantOptions) :> string, array [',']);
          isVariant = true;
        }
        otherwise
          isVariant = false;

        if (isVariant)
        {
          def get_opt (name : string, index : int)
          {
            match (lib.LibRefManager.NameTree.LookupExactType(NString.Split (name, array ['.', '+'])))
            {
              | Some (tc is ExternalNemerleTypeInfo) =>
                tc.VariantOptionCode = index;
                tc
              | Some => assert(false);

              | None =>
                if (lib.LibRefManager.IsAssemblyLoaded(system_type.Assembly.FullName))
                {
                  System.Diagnostics.Debug.Assert(false);
                  Util.ice($"cannot find variant option named $name")
                }
                else //Требует перевода: Тип может быть не загружен в следствии того, что на библиотеку
                {    // не было ссылки в проекте. Загружаем библиотеку и пробуем повторить операци. Возможно это не лучшее решение!
                  lib.LibRefManager.AddAssembly(system_type.Assembly);
                  lib.LibRefManager.LoadLibrariesContents();
                  get_opt(name, index)
                }
            }
          }

          mutable variantOptions = [];
          mutable index = 0;
          foreach(name in variantOptionNames)
          {
            variantOptions ::= get_opt(name, index);
            ++index;
          }

          tydecl = TypeDeclaration.Variant (variantOptions.Rev());
        } 
        else if (CustomAttributeUtils.IsAttributeDefined(system_type, "Nemerle.Internal.VariantOptionAttribute", false))
          tydecl = TypeDeclaration.VariantOption();
        else if (CustomAttributeUtils.IsAttributeDefined(system_type, "Nemerle.Internal.ConstantVariantOptionAttribute", false))
        {
          tydecl = TypeDeclaration.VariantOption ();

          match (LookupMember ("_N_constant_object"))
          {
            | [fld] => constant_object = fld :> IField
            | _     => Util.ice ("cannot find _N_constant_object")
          }
        } 
        else if (CustomAttributeUtils.IsAttributeDefined(system_type, "Nemerle.Internal.TypeAliasAttribute", false))
        {
          mutable aliasedTypeName;
          foreach(attr in CustomAttributeUtils.GetAttribute(system_type, "Nemerle.Internal.TypeAliasAttribute", false))
            aliasedTypeName = late(attr.AliasedType) :> string;
          tydecl = TypeDeclaration.Alias(TyCodec.DecodeType (lib, tenv, aliasedTypeName))
        }
        else if (system_type.IsInterface)
          tydecl = TypeDeclaration.Interface()
        else if (system_type.IsEnum)
          tydecl = TypeDeclaration.Enum()
        else
          tydecl = TypeDeclaration.Class();

        decode_extension_patterns();
      }
      //TODO: ValdD2: Rename this
      public override GetTydecl()         : TypeDeclaration { tydecl }
      public override GetConstantObject() : IField          { constant_object }

      decode_extension_patterns () : void
      {
        foreach(attr in CustomAttributeUtils.GetAttribute(system_type, "Nemerle.Internal.ExtensionPatternEncodingAttribute", false))
        {
          def ids = late(attr.Identifiers) :> string;
          def pat = late(attr.Pattern) :> string;
          def name = late(attr.Name) :> string;
          def ext = ExtensionPattern (parent      = this,
                                      identifiers = NString.Split (ids, [',']),
                                      pattern     = MainParser.ParseExpr (Manager.CoreEnv, pat),
                                      name        = name);
                                      
          AddExtensionPattern (ext);
        }
      }
    }
  }
} /* namespace */
