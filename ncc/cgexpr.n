/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.IO;

using Nemerle.Compiler.CGexpr;
using Nemerle.Compiler.Tyops;
using Nemerle.Compiler.Typedtree;

using System.Reflection;

using SR = System.Reflection;

namespace Nemerle.Compiler {

public module CGexpr
{
  internal cg_type (ctx : CTX, t : Type) : System.Type
  {
    cg_type (ctx.current_type.GetSystemType (), t)
  }

  internal tuple_type (len : int) : System.Type
  {
    InternalType.GetTupleType (len).SystemType
  }
  
  function_type (len : int) : System.Type
  {
    InternalType.GetFunctionType (len).SystemType
  }

  get_apply_method (parm_cnt : int) : IMethod
  {
    InternalType.GetFunctionType (parm_cnt).ApplyMethod
  }

  internal tuple_ref (val : CExpr, pos : int, len : int) : CExpr
  {
    def fld = InternalType.GetTupleType (len).GetField (pos);
    CExpr.CE_field_ref (val, fld.GetFieldInfo ())
  }

  tuple_ctor (vals : list <CExpr>) : CExpr
  {
    def len = List.Length (vals);
    def ctor = InternalType.GetTupleType (len).Ctor.GetConstructorInfo ();
    CExpr.CE_call (CExpr.CE_ctor_ref (ctor), vals)
  }

  make_ref_type (t : System.Type) : System.Type
  {
    def ty = t.Module.GetType (t.FullName + "&");
    assert (ty != null);
    ty
  }
  
  public cg_type (tybuilder : System.Type, t : Type) : System.Type
  {
    match (Tyutil.top_expand (t)) {
      | Type.T_void => SystemType.Void
      | Type.T_prod (l) =>
        tuple_type (List.Length (l))
      | Type.T_fun (args, _) => 
        function_type (List.Length (Tyutil.fun_args (args)))
      | Type.T_var (tv) =>
        match (Tyvar.constraints (tv)) {
          | [] => SystemType.Object
          | t :: _ => cg_type (tybuilder, t)
        }

      | Type.T_app (ti, _) => 
        def ret = ti.GetSystemType ();
        assert (ret != null);
        ret
        
      | Type.T_ref (et) | Type.T_out (et) =>
        make_ref_type (cg_type (tybuilder, et))
        
      | Type.T_array (et, rank) =>
        def et = cg_type (tybuilder, et);
        def rankstr = "[" + System.String (',', rank - 1) + "]";
        def ty = tybuilder.Module.GetType (et.FullName + rankstr);
        if (ty == null) {
          def arr = System.Array.CreateInstance (et, (array (rank) : array <int>));
          when (arr == null)
            Util.ice ("unbound array type " + et.FullName + rankstr);
          arr.GetType ()
        } else {
          ty
        }
    }
  }

  [Record]
  public class CTX
  {
    public mutable current_fun : Fun_header;
    public mutable current_fun_or_loop : Fun_header;
    public mutable current_closure : option <CG_val>;
    public mutable closure_fields : SystemMap <int, FieldInfo>;
    public mutable closure_ptrs : SystemMap <int, FieldInfo>;
    public mutable locals : SystemMap <int, CG_val>;
    public mutable current_type : TypeBuilder;
    public mutable current_loop : option <CExpr.CE_loop>;
  }

  copy_ctx (c : CTX) : CTX 
  {
    CTX (current_fun = c.current_fun,
         current_closure = c.current_closure,
         closure_fields = c.closure_fields,
         closure_ptrs = c.closure_ptrs,
         locals = c.locals,
         current_type = c.current_type,
         current_loop = c.current_loop,
         current_fun_or_loop = c.current_fun_or_loop)
  }

  empty_ctx (ti : TypeBuilder) : CTX
  {
    CTX (current_fun = null,
         current_fun_or_loop = null,
         current_closure = None (),
         closure_fields = SystemMap (),
         closure_ptrs = SystemMap (),
         locals = SystemMap (),
         current_type = ti,
         current_loop = None ())
  }

  store_in_closure (ctx : CTX, d : LocalValue, val : CExpr) : CExpr
  {
    match (ctx.current_closure) {
      | Some (clo) =>
        def rf = CExpr.CE_field_ref (CExpr.CE_ref (clo), ctx.closure_fields.Get (d.id));
        CExpr.CE_assign (rf, val)
      | None =>
        Message.warning ("no local closure for " + d.name);
        Util.ice ()
    }
  }

  internal store_local (ctx : CTX, d : LocalValue, val : CExpr) : CTX * CG_val
  {
    def var_ty = cg_type (ctx, d.ty);
    def val =
      match (val) {
        | CExpr.CE_none => val
        | _ when type_of (val).IsValueType && !var_ty.IsValueType => 
          CExpr.CE_cast (val, var_ty, true)
        | _ => val
      };
      if (d.in_closure) {
        def assign = store_in_closure (ctx, d, val);
        def cgv = CG_val (loc = d.loc, 
                          name = Util.tmpname ("dummy"),
                          ty = SystemType.Void, 
                          val = assign);
        (copy_ctx (ctx), cgv)
      } else {
        def cgv = CG_val (loc = d.loc, 
                          name = decl_uniq_name(d), 
                          ty = var_ty,
                          val = val);
        def ctx' = copy_ctx (ctx);
        ctx'.locals = ctx.locals.Add (d.id, cgv);
        (ctx', cgv)
      }
  }

  closure_ref (ctx : CTX, fn : Fun_header) : CExpr
  {
    if (ctx.current_fun.id == fn.id)
      CExpr.CE_ref (Option.UnSome (ctx.current_closure))
    else
      CExpr.CE_field_ref (CExpr.CE_this (), ctx.closure_ptrs.Get (fn.id))
  }

  public type_of (ex : CExpr) : System.Type
  {
    if (ex.ty != null) ex.ty
    else {
      def ty =
        match (ex) {
          | CExpr.CE_ref (d) => d.ty
          | CExpr.CE_global_ref (obj)
          | CExpr.CE_volatile_global_ref (obj) =>
            if (obj.MemberType %&& MemberTypes.Field)
              (obj :> FieldInfo).FieldType
            else if (obj.MemberType %&& MemberTypes.Property)
              (obj :> PropertyInfo).PropertyType
            else
              Util.ice ("strange global ref")
              
          | CExpr.CE_field_ref (_, f)
          | CExpr.CE_volatile_field_ref (_, f) => f.FieldType

          | CExpr.CE_method_addr => SystemType.IntPtr
          
          | CExpr.CE_tail_call (CExpr.CE_global_ref (m), _)
          | CExpr.CE_call (CExpr.CE_global_ref (m), _) => (m :> MethodInfo).ReturnType
          
          | CExpr.CE_tail_call (CExpr.CE_method_ref (_, m, _), _)
          | CExpr.CE_call (CExpr.CE_method_ref (_, m, _), _) => m.ReturnType
          
          | CExpr.CE_tail_call (CExpr.CE_ctor_ref (c), _)
          | CExpr.CE_call (CExpr.CE_ctor_ref (c), _) => c.DeclaringType
          
          | CExpr.CE_tail_call (CExpr.CE_base_ctor_ref, _)
          | CExpr.CE_call (CExpr.CE_base_ctor_ref, _) => SystemType.Void

          | CExpr.CE_typeof => SystemType.Type

          | CExpr.CE_addr (expr) => make_ref_type (type_of (expr))

          | CExpr.CE_indirect (expr) =>
            def ty = type_of (expr);
            def ety = ty.GetElementType ();
            assert (ty.IsByRef && ety != null);
            ety

          | CExpr.CE_loop (expr, _) => type_of (expr)
          
          | CExpr.CE_self_tail_call
          | CExpr.CE_tail_call
          | CExpr.CE_call => Util.ice ("strange call")
          
          | CExpr.CE_multiple_assign
          | CExpr.CE_assign => SystemType.Void
          | CExpr.CE_let (_, b) => type_of (b)
          | CExpr.CE_has_type => SystemType.Boolean
          | CExpr.CE_not_null => SystemType.Void
          | CExpr.CE_continue_loop
          | CExpr.CE_raise => SystemType.Void
          | CExpr.CE_if (_, _, _) => Util.ice ("ought to be cached")
          | CExpr.CE_try_with (e, _, _) => type_of (e)
          | CExpr.CE_try_finally (e, _) => type_of (e)
          | CExpr.CE_literal (l) => 
            match (l) {
              | Literal.L_void => SystemType.Void
              | Literal.L_null => SystemType.Object
              | Literal.L_byte => SystemType.Byte
              | Literal.L_sbyte => SystemType.SByte
              | Literal.L_short => SystemType.Int16
              | Literal.L_ushort => SystemType.UInt16                
              | Literal.L_int => SystemType.Int32
              | Literal.L_uint => SystemType.UInt32                
              | Literal.L_long => SystemType.Int64
              | Literal.L_ulong => SystemType.UInt64                
              | Literal.L_char => SystemType.Char
              | Literal.L_string => SystemType.String
              | Literal.L_float => SystemType.Single
              | Literal.L_double => SystemType.Double
              | Literal.L_decimal => SystemType.Decimal                
              | Literal.L_bool => SystemType.Boolean
              | Literal.L_enum (l, _) => type_of (CExpr.CE_literal (l))
            }
          | CExpr.CE_this => SystemType.Object // cheat a bit 
          | CExpr.CE_cast (_, t, _) => t
          | CExpr.CE_sequence (b) => type_of (List.Last (b))
          | CExpr.CE_switch (_, default_expr, switch_cases) =>
            match (default_expr) {
              | Some (expr) => type_of (expr)
              | _ =>
                def (_, expr) = List.Last (switch_cases);
                type_of (expr)
            }
          | CExpr.CE_init_obj (t) => t

          | CExpr.CE_mkarray 
          | CExpr.CE_array_indexer (_, _) => Util.ice ("should be cached")
          | CExpr.CE_opcode => Util.ice ("opcode")
          | CExpr.CE_ignore => SystemType.Void

          // can't tell
          | CExpr.CE_none => Util.ice ("none")

          // these are supported only as part of call
          | CExpr.CE_ctor_ref => Util.ice ("ctorref")
          | CExpr.CE_method_ref => Util.ice ("methodref")
          | CExpr.CE_base_ctor_ref => Util.ice ("basectorref")
        };
      ex.ty = ty;
      ty
    }
  }

  box_value (body : CExpr) : CExpr 
  {
    if (type_of (body).IsValueType || SystemType.Void.Equals (type_of (body)))
      CExpr.CE_cast (body, SystemType.Object, true)
    else
      body
  }

  unbox_value (body : CExpr, ty : System.Type) : CExpr 
  {
    if (SystemType.Void.Equals (ty))
      CExpr.CE_ignore (body)
    else
      CExpr.CE_cast (body, ty, true)
  }


  /**
   * Matching -- wrapper for the CGmatch module functionality.
   */
  cg_match (t : System.Type, ctx : CTX, val : CExpr, mcs : list <Match_case>) : CExpr
  {
    CGmatch.cg_match (t, ctx, val, mcs)
  }


  set_parm_info (fp : Fun_parm, v : CG_val) : CG_val
  {
    def kind =
      match (fp.ty) {
        | Type.T_ref => ParmKind.Ref
        | Type.T_out => ParmKind.Out
        | _ => ParmKind.Normal
      };
    v.parm_info = CG_parm_info (parm_kind = kind, 
                                modifiers = fp.modifiers);
    v
  }
    

  set_parm_info (ty : Type, v : CG_val) : CG_val
  {
    def kind =
      match (ty) {
        | Type.T_ref => ParmKind.Ref
        | Type.T_out => ParmKind.Out
        | _ => ParmKind.Normal
      };
    v.parm_info = CG_parm_info (parm_kind = kind, 
                                modifiers = Modifiers.Empty);
    v
  }
    

  // always return a new copy
  build_cg_method (tybuilder : System.Type, header : Fun_header) : CG_method
  {
    def mkparm (p : Fun_parm) : CG_val {
      match (p.ty) {
        | Type.T_void =>
          // FIXME: do something about it
          Message.fatal_error (header.loc, "method `" + header.name + "' has void argument")
        | _ => ()
      };
      set_parm_info (p, 
        CG_val (loc = header.loc,
                name = p.name, 
                ty = cg_type (tybuilder, p.ty),
                val = CExpr.CE_none ()))
    };
    def m = CG_method ();
    m.name = header.name;
    m.ret_type = cg_type (tybuilder, header.ret_type);
    m.parms = List.Map (header.parms, mkparm);
    m.implemented_methods = [];
    m
  }
  
  build_cg_method (ctx : CTX, header : Fun_header) : CG_method
  {
    build_cg_method (ctx.current_type.GetSystemType (), header)
  }

  fixup_cg_method (meth : IMethod) : void
  {
    def cgm = GetCgMethod (meth);
    cgm.modifiers = meth.Attributes;
  }

  public GetCgMethod (meth : IMethod) : CG_method
  {
    def header = meth.GetHeader ();
    when (header.cg_method == null) {
      def tb = meth.DeclaringType.GetSystemType ();
      header.cg_method = build_cg_method (tb, header);
      fixup_cg_method (meth);
    };
    header.cg_method
  }
  
  build_cg_method (ctx : CTX, meth : IMethod) : CG_method
  {
    build_cg_method (ctx, meth.GetHeader ())
  }

  // return cached copy for given method
  get_cg_method (ctx : CTX, header : Fun_header) : CG_method
  {
    when (header.cg_method == null) {
      header.cg_method = build_cg_method (ctx, header);
    };
    header.cg_method;
  }
  
  make_untupled_parms (tuple_expr : CExpr, parm_cnt : int) : list <CExpr>
  {
    if (parm_cnt == 0)
      []
    else {
      def tup = CExpr.CE_cast (tuple_expr, tuple_type (parm_cnt), true);
      def mkparm (acc, i) {
        if (i == 0) acc
        else mkparm (tuple_ref (tup, i, parm_cnt) :: acc, i - 1)
      };
      mkparm ([], parm_cnt)
    }
  }

  make_tupled_method (ctx : CTX, parm_cnt : int) : CG_method
  {
    def cgm = build_cg_method (ctx, get_apply_method (1));
    def parms = make_untupled_parms (CExpr.CE_ref (List.Head (cgm.parms)), parm_cnt);
    def meth = get_apply_method (parm_cnt);
    def multi_apply = CExpr.CE_method_ref (CExpr.CE_this (), meth.GetMethodInfo (), false);
    cgm.body = CExpr.CE_call (multi_apply, parms);
    cgm.implemented_methods = [get_apply_method (1)];
    cgm.modifiers = NemerleAttributes.Internal;
    cgm
  }

  make_untupled_method (ctx : CTX, parm_cnt : int) : CG_method
  {
    def cgm = build_cg_method (ctx, get_apply_method (parm_cnt));
    
    def mkparm (v) { CExpr.CE_ref (v) };
    def parm = 
      match (cgm.parms) {
        | [] => CExpr.CE_literal (Literal.L_null ())
        | _ => maybe_cast (ctx, SystemType.Object, tuple_ctor (List.Map (cgm.parms, mkparm)))
      };

    def meth = get_apply_method (1);
    def single_apply = CExpr.CE_method_ref (CExpr.CE_this (), meth.GetMethodInfo (), false);
    
    cgm.body = CExpr.CE_call (single_apply, [parm]);
    cgm.implemented_methods = [get_apply_method (parm_cnt)];
    cgm.modifiers =  NemerleAttributes.Internal;
    cgm
  }

  get_lambda_proxy (ctx : CTX, meth : IMethod) : ConstructorInfo
  {
    def cg_method = GetCgMethod (meth);
    when (cg_method.lambda_ctor == null) {
      // FIXME: we should generate proxies in module *or* in the class depending
      // on permissions
      //def mod = (ctx.current_type.GetSystemType ().Module :> ModuleBuilder);
      def parm_cnt = List.Length (cg_method.parms);
      def impl =
        if (parm_cnt == 1)
          array [function_type (1)]
        else
          array [function_type (parm_cnt), function_type (1)];

      def tb = ctx.current_type.GetTypeBuilder ().
                DefineNestedType (fun_uniq_name (meth.GetHeader ()), 
                                  TypeAttributes.SpecialName %| TypeAttributes.NestedAssembly,
                                  SystemType.Object, impl);
      Passes.cgil.RegisterAuxType (tb);
      cg_method.lambda_ctor = Passes.cgil.AddImplicitCtor (tb);
      
      // get separate copy
      def cgm = build_cg_method (ctx, meth);
      cgm.name = "apply";
      cgm.implemented_methods = [get_apply_method (parm_cnt)];
      cgm.modifiers =  NemerleAttributes.Internal;
      
      def mkparm (v : CG_val) {
        def t = v.ty;
        v.ty = SystemType.Object;
        CExpr.CE_cast (CExpr.CE_ref (v), t, true)
      };
      cgm.ret_type = SystemType.Object;
      def fn =
        match (meth.GetFunKind ()) {
          | Fun_kind.FK_ctor => CExpr.CE_ctor_ref (meth.GetConstructorInfo ())
          | _ => CExpr.CE_global_ref (meth.GetMethodInfo ())
        };
      cgm.body = box_value (CExpr.CE_call (fn, List.Map (cgm.parms, mkparm)));

      Passes.cgil.AddMethod (ctx.current_type, cgm, tb);
      when (parm_cnt != 1)
        Passes.cgil.AddMethod (ctx.current_type, make_tupled_method (ctx, parm_cnt), tb);
    };
    
    cg_method.lambda_ctor
  }

  global_ref (ctx : CTX, m : IMember) : CExpr {
    match (m.GetKind ()) {
      | MemberKind.MK_type => assert (false)
      | MemberKind.MK_event => assert (false)

      | MemberKind.MK_field (f) =>
        if (f.IsLiteral) {
          match (ConstantFolder.FieldValueAsLiteral (f)) {
            | Some (lit) =>
              // this is kinda last resort, we should have converted it during
              // constant folding, but if we have missed it, do it here, as cgil
              // will fail to generate proper code for this.
              //Message.debug ("converting literal field `" + f.Name + "' to literal");
              CExpr.CE_literal (lit)
            | None =>
              if (f.IsVolatile)
                CExpr.CE_volatile_global_ref (f.GetFieldInfo ())
              else
                CExpr.CE_global_ref (f.GetFieldInfo ())
          }
        } else
          if (f.IsVolatile)
            CExpr.CE_volatile_global_ref (f.GetFieldInfo ())
          else
            CExpr.CE_global_ref (f.GetFieldInfo ())

      | MemberKind.MK_property (f) =>
        CExpr.CE_global_ref (f.GetPropertyInfo ())
        
      | MemberKind.MK_method (f) =>
        CExpr.CE_call (CExpr.CE_ctor_ref (get_lambda_proxy (ctx, f)), [])
    }
  }

  internal local_ref (ctx : CTX, d : LocalValue) : CExpr
  {
    if (d.in_closure) {
      def defined_in = d.parent_fun;
      CExpr.CE_field_ref (closure_ref (ctx, defined_in), 
                    ctx.closure_fields.Get (d.id))
    } else if (ctx.locals.Member (d.id)) {
      match (d.kind) {
        | LocalValueKind.D_fun_parm (kind) 
          when kind == ParmKind.Out || kind == ParmKind.Ref =>
          def ty = make_ref_type (cg_type (ctx, d.ty));
          CExpr.CE_indirect (CExpr.CE_ref (ty, ctx.locals.Get (d.id)))
        | _ =>
          CExpr.CE_ref (ctx.locals.Get (d.id))
      }
    } else {
      match (d.kind) {
        | LocalValueKind.D_closurised_this_ptr => CExpr.CE_this ()
        | _ =>
          //Message.debug ("undef " + d.name + " = " + d.id.ToString ());
          Util.ice ("ref to undef val " + d.name)
      }
    }
  }

  internal maybe_cast (_ctx : CTX, needed_type : System.Type, ex : CExpr) : CExpr
  {
    assert (needed_type != null);
    def current_type = type_of (ex);
    assert (current_type != null);
    if (needed_type.Equals (SystemType.Void))
      if (current_type.Equals (SystemType.Void))
        ex
      else
        CExpr.CE_ignore (ex)
    else {
/*    
// bug in MS.NET makes it return false for IField[] and IField[]         
      when (needed_type.Equals (current_type) !=
            (needed_type.FullName == current_type.FullName))
        Message.debug (ex.loc, needed_type.Assembly.ToString () + " " + needed_type.ToString () + " " + 
                               current_type.Assembly.ToString () + " " + current_type.ToString ());
*/                               
      if (needed_type.FullName == current_type.FullName ||    
          (needed_type.IsAssignableFrom (current_type) && !current_type.IsValueType))
      ex
      else 
       CExpr.CE_cast (ex, needed_type, true)
    }
  }

  get_fn_header (fn : LocalValue) : Fun_header
  {
    match (fn.kind) {
      | LocalValueKind.D_local_fun (h, _) => h
      | _ => Util.ice ()
    }
  }

  /**
   * Properly format list of expression before being passed in a function
   * call -- box value types, and add needed downcasts.
   */
  casted_parms (ctx : CTX, formals : list <CG_val>, parms : list <CExpr>) : list <CExpr>
  {
    //Message.debug ("formals : " + formals.ToString () + " params : " + parms.ToString ());
    def parms = adjust_tupled_parms (ctx, List.Length (formals), parms);
    List.Map2 (formals, parms, 
      fun (v : CG_val, e) { 
        maybe_cast (ctx, v.ty, e) 
      })
  }

  casted_parms (ctx : CTX, formals : list <Fun_parm>, parms : list <Parm>) : list <CExpr>
  {
    def parms = List.Map (parms, fun (p : Parm) { cg_expr (ctx, p.expr) });
    def parms = adjust_tupled_parms (ctx, List.Length (formals), parms);
    List.Map2 (formals, parms, 
      fun (v : Fun_parm, e) { 
        maybe_cast (ctx, cg_type (ctx, v.ty), e) 
      })
  }

  /**
   * Split tuple to parameters or vice versa.
   */
  adjust_tupled_parms (ctx : CTX, formals_cnt : int, parms : list <CExpr>) : list <CExpr>
  {
    match ((formals_cnt, parms)) {
      | (x, [parm]) when x > 1 =>
        make_untupled_parms (parm, formals_cnt)
      | (1, _ :: _ :: _) =>
        def parms = List.Map (parms, 
          fun (e) { 
            maybe_cast (ctx, SystemType.Object, e) 
          });
        [tuple_ctor (parms)]
      | _ => parms
    }
  }

  /**
   * Construct proxy object for delegate invocation. Used when anything except
   * instance or static method is used for delegate construction (local 
   * function, functional value returned from somewhere etc).
   */
  // FIXME: it probably won't work with local delegates because of the delegate
  //        .ctor type hack in external.n
  emit_delegate_proxy (ctx : CTX, ctor : IMethod) : ConstructorInfo * CG_method
  {
    def fh = ctor.GetHeader ();
    match (fh.parms) {
      | [{ty = (Type.T_fun (parms, ret_type)) as fun_type}] =>
        def loc = fh.loc; // FIXME
        def parms = Tyutil.fun_args (parms);
        def tb = ctx.current_type.GetTypeBuilder ().
                  DefineNestedType (Util.tmpname ("delegate_proxy"),
                                    TypeAttributes.SpecialName %| TypeAttributes.NestedAssembly, 
                                    SystemType.Object, array []);    
        Passes.cgil.RegisterAuxType (tb);

        def fptr = tb.DefineField ("funptr", cg_type (ctx, fun_type), 
                                   FieldAttributes.SpecialName %| FieldAttributes.Assembly);
        def mkparm (ty) { 
          set_parm_info (ty,
                         CG_val (loc = loc,
                                 name = Util.tmpname ("dp"),
                                 ty = cg_type (ctx, ty),
                                 val = CExpr.CE_none ()))
        };
        
        def m = CG_method ();
        m.name = "InvokeDelegate";
        m.ret_type = cg_type (ctx, ret_type);
        m.parms = List.Map (parms, mkparm);
        m.modifiers = NemerleAttributes.Internal;
        m.implemented_methods = [];

        def apply = get_apply_method (List.Length (parms)).GetMethodInfo ();
        def meth = CExpr.CE_method_ref (CExpr.CE_field_ref (CExpr.CE_this (), fptr), apply, false);
        def mkparmref (v) { CExpr.CE_cast (CExpr.CE_ref (v), SystemType.Object, true) };
        def parms' = List.Map (m.parms, mkparmref);
        m.body = unbox_value (CExpr.CE_call (meth, parms'), m.ret_type);
      
        Passes.cgil.AddMethod (ctx.current_type, m, tb);

        def invoke_cgm = m;

        def m = CG_method ();
        m.name = ".ctor";
        m.ret_type = SystemType.Void;
        def ctor_parm =
          set_parm_info (Type.T_void (),
            CG_val (loc = loc,
                    name = Util.tmpname ("dp"),
                    ty = fptr.FieldType,
                    val = CExpr.CE_none ()));
        m.parms = [ctor_parm];
        m.modifiers = NemerleAttributes.Internal;
        m.implemented_methods = [];
        def assign = CExpr.CE_assign (CExpr.CE_field_ref (CExpr.CE_this (), fptr), CExpr.CE_ref (ctor_parm));
        m.body = CExpr.CE_sequence ([call_object_ctor (), assign]);
        
        Passes.cgil.AddConstructorBuilder (m, tb, false);
        Passes.cgil.EmitConstructor (ctx.current_type, m);

        ((m.constructor_builder : ConstructorInfo), invoke_cgm)
        
      | _ => assert (false)
    }
  }

  emit_delegate_ctor (ctx : CTX, m : IMethod, ps : list <Parm>) : CExpr
  {
    def the_problem () {
      Message.fatal_error ("delegate construction not supported for this expression")
    };
    def (this_ptr, cgm) = 
      match (ps) {
        | [{expr = Expr.E_static_ref (mem)}] =>
          match (mem.GetKind ()) { 
            | MemberKind.MK_method (meth) =>
              (CExpr.CE_literal (Literal.L_null ()), GetCgMethod (meth))
            | _ => 
              the_problem ()
          }
          
        | [{expr = Expr.E_method_ref (obj, mem, _notvirt)}] =>   // FIXME: use non virt?
          (CExpr.CE_cast (cg_expr (ctx, obj), SystemType.Object, true), GetCgMethod (mem))
          
        | [parm] =>
          def (ctor, invoke_cgm) = emit_delegate_proxy (ctx, m);
          (CExpr.CE_call (CExpr.CE_ctor_ref (ctor), [cg_expr (ctx, parm.expr)]), invoke_cgm)
          
        | _ => the_problem ()
      };
    assert (cgm.method_builder != null);
    
    CExpr.CE_call (CExpr.CE_ctor_ref (m.GetConstructorInfo ()), 
             [this_ptr, CExpr.CE_method_addr (cgm.method_builder)])
  }

  emit_loop (ctx : CTX, h : Fun_header, parms : list <Parm>) : CExpr
  {
    def ctx' = copy_ctx (ctx);
    def parms = casted_parms (ctx, h.parms, parms);
    def parm_vals = List.Map2 (h.parms, parms, fun (fp : Fun_parm, ap) {
      def val = CG_val (loc = fp.decl.loc, 
                        name = fp.name,
                        ty = cg_type (ctx, fp.ty),
                        val = ap);
      ignore (set_parm_info (fp, val));
      ctx'.locals = ctx'.locals.Add (fp.decl.id, val);
      val
    });
    ctx'.current_fun_or_loop = h;
    def loop = (CExpr.CE_loop (null, None ()) :> CExpr.CE_loop);
    ctx'.current_loop = Some (loop);
    loop.body = cg_expr (ctx', h.body);
    h.body = null;
    List.FoldLeft (List.Rev (parm_vals), (loop : CExpr), 
                   fun (v, expr) { CExpr.CE_let (v, expr) })
  }

  with_cached (expr : CExpr, f : CExpr -> CExpr) : CExpr
  {
    match (expr) {
      | CExpr.CE_ref
      | CExpr.CE_global_ref
      | CExpr.CE_volatile_global_ref
      | CExpr.CE_ctor_ref
      | CExpr.CE_method_addr
      | CExpr.CE_opcode
      | CExpr.CE_literal
      | CExpr.CE_this
      | CExpr.CE_typeof 
      | CExpr.CE_indirect (CExpr.CE_ref) =>
        f (expr)

      | _ =>
        def v = CG_val (loc = Location_stack.top (),
                        name = Util.tmpname ("cached"),
                        ty = type_of (expr),
                        val = expr);
        CExpr.CE_let (v, f (CExpr.CE_ref (v)))
    }
  }

  cg_call (ctx : CTX, is_tail : bool, ret_type : Type, 
           f : Expr, ps : list <Parm>) : CExpr
  {
    def compile_parm (p : Parm) {
      def ex = cg_expr (ctx, p.expr);
      if (p.kind == ParmKind.Out || p.kind == ParmKind.Ref)
        CExpr.CE_addr (ex)
      else
        ex
    };

    def emit_call (cgm : CG_method, callable) {
      def parms = List.Map (ps, compile_parm);
      def callable =
        match (callable) {
          | CExpr.CE_method_ref (e, meth, notvirt) when type_of (e).IsValueType && 
                                         !meth.DeclaringType.IsValueType =>
            CExpr.CE_method_ref (CExpr.CE_cast (e, meth.DeclaringType, true), meth, notvirt)
          | x => x
        };
      if (cgm == null) {
        def t = cg_type (ctx, ret_type);
        if (is_tail)
          CExpr.CE_tail_call (t, callable, parms)
        else
          CExpr.CE_call (t, callable, parms)
      } else {
        //Message.debug ("real casted params for " + cgm.name);
        def generate_call (parms) {
          if (is_tail)
            CExpr.CE_tail_call (callable, casted_parms (ctx, cgm.parms, parms))
          else
            CExpr.CE_call (callable, casted_parms (ctx, cgm.parms, parms))
        };
        
        def call =
          match ((parms, cgm.parms)) {
            | ([parm], _ :: _ :: _) =>
              // need to cache it, so casted_parms can untuple it
              with_cached (parm, fun (parm) { generate_call ([parm]) })
            | _ =>
              generate_call (parms)
          };
        maybe_cast (ctx, cg_type (ctx, ret_type), call)
      }
    };
    def plain_call () {
      def len = List.Length (ps);
      def imeth = get_apply_method (len);
      emit_call (GetCgMethod (imeth), CExpr.CE_method_ref (cg_expr (ctx, f), 
                                                     imeth.GetMethodInfo (), false))
    };
    
    match (f) {
      | Expr.E_static_ref (m) =>
        match (m.GetKind ()) {
          | MemberKind.MK_method (m) =>
            match (m.GetFunKind ()) {
              | _ when Option.IsSome (m.GetExternName ()) =>
                def opname = Option.UnSome (m.GetExternName ());
                assert (opname.StartsWith ("%op"));
                emit_call (null, CExpr.CE_opcode (opname.Substring (3)))
              | Fun_kind.FK_ctor =>
                if (m.DeclaringType.IsDelegate)
                  Util.locate (f.loc, emit_delegate_ctor (ctx, m, ps))
                else
                  emit_call (GetCgMethod (m), CExpr.CE_ctor_ref (m.GetConstructorInfo ()))
                  
              | _ =>
                emit_call (GetCgMethod (m), CExpr.CE_global_ref (m.GetMethodInfo ()))
            }
          | _ => plain_call ()
        }
      | Expr.E_opcode (name) =>
        emit_call (null, CExpr.CE_opcode (name))
      
      // check for this invisibly coerced to other type -- encoding for base
      // and force nonvirt then
      | Expr.E_method_ref ((Expr.E_local_ref { 
                         decl = { kind = LocalValueKind.D_closurised_this_ptr; 
                                  ty = Type.T_app (ti, _) };
                         ty = Type.T_app (ti', _) }) as o, m, false) 
                    when ! ti.SameAs (ti') =>
        emit_call (GetCgMethod (m), CExpr.CE_method_ref (cg_expr (ctx, o), m.GetMethodInfo (), true))
        
      | Expr.E_method_ref (o, m, notvirt) =>   
        emit_call (GetCgMethod (m), CExpr.CE_method_ref (cg_expr (ctx, o), m.GetMethodInfo (), notvirt))
      | Expr.E_base (m) =>
        emit_call (GetCgMethod (m), CExpr.CE_base_ctor_ref (m.GetConstructorInfo ()))
      | Expr.E_local_ref (d) =>
        match (d.kind) {
          | LocalValueKind.D_local_fun (({usage = FunctionUsage.UsedJustOnce}) as h, _) =>
            emit_loop (ctx, h, ps)
          | LocalValueKind.D_local_fun (h, _) when h.id == ctx.current_fun.id =>
            assert (h.cg_method.method_builder != null);
            emit_call (get_cg_method (ctx, h),
                       CExpr.CE_method_ref (CExpr.CE_this (), h.cg_method.method_builder, false))
          | _ => plain_call ()
        }
      | _ => plain_call ()
    }
  }

  raw_cg_expr (ctx : CTX, inex : Expr) : CExpr
  {
    //Message.debug ("emit");
    def self (e : Expr) : CExpr { cg_expr (ctx, e) };
    match (inex) {
      | Expr.E_local_ref (d) => 
        local_ref (ctx, d)

      | Expr.E_static_ref (d) => 
        global_ref (ctx, d)

      | Expr.E_field_ref (o, f) =>
        def field_ref =
          if (f.IsVolatile)
            CExpr.CE_volatile_field_ref (self (o), f.GetFieldInfo ())
          else
            CExpr.CE_field_ref (self (o), f.GetFieldInfo ());
            
        maybe_cast (ctx, cg_type (ctx, inex.ty), field_ref)

      | Expr.E_implicit_value_type_ctor (t) =>
        CExpr.CE_init_obj (t.GetSystemType ())

      | Expr.E_method_ref => Util.ice ("E_method_ref")
      | Expr.E_property_ref => Util.ice ("E_property_ref")
      | Expr.E_static_property_ref => Util.ice ("E_static_property_ref")
      | Expr.E_constant_object_ref (mem) =>
        Message.warning ("using a constant object reference directly");
        Message.warning ("  you probably have meant to write `" +
                         mem.DeclaringType.FullName + " ()'");
        def mems =
          mem.DeclaringType.LookupMember ("_N_constant_object_generator");
        match (mems) {
          | [mem] => global_ref (ctx, mem)
          | _ =>
            Message.error ("  no constant object generator method found");
            CExpr.CE_none ()
        }
      
      | Expr.E_typeof (t) =>
        CExpr.CE_typeof (cg_type (ctx, t))

      | Expr.E_self_tail_call (parms) =>
        def fn = ctx.current_fun_or_loop;
        match (fn.usage) {
          | FunctionUsage.UsedJustOnce =>
            def parms = casted_parms (ctx, fn.parms, parms);
            def assigns = 
              List.Map2 (parms, fn.parms, fun (expr, fp : Fun_parm) {
                (ctx.locals.Get (fp.decl.id), expr)
              });
            CExpr.CE_sequence ([CExpr.CE_multiple_assign (assigns), 
                          CExpr.CE_continue_loop (Option.UnSome (ctx.current_loop))])
          | _ =>
            def parms = List.Map (parms, fun (p : Parm) { self (p.expr) });
            // Message.debug ("self casted params for " + fn.cg_method.name);
            def parms = casted_parms (ctx, fn.cg_method.parms, parms);
            def t = cg_type (ctx, inex.ty);
            CExpr.CE_self_tail_call (t, parms)
        }

      | Expr.E_call (f, ps) =>
        cg_call (ctx, false, inex.ty, f, ps)
       
      | Expr.E_tail_call (f, ps) =>
        cg_call (ctx, true, inex.ty, f, ps)

      | Expr.E_assign (e1, e2) =>
        def e1 = self (e1);
        def e2 = self (e2);
        def e2 =
          if (type_of (e2).IsValueType && !type_of (e1).IsValueType)
            CExpr.CE_cast (e2, type_of (e1), true)
          else
            e2;
        CExpr.CE_assign (e1, e2)
        
      | Expr.E_mkarray (initializers, dimensions) =>
        def element_type =
          match (inex.ty) {
            | Type.T_array (t, _) => cg_type (ctx, t)
            | _ => assert (false)
          };
        def elt_is_value = element_type.IsValueType;
        def make_initializer (e) {
          def e = self (e);
          if (!elt_is_value && type_of (e).IsValueType)
            CExpr.CE_cast (e, element_type, true)
          else
            e
        };
        CExpr.CE_mkarray (ty = cg_type (ctx, inex.ty), 
                    element_type = element_type, 
                    initializers = List.Map (initializers, make_initializer),
                    dimensions = List.Map (dimensions, fun (x) { self (x) }))

      | Expr.E_array_indexer (ty, obj, args) =>
        match (Tyutil.top_expand (obj.ty)) {
          | Type.T_array => CExpr.CE_array_indexer (cg_type (ctx, ty), self (obj), List.Map (args, self))
          | _ => Util.ice ("E_array_indexer")
        }

      | Expr.E_let (d, v, b) =>
        if (d.ever_used) {
          def (ctx', cgv) = store_local (ctx, d, self (v));
          CExpr.CE_let (cgv, cg_expr (ctx', b))
        }
        else
          CExpr.CE_sequence ([CExpr.CE_ignore (self (v)), cg_expr (ctx, b)])

      | Expr.E_letfun (fs, body) =>
        mutable vals = [];
        def store (f : Function_decl, ctx : CTX) : CTX {
          def fh = get_fn_header (f.header.decl);
          match (fh.usage) {
            | FunctionUsage.UsedJustOnce =>
              ctx
            | _ =>
              def ct = make_lambda_ctor_call (ctx, fh);
              def (ctx, val) = store_local (ctx, f.header.decl, ct);
              vals = val :: vals;
              ctx
          }
        };
        def emit (f : Function_decl) {
          def fh = get_fn_header (f.header.decl);
          match (fh.usage) {
            | FunctionUsage.UsedJustOnce => 
              // used later in emit_loop
              fh.body = f.body
            | _ => emit_lambda_code (ctx, fh, f.body)
          }
        };
        def mklet (val, acc) { CExpr.CE_let (val, acc) };

        def ctx = List.FoldLeft (fs, ctx, store);
        List.Iter (fs, emit);
        List.FoldLeft (vals, cg_expr (ctx, body), mklet)

      | Expr.E_match (e, mcs) =>
        with_cached (cg_expr (ctx, e), 
          fun (e) { 
            cg_match (cg_type (ctx, inex.ty), ctx, e, mcs)
          });

      | Expr.E_raise (e) =>
        CExpr.CE_raise (cg_expr (ctx, e))

      | Expr.E_try_with (body, exn, handler) =>
        def body = cg_expr (ctx, body);
        // FIXME: this is broken for exn values to go into closure
        def (ctx', v) = store_local (ctx, exn, CExpr.CE_none ());
        def handler = cg_expr (ctx', handler);
        def res = CExpr.CE_try_with (body, v, handler);
        res.ty = cg_type (ctx, inex.ty);
        res

      | Expr.E_try_finally (e1, e2) =>
        CExpr.CE_try_finally (cg_expr (ctx, e1), cg_expr (ctx, e2))

      | Expr.E_literal (l) => 
        CExpr.CE_literal (l)

      | Expr.E_this => 
        CExpr.CE_this ()

      | Expr.E_type_conversion (e, t, is_checked) => 
        CExpr.CE_cast (cg_expr (ctx, e), cg_type (ctx, t), is_checked)

      | Expr.E_type_enforcement (e, t) =>
        def e' = cg_expr (ctx, e);
        def t' = cg_type (ctx, t);
        if (type_of (e').IsValueType != t'.IsValueType)
          CExpr.CE_cast (e', t', true)
        else
          e'

      | Expr.E_sequence (e1, e2) =>
        CExpr.CE_sequence ([cg_expr (ctx, e1), cg_expr (ctx, e2)])

      | Expr.E_tuple (l) =>
        tuple_ctor (List.Map (l, fun (e) { box_value (self (e)) }))

      | Expr.E_base =>
        Util.ice ("stray base")
        
      | Expr.E_opcode =>
        Util.ice ("stray opcode")
    }
  }

  /** 
   * Flatten given [Typedtree.Expr] object into [CExpr].
   *
   * <remarks>
   *   As a side-effect few classes for closures and local functions
   *   can be generated and stored in current type builder.
   * </remarks>
   */
  internal cg_expr (ctx : CTX, ex : Expr) : CExpr
  {
    Util.locate (ex.loc, {
        def e = raw_cg_expr (ctx, ex);
        e.loc = ex.loc;
        e
      })
  }

  mangle (s : string) : string
  {
    def p = s.ToCharArray ();
    
    for (mutable i = 0; i < (p : System.Array).Length; ++i)
      unless ((p[i] >= 'a' && p[i] <= 'z') ||
              (p[i] >= 'A' && p[i] <= 'Z') ||
              (p[i] >= '0' && p[i] <= '9'))
        p[i] = '_';

    System.String (p)
  }

  fun_uniq_name (h : Fun_header) : string
  {
    mangle (h.name) + "_" + h.id.ToString ()
  }

  decl_uniq_name (d : LocalValue) : string
  {
    mangle (d.name) + "_" + d.id.ToString ()
  }

  make_closure_class (ctx : CTX, h : Fun_header) : CTX
  {
    def name = fun_uniq_name (h);
    def tb = ctx.current_type.GetTypeBuilder ().DefineNestedType 
                ("_N_cl_" + name, TypeAttributes.SpecialName %| TypeAttributes.NestedAssembly,
                 SystemType.Object, System.Type.EmptyTypes);
    Passes.cgil.RegisterAuxType (tb);
    def ctor = Passes.cgil.AddImplicitCtor (tb);
    
    def mk_clo_fld (d : LocalValue, acc : SystemMap <int, FieldInfo>) {
      def fi = tb.DefineField (decl_uniq_name (d), cg_type (ctx, d.ty),
                               FieldAttributes.SpecialName %| FieldAttributes.FamORAssem);
      //Message.debug ("add " + d.name + " / " + d.parent_fun.name);
      acc.Add (d.id, fi)
    };
    def closure_fields = List.FoldLeft (h.closure_vars, ctx.closure_fields, mk_clo_fld);
    def cloexpr = CExpr.CE_call (CExpr.CE_ctor_ref (ctor), []);
    def cloval = CG_val (h.loc, "_N_closure", tb, cloexpr);
    def cgm = get_cg_method (ctx, h);
    cgm.closure_type = tb;
    def ctx = copy_ctx (ctx);
    ctx.closure_fields = closure_fields;
    ctx.current_closure = Some (cloval);
    ctx
  }

  prepare_ctx_for_fun (ctx : CTX, h : Fun_header) : CTX
  {
    def ctx =
      match (h.closure_vars) {
        | [] => 
          def ctx = copy_ctx (ctx);
          ctx.current_closure = None ();
          ctx

        | _ =>
          make_closure_class (ctx, h)
      };
   
    def cgm = get_cg_method (ctx, h);
    ctx.closure_ptrs = cgm.closure_pointers;
    ctx.locals = SystemMap ();
    ctx.current_fun = h;
    ctx.current_fun_or_loop = h;
    ctx
  }

  get_parents_with_closures (_ctx : CTX, h : Fun_header) : list <Fun_header>
  {
    def parents =
      match (h.decl.kind) {
        | LocalValueKind.D_local_fun (_, pars) => pars
        | _ => Util.ice ()
      };
    def loop (fh : Fun_header, acc) {
      match (fh.closure_vars) {
        | _ :: _ => fh :: acc
        | [] => acc
      }
    };
    List.FoldLeft (parents, [], loop)
  }

  call_object_ctor () : CExpr
  {
    CExpr.CE_call (CExpr.CE_base_ctor_ref (SystemType.ObjectCtor), [])
  }

  get_lambda_ctor (ctx : CTX, h : Fun_header) : ConstructorInfo
  {
    def cg_method = get_cg_method (ctx, h);
    when (cg_method.lambda_ctor == null) {
      def name = fun_uniq_name (h);
      def real_parm_cnt = List.Length (cg_method.parms);
      def virtual_parm_cnt =
        match (Tyutil.fun_type (h)) {
          | Type.T_fun (args, _) => 
            List.Length (Tyutil.fun_args (args))
          | _ => Util.ice ()
        };
      
      // first create type builder
      def impl =
        if (virtual_parm_cnt == 1)
          array [function_type (1)]
        else
          array [function_type (virtual_parm_cnt), function_type (1)];
      def tb = ctx.current_type.GetTypeBuilder ().DefineNestedType 
                  ("_N_lm_" + name, TypeAttributes.SpecialName %| TypeAttributes.NestedAssembly,
                   SystemType.Object, impl);
      Passes.cgil.RegisterAuxType (tb);
      cg_method.lambda_type_builder = tb;

      when (virtual_parm_cnt != real_parm_cnt) {
        assert (real_parm_cnt == 1);
        Passes.cgil.AddMethod (ctx.current_type, make_untupled_method (ctx, virtual_parm_cnt), tb);
      };
      
      // and then constructor
      def mkparm (fh : Fun_header, acc) {
        def (assigns, vals, ptrs) = acc;
        def cgm = get_cg_method (ctx, fh);
        assert (cgm.closure_type != null);
        def name = fun_uniq_name (fh);
        
        def fld = 
          tb.DefineField (name, cgm.closure_type,
                          FieldAttributes.SpecialName %| FieldAttributes.Private);
          
        def val =
          set_parm_info (Type.T_void (),
            CG_val (loc = fh.loc, name = name, ty = cgm.closure_type,
                    val = CExpr.CE_none ()));
        
        def assign =
          CExpr.CE_assign (CExpr.CE_field_ref (CExpr.CE_this (), fld), CExpr.CE_ref (val));

        (assign :: assigns, val :: vals, (ptrs : SystemMap <int, FieldInfo>).Add (fh.id, fld))
      };

      def (assigns, vals, ptrs) = 
        List.FoldLeft (get_parents_with_closures (ctx, h), ([], [], SystemMap ()), 
                       mkparm);

      def ctor_cgm = CG_method ();
      ctor_cgm.parms = List.Rev (vals);
      ctor_cgm.modifiers = NemerleAttributes.Internal;
      ctor_cgm.body = CExpr.CE_sequence (call_object_ctor () :: assigns);

      cg_method.closure_pointers = ptrs;
      Passes.cgil.AddConstructorBuilder (ctor_cgm, tb, false);
      Passes.cgil.EmitConstructor (ctx.current_type, ctor_cgm);
      cg_method.lambda_ctor = ctor_cgm.constructor_builder;
    };
    cg_method.lambda_ctor
  }

  emit_lambda_code (ctx : CTX, fh : Fun_header, body : Expr) : void
  {
    ignore (get_lambda_ctor (ctx, fh));
    def ctx = prepare_ctx_for_fun (ctx, fh);
    def cgm = get_cg_method (ctx, fh);
    foreach (parm : CG_val in cgm.parms) { 
      assert (parm.parm_info != null);
      assert (parm.parm_info.parm_kind == ParmKind.Normal);
      parm.ty = SystemType.Object 
    };
    cgm.ret_type = SystemType.Object;
    
    def parm_cnt = List.Length (cgm.parms);
    cgm.implemented_methods = [get_apply_method (parm_cnt)];
    cgm.modifiers = NemerleAttributes.Internal;

    Passes.cgil.AddMethodBuilder (cgm, cgm.lambda_type_builder, false);

    cg_fun_body (ctx, fh, body);
    
    Passes.cgil.EmitMethod (ctx.current_type, cgm);
    
    when (parm_cnt != 1)
      Passes.cgil.AddMethod (ctx.current_type, make_tupled_method (ctx, parm_cnt), cgm.lambda_type_builder);
  }

  make_lambda_ctor_call (ctx : CTX, fh : Fun_header) : CExpr
  {
    def ctor = get_lambda_ctor (ctx, fh);
    def parms = get_parents_with_closures (ctx, fh);
    def parms' = List.Map (parms, fun (x) { closure_ref (ctx, x) });
    CExpr.CE_call (CExpr.CE_ctor_ref (ctor), parms')
  }

  cg_fun_body (ctx : CTX, hd : Fun_header, body : Expr) : void
  {
    def ctx' = copy_ctx (ctx);
    mutable assigns = [];
    mutable vals = [];
    
    def loadparm (parm_val : CG_val, fp : Fun_parm) {
      def parm = fp.decl;
      def needed_type = cg_type (ctx, parm.ty);

      if (parm.in_closure) {
        def a =
          CExpr.CE_assign (local_ref (ctx, parm), 
                     maybe_cast (ctx, needed_type, CExpr.CE_ref (parm_val)));
        assigns = a :: assigns
      } else {
        def v =
          if (parm_val.ty.IsByRef || needed_type.Equals (parm_val.ty))
            parm_val
          else {
            def v = CG_val (loc = fp.decl.loc, 
                            name = Util.tmpname (parm_val.name),
                            ty = needed_type, 
                            val = CExpr.CE_cast (CExpr.CE_ref (parm_val), needed_type, true));
            vals = v :: vals;
            v
          };
        ctx'.locals = ctx'.locals.Add (parm.id, v)
      }
    };

    def store_this (d : LocalValue) : void {
      match (d.kind) {
        | LocalValueKind.D_closurised_this_ptr =>
          when (d.in_closure) {
            assigns = CExpr.CE_assign (local_ref (ctx, d), CExpr.CE_this ()) :: assigns
          }
        | _ => ()
      }
    };

    def cgm = get_cg_method (ctx, hd);

    List.Iter2 (cgm.parms, hd.parms, loadparm);
    List.Iter (ctx.current_fun.closure_vars, store_this);
    
    def body = cg_expr (ctx', body);
    def buildlet (v : CG_val, e : CExpr) : CExpr { CExpr.CE_let (v, e) };
    def body =
      List.FoldLeft (vals, 
                     CExpr.CE_sequence (List.Rev (body :: assigns)),
                     buildlet);

    def body =
      match (ctx.current_closure) {
        | Some (v) => CExpr.CE_let (v, body)
        | None => body
      };

    def body =
      if (cgm.ret_type.Equals (SystemType.Object))
        box_value (body)
      else
        body;

    cgm.body = body;
  }

  cg_global_fun (ctx : CTX, m : IMethod, body : Expr) : void
  {
    fixup_cg_method (m);
    def hd = m.GetHeader ();
    def ctx = prepare_ctx_for_fun (ctx, hd);
    cg_fun_body (ctx, hd, body)
  }
    
  internal CompileMethod (meth : NemerleMethod) : void
  {
    match (meth.fun_body) {
      | Fun_body.FB_parsed_expr => Tyexpr.TypeMethod (meth)
      | _ => ()
    };
    
    Util.locate (meth.Location, {
      match (meth.fun_body) {
        | Fun_body.FB_extern => ()
        | Fun_body.FB_compiled_expr => Util.ice ()
        | Fun_body.FB_parsed_expr => Util.ice ()

        | Fun_body.FB_typed_expr when Message.seen_error () =>
          // just skip it
          meth.fun_body = Fun_body.FB_compiled_expr ()
          
        | Fun_body.FB_typed_expr (body) =>
          def current_type = meth.DeclaringType :> TypeBuilder;
          def ctx = empty_ctx (current_type);
          cg_global_fun (ctx, meth, body);
          // release memory for GC
          meth.fun_body = Fun_body.FB_compiled_expr ();
          match (meth.GetFunKind ()) {
            | Fun_kind.FK_bound_method (impl_list) =>
              def cgm = GetCgMethod (meth);

              Passes.cgil.EmitMethod (current_type, cgm);

              def tb = current_type.GetTypeBuilder ();

              def mkparm (ifp : CG_val, methp : CG_val) : CExpr {
                maybe_cast (ctx, methp.ty, CExpr.CE_ref (ifp))
              };
              def make_impl_wrapper (impl_meth : IMethod) {
                def cgm' = build_cg_method (ctx, impl_meth);
                def meth_ref = CExpr.CE_method_ref (CExpr.CE_this (), meth.GetMethodBuilder (), false);
                def parms = List.Map2 (cgm'.parms, cgm.parms, mkparm);
                cgm'.body = maybe_cast (ctx, cgm'.ret_type, CExpr.CE_call (meth_ref, parms));
                cgm'.name = impl_meth.DeclaringType.FullName + "." + cgm.name;
                cgm'.implemented_methods = [impl_meth];
                cgm'.modifiers = NemerleAttributes.Private;
                Passes.cgil.AddMethod (current_type, cgm', tb)
              };
              List.Iter (impl_list, make_impl_wrapper)
              
            | Fun_kind.FK_ctor =>
              Passes.cgil.EmitConstructor (current_type, GetCgMethod (meth))
              
            | _ => 
              Passes.cgil.EmitMethod (current_type, GetCgMethod (meth));
          }
        | Fun_body.FB_abstract => ()
      }
    })
  }


} // end module
} // end ns
