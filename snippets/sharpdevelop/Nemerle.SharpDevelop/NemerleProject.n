using System;
using System.IO;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Internal.Templates;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.SharpDevelop.Dom;

using Microsoft.Build.BuildEngine;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.SharpDevelop {

    public class NemerleProject : CompilableProject {

        static this() {
            def nemerle_env = Environment.GetEnvironmentVariable("Nemerle");
            def programs_env = Environment.GetEnvironmentVariable("ProgramFiles");

            NemerleBinPath = 
            if(string.IsNullOrEmpty(nemerle_env))
                Path.Combine(programs_env, "Nemerle")
            else
                nemerle_env
        }

        public static NemerleBinPath : string {
            get {
                PropertyService.Get("Nemerle.SharpDevelop.NemerleProject.NemerleBinPath")
            }
            private set {
                PropertyService.Set("Nemerle.SharpDevelop.NemerleProject.NemerleBinPath", value)
            }
        }

        public this(provider : IMSBuildEngineProvider, fileName : string, projectName : string) {
            base(provider);
            this.Name = projectName;
            LoadProject(fileName);
        }

        public this(info : ProjectCreateInformation) {
            base(info.Solution);
            Create(info);
        }

        protected override Create(info : ProjectCreateInformation) : void {
            base.Create(info);
            SetProperty("Debug", null, "DefineConstants", "DEBUG;TRACE",
                        PropertyStorageLocations.ConfigurationSpecific, false);
            SetProperty("Release", null, "DefineConstants", "TRACE",
                        PropertyStorageLocations.ConfigurationSpecific, false);

            //def group = MSBuildProject.AddNewPropertyGroup(false);
            //group.AddNewProperty("Nemerle", "$(ProgramFiles)\\Nemerle", true).Condition = " '$(Nemerle)' == '' ";

            //AddImport("$(MSBuildToolsPath)\\Microsoft.CSharp.targets", null);

            try {
                AddImport("$(Nemerle)\\Nemerle.MSBuild.targets", null);
            } catch {
                | ex is InvalidProjectFileException =>
                    throw ProjectLoadException("Please ensure that the Nemerle compiler is installed on your computer.\n\n" + ex.Message, ex);
            }
        }

        public override Language : string {
            get { NemerleLanguageBinding.LanguageName }
        }

        public override LanguageProperties : LanguageProperties {
            get { LanguageProperties.None }
        }

        public override GetDefaultItemType(fileName : string) : ItemType {
            if (string.Equals(".n", Path.GetExtension(fileName), StringComparison.OrdinalIgnoreCase))
                ItemType.Compile
            else
                base.GetDefaultItemType(fileName)
        }

    }

}
