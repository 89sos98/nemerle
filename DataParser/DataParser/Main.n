using System.Console;

namespace DucatiEnv
{

  variant separator
  {
    | Soft { a : char }
    | Hard { a : char }
    | NULL
  }

  variant exTree
  {
    | Ex { data : string }
    | NULL;
  }

  variant parserTree
  {
    | Node  { left : parserTree; parser : list[string -> exTree]; next : parserTree }
    | NULL
  }

  class Class1
  {

    private static testChar(sim : char, l : list[separator]) : separator
    {
      def filter(sep : separator) : bool
      {
        match(sep)
        {
          | Soft(a) => if(a == sim) true; else false;
          | Hard(a) => if(a == sim) true; else false;
          | NULL => throw System.Exception("Separator list is wrong");
        }
      }
      def ll = l.Filter(filter);
      match(ll)
      {
        | [] => separator.NULL();
        | head::tail => head;
      }
    }

    public static parseElem(str : string, ind : int, length : int, ) : (exTree * int)

    public static parseIdent(str : string, ind : int, length : int, l : list[separator]) : (exTree * int)
    {
      def getIdent(fl : bool, str : string, ind : int, length : int, l : list[separator]) : (string * int)
      {
        if(ind == length)
          ("", ind);
        else
        {
          def sim = str[ind];
          def sep = testChar(sim, l);
          match(sep)
          {
            | Soft => if(fl) getIdent(fl, str, ind + 1, length, l); else ("", ind);
            | Hard => ("", ind);
            | NULL => def (tmpstr, tmpint) = getIdent(false, str, ind + 1, length, l); (sim.ToString() + tmpstr, tmpint);
          }
        }
      }
      def (val, lastind) = getIdent(true, str, ind, length, l);
      if(val == "")
        (exTree.NULL(), lastind);
      else
        (exTree.Ex(val), lastind);
    }

    public static parserProcess(str : string) : exTree
    {
      exTree.Ex("Test");      
    }

    public static Main() : void
    {
      System.Console.WriteLine ("2222");
    }
  }
/*
  variant vVariable
  {
    | Variable { name : string; val : string}
  }


  variant exTree
  {
    | Node  { left : exTree; ex : string; right : exTree }
    | Param { name : string }
    | NULL
  }

  variant vStatement
  {
    | LampPole {z : float; count : int; interval : float}
    | Corner   {z : float; count : int; interval : float}
    | Fence    {z : float; count : int; interval : float}
    | Error
  }

  public class DataParser
  {
    static mutable index : int;
    static mutable data : string;
    static mutable length : int;
    static mutable lineNumber : int;

    static private getVariable(varList : list[vVariable], name : string) : string
    {
      match(varList)
      {
        | [] => "";
        | var::rest =>
          match(var)
          {
            | vVariable.Variable(name = _name, val = _val) =>
              if(_name == name)
                _val;
              else
                getVariable(rest, name);
          }
      }
    }

    static private calcExTree(tree : exTree, varList : list[vVariable]) : string
    {
      match(tree)
      {
        | exTree.Node(ex = _ex, left = _left, right = _right) =>
            match(_ex)
            {
              | "+" => def sum = float.Parse(calcExTree(_left, varList)) + float.Parse(calcExTree(_right, varList)); sum.ToString();
              | "-" => def diff = float.Parse(calcExTree(_left, varList)) - float.Parse(calcExTree(_right, varList)); diff.ToString();
              | "*" => def mut = float.Parse(calcExTree(_left, varList)) * float.Parse(calcExTree(_right, varList)); mut.ToString();
              | "/" => def rest = float.Parse(calcExTree(_left, varList)) / float.Parse(calcExTree(_right, varList)); rest.ToString();
              | _ => throw System.Exception("Unknow expess");
            }

        | exTree.Param(name = _name) => 
            try
            { 
              float.Parse(_name);
              _name;
            }
            catch
            {
              | _ =>
                def val = getVariable(varList, _name);
                when(val == "")
                  throw System.Exception($"No find param $_name");
                val;
            }
        |  exTree.NULL => throw System.Exception($"NULL tree");
      }
    }

    static private getSimple(blank : bool) : string
    {
      if(index >= length)
      {
        match(blank)
        {
          | false => "";
          | true => "DATAEND";
        }
      }
      else
      {
        def c = data[index];
        index++;
        match(c)
        {
          | ';' => if(blank) ";"; else {index--; ""; };
          | '=' => if(blank) "="; else {index--; ""; };
          | '(' => if(blank) "("; else {index--; ""; };
          | ')' => if(blank) ")"; else {index--; ""; };
          | _ => if(c <= ' ')
                 {
                   when(c == '\n')
                     lineNumber++;
                   if(blank) getSimple(true); else "";
                 }
                 else c.ToString() + getSimple(false);
        }
      }
    }

    static private getToken() : string
    {
      getSimple(true);
    }

    static private buildExTree(tree : exTree) : exTree
    {
      def a = getToken();
      match(a)
      {
        | "(" => buildExTree(tree);
        | ")" => buildExTree(tree);
        | "+" => exTree.Node(tree, "+", buildExTree(exTree.NULL()));
        | "-" => exTree.Node(tree, "-", buildExTree(exTree.NULL()));
        | "*" => exTree.Node(tree, "*", buildExTree(exTree.NULL()));
        | "/" => exTree.Node(tree, "/", buildExTree(exTree.NULL()));
        | ";" => tree;
        | "DATAEND" => tree;
        | _   => def _tree = exTree.Param(a); buildExTree(_tree);

      } 
      exTree.Param("1212");
    }

    static private getItem(z : float, count : int, interval : float, f : float * int * float -> vStatement) : vStatement
    {
      def exTrow() { when(getToken() != "=") { throw System.Exception($"Expecteed =; line $lineNumber") } }
      def a = getToken();
      match(a)
      {
        | "z"        => exTrow();
                        def tree = buildExTree(exTree.NULL());
                        def zs = float.Parse(calcExTree(tree, []));
                        getItem(zs, count, interval, f);
        | "count"    => exTrow();
                        def tree = buildExTree(exTree.NULL());
                        def counts = int.Parse(calcExTree(tree, []));
                        getItem(z, counts, interval, f);
        | "interval" => exTrow();
                        def tree = buildExTree(exTree.NULL());
                        def intervals = float.Parse(calcExTree(tree, []));
                        getItem(z, count, intervals, f);
        | "DATAEND"  => f(z, count, interval);
        | _          => throw System.Exception($"Unknow error; line $lineNumber");
      }
    }

    static private getStatement() : list[vStatement]
    {
      def a = getToken();
      def buildLampPole(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.LampPole(z, count, interval);
      }
      def buildFence(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.Fence(z, count, interval);
      }
      def buildCorner(z : float, count : int, interval : float)
      {
        if((count == 0) || (interval == 0f))
          throw System.Exception($"Not all item; line $lineNumber");
        else
          vStatement.Corner(z, count, interval);
      }
      def exTrow() { when(getToken() != ";") { throw System.Exception($"Expecteed ;, line $lineNumber") } }
      match(a)
      {
        | "LampPole" => exTrow(); getItem(0, 0, 0, buildLampPole)::getStatement();
        | "Fence" => exTrow(); getItem(0, 0, 0, buildFence)::getStatement();
        | "Corner" => exTrow(); getItem(0, 0, 0, buildCorner)::getStatement();
        | _ => [];
      }
    }

    static private toStr(val : vStatement, str : string) : string
    {
      match(val)
      {
        | vStatement.LampPole(z, count, interval) => str + "LampPole;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | vStatement.Corner(z, count, interval) => str + "Corner;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | vStatement.Fence(z, count, interval) => str + "Corner;" + "z=" + z.ToString() + ";count=" + count.ToString() + ";interval=" + interval.ToString() + '\n'.ToString();
        | _ => str + "error";
      }
    }

    static public getData(text : string) : string
    { 
      def initParser = fun() {index = 0; data = text; length = data.Length; lineNumber = 1; };
      initParser();
      def items = getStatement();
      items.FoldLeft("", toStr);
     }


    public static Main() : void
    {
      def b = "LampPole    ; count = 345; z = 44 ;; interval = 20" + '\n'.ToString() + "Fence    ; count = 345; z = 45 ;; interval = 20";
      def aaa = getData(b);
      System.Console.WriteLine (aaa);
    }
  }*/
}
