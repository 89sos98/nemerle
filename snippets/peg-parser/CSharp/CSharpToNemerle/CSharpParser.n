using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  [Record]
  public class CSharpParser : IParser
  {
    manager : ManagerClass;

    public Parse(fileName : string) : list[PT.TopDeclaration]
    {
      def parser = CS.Parser();
      def fileIndex = Location.GetFileIndex(fileName);
      def source =
        using(file = IO.FileStream(fileName, IO.FileMode.Open, IO.FileAccess.Read))
        using(reader = IO.StreamReader(file, Text.Encoding.ASCII, true))
          Nemerle.Peg.SourceSnapshot(reader.ReadToEnd(), fileIndex, fileName);
      match(parser.Parse(source))
      {
        | Some(unit) =>
          def converter = AstConverter(manager);
          converter.Convert(unit)

        | _ =>
          def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
          def loc = Nemerle.Peg.Location(source, errorPos, errorPos);
          Message.FatalError(loc.NLocation(), $"failed to parse file `$fileName'.")
      }
    }
  }
}