using System;
using System.Text;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  internal class Grammar
  {
    private _grammar : Map[string, int * Rule] = Map();
    [Accessor]
    private _startRuleName : string;

    public this(startRuleName : string)
    {
      _startRuleName = startRuleName;
    }

    private this(startRuleName : string, grammar : Map[string, int * Rule])
    {
      _startRuleName = startRuleName;
      _grammar = grammar;
    }

    public Add(name : string, rule : Rule) : Grammar
    {
      Grammar(StartRuleName, _grammar.Add(name, (_grammar.Count, rule)));
    }

    public GetRule(name : string) : Rule
    {
      if (_grammar.Contains(name))
      {
        def (_id, rule) = _grammar.Get(name);
        rule;
      }
      else
      {
        throw ArgumentException($"GetRule No $name in Grammar.");
      }
    }

    public GetId(name : string) : int
    {
      if (_grammar.Contains(name))
      {
        def (id, _rule) = _grammar.Get(name);
        id;
      }
      else
      {
        throw ArgumentException($"GetId No $name in Grammar.");
      }
    }

    public Count : int
    {
      get { _grammar.Count }
    }

    public Names : list[string]
    {
      get { _grammar.Map(fun(name, _) { name }) }
    }
    
    public override ToString() : string
    {
      def sb = StringBuilder();
      _ = sb.AppendLine($"Count:$Count");
      _ = sb.AppendLine($"_startRuleName:$_startRuleName");
      _ = sb.AppendLine("rules:");
      foreach((name, (id, rule)) in _grammar)
      {            
        _ = sb.AppendLine($"  name:$(name)");
        _ = sb.AppendLine($"  id:$(id)");
        _ = sb.AppendLine($"  rule type:$(rule.GetType().ToString())");
        _ = sb.AppendLine($"  rule:$(rule.ToString())");
        _ = sb.AppendLine(string.Empty);
      }
      
      sb.ToString()
    }
  }
}
