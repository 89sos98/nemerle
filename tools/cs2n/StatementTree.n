// Copyright (c) 2003-2005 The University of Wroclaw.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. The name of the University may not be used to endorse or promote
//       products derived from this software without specific prior
//       written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 


using Nemerle.Collections;

namespace Nemerle.CSharp
{

    /**
     *  C# wrapper for STree class
     */
    public class StatementTree
    {
        public this ()
        {
            s_tree = STree.TokS ("")
        }

        public this (t : antlr.Token)
        {
            s_tree = STree.Tok (t)
        }

        public this (s : string)
        {
            s_tree = STree.TokS (s)
        }

        public this (s : string,ch : LinkedList[StatementTree])
        {
            mutable l = [];
            
            def get_stree (t : StatementTree)
            {             
                  l = t.s_tree :: l;
            }

            ch.Iter (get_stree);

            s_tree = STree.Statement(s,l)
        }        
        
        public ToString (tp : string) : string
        {	 
	    STree.set_type(tp);	
            def st = s_tree.translate_switch(). eliminate_continues (). eliminate_breaks ();
            match (st)
            {
                | [tree] =>
                  tree.eliminate_jump (Jump.Return ()).ToString ()
                | _ => assert (false);
            }            
        }

        public override ToString () : string { ToString (""); }

        public PlainString : string {
          get {
            match (s_tree) {
              | STree.TokS (s) => s
              | _ => null
            }
          }
        }
        
        private s_tree : STree;
    }

    /**
     *  Description of jump
     */
    public variant Jump
    {
	| Return
	| Continue
	| Break
	| Goto
    }

    /**
     *  STree class, representing single statement
     */
    public variant STree
    {        
        | TokS { s : string; }
        | Tok { t : antlr.Token; }
        | Statement { s_name : string; children : list[STree] ; }                                   	
	
        override public ToString () : string
        {	    
            match(this)
            {             
                | Tok (t) => t.getText ()
                | TokS (s) => s

                | Statement ( "RETURN" , [Tok (t), expr, s]) =>
                  ExtendedToken.getWhitespaces (t) + expr.ToString () + s.ToString ()

                | Statement ( "RETURN" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "()" + s.ToString ()

                | Statement ( "CONTINUE" , [Tok (t), s]) =>
                  ExtendedToken.getWhitespaces (t) + "/*" + ExtendedToken.getTextOnly (t)+ "*/()" +s.ToString ()
                
		| Statement ("WHILE",children) =>
		  def new_while = Statement("WHILE_",children);
		  match(children)
		  {
		     | [_,_,_,_,Statement("BLOCK",_)] =>		       
     		       new_while.ToString () + ";";
		     | _ => new_while.ToString ();
		  }
		
		| Statement ("SWITCH",[Tok(s),lp,exp,rp,switch_block]) =>
		    ExtendedToken.getWhitespaces(s) + "match" + lp.ToString () + exp.ToString () + rp.ToString () + switch_block.ToString ()

		| Statement ("SWITCH_BLOCK",xs) =>
		    def print_all (secions) : string
		    {
			| [] => ""
			| head :: tail =>
			    head.ToString () + print_all (tail)
		    }
			
		    def print (sections) : string
		    {
			| [] => ""
			| (Statement("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",Statement ("SWITCH_LABEL",[Tok(c),_,_]) :: _),_]) as head) 
			  :: [] =>
			    if(get_default_label(head))
				head.ToString ()
			    else			    
				head.ToString () + 
				Statement("SWITCH_SECTION", 
				[
				Statement("SWITCH_SECTION_LABELS",[Statement ("SWITCH_LABEL",[Tok(c),TokS(" _ "),Tok(ExtendedToken("",":"))]) ]) , 
				Statement("SWITCH_SECTION_STATEMENTS",[TokS("()")])
				]).ToString ()

			| head :: tail => 
			    if(get_default_label(head))
				print_all (tail) + head.ToString ()
			    else 
				head.ToString () + print (tail) 
		    }

		    def (lbrace,sections,rbrace) = cut_off_braces(xs);
		    lbrace.ToString () + print (sections) + rbrace.ToString ()
		    
		| Statement ("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",lbs),Statement("SWITCH_SECTION_STATEMENTS",sts)]) =>
		    def print_labels (labels) : string
		    {
			| [] => ""
			| head :: tail => head.ToString () + print_labels(tail)			
		    }

		    def print_statements(statements) : string
		    {
			| [] => ""
			| head :: tail => head.ToString () + print_statements(tail)
		    }

		    print_labels(lbs) + "=> " + print_statements(sts)

		| Statement ("SWITCH_LABEL",[Tok(c),ce,Tok(colon)]) =>
		    ExtendedToken.getWhitespaces(c) + "|" + ce.ToString () + ExtendedToken.getWhitespaces (colon)
		    
		| Statement ("SWITCH_DEFAULT",[Tok(d),Tok(colon)]) =>
		    ExtendedToken.getWhitespaces(d) + "|" + " _ " + ExtendedToken.getWhitespaces (colon) 
		  
		| Statement ("BREAK",[Tok(b),s]) =>
		    ExtendedToken.getWhitespaces(b) + "()" + s.ToString ()
		  
                | Statement ( _ , children) =>
                  
                  def sb = System.Text.StringBuilder ();
                  foreach (x in children) 
                    ignore (sb.Append (x.ToString ()));
                  
                  sb.ToString ()                  
            }
        }                        
	
	/* -- SWITCH TRANSLATION ----------------------------------------- */
	
	private is_default (label : STree) : bool
	{
	    | Statement ("SWITCH_DEFAULT",_) => true
	    | _ => false
        }
	
	private get_default_label (section : STree) : bool
	{
	    | Statement ("SWITCH_SECTION",[Statement("SWITCH_SECTION_LABELS",lbs),_]) =>
                List.Exists (lbs, is_default)

	    | _ => false
	}	
	
	/**
	 *  main switch translation function
	 */
	internal translate_switch () : STree
	{	    
	    match(this)
	    {
		| Statement("SWITCH",[s,lp,exp,rp,switch_block]) =>
		    def (lbrace,sections,rbrace) = cut_off_braces (switch_block);
		    def translated_switch_block = Statement("SWITCH_BLOCK",lbrace :: translate_switch_sections (sections) + [rbrace]);
		    Statement("SWITCH",[s,lp,exp,rp, translated_switch_block])

		| x => 	
		    def loop (trees,acc)
		    {
			match(trees)
			{
			    | (Statement(_,_) as statement) :: tail =>
				loop (tail, statement.translate_switch () :: acc)
			    | head :: tail =>
				loop (tail, head :: acc)				
			    | [] => List.Rev (acc)
			}
		    }
		    match(x)
		    {
			| Statement(name,trees) =>
			    Statement(name,loop(trees,[]))
			| _ => x
		    }
	    }   
	}	
	
	/**
	 *  method used to translate a list of switch sections
	 */
	private translate_switch_sections (sections : list [STree]) : list [STree]
	{	    
	    def switch_block = Statement("SWITCH_BLOCK",TokS("{") :: sections + [TokS("}")]);
	    def (_,statements,_) = cut_off_braces(switch_block.eliminate_jump(Jump.Break()));
	    statements
	}   // FIXME: what about 'goto case'?

	/* -- JUMP ELIMINATION ------------------------------------------- */

	private cut_off_braces (lst : list [STree]) : STree * list [STree] * STree
        {
            def st = Statement("BLOCK",lst);
            cut_off_braces (st)
        }
        
        private cut_off_braces (t : STree) : STree * list [STree] * STree
        {                     
	    | Statement("SWITCH_BLOCK",x::xs) 
            | Statement("BLOCK",x::xs) =>		    
		def (sx,end) = List.DivideLast (xs);
                (x, sx, end)		

            | _ => assert(false);            
        }

	private get_first_whitespace (tree : STree) : string
	{
	    | TokS (_) => "";
	    | Tok (t)  => ExtendedToken.getWhitespaces(t)
	    | Statement(_,x :: _) => get_first_whitespace(x)
	    | _ => assert(false);
	}

	private divide_switch_sections (sections : list [STree],jump : Jump) : list [STree] * list [STree]
	{
	    def contains (tree : STree) 
	    {
              match (jump) {
                | Jump.Continue => tree.continue_inside ()
                | Jump.Return => tree.return_inside ()
                | _ => false
              }
	    }	
            List.Partition (sections, contains)
	}

        /* -- CONTINUE ELIMINATION --------------------------------------- */

	/**
         *  Main 'continue' elimination function. Returns tree made by 'continue' elimnation.
         *  Function first searchs for loop, then transforms it.
         */

        internal eliminate_continues () : STree
        {
            def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_continues () :: acc)
                }
            }
            	  
	    def eliminate_block (block) : STree
	    {
	      	| Statement("BLOCK",_) => 
		  def (lbrace,body_eliminated,rbrace) = cut_off_braces(block.eliminate_jump (Jump.Continue ()));
		  Statement("BLOCK",lbrace :: body_eliminated + [rbrace]);		  
		
		| _  => 
		  def body = Statement ("BLOCK",[TokS("{"),block,TokS("}")]);
		  def (_,body_eliminated,_) = cut_off_braces(body.eliminate_jump (Jump.Continue ()));
		  match(body_eliminated)
                  {
                    | [block_eliminated] => block_eliminated
	     	    | _ => assert(false); 
        	  }	  
	    }
		  
            match (this)
            {                		  
                // WHILE loop
                
                | Statement("WHILE",[w,lp,be,rp,block]) =>
		    if (block.continue_inside ())
			Statement("WHILE",[w,lp,be,rp,eliminate_block(block)])
		    else                  
			Statement("WHILE",[w,lp,be,rp,block.eliminate_continues ()])
                
		// DO ... WHILE loop
		
		| Statement("DO",[d,block,w,lp,be,rp,s]) =>
                  if (block.continue_inside ())
		      Statement("DO",[d,eliminate_block(block),w,lp,be,rp,s]) 
                  else                  
		      Statement("DO",[d,block.eliminate_continues() ,w,lp,be,rp,s]) 

                // FOR loop
  
		| Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block]) =>
		  if (block.continue_inside ())
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,eliminate_block(block)]) 
                  else                  
		      Statement("FOR",[f,lp,finit,s1,fc,s2,fiter,rp,block.eliminate_continues()]) 

                // FOREACH loop

		| Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block]) =>      
		  if (block.continue_inside ())
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,eliminate_block(block)])  
                  else                  
		      Statement("FOREACH",[f,lp,id,c,t,i,col,rp,block.eliminate_continues()])       		
		      
		| x =>
		    def loop (trees,acc)
		    {
			match(trees)
			{
			    | (Statement(_,_) as statement) :: tail =>
				loop (tail, statement.eliminate_continues () :: acc)
			    | head :: tail =>
				loop (tail, head :: acc)				
			    | [] => List.Rev (acc)
			}
		    }
		    match(x)
		    {
			| Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",xs)]) =>
			    Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",loop(xs,[]))])
			| Statement(name,trees) =>			    
			    Statement(name,loop(trees,[]))
			| _ => x
		    }
            }
        }

	/**
	 * Returns true if statement or one of substatement contains 'continue'
	 */
        protected continue_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.continue_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("CONTINUE",_) => true
                | Statement("BLOCK",xs) =>
		    loop(xs);
		    
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.continue_inside () || st2.continue_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.continue_inside () 
		| Statement("SWITCH",[_,_,_,_,Statement("SWITCH_BLOCK",xs)]) =>
		    loop(xs)
		| Statement("SWITCH_SECTION",[_,Statement("SWITCH_SECTION_STATEMENTS",xs)]) =>
		    loop(xs)

                | _ => false
            }
        }
        
        /* -- JUMP ELIMINATION -------------------------------------------- */
        
	/**
         *  Function used to eliminate jumps from function bodies, loop bodies, switch sections..	 
         */	
        internal eliminate_jump (jump : Jump) : STree
        {
            def (lbrace,statements,rbrace) = cut_off_braces (this);

            def loop (sts : list [STree],acc : list [STree]) : list [STree]
            {
                match(sts)
                {
                    | (Statement("IF", _) as if_st)  :: tail
                    | (Statement("WHEN", _) as if_st) :: tail =>                      
			def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
			def est_block       = block_statement.eliminate_jump (jump);
			def est_if          = if_st.eliminate_jump_if (est_block,jump);
                      
			List.Rev(est_if :: acc)
			
                    | (Statement ("SWITCH",_) as switch) :: tail =>
			match(jump)
			{
			    | Jump.Continue  //FIXME: maybe goto
			    | Jump.Return =>
				def block_statement = Statement("BLOCK",(lbrace :: tail) + [rbrace]);
				def est_block       = block_statement.eliminate_jump (jump);

				List.Rev( switch.eliminate_jump_if(est_block,jump) :: acc)
			    | _ => loop (tail, (switch :> STree) :: acc )
			}
			
                    | Statement("BLOCK",xs) :: tail =>
			def (lb,ys,rb) = cut_off_braces (xs);
			def block_statement = Statement("BLOCK",lb :: ys + tail  + [rb]);
			def est_block       = block_statement.eliminate_jump (jump);
			List.Rev(est_block :: acc)
		  		    		  
		    | (Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",xs)]) as switch_section) :: tail =>
			match(jump)
			{			    
			    | Jump.Break => 
				def block = Statement("BLOCK",TokS("{") :: xs + [TokS("}")]);
				def (_,statements,_) = cut_off_braces(block.eliminate_jump(jump));
				loop (tail, Statement("SWITCH_SECTION",[lbs,Statement("SWITCH_SECTION_STATEMENTS",statements)]) :: acc)
			    | _ =>
				loop (tail, (switch_section :> STree) :: acc )
			}
		    
		    | (Statement("BREAK",_) as break_statement) :: tail =>
			match(jump)
			{
			    | Jump.Break =>
				List.Rev ((break_statement :> STree) :: acc) 
			    | _ =>
				loop (tail, (break_statement :> STree) :: acc )
			}
		    
                    | (Statement("RETURN", _) as ret_st) :: tail =>
			match(jump)
			{
			    | Jump.Return =>
				List.Rev ((ret_st :> STree) :: acc)			    
			    | _ => 
				loop (tail, (ret_st :> STree) :: acc )
			    
			}
			
	 	    | (Statement("CONTINUE", _) as con_st) :: tail =>		      
			match(jump)
			{
			    | Jump.Continue => 			    
				List.Rev ((con_st :> STree) :: acc)			    
			    | _ =>
				loop (tail, (con_st :> STree) :: acc )
			    
			}

                    | (Statement("FOREACH", _) as while_st) :: tail
		    | (Statement("FOR", _) as while_st) :: tail	
		    | (Statement("DO", _) as while_st) :: tail
		    | (Statement("WHILE", _) as while_st) :: tail =>
			match(jump)
			{
			    | Jump.Goto
			    | Jump.Break
			    | Jump.Return =>
				loop (tail, (while_st :> STree) :: acc )
			    | Jump.Continue => 			    
				loop (tail, (while_st.eliminate_continues () :> STree) :: acc )	
			}		      
		 
                    | head :: tail => loop (tail, head :: acc )
                    | _ =>  List.Rev(acc)
                }
            }
	    
	    match(this)
	    {
		| Statement("SWITCH_BLOCK",_) =>
		    Statement("SWITCH_BLOCK",lbrace :: loop(statements,[]) + [rbrace])
		| _ =>
		    Statement("BLOCK",lbrace :: loop(statements,[]) + [rbrace])
	    }
            
        }
	
	/**
         *  Function used to transform 'if' trees containing jumps
         */
        protected eliminate_jump_if (return_st : STree,jump : Jump) : STree
        {
            def(lb,sts,rb) = cut_off_braces (return_st);
	    
            match(this)
            {
                | Statement("IF",[Tok(i),lp,exp,rp,st1,Tok(e),st2]) =>

		    def ws_if    = ExtendedToken.getWhitespaces(i);
		    def ws_else  = ExtendedToken.getWhitespaces(e);
                  
		    // checking "if"
                  
		    def transform_if () : STree
		    {
			def s1 = Statement("BLOCK",[Tok(ExtendedToken(ws_if,"{")),st1] + sts +[Tok(ExtendedToken(ws_if,"}"))]);
			def es1 = s1.eliminate_jump (jump);
			def s2 = Statement("BLOCK",[Tok(ExtendedToken(ws_else,"{")),st2] + sts +  [Tok(ExtendedToken(ws_else,"}"))]);
			def es2 = s2.eliminate_jump (jump);
			
			Statement("IF",[Tok(i),lp,exp,rp,es1,Tok(e),es2])
		    }
		    
		    match(jump)
		    {
			| Jump.Continue => 
			    if (st1.continue_inside() || st2.continue_inside())
				transform_if()
			    else
				Statement("BLOCK", lb :: this :: sts + [rb])
			| Jump.Return =>
			    if (st1.return_inside() || st2.return_inside())
				transform_if()
			    else
				Statement("BLOCK", lb :: this :: sts + [rb])
			| Jump.Break =>
			    if (st1.break_inside_() || st2.break_inside_())
				transform_if()
			    else
				Statement("BLOCK", lb :: this :: sts + [rb])
			| Jump.Goto =>
			    Statement("BLOCK", lb :: this :: sts + [rb])
		    }
		    		    	   		
		// checking "when"
                      
                | Statement("WHEN",[Tok(i),lp,exp,rp,st1]) =>
		
		    def whitespaces = ExtendedToken.getWhitespaces(i);		
		    
		    def transform_when (whitespaces) : STree
		    {			
			def s1 = Statement("BLOCK",[Tok(ExtendedToken(whitespaces : string,"{")),st1] + sts +[Tok(ExtendedToken(whitespaces,"}"))]);
			def es1 = s1.eliminate_jump (jump);

			Statement("IF", [Tok(ExtendedToken(whitespaces,"if")), lp, exp, rp, es1, Tok(ExtendedToken(whitespaces , "else")), return_st])
		    }		    
    
		    match(jump)
		    {
			| Jump.Continue => 
			    if(st1.continue_inside ())
				transform_when (whitespaces)
			    else
				Statement("BLOCK", lb :: (this :: sts) + [rb])
			| Jump.Return =>
			    if(st1.return_inside ())
				transform_when (whitespaces)
			    else
				Statement("BLOCK", lb :: (this :: sts) + [rb])
			| Jump.Break => 			
			    if(st1.break_inside_ ())
				transform_when (whitespaces)
			    else
				Statement("BLOCK", lb :: (this :: sts) + [rb])				
			| Jump.Goto =>
			    Statement("BLOCK", lb :: (this :: sts) + [rb])		 			    
		    }
		    
		| Statement("IF", _)
                | Statement("WHEN", _) =>
                  assert(false);
		
		// checking SWITCH
		
		| Statement("SWITCH",[s,lp,ce,rp,Statement("SWITCH_BLOCK",xs)]) as switch =>
		    
		    def loop (sections,acc)
		    {
			match(sections)
			{
			    | [] => List.Rev (acc)
			    | Statement ("SWITCH_SECTION",[lbs ,Statement("SWITCH_SECTION_STATEMENTS",statements)]) :: tail =>
				def s = Statement("BLOCK",[TokS("{")] + statements + sts +[TokS("}")]);
				def es = s.eliminate_jump(jump);
				def (_,sts,_) = cut_off_braces(es);
				loop( tail , Statement ("SWITCH_SECTION", [ lbs , Statement("SWITCH_SECTION_STATEMENTS", sts ) ] ) :: acc)
			    | _ => assert(false)
			}
		    };
		    
		    match(jump)
		    {	
			| Jump.Continue
			| Jump.Return =>
			    def (lb,sections,rb) = cut_off_braces (xs);
			    def (jmp,_non_jmp) = divide_switch_sections(sections,jump);
			    match(jmp)
			    {
				| [] => switch	
				| _ => Statement("SWITCH",[s,lp,ce,rp,Statement("SWITCH_BLOCK",lb :: loop(sections,[]) + [rb] )])
			    }
			| _ => switch
		    }
		    

                | x => x
            }
        }
                
	/**
	 * Returns true if statement or one of substatement contains 'return'
	 */
        private return_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.return_inside())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {
                | Statement("RETURN",_) => true
                | Statement("BLOCK",xs) =>
		    def b = loop(xs);
		    b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
		    st1.return_inside () || st2.return_inside ()  
		| Statement("WHEN",[_,_,_,_,st]) =>
		    st.return_inside ()
		| Statement("SWITCH",[_,_,_,_,Statement("SWITCH_BLOCK",xs)]) =>
		    loop(xs)
		| Statement("SWITCH_SECTION",[_,Statement("SWITCH_SECTION_STATEMENTS",xs)]) =>
		    loop(xs)
                | _ => false
            }            
        }     
	

        /* -- BREAK ELIMINATION -------------------------------------------- */

        /**
         *  Main 'break' elimination function. Returns list of trees made by 'break' elimnation.
         *  Function first searchs for loop, then transforms it.
         */
        internal eliminate_breaks () : list [STree]
        {
            def loop (stmts : list [STree],acc : list [STree]) : list [STree]
            {
                match(stmts)
                {
                    | [] => List.Rev (acc)
                    | head :: tail => loop (tail, head.eliminate_breaks () + acc)
                }
            }
            
	    def eliminate_block(block : STree, w : antlr.Token) : STree
	    {
		match(block.eliminate_breaks ())
		{
		  | [x] => x
                  | xs => 
		    def whitespaces = ExtendedToken.getWhitespaces (w);
		    Statement("BLOCK",
		    Tok(ExtendedToken(whitespaces, "{")) :: List.Rev(xs) + [Tok(ExtendedToken(whitespaces, "}"))]);
		}    
	    }
	    
            def make_when_statement (w : antlr.Token, rs : string, ns : string) : STree
	    {
	        def return_statement = 
		  Statement("RETURN", [Tok (ExtendedToken (ExtendedToken.getWhitespaces (w), "return")),
                                       TokS(" " + rs),TokS(";")]);
			
	        Statement("WHEN",
		[Tok (ExtendedToken (ExtendedToken.getWhitespaces (w),"when")),
		 TokS("( "),TokS(ns),TokS(" )"),return_statement]);
	    }
	    
            match(this)
            {
                // FOREACH loop  -  FIXME: emit warning message about uneffectivness
                  
                | Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block]) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     
		     def when_eliminated = Statement
		      ("WHEN",[Tok(ExtendedToken(ExtendedToken.getWhitespaces (f), "when")),TokS(" ("),TokS("!" + ns),TokS(" )"),block_eliminated2]);
		      
		     if(!ret)
		     {
		     	[Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
			 Tok (ExtendedToken(ExtendedToken.getWhitespaces (f), "mutable " + ns +
                              " = false;"))];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(f,rs,ns);
						
                        [when_statement,
			 Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,when_eliminated]),
			 TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			 TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs +
                               " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("FOREACH",[Tok(f),lp,id,c,t,i,col,rp,block_eliminated])]
                  
                // FOR loop  
                  
                | Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block]) =>
		  def block_eliminated = eliminate_block(block,f);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     
		     def new_fc = 
		     if (fc == "")
                        "!" + ns;
                     else
                        fc + " && !" + ns;

		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
			 TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(f,rs,ns);
						
                        [when_statement,
  			 Statement("FOR",[Tok(f),lp,finit,s1,TokS(new_fc),s2,fiter,rp,block_eliminated2]),
			 TokS (ExtendedToken.getWhitespaces (f) + "mutable " + ns + " = false;"),
			 TokS (ExtendedToken.getWhitespaces (f) + "mutable " + rs +
                               " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("FOR",[Tok(f),lp,finit,s1,TokS(fc),s2,fiter,rp,block_eliminated])]
		     
                // DO ... WHILE loop
                  
                | Statement("DO",[Tok(d),block,w,lp,TokS(be),rp,s]) =>
                  def block_eliminated = eliminate_block(block,d);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("DO",[Tok(d),block_eliminated2,w,lp,TokS(be + " && !" + ns),rp,s]),
			TokS (ExtendedToken.getWhitespaces (d) + "mutable " + ns + " = false;")];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(d,rs,ns);
						
                        [when_statement,
			 Statement("DO",[Tok(d),block_eliminated2,w,lp,TokS(be + " && !" + ns),rp,s]),
			 TokS (ExtendedToken.getWhitespaces (d) + "mutable " + ns + " = false;"),
			 TokS (ExtendedToken.getWhitespaces (d) + "mutable " + rs +
                               " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("DO",[Tok(d),block_eliminated,w,lp,TokS(be),rp,s])]

                // WHILE loop
                  
                | Statement("WHILE",[Tok(w),lp,TokS(be),rp,block]) =>
		  def block_eliminated = eliminate_block(block,w);
		  
   	          if(block_eliminated.break_inside ())
		  {
		     def ns = new_break_loop_symbol ();
		     def rs = new_return_symbol ();
		     def (block_eliminated2,ret) = block_eliminated.eliminate_break_in_loop (ns,rs);
		     if(!ret)
		     {
                        [Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp,block_eliminated2]),
			 TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),];
	             }
		     else
		     {  		     
			def when_statement = make_when_statement(w,rs,ns);
						
                        [when_statement,
			Statement("WHILE",[Tok(w),lp,TokS(be + " && !" + ns),rp, block_eliminated2]),			
			TokS (ExtendedToken.getWhitespaces (w) + "mutable " + ns + " = false;"),
			TokS (ExtendedToken.getWhitespaces (w) + "mutable " + rs + " = Nemerle.Extensions.DefaultValue("+ tp +");")];
	             }
		     
		  }
		  else
		     [Statement("WHILE",[Tok(w),lp,TokS(be),rp,block_eliminated])]
		                                    
                | x => 
		    def loop (trees,acc)
		    {
			match(trees)
			{
			    | (Statement(_,_) as statement) :: tail =>
				def eliminated_st = statement.eliminate_breaks ();				
				match(eliminated_st)
				{
				    | [] => assert(false)
				    //| [x] => loop (tail, x :: acc)
				    | xs =>
					/*def block = 
					Statement("BLOCK",
					Tok(ExtendedToken(get_first_whitespace(x),"{")) :: 
					x :: xs + [Tok(ExtendedToken(get_first_whitespace(x),"}"))]
					);*/
					loop (tail, eliminated_st + acc)
				}
				
			    | head :: tail =>
				loop (tail, head :: acc)				
			    | [] => List.Rev (acc)
			}
		    }
		    match(x)
		    {
			| Statement(name,trees) =>
			    [Statement(name,loop(trees,[]))]
			| _ => [x]
		    }
            }
        }

        /**
         *  Function used to transform loops containig 'break' statements
         */
        protected eliminate_break_in_loop (ns : string,rs : string) : STree * bool
        {
            def loop (sts : list [STree], acc : list [STree],acc2 : bool) : list [STree] * bool
            {
                match (sts)
                {
                    | [] => (List.Rev (acc),acc2)

                    | (Statement ("WHEN",_) as if_st) :: []
                    | (Statement ("IF",_) as if_st) :: [] =>
                      def (if_st_el,ret) = if_st.eliminate_break_in_loop (ns,rs);
                      
                      (List.Rev (if_st_el :: acc),ret || acc2)

                    | (Statement ("WHEN",[Tok(i),_,_,_,_]) as if_st) :: tail 
                    | (Statement ("IF",[Tok(i),_,_,_,_,_,_]) as if_st) :: tail =>
                      if (if_st.break_inside ())
                      {
                          def whitespaces = ExtendedToken.getWhitespaces (i);
                          def (if_st_el,ret1) = if_st.eliminate_break_in_loop (ns,rs);
                          def block = Statement("BLOCK", TokS(whitespaces + "{") :: tail + [TokS(whitespaces + "}")]);
                          def (block_el,ret2) = block.eliminate_break_in_loop (ns,rs);
                          def when_st = Statement("WHEN", [Tok( ExtendedToken (whitespaces ,"when")),TokS("( "),TokS("!"+ns),TokS(" )"),block_el]);
                          
                          (List.Rev (when_st :: if_st_el :: acc),ret1 || ret2 || acc2)
                      }
                      else
                          (loop (tail , (if_st :> STree) :: acc,acc2))
			  
		    | Statement("RETURN",[Tok(b),TokS(expr),s]) :: _ =>		  
	              def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		      [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		      Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
		      [TokS(ExtendedToken.getWhitespaces(b) + "}")]);  // oh, this is ugly
		      
		      (List.Rev(new_block :: acc),true)
		      
                    | Statement("RETURN",[Tok(b),s]) :: _ =>
		      def new_block = Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		      [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		      Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
		      [TokS(ExtendedToken.getWhitespaces(b) + "}")]);

	              (List.Rev(new_block :: acc),true)
		      
                    | Statement("BREAK",[Tok(b),s]) :: _ =>                     
                      (List.Rev(Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]) :: acc),acc2)
		    
		    | (Statement("BLOCK",_) as block_st) :: tail=>
			def (block_eliminated,ret) = block_st.eliminate_break_in_loop(ns,rs);
			loop (tail,block_eliminated :: acc,acc2 || ret)
		    
		    | head :: tail => (loop (tail , head :: acc,acc2))
                }
            }
            
            match(this)
            {
                | Statement("IF",[i,lp,be,rp,st1,e,st2]) =>

                  mutable st1_el = null;
                  mutable st2_el = null;
                  
                  match (st1.eliminate_breaks ())
                  {
                      | [tree] => st1_el = tree
                      | _ => assert(false);
                  }

                  match (st2.eliminate_breaks ())
                  {
                      | [tree] => st2_el = tree
                      | _ => assert(false);
                  }
                  
                  if (st1.break_inside () && st2.break_inside ())
		  {
		      def (st1_el,ret1)= st1.eliminate_break_in_loop (ns,rs);
		      def (st2_el,ret2)= st2.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret1 || ret2)
		  }

                  else if (st1.break_inside ())
		  {
		      def (st1_el,ret)= st1.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret)
		  }    
                       
                  else if (st2.break_inside ())
		  {
		      def (st2_el,ret)= st2.eliminate_break_in_loop (ns,rs);
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),ret)
		  }
                  else
                      (Statement("IF",[i,lp,be,rp,st1_el,e,st2_el]),false)
                      
                | Statement("WHEN",[w,lp,be,rp,st]) =>
		  def (st_el,ret)= st.eliminate_break_in_loop (ns,rs);
                  (Statement("WHEN",[w,lp,be,rp,st_el]),ret)
                  
                | Statement("BREAK",[Tok(b),s]) =>
		  (Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),false)

		| Statement("RETURN",[Tok(b),s]) =>		  
                  (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		  [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		   Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = ()"),s])] + 
		  [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true)

		| Statement("RETURN",[Tok(b),TokS(expr),s]) =>		  
		  (Statement("BLOCK",TokS(ExtendedToken.getWhitespaces(b) + "{") ::
		  [Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + ns + " = true"),s]),
		  Statement("EXPRESSION_STATEMENT",[TokS(ExtendedToken.getWhitespaces(b) + rs + " = " + expr),s])] + 
		  [TokS(ExtendedToken.getWhitespaces(b) + "}")]),true)
		  
                | Statement("BLOCK",stmts) =>                  
                  def (lbrace,statements,rbrace) = cut_off_braces (stmts);
		  def (block_eliminated,ret) = loop (statements,[],false);
                  (Statement("BLOCK",lbrace :: block_eliminated + [rbrace]),ret)
                  
                | x =>
                  match(x.eliminate_breaks ())
                  {
                      | [y] => (y,false)
                      | _ => assert(false);
                  }
            }
        }

        /**
         *  Returns true, if statement or one of substatement contains 'break'
         */
        protected break_inside () : bool
        {
            def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.break_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {	        
	        | Statement("RETURN",_) => true		
                | Statement("BREAK",_) => true		
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.break_inside () || st2.break_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.break_inside () 

                | _ => false
            }
        }
	
	/** 
	 *  the same as break_inside (), but no RETURN checking
	 */	 
	protected break_inside_ () : bool
	{
	    def loop(xs : list [STree]) : bool
            {
                match(xs)
                {
                    | head :: tail =>
                      if(head.break_inside ())
                          true
                      else
                          loop(tail)
                    | _ => false                              
                }
            }
            
            match(this)
            {	        	     
                | Statement("BREAK",_) => true		
                | Statement("BLOCK",xs) =>
                  def b = loop(xs);
                  b
                | Statement("IF",[_,_,_,_,st1,_,st2]) =>
                  st1.break_inside () || st2.break_inside ()
                | Statement("WHEN",[_,_,_,_,st]) =>
                  st.break_inside () 
                | _ => false
            }
	}

        /* -- SYMBOL GENERATION ----------------------------------------- */
        
	new_symbol (suffix : string) : string
        {
            ++ symbol_count;
            "temp_" + symbol_count.ToString() + suffix
        }

        private new_break_loop_symbol () : string
        {
            new_symbol ("_break_loop_")
        }

	private new_return_symbol () : string
        {
            new_symbol ("_return_")
        }
	
	public static set_type (tpe : string) : void
	{
	    tp = tpe;
	}
	
	private static mutable tp : string = "";
        private static mutable symbol_count : int = 0;
        
    }

}
