using System;
using System.Console;
using SCG = System.Collections.Generic;
using Nemerle.Utility;
using Nemerle.Collections;
using Parsers;

namespace Test
{
  module Program
  {
    Main() : void
    {
      try
      {
        Console.OutputEncoding = Text.Encoding.UTF8;
        
        CalcTest();
        
      }
      catch
      {
      | ex is Exception => WriteLine(ex);
      }
      _ = ReadKey();
    }
    
    CalcTest() : void
    {
    // TODO: braces not working
      mutable text = "10    +2 - 3- 4 *4 / 2/   2  + (2+6)/2  "; //res =  9 
      //"1 - 2* 3 -4+5/(6- 7) ; ";    
          
//      for (mutable i = 0; i < 14; ++i)
//        text = text + text;

      WriteLine($"expression is:\n$text");
      WriteLine($"text length is:$(text.Length)");        
      
      def timer = Diagnostics.Stopwatch.StartNew();
      
      def calc = CalcParser(text);  
      def pos = calc.ParsedSymbolsCount;
      def res = calc.Result;
              
      timer.Stop();
      
      WriteLine($"$pos Parse took $(timer.Elapsed)");
      WriteLine($"result is: $res");
    }
/*
    CharEscTest() : void
    {
      for (mutable i = 0; i <= 0xffff; ++i)
      {
        def c = i :> char;
        def val = match (c)
        {
        | ' '  => " "
        | '\t' => "\\t"
        | '\n' => "\\r"
        | '\r' => "\\n"
        | '\\' => "\\\\"
        | c when char.IsLetter(c)      => c.ToString()
        | c when char.IsDigit(c)       => c.ToString()
        | c when char.IsPunctuation(c) => c.ToString()
        | c when char.IsSeparator(c)   => c.ToString()
        | c when char.IsSymbol(c)      => c.ToString()
        | c =>
          def c = c : uint;
          string.Format("\\u{0,4:X}", c).Replace(' ', '0');
        }
        WriteLine($"'$val'\t'$c'");
      }
    }
    */
  }
}
