using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  partial internal class Optimizer
  {
    private static FindActiveRules(start : string, rules : Grammar) : Set[string]
    {
      def findActiveRules(rule, activeRulesNames : Set[string])
      {
        match (rule : Rule)
        {
        | Call(name)               =>
          if (activeRulesNames.Contains(name))
            activeRulesNames;
          else
            findActiveRules(rules.GetRule(name), activeRulesNames.Add(name));
        | Choice(rules)            => rules.Fold(activeRulesNames, (rule, activeRulesNames) => findActiveRules(rule, activeRulesNames));
        | Sequence(rules)          => rules.Fold(activeRulesNames, (rule, activeRulesNames) => findActiveRules(rule, activeRulesNames));
        | Capture(_, rule)         => findActiveRules(rule, activeRulesNames);
        | RepeatMin(_, rule)       => findActiveRules(rule, activeRulesNames);
        | RepeatMinMax(_, _, rule) => findActiveRules(rule, activeRulesNames);
        | Not(rule)                => findActiveRules(rule, activeRulesNames);
        | And(rule)                => findActiveRules(rule, activeRulesNames);
        | Chars                    => activeRulesNames;
        | ExtensionPoint           => activeRulesNames;
        }
      }
      findActiveRules(rules.GetRule(start), Set().Add(start));
    }

    public static OptimizeGrammar(grammar : Grammar) : Grammar
    {
      def grammar = grammar.Names.Fold(Grammar(grammar.StartRuleName), (name, newGrammar) =>
      {
        newGrammar.Add(name, OptimizeRule(grammar.GetRule(name), grammar));
      });

      def activeRulesNames = FindActiveRules(grammar.StartRuleName, grammar);

      activeRulesNames.Fold(Grammar(grammar.StartRuleName), (name, newGrammar) =>
      {
        newGrammar.Add(name, grammar.GetRule(name));
      });
    }
  }
}
