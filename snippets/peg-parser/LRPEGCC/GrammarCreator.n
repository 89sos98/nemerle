using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace LRPEGCC
{
  /// <summary>
  /// Description of UnnamedTerminalSymbolsSplitter.
  /// </summary>
  module GrammarCreator
  {
    private static UnnamedRuleString = "unnamed_rule"; 

    public CreateGrammar(typer : Typer, _ : TypeBuilder, startRule : PExpr, rules : PExpr) : Grammar * Grammar
    {
      def parsedGrammar = Parsing.ParseRules(typer, RuleRef(startRule.Location, startRule.ToString()), rules);
      def grammarWithArgumentCaptures = AddArgumentCaptures(parsedGrammar);
      def optimizedGrammar = Optimizer.OptimizeGrammar(grammarWithArgumentCaptures);

      (parsedGrammar, optimizedGrammar)
    }

    private AddArgumentCaptures(grammar : Grammar) : Grammar
    {
      def optimizeType(ty : RuleType)
      {
        | Option(Chars)=> RuleType.Chars()
        | List(None)   => RuleType.None()
        | Option(None) => RuleType.None()
        | Tuple([])    => RuleType.None()
        | Tuple([ty])  => ty
        | _            => ty
      }
      def makeRes(rule, ty)
      {
        def ty = optimizeType(ty);
        (Rule.Capture(CaptureKind.Argument(ty), rule), ty);
      }
      def addCaptures(rule : Rule) : Rule * RuleType
      {
        | Choice(rules)                =>
          def rules = rules.Map(addCaptures);
          def (ty::_types) = rules.Map(t => t[1]); //TODO: Check _types
          def rules = rules.Map(t => t[0]);
          makeRes(Rule.Choice(rules), ty);

        | Sequence(rules)              =>
          def rules = rules.Map(addCaptures);
          def types = rules.Map(t => t[1]).Filter(ty => !(ty is RuleType.None));
          def rules = rules.Map(t => t[0]);
          def ty = RuleType.Tuple(types);
          makeRes(Rule.Sequence(rules), ty);

        | Call(name)                   =>
          def ty = match (grammar.GetRule(name))
          {
            | Capture(Handler(_, _, ty), _) => ty
            | _                             => RuleType.Chars()
          };
          makeRes(Rule.Call(name), ty);

        | RepeatMinMax(0, 1, rule) =>
          def (rule, ty) = addCaptures(rule);
          makeRes(Rule.RepeatMinMax(0, 1, rule), RuleType.Option(ty));

        | RepeatMinMax(min, max, rule) =>
          def (rule, ty) = addCaptures(rule);
          makeRes(Rule.RepeatMinMax(min, max, rule), RuleType.List(ty));

        | RepeatMin(min, rule)         =>
          def (rule, ty) = addCaptures(rule);
          makeRes(Rule.RepeatMin(min, rule), RuleType.List(ty));

        | Chars(chars)                 =>
          makeRes(Rule.Chars(chars), RuleType.Chars());

        | Not | And                    => (rule, RuleType.None())
        | Capture                      => throw ArgumentException();
        | ExtensionPoint               => throw NotImplementedException()
      }

      grammar.Names.Fold(Grammar(grammar.StartRuleName), (name, newGrammar) =>
      {
        def rule = match (grammar.GetRule(name))
        {
          | Capture(Handler(name, None, retType), rule) =>
            def (rule, argType) = addCaptures(rule);
            Rule.Capture(CaptureKind.Handler(name, argType, retType), rule)

          | Capture => throw ArgumentException();

          | rule => rule
        }
        newGrammar.Add(name, rule);
      })
    }
  }
}
