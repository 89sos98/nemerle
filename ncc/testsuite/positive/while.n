using Nemerle;

sealed class NotDisposable {
  mutable first : bool = false;
  public MoveNext () : bool { if (first) false else { first = true; true } }
  public Current : int { get { 1 } }
}

class Disposable : System.IDisposable {
  mutable first : bool = false;
  public Dispose () : void { }
  public MoveNext () : bool { if (first) false else { first = true; true } }
  public Current : int { get { 2 } }
}

class EWithNotDisposable {
  public GetEnumerator () : NotDisposable { NotDisposable () }
}

class EWithDisposable {
  public GetEnumerator () : Disposable { Disposable () }
}

class Enu : System.Collections.IEnumerable, System.Collections.IEnumerator {
  mutable first : bool = false;
  public MoveNext () : bool { if (first) false else { first = true; true } }
  public Current : int { get { 3 } }
  public Reset () : void { } 
  public bla () : Enu implements System.Collections.IEnumerable.GetEnumerator { this }
}

module M {
  test_foreach () : void {
    foreach (x in EWithNotDisposable ()) { IO.print ("$x ") }
    IO.printf ("\n");
    foreach (x in EWithDisposable ()) { IO.print ("$x ") }
    IO.printf ("\n");

    foreach (x in Enu ()) { IO.print ("$x ") }
    IO.printf ("\n");

    foreach (x in [77, 88, 99]) { IO.print ("$x ") }
    IO.printf ("\n");

    def a = array <3> [ [ [1, 2], [3, 4] ], [ [5, 6], [7, 8] ] ];
    foreach (x in a) { IO.print ("$x ") };
    IO.printf ("\n");
  }


  public Main () : void {
    mutable i1 = 3;
    def loop () { IO.printf ("I have colorful dreams!\n"); };
    
    while (i1 > 0) { IO.printf ("%d\n", i1); --i1; loop (); };

    for (mutable i = 0; i < 5; ++i) {
      mutable j = 1;
      while (j == 1) {
        IO.printf("for %d\n", i);
        j = 0;
      }
    };
    for (mutable j = 3; j > 0; --j) {
      IO.printf ("f %d\n", j);
    };

    def arr = array (5);
    arr[3] = 4;
    foreach (i : int in arr) {
      IO.printf ("%d", i + 1);
    };
    def f () { IO.printf ("dd "); };
    def g () { IO.printf ("gg\n"); };
    def arr = array [f, g];
    foreach (str : void -> void in arr) str ();

    test_foreach ();
  }
}

/*
BEGIN-OUTPUT
3
I have colorful dreams!
2
I have colorful dreams!
1
I have colorful dreams!
for 0
for 1
for 2
for 3
for 4
f 3
f 2
f 1
11151dd gg
1 
2 
3 
77 88 99 
1 5 3 7 2 6 4 8 
END-OUTPUT
*/
