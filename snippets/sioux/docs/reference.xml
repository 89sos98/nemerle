<?xml version="1.0" encoding="utf-8"?>
<page subtitle="Sioux Reference Manual">

  <section title="1. Introduction" anchor="intro">
    <p>
    This document describes classes from <b>Sioux</b> namespace and <b>Nemerle.Xml</b> namespace.
    </p>
  </section>
  <section title="2. Sioux namespace" anchor="sioux">

  <!-- COOKIE CLASS =========================================================================== -->

    <subsection title="2.1 Cookie class" anchor="cookie">
    <p>
    Creates a cookie, a small amount of information sent by a web application  to a Web browser, saved by the browser, 
    and later sent back to the server.
    </p>
    
    <p>
    <b>Constructors:</b>
    </p>

    <ul2>
    <li> 
    <b class="terminal">public this (name : string, value : string)</b>
    <p>constructs a cookie with given name and value</p>
    </li>
    <li><b class="terminal">public this (name : string, value : string, expires : DateTime)</b>
    <p>constructs a cookie with given name, value and expiration date</p>
    </li>
    </ul2>
    

    <p>
    <b>Public properties:</b>
    </p>
    

    <ul2>
    <li><b class="terminal">public Name : string</b>
    <p><b>get</b> - returns the name of the cookie. The name cannot be changed after creation.</p>
    </li>
    <li><b class="terminal">public Value : string</b>
    <p><b>set</b> - assigns a new value to a cookie after the cookie is created <br/> <b>get</b> - return value of cookie</p>
    </li>
    <li><b class="terminal">public Path : string</b>
    <p><b>set</b> - setting a virtual path of cookie to which client should return cookie<br/> <b>get</b> - getting a path of cookie 
     to which client should return cookie</p>
    </li>
    <li><b class="terminal">public Domain : string</b>
    <p><b>set</b> - specifies a path for the cookie to which the client should return the cookie <br/> 
    <b>get</b> - returns the domain name set for this cookie</p>
    </li>
    <li><b class="terminal">public Expires : DateTime</b>
    <p><b>set</b> - sets the expiration date and time for cookie <br/> 
    <b>get</b> - gets the expiration date and time for cookie </p>
    </li>
    <li><b class="terminal">public Secure : bool</b>
    <p><b>set</b> - sets a value indicating the browser whether the cookie should only be sent using a secure protocol, 
        such as HTTPS or SSL. <br/> 
    <b>get</b> - gets ----||---- </p>
    </li>
    <li><b class="terminal">public Header : string * string</b>
    <p><b>get</b> - get a header pair representing cookie, where first element is header name and second is header value</p>
    </li>
    </ul2>
    
    <p>
    <b>Public methods:</b>
    </p>    
    <ul2>
    <li><b class="terminal">public override ToString() : string</b>
     <p>Returns string representation of cookie</p>
    </li>
    </ul2>
    </subsection> 

  <!-- SESSION CLASS ====================================================================== -->

    <subsection title="2.2 Session class" anchor="session">
    <p>
    Provides a way to identify a user across more than one page request or visit to a Web site and to store 
    information about that user.
    </p>
    
    <p>
    <b>Public properties:</b>
    </p>    
    
    <ul2>
    <li><b class="terminal">public SessionID : string</b>
    <p><b>get</b> - returns a string containing the unique identifier assigned to this session.</p>
    </li>

    <li><b class="terminal">public Timeout : int</b>
    <p><b>set</b> - specifies the time, in minutes, between client requests before Sioux will invalidate this session.<br/>
    <b>get</b> - returns the maximum time interval, in minutes, that sioux will keep this session open between 
      client accesses. After this interval, sioux will invalidate the session. A -1 time indicates the session 
      should never timeout.</p>
    </li>

    <li><b class="terminal">public CreationTime : DateTime</b>
    <p><b>get</b> - returns time when session was created</p>
    </li>

    <li><b class="terminal">public LastAccesedTime : string</b>
    <p><b>get</b> - returns time when client last sent request associated with session</p>
    </li>

    <li><b class="terminal">public IsNew : bool</b>
    <p><b>get</b> - returns true when session was created with last client request </p>
    </li>

    <li><b class="terminal">public IsValid : bool</b>
    <p><b>get</b> - gets a value indicating if session is stall valid </p>
    </li>

    <li><b class="terminal">public Attributes : list &lt;string * object &gt;</b>
    <p><b>get</b> - returns a list of all attributes associated with session, where first element of pair is attribute name, and second 
    is attribute</p>
    </li>
    </ul2>

    <p>
    <b>Public methods:</b>
    </p>    
    <ul2>
    <li><b class="terminal">public Invalidate() : void</b>
      <p>Invalidates this session</p>
    </li>
    
    <li><b class="terminal">public AddAttribute(name : string,attribute : object) : void</b>
      <p>Adds attribute to session using specified name</p>
    </li>

    <li><b class="terminal">public RemoveAttribute(name : string) : void</b>
      <p>Removes attribute with specified name from session </p>
    </li>

    <li><b class="terminal">public ContainsAttribute(name : string) : bool</b>
      <p>Returns true if session contains attribute with given name, else returns false</p>
    </li>

    <li><b class="terminal">public GetAttribute(name : string) : option &lt;object&gt;</b>
      <p>Returns Some(attribute) if session contains attribute with specified name, else returns None</p>
    </li>

    </ul2>

    </subsection>    

    <!-- APPLICATION CLASS ====================================================================== -->

    <subsection title="2.3 Application class" anchor="app">
    <p>
    Class representing Nemerle web application.
    </p>

    <p>
    <b>Public methods:</b>
    </p>    
    <ul2>
    <li><b class="terminal">public virtual HandleRequest (request : Request , response : Response) : void</b>
      <p>Handles an HTTP request. Recognizes type of request. Puts get and post variables into hashtables, finally runs application
      (calling <b> DoPost()</b> or <b>DoGet</b>() method) and sends response.</p>
    </li>
    
    <li><b class="terminal">public ReportInternalError &lt;'a&gt; (msg : string) : &lt;'a&gt;</b>
    <p>Reports internal error and dies.</p>
    </li>

    </ul2>
    
    <p>
    <b>Protected methods:</b>
    </p>    
    <ul2>
    <li><b class="terminal">protected virtual DoGet()</b>
    <p>Called by Sioux to handle GET request.</p>
    </li>

    <li><b class="terminal">protected virtual DoPost()</b>
    <p>Called by Sioux to handle POST request.</p>
    </li>

    </ul2>

    <p>
    <b>Protected fields:</b>
    </p>    
    <ul2>
    <li><b class="terminal">protected mutable PageName : string</b>
    <p>Name of page that is requested.</p>
    </li>

    <li><b class="terminal">protected mutable FormTemplate : option &lt;XmlTemplate&gt;</b>
    <p>XmlTemplate object to be sent to the response stream.</p>
    </li>

    <li><b class="terminal">protected mutable GetVars : Hashtable &lt;string , string&gt;</b>
    <p>Contains all request parameters, if request type is DynamicGet.</p>
    </li>

    <li><b class="terminal">protected mutable PostVars : Hashtable &lt;string , string&gt;</b>
    <p>Contains all request parameters, if request type is Post.</p>
    </li>

    <li><b class="terminal">protected mutable PostedFiles : Hashtable &lt;string , string * string * int&gt;</b>
    <p>
    Hashtable containing informations about posted files. Key is the value of "name" attribute in the input field, and value is
    a tuple (filename,tempname,filesize). "filename" is original name of file, "tempname" is temporary name of file (file's name
    on server uploads directory) and "filesize" is the size of uploaded file.
    </p>
    </li>

    <li><b class="terminal">protected mutable request : Request</b>
    <p>Request used to access this application.</p>
    </li>

    <li><b class="terminal">protected mutable response : Response</b>
    <p>Response object, that application uses for sending response to browser.</p>
    </li>

    </ul2>

    </subsection>

    <!-- REQUEST CLASS ====================================================================== -->

    <subsection title="2.4 Request class" anchor="request">
    <p>
    Class that parses request stream and provides information about HTTP request.
    </p>

    <p>
    <b>Public properties:</b>
    </p>    
    <ul2>

    <li><b class="terminal">public RequestInfo : RequestInfo</b>
    <p><b>get</b> - returns request info associated with this instance</p>
    </li>

    <li><b class="terminal">public RequestUri : string</b>
    <p><b>get</b> - returns request uri as a string</p>
    </li>

    <li><b class="terminal">public Cookies : list &lt;Cookie&gt;</b>
    <p><b>get</b> - returns list of cookies sent with this request</p>
    </li>

    <li><b class="terminal">public Protocol : string</b>
    <p><b>get</b> - returns request's protocol</p>
    </li>

    </ul2>

    <p>
    <b>Public methods:</b>
    </p>    
    <ul2>

    <li><b class="terminal">public GetCookie (name : string) : option &lt;Cookie&gt;</b>
    <p>Returns Some(Cookie), if browser sent cookie with given name, else returns None.</p>
    </li>

    <li><b class="terminal">public GetSession() : Session</b>
    <p>Return session associated with this request.</p>
    </li>

    <li><b class="terminal">public GetSession(create : bool) : Session</b>
    <p>Return session associated with this request, if create is true creates new session.</p>
    </li>

    <li><b class="terminal">public GetHeader(name  : string) : option &lt;string&gt;</b>
    <p>Returns value of specified header.</p>
    </li>

    </ul2>

    </subsection>

    <!-- RESPONSE CLASS ====================================================================== -->

    <subsection title="2.5 Response class" anchor="response">
    <p>
    Class representing HTTP server response.    
    </p>

    <p>
    <b>Public methods:</b>
    </p>    
    <ul2>

    <li><b class="terminal">public Write (s : string) : void</b>
    <p>Writes a string to the response stream</p>.
    </li>
    
    <li><b class="terminal">public WriteLine () : void</b>
    <p>Writes a CR/LF pair to the response stream.</p>
    </li>

    <li><b class="terminal">public WriteLine (s : string) : void</b>
    <p>Writes a string followed by CR/LF pair to the response stream.</p>
    </li>

    <li><b class="terminal">public WriteServerName () : void</b>
    <p>Writes server's name to the response stream.</p>
    </li>

    <li><b class="terminal">public WriteRedirect (url : string) : void</b>
    <p>Redirects browser to given url.</p>
    </li>

    <li><b class="terminal">public WriteInvalid () : void</b>
    <p>Writes an error message concerning an invalid request    </p>
    </li>

    <li><b class="terminal">public WriteNotFound () : void</b>
    <p>Writes an error message concerning not being found.    </p>
    </li>

    <li><b class="terminal">public WriteMimeType (file_name : string) : void</b>
    <p>Writes the MIME content type header to the response stream.</p>
    </li>

    <li><b class="terminal">public WriteXml (document : XmlDocument , content_type : string , charset : string) : void</b>
    <p>Writes the contents of an XML document to the response stream.</p>
    </li>

    <li><b class="terminal">public WriteXhtml (document : XmlDocument) : void</b>
    <p>Writes the contents of an XHTML document to the response stream.</p>
    </li>

    <li><b class="terminal">public static CheckUrl(url : string) : string</b>
    <p>Checks if the url from a request is valid.</p>
    </li>

    <li><b class="terminal">public static GetLocalFileName(url : string) : string</b>
    <p>Converts an URL from request into a local file name with the path relative to the server repository.</p>
    </li>

    <li><b class="terminal">public ServeStaticFile(url : string) : void</b>
    <p>Serves a static file.</p>
    </li>

    <li><b class="terminal">public AddHeader(name : string , value : string) : void</b>
    <p>Adds a response header with given name and value.</p>
    </li>

    <li><b class="terminal">public AddCookie(cookie : Cookie) : void</b>
    <p>Adds the specified cookie to the response. This method can b called multiple times to set more than one cookie.</p>
    </li>

    </ul2>
    
    </subsection>
  
    <!-- REQUESTINFO VARIANT ======================================================================-->  

    <subsection title="2.6 RequestInfo variant" anchor="request_info">
    <p>
    This variant describes HTTP request
    </p>

    <p>
    <b>Values:</b>
    </p>   
    
    <ul2>

    <li><b class="terminal">StaticGet {url : string;} </b>
    <p>This option is used when request type is static GET. It can carry only the url string used in request.</p>
    </li>

    <li><b class="terminal">DynamicGet {url : string; get_params : list &lt;string * string&gt;;} </b>
    <p>This option is used when some application is opened. It contains request url and all parameters used in the request.</p>
    </li>

    <li><b class="terminal">Post {url : string; post_params : list &lt;string * string&gt;;} </b>
    <p>This option is used when we send POST request to some application. It contains request url and all parameters used in the request.
    </p>
    </li>

    <li><b class="terminal">Invalid</b>
    <p>This option is used when request is invalid, for example dynamic GET request to simple, static html page.</p>
    </li>

    </ul2>

    </subsection>

  </section>
  <section title="3. Nemerle.Xml namespace" anchor="xml">
    <p>
    
    </p>
  </section>
</page>