interface I_Comparable_To ['a]
  {
    compare (_ : 'a) : int;
  }

interface I_Test_Overload ['a]
  {
    set (_ : int) : void;
    set (_ : float) : void;
  }

  
interface A { foo () : void; 
}
interface B : A { new foo() : void; }

class C : B {
  public foo () : void { }
  public foo1 () : void implements A.foo  {}
}
  

namespace Bug881 {
  class Base {
    public virtual Foo[T](x : T) : list [T] { 
        System.Console.WriteLine (typeof (T));
        [x] 
    }
  }

  interface IFace {
    Foo[T](x : T) : list [T];
  }

  class Derived : Base, IFace {} 
}

class Bar { }
 
def d = Bug881.Derived () : Bug881.IFace;
assert (d.Foo (Bar ()).Length == 1);

/*
BEGIN-OUTPUT
Bar
END-OUTPUT
*/