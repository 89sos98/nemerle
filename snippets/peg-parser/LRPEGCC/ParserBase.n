using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System.Text;
using System;
using SCG = System.Collections.Generic;

namespace LRPEGCC
{
  /// <summary>
  /// 
  /// RetExprType - Type of parsing result (i.e. AST)
  /// </summary>
  public abstract class ParserBase[RetExprType]
  {    
    // It is unused
    // [Accessor(flags = Protected)]
    // private _cache : System.Collections.Generic.Dictionary[int, int] = System.Collections.Generic.Dictionary();
    
    // this data is to be parsed by subclass
    protected _text : string;
    
    private mutable _result : RetExprType;    
    private mutable _parsedSymbolsCount : int;
    private mutable _isParsed : bool = false;    
    
    public Result : RetExprType
    {
      get
      {
        unless(_isParsed)
          Parse();
          
        _result
      }
    }
    
    public ParsedSymbolsCount : int
    {
      get
      {
        unless(_isParsed)
          Parse();
            
        _parsedSymbolsCount
      }
    }
    
    public this(text : string)
    {
      _text = text;
    }
    
    protected GetChar(pos : int) : char
    {
      _text[pos];
    }
    
    protected CheckTextLength(pos : int) : bool
    {
      pos < _text.Length;
    }   
    
    private Parse() : void
    {
      unless (_isParsed)
      {
        def (pos, resulr) = DoParse();
        _parsedSymbolsCount = pos;
        
        when (resulr != null && resulr.IsValueSet)
        _result = resulr.ComputedValue;
      }
    }
        
    // this method is to be generated by macro "PegGrammar"
    protected abstract DoParse() : int * NonTerminalToken[RetExprType];
  }
}
