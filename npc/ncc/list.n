open List;

variant list ('a) =
  [
    | Cons { hd : 'a; tl : list ('a); }
    | Nil {}
  ]

class List
  {
    fun ('a) append (x : list ('a), y : list ('a)) : list ('a) =
      match x with [
        | Nil => y
        | Cons ?x => Cons (x#hd, append (x#tl, y))
      ];

    // blah. otherwise @ is used as symbol name
    fun ('a) `@` (x : list ('a), y : list ('a)) : list ('a) = extern "List.append";

    fun ('a, 'b) map (f : 'a -> 'b, x : list ('a)) : list ('b) = 
      match x with [
        | Nil => Nil ()
        | Cons ?x => Cons (f (x#hd), map (f, x#tl))
      ];

    fun ('a) length (x : list ('a)) : int =
      letfun loop (acc : int, x : list ('a)) : int =
        match x with [
          | Cons ?x => loop (acc + 1, x#tl)
          | _ => acc
        ] in loop (0, x);

    fun ('a, 'b) fold_left (f : 'b * 'a -> 'b, acc : 'b, l : list ('a)) : 'b =
      match l with [
        | Nil ?_ => acc
        | Cons ?l => fold_left (f, f (acc, l#hd), l#tl)
      ];

    fun ('a) iter (f : 'a -> void, l : list ('a)) : void =
      letfun i (dummy : int, e : 'a) : int { f (e); dummy } in
      let _ = fold_left (i, 0, l) in
      ();

    fun ('a) exists (f : 'a -> bool, l : list ('a)) : bool =
      match l with [
        | Nil => false
        | Cons (?h, ?t) => if f(h) then true else exists(f, t)
      ];

    fun ('a, 'b) forall2 (f : 'a * 'b -> bool, a : list ('a), b : list ('b)) : bool =
      match (a, b) with [
        | (Nil, Nil) => true
        | (Cons (?x, ?xs), Cons (?y, ?ys)) =>
          if f (x, y) then forall2 (f, xs, ys)
          else false
        | _ => raise Invalid_argument("List.forall2")
      ];

    fun ('a) cons (e1 : 'a) : list ('a) =
      Cons (e1, Nil ());
      
    fun ('a) cons (e1 : 'a, e2 : 'a) : list ('a) =
      Cons (e1, cons (e2));
      
    fun ('a) cons (e1 : 'a, e2 : 'a, e3 : 'a) : list ('a) =
      Cons (e1, cons (e2, e3));

    fun ('a) rev (l : list ('a)) : list ('a)=
      letfun loop (acc : list ('a), l : list ('a)) : list ('a) =
        match l with [
          | Cons (?x, ?xs) => loop (Cons (x, acc), xs)
          | Nil => acc
        ] in loop (Nil (), l);

    fun ('a) concat (l : list (list ('a))) : list ('a) =
      fold_left(append, Nil(), rev(l));
  }
