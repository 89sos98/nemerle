using Nemerle.IO;

module TestIsAndIsp
{
  variant SomeTree {
    | Node { left : SomeTree; val : int; right : SomeTree; }
    | Leaf
  }

  [Record]
  class SomeBaseClass
  {
    public m_some_base_int : int;
  }
  
  [Record]
  class SomeClass : SomeBaseClass
  {
    public m_some_int : int;
  }

  test_is (whatami : SomeBaseClass) : void
  {
    if ((whatami is SomeClass))
      printf ("SomeClass\n")
    else if ((whatami is SomeBaseClass))
      printf ("SomeBaseClass\n")
    else if ((whatami is (System.Object)))
      printf ("System.Object\n")
    else
      printf ("test_is: panic!\n")
  }

  test_isp (whatami : SomeTree) : void
  {
    if ((whatami isp Leaf))
      printf ("Leaf\n")
    else if ((whatami isp Node { val = 10 }))
      printf ("Node with val = 10\n")
    else if ((whatami isp Node))
      printf ("Some other node\n")
    else
      printf ("test_isp: panic!\n")      
  }

  Main () : void
  {
    test_is (SomeClass (10, 30));
    test_is (SomeBaseClass (20));
    test_isp (Leaf ());    
    test_isp (Node (Leaf (), 10, Leaf ()));
    test_isp (Node (Leaf (), 20, Leaf ()));
  }
}

/*
BEGIN-OUTPUT

END-OUTPUT
*/
