using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

[assembly: DefineSurround("currentAsyncRequest", false, 
                          _currentAsyncRequest = request, 
                          {
                            _currentAsyncRequest = null;
                            request.MarkAsCompleted();
                          })]


namespace Nemerle.Completion2
{
	public partial class Engine
	{
    public BeginUpdateCompileUnit(source : ISource) : AsyncRequest
    {
      def request = AsyncRequest(AsyncRequestType.UpdateCompileUnit, this, source,
                      UpdateCompileUnit(_, source));
      AsyncWorker.AddWork(request);
      request
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions. 
    private UpdateCompileUnit(request : AsyncRequest, source : ISource) : void
    {
      surroundwith (currentAsyncRequest)
      try
      {
        AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
        _currentAsyncRequest = request;
        _callback.SetStatusText("Update compile unit...");

        when (request.Stop)
          return;

			  def compUnit = ParseCompileUnit(source);
        source.CompileUnit = compUnit;
        when (compUnit.ParseCompilerMessages.Any(cm => cm.Msg.Contains("unexpected end of file")))
        {
          // The user does type non closed bracket. The AST is be in incorrect state.
          // We should report errors and stop processing the CompileUnit.

          //TODO: Добавить выдачу сообщений об ошибках парсинга CompileUnit-а!
          return;
        }

        def collectTopDeclarations(source, compUnit) : void
        {
			    def topDecls       = compUnit.TopDeclarations;
			    def decls          = AstUtils.GetAllDeclarations(topDecls);

			    def declsAry = decls
				    .Where(d => d.name is Splicable.Name && d.name.GetName().context != null)
				    .OrderBy(d => d.Name)
				    .ToArray();

			    //source.Declarations = declsAry;
          AsyncWorker.AddResponse(() => source.SetTopDeclarations(declsAry));
        }

        def rebuildTypesTreeIfStructureChanged(engine, source) : void
        {
			    // Сравненивает старый и новый CompileUnit, и если их структура не совпадает (т.е. были 
			    // добавлены, удалены, изменены методы), запустить парсинг дерева типов. 
			    // Парсинг дерева типов так же запускается если оно не существует к этому моменту.
          def isNeedBuildTypesTree = if (engine.IsProjectAvailable)
            //TODO: VladD2: Возможно в IsStructureOfCompileUnitChanged нужно передавать еще 
            // старое значение CompileUnit-а (то что было в source.CompileUnit до его обновления).
            // Иначе сравнение будет всегда происходить с CompileUnit-ом полученым при построении
            // дерева типов и это может привести черт знает к чему. В общем нужно продумать стратегию
            // проверки изменения структуры CompileUnit-а!!!
                                       engine.Project.IsStructureOfCompileUnitChanged(source)
                                     else
                                       true;
          when (isNeedBuildTypesTree)
					  ignore(engine.BeginBuildTypesTree());
        }

        collectTopDeclarations(source, compUnit);

        when (request.Stop)
          return;

			  def regions = RegionsHelper.Collect(source);
        AsyncWorker.AddResponse(() => source.SetRegions(regions));

        when (request.Stop)
          return;

        unless (IsDefaultEngine)
          rebuildTypesTreeIfStructureChanged(this, source);
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The update CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally { _callback.SetStatusText("Update compile unit is complete."); }
    }

    private ParseCompileUnit(source : ISource) : CompileUnit
    {
      RestoreManagerClassInstance();
      def currentMessages = _currentMessages;
      try
      {
        _currentMessages = List();

        def fileIndex = source.FileIndex;
        _namespaces.Clear();
        _decls        = [];
        def code      = source.GetText();
        def lexer     = LexerString(this, code, Location(fileIndex, 1, 1));
        def topDecls  = try { ParsingPipeline(lexer) }
                       catch { | _ => [] }; //!!! теряем сообщение!
        def endLoc    = lexer.Location;
        def loc       = Location(fileIndex, 1, 1, endLoc.EndLine, endLoc.EndColumn);
        def insideEnv = match (_decls.Find(_ is Decl.Using))
                        { | Some(Decl.Using as u) => u.AfterEnv | _ => CoreEnv };
        def topNs     = Decl.Namespace(loc, _decls.Rev(), [], [], CoreEnv, insideEnv, loc, topDecls);
        assert2(_namespaces.Count == 0);

        // Данная функция подключает полученный список TopDeclaration-ов в пространсва имен к которым
        // они пренадлежат.
        // Go through namespaces for each file.
        
        def addTypes(ns, topDeclarations) : void
        {
          def getNsDeclList(ns, acc = List())
          {
            acc.Add(ns);

            foreach (subNs is Decl.Namespace in ns.Decls)
              _ = getNsDeclList(subNs, acc);

            acc
          }
          
          def typesGroupedByNs = topDeclarations.GroupBy(
                d => match (d.TryGetEnv()) { | Some(env) => env | _ => null }).AsList();

          def nsDeclList = getNsDeclList(ns).AsList();
          def join = nsDeclList.Join(typesGroupedByNs, 
                nsDecl => nsDecl.InsideEnv,
                group  => group.Key,
                x      => x);
          foreach ((nsDecl, group) in join)
            foreach (topDeclaration in group)
              nsDecl.Decls ::= Decl.Type(topDeclaration.Location, topDeclaration);
        }
        
        addTypes(topNs, topDecls);
        
        CompileUnit(topNs, topDecls.Rev(), lexer.Regions.Rev(), _currentMessages.AsArray());
      }
      finally
      {
        when (currentMessages != null && _currentMessages.Count > 0)
          currentMessages.AddRange(_currentMessages);

        _currentMessages = currentMessages;
        _decls           = [];
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
