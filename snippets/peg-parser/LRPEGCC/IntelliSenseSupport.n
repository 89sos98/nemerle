using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace LRPEGCC
{
  internal module IntelliSenseSupport
  {
    public AddIntelliSenseSupport(parsedGrammar : Grammar, typer : Typer, tb : TypeBuilder) : void
    {
      foreach (name in parsedGrammar.Names)
        MakeGotoInfos(name, parsedGrammar, tb, typer);
    }

    public GetGotoMap(tb : TypeBuilder) : Hashtable[Location, Location]
    {
      mutable gotoMap = tb.UserData["GoToInfoMap"] :> Hashtable[Location, Location];

      when (gotoMap == null)
      {
        gotoMap = Hashtable();
        tb.UserData["GoToInfoMap"] = gotoMap;
      }
      gotoMap
    }

    private MakeGotoInfos(ruleName : NameRef, grammar : Grammar, tb : TypeBuilder, _typer : Typer) : void
    {
      def gotoMap = GetGotoMap(tb);
      def makeGotoRuleDef(r : Rule) : void
      {
        | Choice(rules)                       => foreach (r in rules) makeGotoRuleDef(r)
        | Sequence(rules)                     => foreach (r in rules) makeGotoRuleDef(r)
        | Call(name)                          => gotoMap[name.Location] = grammar.GetRule(name).Location
        | RepeatMin(_, rule)                  => makeGotoRuleDef(rule)
        | RepeatMinMax(_, _, rule)            => makeGotoRuleDef(rule)
        | Chars | Fsm                         => ()
        | Not(rule)                           => makeGotoRuleDef(rule)
        | And(rule)                           => makeGotoRuleDef(rule)
        | Capture(_, rule)                    => makeGotoRuleDef(rule)
        | Cut                                 => ()
        | Scope(name, rule)                   =>
          def scopeBeginName = name.Id + RuleCompiler.ScopeBeginSufix;
          def scopeEndName   = name.Id + RuleCompiler.ScopeEndSufix;
          def isScopeHendler(m : ClassMember)
          {
            | Function as f => f.Name == scopeBeginName || f.Name == scopeEndName
            | _ => false
          }
          def scopeHendlers = tb.GetParsedMembers(false).Filter(isScopeHendler).Map(_ :> ClassMember.Function);
          match (scopeHendlers)
          {
            x :: _ => gotoMap[name.Location] = x.Location;
            | _ => Message.Error(name.Location, $"You must define scope hendler[s] for this scope: $scopeBeginName() : void and/or $scopeEndName(isFial : bool) : void");
          }
          makeGotoRuleDef(rule)
      }

      makeGotoRuleDef(grammar.GetRule(ruleName).Rule);
    }
  }
}
