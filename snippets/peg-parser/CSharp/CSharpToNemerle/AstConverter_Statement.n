using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    ConvertStatement(stmt : CS.Statement) : list[PT.PExpr]
    {
      def loc = stmt.NLocation();

      def foldStatements(stmts : list[CS.Statement]) : PT.PExpr {
        def mapStatements(_) {
          | []      => []
          | [x]     => ConvertStatement(x)
          | x :: xs => WithLastStatement(false).ConvertStatement(x) + mapStatements(xs)
        }
        match(mapStatements(stmts)) {
          | []  => PT.PExpr.Void(loc)
          | [x] => x
          | xs  => PT.PExpr.Sequence(loc, xs)
        }
      }

      match(stmt) {
        | Empty
        | Block([]) =>
          [Util.locate(loc, <[ _ = () ]>)]

        | Block(stmts) =>
          [foldStatements(stmts)]

        | Expression(expr) =>
          def expr = WithIntoExpression(false).ConvertExpr(expr);
          if(isLastStatement)
            [Util.locate(loc, <[ _ = $expr ]>)]
          else
            [expr]

        | VariableDecl(varType, decls) =>
          decls.Map(fun(loc, id, decl) {
            def name  = ConvertExpr(id);
            def value = ConvertVariableInitializer(varType, decl);
            PT.PExpr.DefMutable(loc.NLocation(), name, value)
          })

        | ConstantDecl(constType, decls) =>
          decls.Map(fun(loc, id, val) {
            def name  = ConvertExpr(id);
            def value = PT.PExpr.TypeEnforcement(constType.NLocation(), ConvertExpr(val), ConvertExpr(constType));
            PT.PExpr.Define(loc.NLocation(), name, value)
          })

        | If(CS.Expr.BinaryOperator(left, right, CS.Identifier where (Id = "is")), trueStmt, falseStmt) =>
          [Util.locate(loc, {
            def doElse = match(falseStmt) {
              | null => <[ () ]>
              | _ => ConvertExpr(falseStmt)
            }
            <[
              match($(ConvertExpr(left)))
              {
                | _ is $(ConvertExpr(right)) => $(ConvertExpr(trueStmt))
                | _ => $doElse
              }
            ]>
          })]

        | If(expr, trueStmt, null) =>
          [Util.locate(loc, <[ Nemerle.Core.whenmacro($(ConvertExpr(expr)), $(WithLastStatement(false).ConvertExpr(trueStmt))) ]>)]

        | If(expr, trueStmt, falseStmt) =>
          [Util.locate(loc, <[ Nemerle.Core.@if($(ConvertExpr(expr)), $(ConvertExpr(trueStmt)), $(ConvertExpr(falseStmt))) ]>)]

        | Switch(expr, entries) =>
          def expr = ConvertExpr(expr);

          mutable matchCases = [];
          mutable currentEntriesRev = [];
          mutable wasDefault = false;

          foreach(entry in entries)
          {
            currentEntriesRev ::= entry;
            unless(entry.Body.IsEmpty())
            {
              mutable patterns = [];
              foreach(entry in currentEntriesRev)
              {
                | CS.SwitchCaseEntry.Case(id) =>
                  patterns ::= ConvertExpr(id);

                | CS.SwitchCaseEntry.Default =>
                  wasDefault = true;
                  patterns ::= PT.PExpr.Wildcard(entry.NLocation());
              }
              matchCases ::= PT.MatchCase(patterns, foldStatements(entry.Body));
              currentEntriesRev = [];
            }
          }
          unless(wasDefault)
          {
            def loc = expr.Location;
            matchCases ::= PT.MatchCase([PT.PExpr.Wildcard(loc)], PT.PExpr.Sequence(loc, []));
          }

          unless(currentEntriesRev.IsEmpty())
          {
            def x = currentEntriesRev.Last;
            Message.Error(x.NLocation(), $"control cannot fall from one case label `$x' to another");
          }

          [Util.locate(loc,
          <[
            ($(PT.Name.Global(manager, "_N_break") : name) : // `x : global' needs typer in context
            {
              match($expr) { ..$(matchCases.Rev()) }
            }) : void
          ]>)]

        | While(cond, stmt) =>
          [Util.locate(loc, <[ Nemerle.Core.@while($(ConvertExpr(cond)), $(WithLastStatement(false).ConvertExpr(stmt))) ]>)]

        | DoWhile(cond, stmt) =>
          [Util.locate(loc, <[ Nemerle.Core.dowhile( $(ConvertExpr(cond)), $(WithLastStatement(false).ConvertExpr(stmt))) ]>)]

        | ForVar(declExprs, cond, change, body)
          with( initExprs = null,
                init = declExprs.decls.FoldLeft([],
                  fun((loc, id, init), acc) {
                    def loc = loc.NLocation();
                    match(init : CS.VariableInitializer) {
                      | Expr(expr) =>
                        def init = match(declExprs.variableType) {
                          | null  => ConvertExpr(expr)
                          | ty    => PT.PExpr.TypeEnforcement(loc, ConvertExpr(expr), ConvertExpr(ty))
                        }
                        PT.PExpr.DefMutable(loc, ConvertExpr(id), init) :: acc
                      | _ =>
                        Message.Error(loc, "expression expected");
                        acc
                    }
                  }))
        | ForExpr(initExprs, cond, change, body)
          with( declExprs = null,
                init = initExprs.RevMap(ConvertExpr)) =>
          def cond = match(cond) {
            | null  => PT.PExpr.Void(loc)
            | _     => ConvertExpr(cond)
          }
          def change = match(change.Map(WithIntoExpression(false).ConvertExpr)) {
            | []    => PT.PExpr.Void(loc)
            | [x]   => x
            | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
          }
          def body = WithLastStatement(false).ConvertExpr(body);
          [Util.locate(loc,
            match(init) {
              | []      => <[ Nemerle.Core.@for((), $cond, $change, $body) ]>
              | [init]  => <[ Nemerle.Core.@for($init, $cond, $change, $body) ]>
              | _       =>
                def loop = (<[ Nemerle.Core.@for((), $cond, $change, $body) ]> :: init).Rev();
                <[ { ..$loop } ]>
            }
          )]

        | Foreach(var, null, expr, body) =>
          [Util.locate(loc, <[ foreach($(ConvertExpr(var)) in $(ConvertExpr(expr))) $(WithLastStatement(false).ConvertExpr(body)) ]>)]

        | Foreach(var, varType, expr, body) =>
          [Util.locate(loc, <[ foreach($(ConvertExpr(var)) : $(ConvertExpr(varType)) in $(ConvertExpr(expr))) $(WithLastStatement(false).ConvertExpr(body)) ]>)]

        | Break =>
          [Util.locate(loc, <[ Nemerle.Imperative.Break() ]>)]

        | Continue =>
          [Util.locate(loc, <[ Nemerle.Imperative.Continue() ]>)]

        | Label(label, stmt) =>
          PT.PExpr.Typed(label.NLocation(),
            TT.TExpr.Label(manager.InternalType.Void, labelScope.DeclareLabel(label),
            TT.TExpr.DefaultValue(manager.InternalType.Void)))
            :: ConvertStatement(stmt)

        | Goto(label) =>
          [PT.PExpr.Typed(loc, TT.TExpr.Goto(manager.InternalType.Void, labelScope.UseLabel(label), 1))]

        | GotoCase    with msg = "`goto case' statement is not supported"
        | GotoDefault with msg = "`goto default' statement is not supported" =>
          Message.Error(loc, msg);
          [PT.PExpr.Error(loc)]

        | Return(null) =>
          if(isLastStatement)
            [PT.PExpr.Void(loc)]
          else
            [Util.locate(loc, <[ Nemerle.Imperative.Return() ]>)]

        | Return(expr) =>
          if(isLastStatement)
            [ConvertExpr(expr)]
          else
            [Util.locate(loc, <[ Nemerle.Imperative.Return($(ConvertExpr(expr))) ]>)]

        | Throw(null) =>
          [PT.PExpr.Throw(loc, null)]

        | Throw(expr) =>
          [PT.PExpr.Throw(loc, ConvertExpr(expr))]

        | Try(body, [], finallyBlock) =>
          [PT.PExpr.TryFinally(loc, ConvertExpr(body), WithLastStatement(false).ConvertExpr(finallyBlock))]

        | Try(body, catchCases, finallyBlock) =>
          def convertCatchCase(entry) {
            def loc = entry.NLocation();
            def exnTy = match(entry.ExceptionType) {
              | null  => Util.locate(loc, <[ System.Exception ]>)
              | exnTy => ConvertExpr(exnTy)
            }
            def var = match(entry.Variable) {
              | null => MakeWildcardSplicableName(loc)
              | var  => MakeSplicableName(var)
            }
            PT.TryCase.Catch(loc, var, exnTy, ConvertExpr(entry.Body))
          }

          def tryCatch = PT.PExpr.Try(loc, ConvertExpr(body), catchCases.Map(convertCatchCase));
          match(finallyBlock) {
            | null => [tryCatch]
            | _ => [PT.PExpr.TryFinally(loc, tryCatch, WithLastStatement(false).ConvertExpr(finallyBlock))]
          }

        | Checked(body, true)   with (macroName = "checked",
                                      expr = ConvertExpr(body))
        | Checked(body, false)  with (macroName = "unchecked",
                                      expr = ConvertExpr(body))
        | YieldReturn(result)   with (macroName = "yield",
                                      expr = ConvertExpr(result))
        | YieldBreak            with (macroName = "yield",
                                      expr = <[ () ]>) =>
          [MakeSpecialMacroCall(loc, macroName, expr)]

        | Lock(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@lock($(ConvertExpr(expr)), $(ConvertExpr(body))) ]>)]

        | UsingVar(VariableDecl(varType, decls), body) =>
          def args = decls.FoldLeft([ConvertExpr(body)],
            fun((loc, id, init), acc) {
              def loc = loc.NLocation();
              match(init : CS.VariableInitializer) {
                | Expr(expr) =>
                  def init = PT.PExpr.Assign(loc, ConvertExpr(id), ConvertExpr(expr));
                  match(varType) {
                    | null  => init :: acc
                    | _     => PT.PExpr.TypeEnforcement(loc, init, ConvertExpr(varType)) :: acc
                  }
                | _ =>
                  Message.Error(loc, "expression expected");
                  acc
              }
            }).Rev();
          [Util.locate(loc, <[ Nemerle.Core.@using(..$args) ]>)]

        | UsingExpr(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@using($(ConvertExpr(body)), $(ConvertExpr(expr))) ]>)]

        | Unsafe =>
          Message.Error(loc, "unsafe code is not supported");
          [PT.PExpr.Error(loc)]

        | Fixed =>
          Message.Error(loc, "`fixed' statement is not supported");
          [PT.PExpr.Error(loc)]

        | Error(msg) =>
          Message.Error(loc, msg);
          [PT.PExpr.Error(loc)]
      }
    }

    ConvertExpr(stmt : CS.Statement) : PT.PExpr
    {
      match(WithIntoExpression(true).ConvertStatement(stmt)) {
        | []    => PT.PExpr.Void(stmt.NLocation())
        | [x]   => x
        | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
      }
    }
  }
}