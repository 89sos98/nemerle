using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Peg;
using LRPEGCC;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Type parameters
  
    //varianceAnnotation  : TypeParameterVariance = ("in" / "out")S;
    varianceAnnotation(variance : NToken, _ : NToken) : TypeParameterVariance
    {
      match(GetText(variance)) {
        | "in"  => TypeParameterVariance.In()
        | "out" => TypeParameterVariance.Out()
        | _     => throw ArgumentOutOfRangeException("variance")
      }
    }

    //typeParameter       : TypeParameter         = attributes? varianceAnnotation? identifier;
    typeParameter(attributes          : option[list[CustomAttribute]],
                  varianceAnnotation  : option[TypeParameterVariance],
                  identifier          : Identifier) : TypeParameter
    {
      TypeParameter(
        attributes.WithDefault([]),
        identifier,
        varianceAnnotation.WithDefault(TypeParameterVariance.Normal()))
    }

    //typeParameterList   : TypeParameterList     = "<"s typeParameter (","s typeParameter)* ">"s;
    typeParameterList(_lparen : NToken, _ : NToken,
                      head    : TypeParameter,
                      tail    : SCG.List[NToken * NToken * TypeParameter],
                      _rparen : NToken, _ : NToken) : list[TypeParameter]
    {
      head.Cons(tail)
    }

    //typeParameterConstraint_ctor : TypeParameterConstraint  = "new"S "("s ")"s;
    typeParameterConstraint_ctor( _new    : NToken, _ : NToken,
                                  _lparen : NToken, _ : NToken,
                                  _rparen : NToken, _ : NToken) : TypeParameterConstraint
    {
      TypeParameterConstraint.DefaultCtor()
    }

    //typeParameterConstraint_type : TypeParameterConstraint  = ("class" / "struct")S;
    typeParameterConstraint_type(typeConstraint : NToken, _ : NToken) : TypeParameterConstraint
    {
      match(GetText(typeConstraint)) {
        | "class"   => TypeParameterConstraint.Class()
        | "struct"  => TypeParameterConstraint.Struct()
        | _         => throw ArgumentOutOfRangeException("typeConstraint")
      }
    }

    //typeParameterConstraint_base : TypeParameterConstraint  = anyType;
    typeParameterConstraint_base(baseType : TypeRef) : TypeParameterConstraint
    {
      TypeParameterConstraint.Base(baseType)
    }

    //typeParameterConstraint      : TypeParameterConstraint  = typeParameterConstraint_ctor
    //                                                        / typeParameterConstraint_type
    //                                                        / typeParameterConstraint_base;
    typeParameterConstraint(opt : TypeParameterConstraint) : TypeParameterConstraint
    {
      opt
    }

    //typeParameterConstraints        : TypeParameterConstraintList       = typeParameterConstraint (","s typeParameterConstraint)*;
    typeParameterConstraints( head : TypeParameterConstraint,
                              tail : SCG.List[NToken * NToken * TypeParameterConstraint]) : list[TypeParameterConstraint]
    {
      head.Cons(tail)
    }

    //typeParameterConstraintsClause  : TypeParameterConstraintClause     = "where"S identifier ":"s typeParameterConstraints;
    typeParameterConstraintsClause( _where                    : NToken, _ : NToken,
                                    identifier                : Identifier,
                                    _colon                    : NToken, _ : NToken,
                                    typeParameterConstraints  : list[TypeParameterConstraint]) : TypeParameterConstraintClause
    {
      TypeParameterConstraintClause(identifier, typeParameterConstraints)
    }

    //typeParameterConstraintsClauses : TypeParameterConstraintClauseList = typeParameterConstraintsClause+;
    typeParameterConstraintsClauses(clauses : SCG.List[TypeParameterConstraintClause]) : list[TypeParameterConstraintClause]
    {
      clauses.Values()
    }

    #endregion

    #region Function parameters

    //parameterModifier   : FormalParameterModifier = ("ref" / "out" / "this" / "params")S;
    parameterModifier(mod : NToken, _ : NToken) : FormalParameterModifier
    {
      match(GetText(mod)) {
        | "ref"     => FormalParameterModifier.Ref()
        | "out"     => FormalParameterModifier.Out()
        | "this"    => FormalParameterModifier.This()
        | "params"  => FormalParameterModifier.Params()
        | _         => throw ArgumentOutOfRangeException("mod")
      }
    }

    //defaultArgument     : Expr                    = "="s expression;
    defaultArgument(_eq : NToken, _ : NToken, expr : Expr) : Expr
    {
      expr
    }

    //formalParameter     : FormalParameter         = attributes? parameterModifier? anyType identifier defaultArgument?;
    formalParameter(attributes        : option[list[CustomAttribute]],
                    parameterModifier : option[FormalParameterModifier],
                    paramType         : TypeRef,
                    identifier        : Identifier,
                    defaultArgument   : option[Expr]) : FormalParameter
    {
      FormalParameter(
        attributes.WithDefault([]),
        identifier,
        parameterModifier.WithDefault(FormalParameterModifier.Normal()),
        paramType,
        defaultArgument.WithDefault(null))
    }

    //formalParameterList : FormalParameterList     = formalParameter (","s formalParameter)*;
    formalParameterList(head : FormalParameter,
                        tail : SCG.List[NToken * NToken * FormalParameter]) : list[FormalParameter]
    {
      head.Cons(tail)
    }

    #endregion

    #region Class, Struct, Interface

    //typeBase                        : TypeRefList     = ":"s anyType (","s anyType)*;
    typeBase( _colon  : NToken, _ : NToken,
              head    : TypeRef,
              tail    : SCG.List[NToken * NToken * TypeRef]) : list[TypeRef]
    {
      head.Cons(tail)
    }

    //typeBody                        : TypeBody  = "{"s typeMemberDeclarations "}"s;
    typeBody( _lparen                 : NToken, _ : NToken,
              typeMemberDeclarations  : list[TypeMember],
              _rparen                 : NToken, _ : NToken) : TypeBody
    {
      VList(typeMemberDeclarations)
    }

    //classStructInterfaceDeclaration : TypeDeclaration = attributes? modifiers? ("class" / "struct" / "interface")S identifier typeParameterList? typeBase? typeParameterConstraintsClauses? typeBody (";"s)?;
    classStructInterfaceDeclaration(attributes                      : option[list[CustomAttribute]],
                                    modifiers                       : option[list[Modifier]],
                                    keyword                         : NToken, _ : NToken,
                                    identifier                      : Identifier,
                                    typeParameterList               : option[list[TypeParameter]],
                                    typeBase                        : option[list[TypeRef]],
                                    typeParameterConstraintsClauses : option[list[TypeParameterConstraintClause]],
                                    typeBody                        : TypeBody,
                                    _                               : option[NToken * NToken]) : TypeDeclaration
    {
      match(GetText(keyword)) {
        | "class"     =>
          TypeDeclaration.Class(
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            typeBody.Location,
            typeBase.WithDefault([]),
            typeBody)

        | "struct"    =>
          TypeDeclaration.Struct(
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            typeBody.Location,
            typeBase.WithDefault([]),
            typeBody)

        | "interface" =>
          TypeDeclaration.Interface(
            attributes.WithDefault([]),
            modifiers.WithDefault([]),
            identifier, 
            typeParameterList.WithDefault([]),
            typeParameterConstraintsClauses.WithDefault([]),
            typeBody.Location,
            typeBase.WithDefault([]),
            typeBody)

        | _           => throw ArgumentOutOfRangeException("keyword")
      }
    }

    #endregion

    #region Enum

    //enumBase                : TypeRef         = ":"s anyType;
    enumBase(_colon : NToken, _ : NToken, baseType : TypeRef) : TypeRef
    {
      baseType
    }

    //enumMemberDeclaration   : TypeMember      = attributes? identifier ("="s constantExpression)?;
    enumMemberDeclaration(attributes  : option[list[CustomAttribute]],
                          identifier  : Identifier,
                          value       : option[NToken * NToken * Expr]) : TypeMember
    {
      match(value) {
        | Some( (_, _, v) ) => TypeMember.EnumOption(attributes.WithDefault([]), [], identifier, v)
        | _                 => TypeMember.EnumOption(attributes.WithDefault([]), [], identifier, null)
      }
    }

    //enumMemberDeclarations  : TypeMemberList  = enumMemberDeclaration (","s enumMemberDeclaration)* (","s)?;
    enumMemberDeclarations( head : TypeMember,
                            tail : SCG.List[NToken * NToken * TypeMember],
                            _    : option[NToken * NToken]) : list[TypeMember]
    {
      head.Cons(tail)
    }

    //enumBody                : TypeMemberList  = "{"s enumMemberDeclarations? "}"s;
    enumBody( _lparen                 : NToken, _ : NToken,
              enumMemberDeclarations  : option[list[TypeMember]],
              _rparent                : NToken, _ : NToken) : VList[TypeMember]
    {
      VList(enumMemberDeclarations.WithDefault([]))
    }

    //enumDeclaration         : TypeDeclaration = attributes? modifiers? "enum"S identifier enumBase? enumBody (";"s)?;
    enumDeclaration(attributes  : option[list[CustomAttribute]],
                    modifiers   : option[list[Modifier]],
                    _enum       : NToken, _ : NToken,
                    identifier  : Identifier,
                    enumBase    : option[TypeRef],
                    enumBody    : VList[TypeMember],
                    _           : option[NToken * NToken]) : TypeDeclaration
    {
      TypeDeclaration.Enum(
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        identifier,
        [],
        [],
        enumBody.Location,
        enumBase.WithDefault(null),
        enumBody)
    }

    #endregion

    #region Delegate

    //delegateDeclaration = attributes? modifiers? "delegate"S anyType identifier typeParameterList? "("s formalParameterList? ")"s typeParameterConstraintsClauses? ";"s;
    delegateDeclaration(attributes                      : option[list[CustomAttribute]],
                        modifiers                       : option[list[Modifier]],
                        _delegate                       : NToken, _ : NToken,
                        returnType                      : TypeRef,
                        identifier                      : Identifier,
                        typeParameterList               : option[list[TypeParameter]],
                        _lparen                         : NToken, _ : NToken,
                        formalParameterList             : option[list[FormalParameter]],
                        _rparen                         : NToken, _ : NToken,
                        typeParameterConstraintsClauses : option[list[TypeParameterConstraintClause]],
                        _comma                          : NToken, _ : NToken) : TypeDeclaration
    {
      TypeDeclaration.Delegate(
        attributes.WithDefault([]),
        modifiers.WithDefault([]),
        identifier, 
        typeParameterList.WithDefault([]),
        typeParameterConstraintsClauses.WithDefault([]),
        GetLocation(_delegate, _),
        returnType,
        formalParameterList.WithDefault([]))
    }

    #endregion

    //typeDeclaration : TypeDeclaration = classStructInterfaceDeclaration
    //                                  / enumDeclaration
    //                                  / delegateDeclaration;
    typeDeclaration(opt : TypeDeclaration) : TypeDeclaration
    {
      opt
    }
  }
}