public GetMaxRollbackPosAndIds() : int * System.Collections.Generic.List[int]GetMaxRollbackPosAndIds() : int * System.Collections.Generic.List[int]
{
{
  def ids = System.Collections.Generic.List(42);
  mutable max = -1;
  
  {
  };
  (max, ids)
}
}

public GetMaxRollbackPosAndNames() : int * System.Collections.Generic.List[string]GetMaxRollbackPosAndNames() : int * System.Collections.Generic.List[string]
{
{
  def (max, ids) = GetMaxRollbackPosAndIds();
  def names = System.Collections.Generic.List(ids.Count);
  foreach (in(id, ids)) names.Add(GetRuleName(id));
  (max, names)
}
}

public GetRuleName(id : int) : stringGetRuleName(id : int) : string
{
{
  match (id)
    {
    | 37 => 
      "action_list"
    | 0 => 
      "any"
    | 22 => 
      "attr_begin"
    | 23 => 
      "attr_end"
    | 32 => 
      "attribute"
    | 33 => 
      "attributes"
    | 36 => 
      "block_action_list"
    | 13 => 
      "close_brace"
    | 24 => 
      "colon"
    | 26 => 
      "comma"
    | 4 => 
      "comment"
    | 34 => 
      "delim_action_list"
    | 3 => 
      "delimitedComment"
    | 9 => 
      "delimiter"
    | 8 => 
      "end_symb"
    | 38 => 
      "entry"
    | 16 => 
      "entry_key"
    | 45 => 
      "events"
    | 39 => 
      "exit"
    | 17 => 
      "exit_key"
    | 56 => 
      "flags"
    | 20 => 
      "flags_key"
    | 31 => 
      "fully_qualified"
    | 15 => 
      "goto"
    | 30 => 
      "guard"
    | 52 => 
      "history"
    | 48 => 
      "history_deep"
    | 21 => 
      "history_key"
    | 51 => 
      "history_long"
    | 49 => 
      "history_shallow"
    | 50 => 
      "history_short"
    | 28 => 
      "history_short_deep"
    | 27 => 
      "history_short_shallow"
    | 11 => 
      "identifier"
    | 19 => 
      "initial_key"
    | 44 => 
      "initial_trans"
    | 43 => 
      "internal_trans"
    | 7 => 
      "letter"
    | 29 => 
      "name"
    | 1 => 
      "newLine"
    | 12 => 
      "open_brace"
    | 25 => 
      "point"
    | 10 => 
      "s"
    | 35 => 
      "simple_action_list"
    | 46 => 
      "simple_transition"
    | 2 => 
      "singleLineComment"
    | 14 => 
      "slash"
    | 6 => 
      "spaces"
    | 5 => 
      "spaces_def"
    | 55 => 
      "state"
    | 54 => 
      "stateBody"
    | 53 => 
      "stateDecl"
    | 57 => 
      "stateMachine"
    | 18 => 
      "state_key"
    | 41 => 
      "trans_act_list"
    | 47 => 
      "transition"
    | 42 => 
      "transition_mark"
    | 40 => 
      "transition_target"
    | _  => 
      "Unknown rule id."
  }
}
}

private ResetMaxRollbackPos() : void ResetMaxRollbackPos() : void 
{
{
}
}

private ResetMemoization() : void ResetMemoization() : void 
{
{
}
}

public Parse(text : string) : option[CommonLib.Macros.Fsm.StateNode.StateMachine]Parse(text : string) : option[CommonLib.Macros.Fsm.StateNode.StateMachine]
{
{
  def (pos, res) = TryParse(text);
  if (pos < 0) None(); else Some(res)
}
}

public Parse(source : Nemerle.Peg.SourceSnapshot) : option[CommonLib.Macros.Fsm.StateNode.StateMachine]Parse(source : Nemerle.Peg.SourceSnapshot) : option[CommonLib.Macros.Fsm.StateNode.StateMachine]
{
{
  def (pos, res) = TryParse(source);
  if (pos < 0) None(); else Some(res)
}
}

public TryParse(text : string) : int * CommonLib.Macros.Fsm.StateNode.StateMachineTryParse(text : string) : int * CommonLib.Macros.Fsm.StateNode.StateMachine
{
{
  TryParse(Nemerle.Peg.SourceSnapshot(text))
}
}

public TryParse(source : Nemerle.Peg.SourceSnapshot) : int * CommonLib.Macros.Fsm.StateNode.StateMachineTryParse(source : Nemerle.Peg.SourceSnapshot) : int * CommonLib.Macros.Fsm.StateNode.StateMachine
{
{
  _parsingSource = source;
  mutable result;
  result
}
}

protected GetText(tok : Nemerle.Peg.NToken) : stringGetText(tok : Nemerle.Peg.NToken) : string
{
{
  _parsingSource.OriginalText.Substring(tok.StartPos, tok.EndPos - tok.StartPos)
}
}

protected GetLocation(tok : Nemerle.Peg.NToken) : Nemerle.Peg.LocationGetLocation(tok : Nemerle.Peg.NToken) : Nemerle.Peg.Location
{
{
  Nemerle.Peg.Location(_parsingSource, tok.StartPos, tok.EndPos)
}
}

