using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Xml
{
  using XmlAst;
  
  [Record]
  class PegLocated { public StartPos : int; public EndPos : int; }
 
  [Record] class TagOpen  : PegLocated { public ident : Splicable; public attrs : list[Attr] }
  [Record] class TagClose : PegLocated { public ident : Splicable; }
  
  [Record]
  variant Splicable : PegLocated
  {
    | PrefiedName { ns : string; name : string; }
    | Value       { value : string; }
    | Expr        { expr : string/*PExpr*/; }
    | ListExpr    { expr : string/*PExpr*/; }

    public override ToString() : string
    {
      match (this)
      {
        | PrefiedName(ns, name) => $"$ns:$name"
        | Value(value)          => value
        | Expr(expr)            => $"$$$(expr)"
        | ListExpr(expr)        => $"..$$$(expr)"
      }
    }
  }
  
  [Record]
  variant XmlAst : PegLocated
  {
  //TODO: Нужно сделать так чтобы Attr мог поддерживать сплайсы или в сплайсах сделать 
  // флаг говорящий является ли он тегом или атрибутом.
    | Attr   { name : Splicable; value  : Splicable; }
    | Text   { value : Splicable; }
    | Tag    { name : Splicable; content : list[XmlAst]; }
    | Splice { expr : string/*PExpr*/; isList : bool; }
    
    public override ToString() : string
    {
      match (this)
      {
        | Attr(name, value)   => $"$name=$value"
        | Text(value)         => value.ToString()
        | Tag(name, []) => $<#<$name/>#>
        | Tag(name, content) when content.ForAll(_ is Attr)  => $<#<$name ..$(content; " ") />#>
        | Tag(name, content) when content.ForAll(x => !(x is Attr))  => 
          $<#<$name>..$(content; "")</$name>#>
          
        | Tag(name, content) => 
          def attrs = content.Filter(_ is Attr);
          def oterContent = content.Filter(x => x is Text || x is Tag);
          $<#<$name ..$(attrs; " ")>..$(oterContent; "")</$name>#>
        | Splice(expr, true)  => $"..$$$expr"
        | Splice(expr, false) => $"$$$expr"
      }
    }
  }
}
