(*
 * Copyright (c) 2003 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

open System.Core;

namespace System {
  type Exception = extern "System.Exception";
  type Object = extern "System.Object";
}

namespace Nemerle {
  interface Func0
    {
      apply () : object;
    }

  interface Func1
    {
      apply (_ : object) : object;
    }
  
  interface Func2
    {
      apply (_ : object, _ : object) : object;
    }
  
  interface Func3
    {
      apply (_ : object, _ : object, _ : object) : object;
    }
  
  interface Func4
    {
      apply (_ : object, _ : object, _ : object, _ : object) : object;
    }
  
  class Tuple2
    {
      field1 : object;
      field2 : object;
    }
  
  class Tuple3
    {
      field1 : object;
      field2 : object;
      field3 : object;
    }
  
  class Tuple4
    {
      field1 : object;
      field2 : object;
      field3 : object;
      field4 : object;
    }
  
  class Tuple5
    {
      field1 : object;
      field2 : object;
      field3 : object;
      field4 : object;
      field5 : object;
    }
  
  class Tuple6
    {
      field1 : object;
      field2 : object;
      field3 : object;
      field4 : object;
      field5 : object;
      field6 : object;
    }
  
  class Tuple7
    {
      field1 : object;
      field2 : object;
      field3 : object;
      field4 : object;
      field5 : object;
      field6 : object;
      field7 : object;
    }
  
  class Core {
    type int = extern "int";
    type float = extern "float";
    type string = extern "string";
    type object = extern "object";
    type bool = extern "bool";
    type char = extern "char";
   
    static true : bool = extern "true";
    static false : bool = extern "false";

    static `+` (x : int, y : int) : int = extern "%op+";
    static `-` (x : int, y : int) : int = extern "%op-";
    static `*` (x : int, y : int) : int = extern "%op*";
    static `%` (x : int, y : int) : int = extern "%op%";
    static `/` (x : int, y : int) : int = extern "%op/";

    static `<` (x : int, y : int) : bool = extern "%op<";
    static `>` (x : int, y : int) : bool = extern "%op>";
    static 'a `==` (x : 'a, y : 'a) : bool = extern "%op==";
    static 'a `!=` (x : 'a, y : 'a) : bool = extern "%op!=";
    static `>=` (x : int, y : int) : bool = extern "%op>=";
    static `<=` (x : int, y : int) : bool = extern "%op<=";

    static `+` (x : string, y : string) : string = extern "%op+";

    static print_string (s : string) : void = extern "System.Console.Write";
    static print_endline (s : string) : void = extern "System.Console.WriteLine";
    static compare_strings (s1 : string, s2 : string) : int 
        = extern "System.String.CompareOrdinal";
    static string_of_int (_ : int) : string = extern "System.Convert.ToString";

    static read_char () : int = extern "System.Console.Read";
    static read_line () : string = extern "System.Console.ReadLine";

    class Invalid_argument extends System.Exception 
      {
        msg : string;
        this (msg : string) { this.msg <- msg; }
      }
      
    class Not_found extends System.Exception 
      {
        this () {}
      }
      
    class Match_failure extends System.Exception 
      {
        this () {}
      }
  }
}
