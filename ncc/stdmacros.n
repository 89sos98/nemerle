/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using System.Text.RegularExpressions;

using Nemerle.Compiler;
using Nemerle.Compiler.Tyexpr;
using Nemerle.Compiler.Typedtree;

namespace PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Core {

  /** MACROS EXTENDING SYNTAX OF LANGUAGE */

  /** specialized macro for [if] condition with good warning messages,
      it performs typing of given expressions to check their type
      correctness
   */
  macro @if (cond, e1, e2)
  syntax ("if", "(", cond, ")", e1, "else", e2) 
  {
    def tcond = ty_expr (_N_ctx, cond);
    def te1 = ty_expr (_N_ctx, e1);
    def te2 = ty_expr (_N_ctx, e2);
    def bool_ty = <[ ttype: bool ]>;
    Tyexpr.expect_type ("if condition", tcond, bool_ty);
    
    match (Tyutil.unify_branches (type_of (te1), type_of (te2))) {
      | Some =>
        <[ 
          match ($(tcond : typed)) { 
            | true => $(te1 : typed) 
            | _ => $(te2 : typed) 
          } 
        ]>
      | None =>
        Message.fatal_error ("if...else body has type " +
          (type_of (te1)).as_string () + " while the else clause has type " +
          (type_of (te2)).as_string ())
    }
  }

  /** this macro provides convenient way to write simple while loop,
      which perform execution of [body] parameter as long as
      [condition] is true
    */
  macro @while (cond, body)
  syntax ("while", "(", cond, ")", body) 
  {
    <[ 
      def _N_whileloop () : void {
        when ($cond) { $body; _N_whileloop() }
      }; 
      _N_whileloop (); 
    ]>
  }

  /** shortcut for [if (cond) body else ()] */
  macro @when (cond, body)
  syntax ("when", "(", cond, ")", body) 
  {
    <[ match ($cond) { | true => $body | _ => () } ]>
  }

  macro @for (init, cond, change, body)
  syntax ("for", "(", init, ";", cond, ";", change, ")", body) 
  {
    <[ 
      $init;
      def _N_forloop () : void {
        when ($cond) { $body; $change; _N_forloop() }
      }; 
      _N_forloop (); 
    ]>
  }

  /** shortcut for [if (cond) () else body] */
  macro @unless (cond, body)
  syntax ("unless", "(", cond, ")", body) 
  {
    <[ match ($cond) { | false => $body | _ => () } ]>
  }

  /** macro providing C# 'using' functionality
      http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csref/html/vclrfusingstatement.asp
   */
  macro @using (body, params args : array <parm>)
  syntax ("using", "(", args, ")", body) 
  {
    def store_exprs (args : list <PT.Parm>, preexprs, postexprs) {
      match (args) {
        | [] => (List.Rev (preexprs), postexprs)

        | <[ parameter: $ex ]> :: xs =>
            store_exprs (xs, preexprs, 
                         <[ when ($ex != null) $ex.Dispose () ]> :: postexprs)

        | <[ parameter: $(str : var) = $ex ]> :: xs =>
          store_exprs (xs, <[ def $(str : var) = $ex ]> :: preexprs, 
                       <[ $(str : var).Dispose () ]> :: postexprs)

        | _ => Message.fatal_error ("Invalid parameters in 'using' macro")
      }
    };

    def (preexps, postexps) = store_exprs (args, [], []);
    def entire = List.Append (preexps, 
                              [ <[ try $body  finally {.. $postexps } ]> ]);
    <[ {.. $entire } ]>
  }


  macro @lock (x, body)
  syntax ("lock", "(", x, ")", body)
  {
    <[ 
      System.Threading.Monitor.Enter ($x);
      try 
        $body
      finally
        System.Threading.Monitor.Exit ($x);
    ]>
  }

  macro dowhile (cond, body) 
  syntax ("do", body, "while", "(", cond, ")") 
  {
    <[ 
      def _N_dowhile_loop () {
        $body; 
        when ($cond) _N_dowhile_loop ();
      };
      _N_dowhile_loop ()
    ]>
  }

  macro @repeat (cond, body) 
  syntax ("repeat", body, "until", "(", cond, ")") 
  {
    <[ do $body while (! $cond) ]>
  }


  /** translation of match on regular expressions to operations on .Net
      regular expressions and its Groups, which allows short and simple
      extraction of regular subpatterns
      Syntax of this macro is like in following example:
      <code>
        regexp match (str) {
          | "a+.*" => printf ("a\n");
          | @"(?<num : int>\d+)-\w+" => printf ("%d\n", num + 3);
          | "(?<name>(Ala|Kasia))? ma kota" =>
            match (name) {
              | Some (n) => printf ("%s\n", n)
              | None => printf ("noname?\n")
            }
          | _ => printf ("default\n");
        }
   */
  macro @regexp (mat)
  syntax ("regexp", mat) 
  {
    /// syntax is [regexp match { .. }], so [mat] must be [match]
    match (mat) {
      | <[ match ($val) { ..$cases } ]> =>
        // final pattern of regular expression for builded match
        mutable pat <- System.Text.StringBuilder ();
        // names of created groups of final regular expression, names
        // of existing named groups in patterns and associated expressions
        // to execute 
        mutable alternatives <- [];
        // variable used for valid creation of alternatives [(..)|(..)|(..)] 
        mutable first <- true;
        // default matching case if occurred
        mutable default <- None ();

        // walks through cases of given match and builds final regular
        // expression in [pat] and stores group names and related expressions
        // to [alternatives]
        def create_regpattern (cass : list <Parsetree.Match_case>) {
          mutable patnames <- [];

          // walks thorough guards of single case, collecting names
          // for each created group of regular expression and storing
          // names of existing group names inside in [patnames]
          def walk_guards (gs, acc) {
            match (gs) {
              | <[ caseguard: $(str : string) ]> :: xs =>
                // take names of named groups
                def namesreg = Regex (@"\(\?\<(\w+)\s*(:\s*((\w|\.)+))?");
                mutable m <- namesreg.Match (str); 
                // find all occurrenceces of existing gropus inside
                while (m.Success) {
                  mutable end <- false;
                  mutable paren <- 0;
                  mutable optional <- false;
                  // check if this group is optional (it's context information)
                  // so we must count [(] and [)]
                  for (mutable i <- m.Index; !end && i < str.Length; i <- i + 1) {
                    match (str[i]) {
                      | '(' => paren <- paren + 1
                      | ')' => 
                        paren <- paren - 1;
                        when (paren == 0 && i + 1 < str.Length && str[i + 1] == '?') {
                          end <- true;
                          optional <- true;
                        }
                      | _ => ()
                    }
                  };

                  // store this existing named group with its name, information 
                  // if it's optional and name of its enforced type  
                  // - [(?<name : type>..)?]
                  match ((m.Groups[1].Success, m.Groups[3].Success)) {
                    | (true, false) =>
                      patnames <- (m.Groups[1].ToString (), optional, 
                                   None ()) :: patnames
                    | (true, true) =>
                      patnames <- (m.Groups[1].ToString (), optional,
                                   Some (m.Groups[3].ToString ())) :: patnames;
                    | _ => ()
                  };
                  m <- m.NextMatch ();
                };
                def nsymb = Macros.NewSymbol ();
                // add | if it is not first alternative in our pattern
                unless (first) pat <- pat.Append ("|");
                first <- false;
                def newstr = namesreg.Replace (str, "(?<$1");
                // add current alternative to our pattern
                pat <- pat.Append("(?<" + nsymb + ">^" + newstr + "$)");
                walk_guards (xs, nsymb :: acc)

              | [] => acc

              | <[ caseguard: $_p when $(_) ]> :: _ =>
                Message.fatal_error ("guarded pattern not allowed in regexp macro")
              | _ :: _ =>
                Message.fatal_error ("only string patterns allowed in regexp macro")
            }
          };
          match (cass) {
            // default case it special and we must store it
            | [ <[ case: _ => $expr ]> ] => default <- Some (expr)

            | <[ case: | ..$guards => $expr ]> :: xs =>
              alternatives <- (walk_guards (guards, []), patnames, expr) 
                              :: alternatives;
              create_regpattern (xs)

            | [] => ()
          }
        };
        create_regpattern (cases);

        def mname = Macros.NewSymbol ();

        // build decision tree, which checks created groups one by one and if
        // some has matched executes corresponding expression
        def build_checking (cass) {
          // build || condition for patterns from one case in initial matching
          def build_alts (alts) {
            match (alts) {
              | [str] => 
                <[ $(mname : var).Groups[$(str : string)].Success ]>
              | x::xs =>
                <[ 
                  $(mname : var).Groups[$(x : string)].Success || 
                  $(build_alts (xs)) 
                ]>
                  
              | [] => Message.fatal_error ("empty list of guards?")
            }
          };
          // build expressions containing values of existing named groups
          // converting their type (parsing them from string) if needed
          def build_bindings (patnames, acc) {
            match (patnames) {
              | (nam, opt, ty) :: xs =>
                def strin = 
                  <[ $(mname : var).Groups[$(nam : string)].ToString () ]>;
                def value =
                  match (ty) {
                    | None => strin
                    | Some (t) => 
                      <[ $(t : var).Parse ($strin) ]>
                  };
                def binding =
                  if (opt) 
                    <[ 
                      def $(nam : var) = 
                        match ($(mname : var).Groups[$(nam : string)].Success) {
                          | true => Some ($value) | _ => None ()
                        }
                    ]>
                  else
                    <[ def $(nam : var) = $value ]>;
                build_bindings (xs, binding :: acc);
                
              | [] => acc
            }
          };
          match (cass) {
            // creates entire expression checking if one case have succeeded
            | (grds, patnames, expr) :: xs =>
              <[ 
                match ($(build_alts (grds))) { 
                  | true => {
                    .. $(List.Append (build_bindings (patnames, []), [expr])) 
                  }
                  | _ => $(build_checking (xs)) 
                }
              ]>
            
            | [] => <[ throw Nemerle.Core.MatchFailureException () ]>
          }
        };
        def defexpr = 
          match (default) {
            | None =>
              Message.warning ("this pattern might be not exhaustive");
              <[ () ]>
            | Some (defexpr) => defexpr
          };              

        // generation of final code for building regular expression and
        // extracting its groups
        def regge = Macros.NewSymbol ();
        <[ 
          def $(regge : var) = System.Text.RegularExpressions.Regex 
            ($(pat.ToString () : string), 
             System.Text.RegularExpressions.RegexOptions.ExplicitCapture);

          def $(mname : var) = $(regge : var).Match ($val);

          match ($(mname : var).Success) {
            | true => $(build_checking (alternatives))
            | _ => $defexpr 
          }
        ]>
      | _ =>
        Message.fatal_error ("regexp macro expects match construct")
    }
  }

  
  macro @foreach (iter : funparm, collection, body)
  syntax ("foreach", "(", iter, "in", collection, ")", body)
  {
    match (iter) {
      | <[ funparm: $(iname : var) : $ty ]> =>
        <[ 
          def enumerator = ($collection.GetEnumerator () 
                            :> System.Collections.IEnumerator);
          def _N_foreach_loop () {
            when (enumerator.MoveNext ()) {
              mutable $(iname : var) <- (enumerator.Current : $ty);
              $body;
              _N_foreach_loop ();
            }
          };
          _N_foreach_loop ()
        ]>
      | _ =>
        Message.fatal_error ("iterator in foreach must be identifier" +
                             "with optional type")
    }
  }


  /** TOOL MACROS */

module Extensions {

  variant FormatToken {
    | Text { body : string; }
    | TextNewline { body : string; }
    | Number
    | NumberFloat
    | Str
    | Chr
  }

  parse_format (form : string) : list <FormatToken>
  {
    mutable i <- 0;
    mutable buf <- System.Text.StringBuilder ();
    mutable result <- [];
    def n = form.Length;

    while (i < n) { 
      match (form[i]) {
        | '%' =>
          // % occured - first, dump text from buffer
          when ( buf.Length > 0 ) {
            result <- Text (buf.ToString ()) :: result;
            buf <- buf.Remove (0, buf.Length);
          };
          // now analyze next character
          i <- i + 1;
          if ( i < n ) {
            match (form[i]) {
              | 'd' => result <- Number () :: result
              | 'i' => result <- Number () :: result
              | 'f' => result <- NumberFloat () :: result
              | 's' => result <- Str () :: result
              | 'c' => result <- Chr () :: result
              | _ => 
                Message.error ("Unsupported formatting sequence after % character")
            }
          }
          else
            Message.error ("Unexpected end of format after % character")
        | '\n' =>
          result <- TextNewline (buf.ToString ()) :: result;
          buf <- buf.Remove (0, buf.Length)
        | c =>
          buf <- buf.Append (c)
      };
      i <- i + 1;
    };

    when (buf.Length > 0) { result <- Text (buf.ToString ()) :: result; };

    // the result is reversed, but function using it will reverse it again
    result
  }
  
  macro printf (format : string, params parms : array <expr>) 
  {
    def make_expressions (toks, parms, acc) {
      match ((toks, parms)) {
        | ([], []) => acc
        | (Text (t) :: xs, _) => 
          make_expressions (xs, parms, 
            <[ System.Console.Write ($(t : string)) ]> :: acc)
        | (TextNewline (t) :: xs, _) => 
          make_expressions (xs, parms, 
            <[ System.Console.WriteLine ($(t : string)) ]> :: acc)

        | (Number :: xs, p :: ps) =>
          make_expressions (xs, ps, <[ System.Console.Write (($p : int)) ]> :: acc)

        | (NumberFloat :: xs, p :: ps) =>
          make_expressions (xs, ps, <[ System.Console.Write (($p : float)) ]> :: acc)

        | (Str :: xs, p :: ps) =>
          make_expressions (xs, ps, <[ System.Console.Write (($p : string)) ]> :: acc)

        | (Chr :: xs, p :: ps) =>
          make_expressions (xs, ps, <[ System.Console.Write (($p : char)) ]> :: acc)

        | (_, _ :: _) =>
          Message.error ("too many arguments for printf macro");
          acc
        | (_ :: _, _) =>
          Message.error ("not enough arguments for printf macro");
          acc
      }
    };

    def seq = make_expressions (parse_format (format), List.Rev (parms), []);
    <[ {.. $seq } ]>
  }

  macro scanf (format : string, params parms : array <expr>) 
  {
    def make_expressions (toks, parms, acc) {
      match ((toks, parms)) {
        | ([], []) => acc
        | (Text (t) :: xs, _) => 
          make_expressions (xs, parms, 
            <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

        | (TextNewline (t) :: xs, _) => 
          make_expressions (xs, parms, 
            <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

        | (Number :: xs, p :: ps) =>
          make_expressions (xs, ps, 
            <[ $p <- Nemerle.Input.ReadInt () ]> :: acc)

        | (NumberFloat :: _, _) =>
          Util.ice ("scaning floats not supported")

        | (Str :: xs, p :: ps) =>
          make_expressions (xs, ps, 
            <[ $p <- Nemerle.Input.ReadString () ]> :: acc)

        | (Chr :: xs, p :: ps) =>
          make_expressions (xs, ps, 
            <[ $p <- System.Char.ToChar (System.Console.Read ()) ]> :: acc)

        | (_, _ :: _) =>
          Message.error ("too many arguments for scanf macro");
          acc
        | (_ :: _, _) =>
          Message.error ("not enough arguments for scanf macro");
          acc
      }
    };

    def seq = make_expressions (parse_format (format), List.Rev (parms), []);
    <[ 
      Nemerle.Input.EatWhiteSpace ();
      {.. $seq } 
    ]>
  }

  macro sprintf (format : string, params parms : array <expr>)
  {
    def nsymb = Macros.NewSymbol ();
    def make_exprs (toks, parms, acc) {
      match ((toks, parms)) {
        | ([], []) => acc
        | (Text (t) :: xs, _) => 
          make_exprs (xs, parms, 
                      <[ ignore ($(nsymb : var).Append ($(t : string))) ]> :: acc)

        | (TextNewline (t) :: xs, _) => 
          make_exprs (xs, parms, 
                      <[ ignore ($(nsymb : var).Append ($(t : string))) ]> ::
                      <[ ignore ($(nsymb : var).Append ("\n")) ]> :: acc)

        | (Number :: xs, p :: ps) =>
          make_exprs (xs, ps, 
                      <[ ignore ($(nsymb : var).Append (($p : int))) ]> :: acc)

        | (NumberFloat :: xs, p :: ps) =>
          make_exprs (xs, ps, 
                      <[ ignore ($(nsymb : var).Append (($p : float))) ]> :: acc)

        | (Str :: xs, p :: ps) =>
          make_exprs (xs, ps, 
                      <[ ignore ($(nsymb : var).Append (($p : string))) ]> :: acc)

        | (Chr :: xs, p :: ps) =>
          make_exprs (xs, ps, 
                      <[ ignore ($(nsymb : var).Append (($p : char))) ]> :: acc)

        | (_, _ :: _) =>
          Message.error ("too many arguments for sprintf macro");
          acc
        | (_ :: _, _) =>
          Message.error ("not enough arguments for sprintf macro");
          acc
        }
      };

    def seq = make_exprs (parse_format (format), List.Rev (parms), 
                          [ <[ $(nsymb : var).ToString () ]> ]);
    <[ 
      def $(nsymb : var) = System.Text.StringBuilder ();
      {.. $seq } 
    ]>
  }

  macro print (str : string)
  {
    // take names after $
    def namesreg = Regex (@"(([^\$]*)\$(\w+))|(.+)", RegexOptions.Singleline);
    mutable m <- namesreg.Match (str);
    mutable res <- [];

    while (m.Success) {
      if (m.Groups[1].Success) {
        res <- <[ System.Console.Write ($(m.Groups[3].ToString () : var).ToString ()) ]> ::
               <[ System.Console.Write ($(m.Groups[2].ToString () : string)) ]> ::
               res;
      }
      else
        res <- <[ System.Console.Write ($(m.Groups[4].ToString () : string)) ]> :: res;

      m <- m.NextMatch ();
    };

    <[ {.. $(List.Rev (res)) } ]>
  }

/*
  public class SscanfMacro : IMacro 
  {
    RunNew (_ : CTX, args : list <PT.SyntaxElement>) : PT.Expr implements IMacro.RunNew { <[ () ]> }

    Run (_ : CTX, args : list <PT.Parm>) : PT.Expr implements IMacro.Run
    {
      match (get_params (args)) {
        | valstr :: <[ $(format : string) ]> :: parms =>
          def make_expressions (toks, parms, acc) {
            match ((toks, parms)) {
              | ([], []) => acc
              | (Text (t) :: xs, _) => 
                make_expressions (xs, parms, 
                  <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

              | (TextNewline (t) :: xs, _) => 
                make_expressions (xs, parms, 
                  <[ Nemerle.Input.CheckInput ($(t : string)) ]> :: acc)

              | (Number :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p <- Nemerle.Input.ReadInt () ]> :: acc)

              | (NumberFloat :: _, _) =>
                Util.ice ("scanning floats not supported")

              | (Str :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p <- Nemerle.Input.ReadString () ]> :: acc)

              | (Chr :: xs, p :: ps) =>
                make_expressions (xs, ps, 
                  <[ $p <- System.Char.ToChar (System.Console.Read ()) ]> :: acc)

              | (_, _ :: _) =>
                Message.error ("too many arguments for sscanf macro");
                acc
              | (_ :: _, _) =>
                Message.error ("not enough arguments for sscanf macro");
                acc
            }
          };
          
          def seq = <[ def _N_sscanf_str = $valstr ]> ::
                    <[ mutable _N_sscanf_pos <- 0 ]> ::
                    <[ def _N_sscanf_len = _N_sscanf_str.Length ]> ::
                    <[ Nemerle.Input.EatWhiteSpace () ]> ::
            make_expressions (parse_format (format), List.Rev (parms), []);
          <[ {.. $seq } ]>
        | _ => 
          Message.fatal_error ("sscanf macro expects string and formating " +
                               "string as first arguments")
      }
    }

    GetName () : string implements IMacro.GetName { "sscanf" }
    
    public this () {}
  }
*/

  macro pretty_print_expr (exp, expand : bool)
  {
    Macros.PrintExpr (_N_ctx, exp, "", expand);
    printf ("\n");
    <[ () ]>
  }

  macro assert (cond, message = <[ "" ]>) 
  {
    match (cond) {
      | <[ false ]> =>
        // skip cond in this case so it gets 'a type
        <[ throw AssertionException ($(cond.loc.file : string), 
                                     $(cond.loc.line : int), $message) ]>
      | _ =>
        <[ unless ($cond) 
             throw AssertionException ($(cond.loc.file : string), 
                                       $(cond.loc.line : int), $message) ]>
    }
  }

  macro abort (message = <[ "" ]>) 
  {
    <[ throw AssertionException ($(message.loc.file : string), 
                                 $(message.loc.line : int), $message) ]>
  }

  macro ignore (e) 
  {
    <[ def _ = $e; () ]>
  }

  /** MACROS, WHICH WE CAN DO BETTER THAN HASKELL */

  macro SelectFromTuple (k : int, n : int, tupl)
  {
    def symb = Macros.NewSymbol ();
    mutable tup <- [];
    for (mutable i <- n; i > 0; i <- i - 1)
      if (i == k)
        tup <- <[ pattern: $(symb : var) ]> :: tup
      else
        tup <- <[ pattern: _ ]> :: tup;

    <[ def (.. $tup) = $tupl; $(symb : var) ]>
  }

  macro TupleMap (f, tup)
  {
    match (tup) {
      | <[ (.. $elms) ]> =>
        def mapped = List.Map (fun (e) { <[ $f ($e) ]> }, elms);
        <[ (.. $mapped) ]>
      | _ => 
        Message.fatal_error ("'TupleMap' macro expects function and tuple")
      }
  }

  macro PrintTuple (tup, size : int)
  {
    def symbols = array (size);
    mutable pvars <- [];
    for (mutable i <- size - 1; i >= 0; i <- i - 1) {
      symbols[i] <- Macros.NewSymbol ();
      pvars <- <[ pattern: $(symbols[i] : var) ]> :: pvars;
    };
    mutable exps <- [];
    for (mutable i <- size - 1; i >= 0; i <- i - 1)
      exps <- <[ System.Console.WriteLine ($(symbols[i] : var)) ]> :: exps;

    exps <- <[ def (.. $pvars) = $tup ]> :: exps;
    <[ {.. $exps } ]>
  }

  macro PrintTupleTyped (tup)
  {
    match (type_of (ty_expr (_N_ctx, tup))) {
      | T_prod (args) =>
        def size = List.Length (args);
        def symbols = array (size);
        mutable pvars <- [];
        for (mutable i <- size - 1; i >= 0; i <- i - 1) {
          symbols[i] <- Macros.NewSymbol ();
          pvars <- <[ pattern: $(symbols[i] : var) ]> :: pvars;
        };
        mutable exps <- [];
        for (mutable i <- size - 1; i >= 0; i <- i - 1)
          exps <- <[ System.Console.WriteLine ($(symbols[i] : var)) ]> :: exps;
          
        exps <- <[ def (.. $pvars) = $tup ]> :: exps;
        <[ {.. $exps } ]>
      | _ => 
        Message.fatal_error ("expected tuple")
    }
  }
}
} // end ns

