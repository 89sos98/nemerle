using System;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
  public class CompileUnitCollection
  {
    public this(
      [NotNull] engine     : Engine,
      [NotNull] fileInfos  : array[Decl.Namespace],
      [NotNull] regionsMap : Hashtable[int, list[Region]]
    )
    {
      Engine     = engine;
      _fileInfos  = fileInfos;
      _regionsMap = regionsMap
    }

    public Engine : Engine
    {
      mutable _engine : Engine;
      get         { ManagerClass.Instance = _engine; _engine; }
      private set { _engine = value }
    }
    
    _fileInfos  : array[Decl.Namespace];
    _regionsMap : Hashtable[int, list[Region]];

    public GetFileIndex(filePath : string) : int
    {
      Location.GetFileIndex(filePath);
    }

    public GetRegions(fileIndex : int) : list[Region]
    {
      _regionsMap[fileIndex];
    }

    public Item[fileIndex : int] : Decl.Namespace
    {
      get
      {
        when (_fileInfos.Length < 0)
          throw System.Exception($"File '$fileIndex' does not exist in project.");
        
        def fileInfo = _fileInfos[fileIndex];
        when (fileInfo == null)
          throw System.Exception($"File '$fileIndex' contains an empty declaration list.");

        fileInfo
      }
    }

    public Item[filePath : string] : Decl.Namespace
    {
      get { this[GetFileIndex(filePath)]; }
    }

    public Count : int
    {
      //[Nemerle.Memoize]
      get
      {
        mutable count = 0;

        foreach (fileInfo in _fileInfos)
          when (fileInfo != null)
            count++;

        count;
      }
    }

    public GetEnumerator() : SCG.IEnumerator[Decl.Namespace]
    {
      foreach (fileInfo in _fileInfos)
        when (fileInfo != null)
          yield fileInfo;
    }
  }
}
