using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace LRPEGCC
{
  public class RangeSet
  {
    [Record]
    public struct Range
    {
      public from : char;
      public to : char;
      public override ToString() : string
      {
        def esc(ch)
        {
          | '\0' => @"'\0'"
          | '\t' => @"'\t'"
          | '\\' => @"'\\'"
          | '\'' => @"'\''"
          | x when x == char.MaxValue  => @" char.MaxValue"
          | _    => $"'$ch'"
        }

        if (from == to) esc(from)
        else            esc(from) + ".." + esc(to)
      }
    }

    [Accessor]
    private _ranges : list[Range] = [];

    public this()
    {}

    private this(ranges : list[Range])
    {
      _ranges = ranges;
    }

    public AddRange(from : char, to : char) : RangeSet
    {
      AddRange(Range(from, to));
    }

    public AddRange(range : Range) : RangeSet
    {
      unless (range.from <= range.to)
        throw ArgumentException();

      def add(ranges, range)
      {
        match (ranges)
        {
        | [] => [range];
        | firstRange :: ranges =>
          if (firstRange.to + 1 < range.from)
            firstRange :: add(ranges, range);
          else if (range.to + 1 < firstRange.from)
            range :: firstRange :: ranges;
          else
            add(ranges, Range(Math.Min(range.from, firstRange.from) :> char, Math.Max(range.to, firstRange.to) :> char));
        }
      }
      RangeSet(add(_ranges, range));
    }

    public RemoveRange(from : char, to : char) : RangeSet
    {
      RemoveRange(Range(from, to));
    }

    public RemoveRange(range : Range) : RangeSet
    {
      unless (range.from <= range.to)
        throw ArgumentException();

      def remove(ranges)
      {
        match (ranges)
        {
        | [] => [];
        | firstRange :: ranges =>
          if (firstRange.to < range.from)
          {
            firstRange :: remove(ranges);
          }
          else if (firstRange.from > range.to)
          {
            firstRange :: ranges;
          }
          else
          {
            def cat(range, ranges)
            {
              if (range.from <= range.to)
                range :: ranges;
              else
                ranges;
            }
            def lo = firstRange.from <= range.from;
            def hi = firstRange.to >= range.to;
            if (lo)
            {
              if (hi)
              {
                cat(Range(firstRange.from, (range.from - 1) :> char), cat(Range((range.to + 1) :> char, firstRange.to), ranges))
              }
              else
              {
                cat(Range(firstRange.from, (range.from - 1) :> char), remove(ranges))
              }
            }
            else
            {
              if (hi)
              {
                cat(Range((range.to + 1) :> char, firstRange.to), ranges)
              }
              else
              {
                remove(ranges);
              }
            }
          }
        }
      }
      RangeSet(remove(_ranges));
    }

    public Sum(that : RangeSet) : RangeSet
    {
      Ranges.Fold(that, (range, that) => that.AddRange(range));
    }

    public Sub(that : RangeSet) : RangeSet
    {
      that.Ranges.Fold(this, (range, rangeSet) => rangeSet.RemoveRange(range));
    }

    public override ToString() : string { $"..$_ranges" }

    public override GetHashCode() : int
    {
      _ranges.Fold(0, (range, hash) => ((hash + range.from) ^ range.to) + 0x22529323);
    }

    public override Equals(_ : object) : bool
    {
    | that is RangeSet => that._ranges.Equals(_ranges, (range1, range2) => range1.from == range2.from && range1.to == range2.to);
    | _                => false;
    }
  }
}
