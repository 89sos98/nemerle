using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Peg;

namespace Nemerle.Json
{
  [PegGrammar(json, 
     grammar {
            any                         = ['\u0000'..'\uFFFF'];
            newLine                     = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
            singleLineComment           = "//" (!('\n' / '\r') any)* newLine?;
            delimitedComment            = "/*" (!"*/" any)* "*/";
            comment                     = singleLineComment / delimitedComment;
            spaces : Void               = (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
            letter                      = ([Lu, Ll, Lt, Lm, Lo, Nl] / '_' / '$');
            decimalDigit               = ['0'..'9'];
            hexDigit                   = ['0'..'9', 'A'..'F', 'a'..'f'];
            octalDigit                 = ['0'..'7'];
            
            SEMICOLON                   = ';' spaces;
            COLON                       = ':' spaces;
            DOT                         = '.' spaces;
            COMMA                       = ',' spaces;
            LPAREN                      = '(' spaces;
            RPAREN                      = ')' spaces;
            LBRACE                      = '[' spaces;
            RBRACE                      = ']' spaces;
            LFBRACE                     = '{' spaces;
            RFBRACE                     = '}' spaces;
            EQ                          = '=' spaces;
            QUEST                       = '?' spaces;
            PLUS                        = '+' spaces;
            MINUS                       = '-' spaces;

            TRUE                        = "true" spaces;
            FALSE                       = "false" spaces;
            NULL                        = "null" spaces;
            identifierValue             = letter (letter / decimalDigit)*;

            identifier      : string = identifierValue spaces;

            unicodeEscapeSequence     : char = "\\u" hexDigit hexDigit hexDigit hexDigit;
            simpleEscapeSequence      : char = "\\'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";

            singleRegularStringLiteralCharacter  : char  = !( "\"" / "\\") any;
            regularStringLiteralPart             : char = simpleEscapeSequence
                                                            / unicodeEscapeSequence
                                                            / singleRegularStringLiteralCharacter;
                                                                
            doubleQuotedLiteral : string = "\"" regularStringLiteralPart* "\"" spaces;
            
            exponentPart    : string  = ("E" / "e") ("-" / "+")? decimalDigit+;
            decimalNumber   : string = MINUS? decimalDigit+ (DOT decimalDigit+)? 
                                           exponentPart?;
            
            trueValue  : JObject = TRUE;
            falseValue : JObject = FALSE;
            nullValue  : JObject = NULL;
            
            jstring : JObject = doubleQuotedLiteral;
            
            jnumber : JObject = decimalNumber;
            
            jvalue : JObject = jstring 
                                  / jnumber
                                  / trueValue
                                  / falseValue
                                  / nullValue;
            
            jarray : JObject = LBRACE (json (COMMA json)* COMMA?)? RBRACE;
            

            jfield : string*JObject = (identifier / doubleQuotedLiteral) COLON json;
            jobject : JObject = LFBRACE (jfield (COMMA jfield)* COMMA?)? RFBRACE;
            
            json : JObject = spaces (jarray / jobject / jvalue ) spaces;
  })]
  public class JsonParser
  {
    #region helpers
    identifier(idValue : NToken) : string 
    {
        GetText(idValue)
    }

    //exponentPart    : string  = ("E" / "e") ("-" / "+")? decimalDigit+;
    exponentPart(_e             : NToken,
                 sign           : NToken,
                 decimalDigits  : NToken) : string
    {
      GetText(sign) + GetText(decimalDigits)
    }

    //unicodeEscapeSequence   : string = "\\u" hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence(_u : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : char
    {
      unchecked {
        def x = 
              HexDigit(d1) << 12
          %|  HexDigit(d2) << 8
          %|  HexDigit(d3) << 4
          %|  HexDigit(d4);
        ConvertUtf32(x)
      }
    }
    
    singleRegularStringLiteralCharacter(c : NToken) : char
    {
      ParsingSource.Text[c.StartPos]      
    }
    
    regularStringLiteralPart(part: char) : char
    {
      part
    }
    
    doubleQuotedLiteral(_ : NToken, chars : List[char], _ : NToken) : string
    {
      string(chars.ToArray())
    }
    
    //simpleEscapeSequence      : string = "\\'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
    simpleEscapeSequence(seq : NToken) : char
    {
      match(GetText(seq)) {
        | "\\'"   => '\''
        | "\\\""  => '\"'
        | "\\\\"  => '\\'
        | "\\0"   => '\0'
        | "\\a"   => '\a'
        | "\\b"   => '\b'
        | "\\f"   => '\f'
        | "\\n"   => '\n'
        | "\\r"   => '\r'
        | "\\t"   => '\t'
        | "\\v"   => '\v'
        | s => s[0]
      }
    }

    //decimalNumber   : string = MINUS? decimalDigit+ (DOT decimalDigit+)? exponentPart?;
    decimalNumber(minus           : NToken,
                  mantissa        : NToken,
                  frac            : option[NToken*NToken],
                  exponent        : option[string]) : string
    {
      def fracPart = match (frac) {
        | Some( (_, frac) ) => "." + GetText(frac)
        | None => ""
      };
      def exponent = exponent.WithDefault("");
      
      GetText(minus) + GetText(mantissa) + fracPart + exponent
    }
    
    private HexDigit(t : NToken) : int
    {
      unchecked {
        def c = ParsingSource.Text[t.StartPos];
        if('0' <= c && c <= '9')
          c :> int - '0' :> int
        else if('a' <= c && c <= 'f')
          c :> int - 'a' :> int + 10
        else if('A' <= c && c <= 'F')
          c :> int - 'A' :> int + 10
        else 
          0
      }
    }
    
    static ConvertUtf32(x : int) : char
    {
      unchecked {
        def x = x :> uint;
        x :> char
      }
    }
    #endregion
    
    trueValue(_ : NToken) : JObject { JObject.Convert(true) }
    falseValue(_ : NToken) : JObject { JObject.Convert(false) }
    nullValue(_ : NToken) : JObject { JObject.Null }

    jstring(str : string) : JObject { JObject.Convert(str) }
    jnumber(str : string) : JObject { JObject.Convert(Double.Parse(str, CultureInfo.InvariantCulture.NumberFormat)) }
    
    jvalue(o : JObject) : JObject {o}
    
    jarray(_ : NToken, values : option[JObject * List[NToken * JObject] * NToken], _ : NToken) : JObject
    {
      match (values)
      {
        | Some( (head, tail, _) ) => 
          def tail = tail.Map( (_, i) => i);
          JObject.Array(head :: tail);
        | None =>
          JObject.Array([]);
      }
    }
    
    // jfield : string*JObject = (identifier / doubleQuotedLiteral) COLON json;
    jfield(name : string, _ : NToken, obj : JObject) : string*JObject
    {
      (name, obj)
    }
    
    jobject(_ : NToken, fields : option[(string*JObject) * List[NToken * (string*JObject)] * NToken], _ : NToken) : JObject
    {
      match (fields)
      {
        | Some( (head, tail, _) ) => 
          def tail = tail.Map( (_, i) => i);
          JObject.Object(head :: tail);
        | None =>
          JObject.Object([]);
      }
    }
    
    json(obj : JObject) : JObject { obj }
  }
}
