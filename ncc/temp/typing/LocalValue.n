/*
 * Copyright (c) 2003, 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

namespace Nemerle.Compiler
{
  public class LocalValue : Located, Nemerle.IComparable <LocalValue>
  {
    name : string;
    is_mutable : bool;
    ty : TyVar;
    kind : Kind;
    defined_in : Fun_header;

    id : int;
    mutable used_in : Set [Fun_header];

    
    public Location : Location
    {
      get { loc }
    }


    public DefinedIn : Fun_header
    {
      get { defined_in }
    }


    public UsedIn : Set [Fun_header]
    {
      get { used_in }
    }


    public UseFrom (fh : Fun_header) : void
    {
      used_in = used_in.Replace (fh);
    }


    public Type : TyVar
    {
      get { ty }
    }


    public ValKind : Kind
    {
      get { kind }
    }


    public IsMutable : bool
    {
      get { is_mutable }
    }


    public Name : string
    {
      get { name }
    }

    
    public override ToString () : string
    {
      $ "$kind $(Name)"
    }


    public CompareTo (other : LocalValue) : int
    {
      id - other.id
    }

    public variant Kind
    {
      | Plain
      | Function {
          header : Fun_header; 
          uses_closure_of : list [Fun_header]; 
        }
      | FunParm {
          kind : ParmKind;
        }
      | ExceptionValue
      | PatternVariable {
          /** True iff variable is used in body of match, not only in guard. */
          used_in_body : bool;
        }
      | ClosurisedThisPointer

      public override ToString () : string
      {
        match (this) {
          | Plain => "a local value"
          | Function => "a local function"
          | FunParm => "a function parameter"
          | ExceptionValue => "a caught exception"
          | PatternVariable => "a value bound in pattern"
          | ClosurisedThisPointer => "a `this' pointer" // not reached?
        }
      }
    }

    public this (defined_in : Fun_header, name : string, 
                 ty : TyVar, kind : Kind, is_mutable : bool)
    {
      this.defined_in = defined_in;
      this.name = name;
      this.ty = ty;
      this.kind = kind;
      this.is_mutable = is_mutable;
      
      this.id = Util.next_id ();
      this.used_in = Set ();
    }
  }

} // ns
