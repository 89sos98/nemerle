// warning: line numbers are important here, watch out
using Nemerle.IO;

module A
{
  [Nemerle.Diagnostics.Trace (printf ("executing %s:%d:%s () - %s\n", g (_file), _line, _method, _expr))]
  public m () : void {
    def x = 2;
    mutable y = 4;
    
    match ((y, x)) {
      | (4, 2) => printf ("good match\n");
      | _ => printf ("bad match\n");
    }
    def _ = (1,2);
    for (mutable i = 0; i < x; ++i) {
      y = x * 3 + y;
      y = 2 * y;
      y *= i;
    }
    y -= 1;
  }

  g (x : string) : string { 
    x.Substring (x.Length - 7)
  }


  Main () : void {
    m ();
  }
}

/*
BEGIN-OUTPUT
executing trace.n:8:m () - def x = 2
executing trace.n:9:m () - mutable y = 4
executing trace.n:11:m () - match ((y, x)) {
  | (4, 2) => 
    printf ("good match
")
  | _  => 
    printf ("bad match
")
}
good match
executing trace.n:15:m () - def _N_u2 = (1, 2)
executing trace.n:16:m () - for (mutable i = 0;i < x;++i) {
  y = x * 3 + y;
  y = 2 * y;
  y *= i
}
executing trace.n:17:m () - y = x * 3 + y
executing trace.n:18:m () - y = 2 * y
executing trace.n:19:m () - y *= i
executing trace.n:17:m () - y = x * 3 + y
executing trace.n:18:m () - y = 2 * y
executing trace.n:19:m () - y *= i
executing trace.n:21:m () - y -= 1
END-OUTPUT
*/
