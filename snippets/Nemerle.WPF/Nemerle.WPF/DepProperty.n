using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nemerle.WPF
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                       Nemerle.MacroTargets.Property,
                       Inherited = false, AllowMultiple = false)]
  public macro DepProperty(tb : TypeBuilder, pp : ParsedProperty, params options : list [PExpr])
  {
    DepPropertyImpl.Impl(tb, pp, options);
  }

  internal module DepPropertyImpl
  {
    public Impl(tb : TypeBuilder, pp : ClassMember.Property, options : list[PExpr]) : void
    {
      def isPublic(attributes)
      {
        def test(a1, a2) { (a1 & a2) == a2 }
        if (attributes == NemerleAttributes.None)
          test(pp.Attributes, NemerleAttributes.Public);
        else
          test(attributes, NemerleAttributes.Public);
      }

      def getter = match (pp.get) { | Some(fn) => fn; | _ => Message.FatalError (pp.Location, "No getter"); }
      def setter = match (pp.set) { | Some(fn) => fn; | _ => Message.FatalError (pp.Location, "No setter"); }

      when (!isPublic(getter.Attributes))
        Message.FatalError (pp.Location, "Getter must be public");

      def name    = pp.Name + "Property";
      def keyName = pp.Name + "PropertyKey";

      def propType     = pp.prop_ty;

      def isReadOnly = !isPublic(setter.Attributes);

      mutable metadata = [];
      mutable validateCallback = [];

      foreach (opt in options)
      {
        | <[ Metadata         = $md ]>       => metadata         = [md];
        | <[ ValidateCallback = $callback ]> => validateCallback = [<[ System.Windows.ValidateValueCallback(value => $callback(value :> $propType)) ]>];
        | _ =>
          Message.FatalError (opt.Location, "Invalid option.");
      }

      when (isReadOnly && metadata is list[_].Nil)
        Message.FatalError (pp.Location, "Metadata required for read only property.");

      when (metadata is list[_].Nil && !(validateCallback is list[_].Nil))
        Message.FatalError (pp.Location, "If ValidateCallback set Metadata required.");

      def registerArgs = [<[ $(pp.Name : string) ]>, <[ typeof($propType) ]>, <[ typeof($(tb.ParsedTypeName)) ]>];
      def registerArgs = registerArgs.Append(metadata).Append(validateCallback);

      getter.Body = <[ this.GetValue($(name : dyn)) :> $propType ]>;
      setter.Body = <[ this.SetValue($((if (isReadOnly) keyName else name) : dyn), $("value" : dyn)) ]>;

      if (isReadOnly)
      {
        tb.Define(<[decl:
          private static $(keyName : dyn) : System.Windows.DependencyPropertyKey = System.Windows.DependencyProperty.RegisterReadOnly(..$registerArgs);
        ]>);
        tb.Define(<[decl:
          public static $(name : dyn) : System.Windows.DependencyProperty = $(keyName : dyn).DependencyProperty;
        ]>);
      }
      else
      {
        tb.Define(<[decl:
          public static $(name : dyn) : System.Windows.DependencyProperty = System.Windows.DependencyProperty.Register(..$registerArgs);
        ]>);
      }
    }
  }
}
