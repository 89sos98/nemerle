using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace ComputationExpressions
{
  public macro __Macro__Bind(_expr)
  syntax ("bind", _expr) { <[ () ]> }

  public macro __Macro__Return(_expr)
  syntax ("return", _expr) { <[ () ]> }

  public macro __Macro__ComputationExpression(computation, expr)
  syntax ("computation", computation, expr)
  {
    ComputationExpressionImpl.Impl(computation, expr)
  }

  internal module ComputationExpressionImpl
  {
    public Impl(computation : PExpr, expr : PExpr) : PExpr
    {
      def exprs = match (expr)
      {
        | Sequence(exprs) => exprs;
        | expr => [expr];
      }
      def transform(exprs)
      {
        | [] =>
          Message.FatalError("Computation expression ");
        | expr :: exprs =>
          match (expr)
          {
            | <[def $name = $expr]> =>
              <[
                def $name = $expr;
                $(transform(exprs));
              ]>
            | MacroCall(name, _, parms) =>
              match (name.Id)
              {
                | "bind" =>
                  match (parms)
                  {
                    | [Expression(Assign(name, expr))] =>
                      <[$computation.Bind($expr, ($name) => $(transform(exprs)))]>
                    | _ =>
                      Message.FatalError(expr.Location, "Invalid bind expression.");
                  };
                | "return" =>
                  match (parms)
                  {
                    | [Expression(expr)] =>
                      <[$computation.Return($expr)]>
                    | _ =>
                      Message.FatalError(expr.Location, "Invalid return expression.");
                  };
                | _ =>
                  Message.FatalError(expr.Location, "Invalid expression.");
              }
            | expr =>
              Message.FatalError($"error $(expr)");
          }
      }
      transform(exprs);
    }
  }
}
