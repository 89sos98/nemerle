using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace ComputationExpressions
{
  public macro __Macro__Bind(_expr)
  syntax ("bind", _expr) { <[ () ]> }

  public macro __Macro__Return(_expr)
  syntax ("return", _expr) { <[ () ]> }

  public macro __Macro__ComputationExpression(computation, expr)
  syntax ("computation", computation, expr)
  {
    ComputationExpressionImpl.Impl(computation, expr)
  }

  internal module ComputationExpressionImpl
  {
    public Impl(computation : PExpr, expr : PExpr) : PExpr
    {
      def exprs = match (expr)
      {
        | Sequence(exprs) => exprs;
        | expr => [expr];
      }
      def transform(exprs)
      {
        | [] =>
          Message.FatalError("Computation must return value.");
        | expr :: exprs =>
          match (expr)
          {
            | <[def $name = $expr]>     => defExpr(name, expr, exprs);
            | MacroCall(name, _, parms) =>
              match (name.Id)
              {
                | "bind"   => bindExpr(parms, exprs)
                | "return" => returnExpr(parms, exprs)
                | _        => Message.FatalError(expr.Location, $"Unknown expression \"$(name.Id)\".");
              }
            | expr => Message.FatalError(expr.Location, "Unknown expression.");
          }
      }
      and defExpr(name, expr, exprs)
      {
        <[
          def $name = $expr;
          $(transform(exprs));
        ]>
      }
      and bindExpr(parms, exprs)
      {
        match (parms)
        {
          | [Expression(Assign(name, expr))] =>
            <[$computation.Bind($expr, ($name) => $(transform(exprs)))]>
          | _ =>
            Message.FatalError(expr.Location, "Invalid bind expression.");
        }
      }
      and returnExpr(parms, exprs)
      {
        match (exprs)
        {
          | [] => ();
          | expr :: _ => Message.FatalError(expr.Location, "return must be last expression.");
        }
        match (parms)
        {
          | [Expression(expr)] =>
            <[$computation.Return($expr)]>
          | _ =>
            Message.FatalError(expr.Location, "Invalid return expression.");
        }
      }
      transform(exprs);
    }
  }
}
