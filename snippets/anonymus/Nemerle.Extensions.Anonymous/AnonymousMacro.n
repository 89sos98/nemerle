using System;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Nemerle.Extensions {

    public macro AnonymousClassCtor(params ctor_def : array[expr]) 
        syntax("new", "(", ctor_def, ")" )
    {
        AnonymousMacroImpl.MakeAnonymousClassCtor(Macros.ImplicitCTX(), NList.ToList(ctor_def))
    }

    internal module AnonymousMacroImpl {

        [Record]
        private class FieldInfo {
            [Accessor] private generic_arg : PT.Name;
            [Accessor] private field : PT.Name;
            [Accessor] private value : PT.PExpr;
            public PropertyName : string { get { field.ToString() } }
            public FieldName : string { get { "_" + field.ToString() } }
        }

        private GetAnonymousClassName(fields : list[FieldInfo]) : string
            requires !NList.IsEmpty(fields)
        {
            fields.FoldLeft(System.Text.StringBuilder("_N_Anonymous"),
                (f, sb) => sb.Append("_<").Append(f.PropertyName).Append(">"))
            .ToString()
        }

        private BuildAnonymousClass(typer : Typer, name : string, fields : list[FieldInfo]) : TypeInfo {
            match(typer.Env.LookupType([name])) {
                | Some(ty) => ty
                | None() => {

                    // Entire class definition is placed in global namespace
                    def aclass = {
                        // Format string for debugger view
                        def debugger_display_fmt = {
                            mutable prefix = null : string;
                            fields.FoldLeft(System.Text.StringBuilder("\\{"),
                                (f, sb) => sb.Append({prefix = if(null == prefix) " " else ", "; prefix })
                                    .Append($"$(f.PropertyName) = {$(f.PropertyName)}")
                            ).Append(" \\}").ToString()
                        }

                        // fields and properties declaration
                        def members = fields.Map(field => <[ decl :
                                [Nemerle.Utility.Accessor($(field.PropertyName : usesite))]
                                private $(field.FieldName : usesite) : $(field.GenericArg : name);
                        ]>);

                        typer.Manager.CoreEnv.Define(match(fields) {
                            | [] =>
                                <[ decl:
                                    [Record,
                                        System.Diagnostics.DebuggerDisplay( $(debugger_display_fmt : string) )]
                                    internal sealed class $(name : usesite) : Nemerle.Extensions.Anonymous {
                                        ..$members
                                    }
                                ]>
                            | _ =>
                                <[ decl:
                                    [Record,
                                        System.Diagnostics.DebuggerDisplay( $(debugger_display_fmt : string) )]
                                    internal sealed class $(name : usesite) [ ..$(fields.Map(f => PT.Splicable.Name(f.GenericArg))) ] : Nemerle.Extensions.Anonymous {
                                        ..$members
                                    }
                                ]>
                        })
                    }

                    // ToString implementation
                    {
                        def sb_name = Macros.NewSymbol("sb");
                        mutable prefix = null : string;
                        def sb_list = fields.Map(f => <[ 
                            _ = $(sb_name : name)
                                .Append($( {prefix = if(null == prefix) " " else ", "; prefix} : string))
                                .Append($(f.PropertyName + " = " : string))
                                .Append(this.$(f.FieldName : usesite)) ]> );
                        aclass.Define(<[ decl:
                                public override ToString() : string {
                                    def $(sb_name : name) = System.Text.StringBuilder("{");
                                    { ..$sb_list }
                                    $(sb_name : name).Append(" }") .ToString()
                                }
                        ]>);
                    }

                    //___GetFields override
                    {
                        def field_array_name = Macros.NewSymbol("field_array");
                        def field_array = fields.Map(f => <[ $(f.PropertyName : string) ]>);
                        aclass.Define(<[ decl: 
                                private static $(field_array_name : name) : array[string] = array[ ..$field_array ];
                        ]>);
                        aclass.Define(<[ decl:
                                protected override ___GetFields() : array[string] {
                                    $(field_array_name : name)
                                }
                        ]>);
                    }

                    //___GetFieldValue override
                    {
                        def cases = fields.FoldRight([<[ case : | _ => null ]>],
                            (f, cases) => <[ case: | $(f.PropertyName : string) => this.$(f.FieldName : usesite) : object ]> :: cases );
                        aclass.Define(<[ decl:
                                protected override ___GetFieldValue(field : string) : object {
                                   match(field) { ..$cases }
                                }
                        ]>);
                    }

                    //___GetValues override
                    {
                        def body = match(fields) {
                            //| [] => <[ string.Empty ]>
                            | field :: [] => <[ this.$(field.FieldName : usesite) ]>
                            | _ =>
                                def generic_args = fields.Map(f => <[ $(f.GenericArg : name) ]>);
                                def tuple_args = fields.Map(f => <[ this.$(f.FieldName : usesite) ]>);
                                <[ Nemerle.Builtins.Tuple.[ ..$generic_args ] ( ..$tuple_args ) ]>
                        }
                        aclass.Define(<[ decl:
                                protected override ___GetValues() : object {
                                   $body
                                }
                        ]>);
                    }

                    // Tuple explicit cast
                    match(fields) {
                        //| [] => ()
                        | field :: [] =>
                            aclass.Define(<[ decl:
                                public static @:> ([Nemerle.Assertions.NotNull] obj : $(name : usesite)[ $(field.GenericArg : name) ]) : $(field.GenericArg : name) {
                                    obj.$(field.FieldName : usesite)
                                }
                            ]>)
                        | _ =>
                            def generic_args = fields.Map(f => <[ $(f.GenericArg : name) ]>);
                            def tuple_args = fields.Map(f => <[ obj.$(f.FieldName : usesite) ]>);
                            aclass.Define(<[ decl:
                                public static @:> ([Nemerle.Assertions.NotNull] obj : $(name : usesite)[ ..$generic_args ]) : Nemerle.Builtins.Tuple[ ..$generic_args ] {
                                    Nemerle.Builtins.Tuple( ..$tuple_args )
                                }
                            ]>)
                    }
                    /*
                    aclass.AddImplementedInterface(<[ Nemerle.Extensions.IAnonymous ]>);

                    // Fields property implementation
                    {
                        def field_array_name = Macros.NewSymbol("field_array");
                        def field_array = fields.Map(f => <[ $(f.PropertyName : string) ]>);
                        aclass.Define(<[ decl: 
                                private static $(field_array_name : name) : array[string] = array[ ..$field_array ];
                        ]>);
                        aclass.Define(<[ decl:
                                Fields : array[string] implements Nemerle.Extensions.IAnonymous.Fields {
                                    get { $(field_array_name : name) }
                                }
                        ]>);
                    }


                    // Item indexer implementation
                    {
                        def cases = fields.FoldRight([<[ case : | _ => null ]>],
                            (f, cases) => <[ case: | $(f.PropertyName : string) => this.$(f.FieldName : usesite) : object ]> :: cases );
                        aclass.Define(<[ decl:
                                Item[field : string] : object implements Nemerle.Extensions.IAnonymous.Item {
                                    get { match(field) { ..$cases } }
                                }
                        ]>);
                    }
                    */
                    unless(typer.InErrorMode)
                        aclass.Compile();
                    aclass
                }
            }
        }

        public MakeAnonymousClassCtor(typer : Typer, ctor_def : list[PT.PExpr]) : PT.PExpr {
            def fields = ctor_def.FoldRight([], fun(cd, acc) {
                def append_field_info(field_init) {
                    | <[ $(field : name) = $value ]> => FieldInfo(Macros.NewSymbol(field.Id), field, value) :: acc
                    | _ => Message.Error($"Expected 'a = foo()' got '$cd'."); acc
                }
                match(cd) {
                    | PT.PExpr.Member(_, member) as member_access =>
                        append_field_info(<[ $(member.GetName() : name) = $member_access ]>)
                    | _ => append_field_info(cd)
                }
            });
            match(fields) {
                | [] => <[ Nemerle.Extensions.Anonymous() ]>
                | _ =>
                    def name = GetAnonymousClassName(fields);
                    def ty = BuildAnonymousClass(typer, name, fields);
                    <[ $(ty.FullName : usesite) ( ..$(fields.Map(f => f.Value) ) ) ]>
            }
        }
    }

}
