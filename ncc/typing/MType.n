/*
 * Copyright (c) 2004 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler.SolverMacros;

namespace Nemerle.Compiler 
{
  /** Represent top-level type constructor for a given type. */
  public variant MType
  {
    | Class {
        tycon : TypeInfo;
        args : list <TyVar>;
      }
    | TyVar {
        tyvar : StaticTyVar;
      }
    | Fun {
        from : TyVar;
        to : TyVar;
      }
    | Tuple {
        args : list <TyVar>;
      }
    | Array {
        t : TyVar;
        rank : int;
      }
    | Void

      /* Used when given value is required to have all the listed types.

         Invariant: the types listed cannot be in the subtyping relation
         pairwise.
         
         This type is not expressible in the .NET type system directly,
         it can be however expressed with type variable bounds in some
         cases. */
    | Intersection {
        types : list <MType>;
      }


    /** Check for type equality, taking intersection types
        into account. */
    [Nemerle.OverrideObjectEquals]
    public Equals (t : MType) : bool
    {
    }


    /** Enforce [this] to be subtype of [t]. */
    public Require (s : Solver, t : MType) : void
    {
      match ((this, t)) {
        | (MType.Class (tc1, args1), MType.Class (tc2, args2)) =>
          match (tc1.SuperType (tc2)) {
            | Some (args) =>
              def subst = tc1.GetSubst (args1);
              List.Iter2 (args, args2 
                           fun (t : MType, tv : TyVar) { 
                             tv.Unify (subst.Apply (t)) 
                           });
            | None =>
              ReportError (solver, $ "$tc1 is not a subtype of $tc2 "
                                     "[simple require]")
          }
        // FIXME handle the rest
        | _ =>
          ReportError (solver, $ "$(this) is not a subtype of $t "
                                 "[simple require]")
      }
    }

    
    /** Enforce [this] to be equal [t]. */
    [Nemerle.NotImplemented]
    public Unify (s : Solver, t : MType) : void
    {
    }

    
    public IsSeparated : bool
    {
      get {
        match (t) {
          | Class => false
          
          | TyVar
          | Fun
          | Tuple
          | Array
          | Void => true
          
          | Intersection (lst) =>
            mutable is = false;
            foreach (x in lst)
              if (x.IsSeparated)
                is = true;
            is
        }
      }
    }
  }
}
