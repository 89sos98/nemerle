variant Tree<'a> {
  | Node { left : Tree['a]; mid : 'a; right : Tree['a]; }
  | Leaf

  public override ToString () : string
  {
    match (this) {
      | Node (l, m, r) =>
        "(" + l.ToString () + " " + m.ToString () + " " + r.ToString () + ")"
      | Leaf => "."
    }
  }
}

class A {
  public f : int;
  static mutable cnt : int;
  public this () { ++cnt; f = cnt; }
}

variant V : A {
  | X
  | Y
}

module M {
  Main () : void
  {
    def tr = Tree.Node (Tree.Node (Tree.Leaf (), 1, Tree.Leaf ()), 2, Tree.Leaf ());
    System.Console.WriteLine (tr.ToString ());
    def x = V.X();
    def y = V.X();
    System.Console.WriteLine (x.f.ToString () + " " + y.f.ToString ());
  }
}

/*
BEGIN-OUTPUT
((. 1 .) 2 .)
1 2
END-OUTPUT
*/
