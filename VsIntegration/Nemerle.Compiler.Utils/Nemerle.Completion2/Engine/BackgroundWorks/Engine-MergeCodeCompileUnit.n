using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
	public partial class Engine
	{
    public BeginMergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : MergeCodeCompileUnitAsyncRequest
    {
      def request = MergeCodeCompileUnitAsyncRequest(this, codeCompileUnit, MergeCodeCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    public MergeCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : array[Location * string]
    {
      def request = BeginMergeCodeCompileUnit(codeCompileUnit);
      _ = request.AsyncWaitHandle.WaitOne();
      
      when (request.Stop)
        assert(false);
        
      request.MergeInfo
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions. 
    private MergeCodeCompileUnit(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
      
      surroundwith (currentAsyncRequest)
      try
      {

        when (request.Stop)
          return;
        
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> MergeCodeCompileUnitAsyncRequest;
            
            req.MergeInfo = MakeMargeInfoCodeCompileUnit(req.CodeCompileUnit);

            req.MarkAsCompleted();
          }
        }

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The parse CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
      finally
      {
        //AsyncWorker.AddResponse(() => _callback.SetStatusText("Update compile unit is complete."));
        request.MarkAsCompleted();
      }
    }
    
    private MakeMargeInfoCodeCompileUnit(codeCompileUnit : CodeCompileUnit) : array[Location * string]
    {
      def result = List();
      //def codeDomGenerator = FormCodeDomGenerator();
      
      assert(codeCompileUnit.Namespaces.Count >= 1);
      def ns = codeCompileUnit.Namespaces[0];
      assert(ns.Types.Count >= 1);
      def ty = ns.Types[0];
      def cls = ty.UserData["Member"] :> ClassMember;
      //assert(cls != null);
      
      def methods = ty.Members.OfType.[CodeMemberMethod]().ToArray();
      
      def found = methods.Find(m => m.Name == "InitializeComponent" 
                                 && m.ReturnType.BaseType == "System.Void" && m.ReturnType.TypeArguments.Count == 0
                                 && m.Parameters.Count == 0);
      match (found)
      {
        | Some(method) =>
          def sourseInitializeComponent = method.UserData["Member"] :> ClassMember;
          def loc = sourseInitializeComponent.BodyInnerLocation;
          def text = FormCodeDomGenerator.ToString(method.Statements);
          result.Add((loc, text));
          
        | _ => assert(false);
      }
      
      result.ToArray()
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
