// REFERENCE: macrolib.dll

using Nemerle.IO;

[Serializable]
class Foo {
  x : int;
}

module M {
  Main () : void {
    mutable i = 0;
    forpermutation (i in 3 to 3) {
      printf ("%d\n", i);
    }

    def pow7 = generate_power (7);
    printf ("%lf\n", pow7 (2.0));

    A.gg (printf ("a\n"));

    ala ();
    def _ = haha ();

    Foo.Bla.Bla ();

    def x = Foo ();
    (x : ISerializable).Serialize ();
    printf ("%d\n", x.foo);
 
    IflikeSyntax.Run ();   
    ThrowlikeSyntax.Run ();
    ArraylikeSyntax.Run ();
  }
}

module IflikeSyntax {
  public Run () : void {
    mif (true) {
      printf ("single then\n");
    }
    mif (4 == 4) {
      printf ("double then\n")
    }
    else
      printf ("grr\n");      
  }
}

module ThrowlikeSyntax {
  public Run () : void {
    try {
      try {
        thro System.Exception ();
      }
      catch {
        | _ : System.Exception =>
          printf ("first catch\n");
          thro;
      } 
    }
    catch {
      | _ : System.Exception =>
        printf ("second catch\n");
    }
  }
}

module ArraylikeSyntax {
  public Run () : void {
    def x = arrr [1,2];
    foreach (el in x) printf ("%d ", el);
    printf ("\n");
    def x = arrr .[2] [[1,2], [2,3]];
    foreach (el in x) printf ("%d ", el);
    printf ("\n");
    def x = arrr (2);
    foreach (el in x) printf ("%d ", el);
    printf ("\n");
  }
}

/*
BEGIN-OUTPUT
3
128
a
proba
creating haha
from Bla.Bla
<x>0</x>
5
single then
double then
first catch
second catch
1 2 
1 2 2 3 
0 0 
END-OUTPUT
*/
